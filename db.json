{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/buddy_system.gif","path":"images/buddy_system.gif","modified":0,"renderable":0},{"_id":"source/images/system_memory.jpg","path":"images/system_memory.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"source/images/objpools.png","path":"images/objpools.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547195719498},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547195719499},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547195719498},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1547195719502},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1547195719502},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1547195719503},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1547195719503},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547195719504},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1547195719505},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1547195719505},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1547195719506},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1547195719506},{"_id":"themes/next/_config.yml","hash":"b4dc7557924b18461cbf5ab162a3074ada19a3f4","modified":1595818458160},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1547195719507},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1547195719508},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1547195719563},{"_id":"source/_posts/2017-01-01-pain.md","hash":"b2fbf303809e89f100fe407435ee5af666ce8b05","modified":1547733831591},{"_id":"source/_posts/2017-08-06-tiger-tea.md","hash":"da83671fee1db2e61c8a0de1bbf57d6fe63c44e3","modified":1547733840782},{"_id":"source/_posts/2017-07-30-far-tommorrow.md","hash":"3596affd6f4b65f9241d76a3c468726fe1869247","modified":1547733837471},{"_id":"source/_posts/2017-09-06-dream-woods.md","hash":"76670a810113a09e9d23cfe6cbf9d4f0fa75587e","modified":1547733844446},{"_id":"source/_posts/2017-09-19-world-line-collect.md","hash":"b5f8a3509ae86cceaeaf416a9633d9e2ddca7f44","modified":1547733847901},{"_id":"source/_posts/2017-10-01-lullabye.md","hash":"d7fac6b2bff3dd9c01f69af527e59e612045376d","modified":1551877434364},{"_id":"source/_posts/2017-10-18-revolt.md","hash":"f76fe93a12d3e2160185efa313c90bb8dd0084d2","modified":1547733856181},{"_id":"source/_posts/2017-10-26-romanticism.md","hash":"16697a72f77a4e27da6466e272a5bc727f5a8dd5","modified":1547733859253},{"_id":"source/_posts/2018-12-22-attribute.md","hash":"eed1a559388d0404f979c4f0a7eca93971a8a573","modified":1547733863182},{"_id":"source/_posts/2019-01-07-elite.md","hash":"340dd9ad2b2c1e1c42f77001e75957d1329bf07c","modified":1547733865997},{"_id":"source/_posts/2019-01-08-fps-synchronization.md","hash":"c49ab040db736c86c0a6e60e919b2eb87e2a7179","modified":1547733869967},{"_id":"source/_posts/2019-01-10-unordered_map.md","hash":"547fba7aed6d839bea3c1aab2dfab9969fa9826f","modified":1547733872657},{"_id":"source/_posts/2019-01-11-AT&T-INTEL-ASM.md","hash":"b77fa27fdaad4e2962d7cf3ca1de98a7257b8fd0","modified":1547733875855},{"_id":"source/_posts/2019-01-17-Odyssey.md","hash":"707a41c44e7b6e24ace70ccb50524a9c985de5a6","modified":1550560956518},{"_id":"source/_posts/2019-01-17-type-system-erase.md","hash":"a8728a3165377c2878dce9f6d9c75ad239176032","modified":1550560619703},{"_id":"source/_posts/2019-02-14-vba.md","hash":"94b9bd092658acb077e1607c28b8e6950e038873","modified":1550560621822},{"_id":"source/_posts/2019-06-08-rvo.md","hash":"82259dc5b8dd9068f22fa76ffaf3c8b68d3a6c9f","modified":1559990310899},{"_id":"source/_posts/2019-09-16-problem-domain.md","hash":"90a398eb8597b1a9efa6e486049bde45d9b37d21","modified":1575963357082},{"_id":"source/_posts/2019-10-01-sdm.md","hash":"bca815c6c869e72187e25263a79c33b484f46f9f","modified":1572857743984},{"_id":"source/_posts/2019-11-04-aslr.md","hash":"184578a303487b073a8a4c9ddb82bfa6c1e6b0a5","modified":1583821915494},{"_id":"source/_posts/2019-11-04-kernel-thread.md","hash":"c1b798403e06482931da2f3a146edc1e4bca463c","modified":1577438799507},{"_id":"source/_posts/2019-11-05-fast-check-linux.md","hash":"1cab1466bc10f906260cd15e8ce5673a4cc3adc2","modified":1583724356814},{"_id":"source/_posts/2019-11-12-elf-section-symbol.md","hash":"4e4b4b653599c546bd5963d1cf5994e08571e93e","modified":1583724356817},{"_id":"source/_posts/2019-11-28-pie-pic-linker-option.md","hash":"08560ddb82f6e41c13c87ed71f2cff3b95500e72","modified":1576637267299},{"_id":"source/_posts/2019-11-23-elf-hash.md","hash":"4b13b0ada99b3a327894eab141aec48263376731","modified":1574671758952},{"_id":"source/_posts/2019-12-06-is-a-and-has-a.md","hash":"f8720299aa0e3124a5250c7b604c741a38606462","modified":1575961743899},{"_id":"source/_posts/2019-12-11-asm-syntax.md","hash":"63719cd8cf0534e07326ebc10989afcf7747a9d2","modified":1583724356823},{"_id":"source/_posts/2019-12-17-elf-load.md","hash":"4564bca4eede46db4cbe5e50f1518f642d9cbd88","modified":1583724356829},{"_id":"source/_posts/2020-02-03-shared-memory-resume-overview.md","hash":"1ab0f83753c4c3670151341218d8533ae70f5b70","modified":1584363024324},{"_id":"source/_posts/2020-02-07-shared-memory-buddy_system.md","hash":"6fab409428616adfc1c5cfea056e400c7cddc81f","modified":1584111976996},{"_id":"source/_posts/2020-05-09-memory_alloctor.md","hash":"ef95a5e836338770f56a19e8f1dd578cd2b49e7c","modified":1592230120723},{"_id":"source/_posts/2020-06-15-shadowsock-proxy.md","hash":"d0a9cff96319a2e83e09e66868ff1b55ff39216c","modified":1592226124299},{"_id":"source/_posts/2020-06-16-lua-oop.md","hash":"06c2221520cf5cb28b5813b015d2d621f31592bc","modified":1592448776105},{"_id":"source/_posts/2020-06-18-skill-tag.md","hash":"06f2338e7fa11473b49738fcbcd2f4faa48ddd13","modified":1594797983478},{"_id":"source/_posts/2020-07-15-gcd.md","hash":"358342b8ff2e4635d3b59c57107e35781132b6f6","modified":1595389852328},{"_id":"source/_posts/2020-07-21-math_of_combat.md","hash":"8e32fa6e75a5ab8d3abdf2368bbd42dd53f5a2c6","modified":1595558467130},{"_id":"source/_posts/2020-07-24-state_sync.md","hash":"cc73dae6d33bb3d383e57efc282b8dcaf1909896","modified":1596625520478},{"_id":"source/images/buddy_system.gif","hash":"53d45229038782f9230fbfa7d204a5febea0e87b","modified":1583724356833},{"_id":"source/images/system_memory.jpg","hash":"fd3d1d3234f1558a0d9fc832134a29dd307a8dd4","modified":1583724356835},{"_id":"source/memo/index.md","hash":"a579b7568ce99d9c23588b1b954b2191198b09cd","modified":1547195719343},{"_id":"source/about/index.md","hash":"5204117da7cb5e5861e2e6a9d5faee1e28c8191b","modified":1547195719341},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1547195719500},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1547195719500},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1547195719501},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1547195719509},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1547195719510},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1547195719510},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1547195719511},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1547195719511},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1547195719512},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1547195719513},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1547195719513},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1547195719514},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1547195719514},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1547195719515},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1547195719515},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1547195719516},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1547195719518},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1547195719558},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1547195719559},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1547195719560},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1547195719560},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1547195719561},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1547195719562},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1547195719562},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1547195719564},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547195719564},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1547195719750},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1547195719751},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1547195719751},{"_id":"source/_posts/2019-11-29-static-linking.md","hash":"f737286f3ff89aafe89ca5d59b189efc56e9af53","modified":1583724356820},{"_id":"source/_posts/2019-12-16-elf-link.md","hash":"2b610bf214e92d6d9e828cb13a21a4aa16f56692","modified":1583724356826},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719652},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547195719517},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547195719518},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1547195719520},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1547195719520},{"_id":"themes/next/layout/_macro/post.swig","hash":"377d82f753178db7f2570ad347c29409a19de985","modified":1547195719521},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1547195719521},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5dcdacbf3e4350d5e5cf3e5b25a49fc4b08c58d4","modified":1547195719522},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1547195719522},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1547195719523},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1547195719524},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1547195719525},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1547195719526},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"eb71e7ef8304e97783e3733cad966a6d1398e5d0","modified":1595817536937},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1547195719527},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1547195719528},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1547195719533},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1547195719534},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1547195719538},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1547195719551},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1547195719551},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1547195719552},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1547195719552},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1547195719553},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1547195719553},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1547195719566},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1547195719569},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1547195719570},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1547195719572},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1547195719573},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1547195719574},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1547195719575},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1547195719575},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1547195719576},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1547195719651},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547195719653},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547195719654},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547195719665},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547195719666},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547195719667},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547195719667},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547195719668},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547195719669},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547195719668},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547195719670},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547195719670},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547195719670},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547195719671},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547195719672},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719536},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719537},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719632},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719632},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719634},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719649},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547195719651},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547195719525},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1547195719526},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547195719529},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1547195719529},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547195719530},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547195719531},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1547195719531},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1547195719532},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1547195719532},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1547195719535},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547195719536},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1547195719538},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1547195719540},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1547195719541},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1547195719541},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1547195719542},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1547195719542},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1547195719543},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1547195719544},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1547195719544},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1547195719545},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1547195719545},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1547195719546},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1547195719547},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1547195719547},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1547195719548},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1547195719548},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1547195719549},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1547195719549},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1547195719550},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547195719555},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1547195719556},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547195719557},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1547195719558},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1547195719631},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547195719631},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1547195719633},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1547195719633},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1547195719649},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1547195719649},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1547195719650},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1547195719651},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1547195719673},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1547195719673},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1547195719674},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1547195719674},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1547195719675},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547195719676},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1547195719677},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1547195719676},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1547195719678},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1547195719679},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1547195719679},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547195719688},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547195719692},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1547195719694},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1547195719705},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1547195719706},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1547195719706},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1547195719707},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547195719710},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547195719710},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547195719711},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547195719711},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547195719712},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1547195719724},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547195719730},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547195719731},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547195719732},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547195719733},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547195719733},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547195719734},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547195719734},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547195719735},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547195719735},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547195719736},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547195719736},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547195719737},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547195719737},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1547195719738},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1547195719726},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1547195719727},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1547195719728},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1547195719729},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1547195719728},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1547195719730},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1547195719739},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1547195719740},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1547195719740},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1547195719746},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1547195719746},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547195719748},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547195719749},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547195719749},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547195719725},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1547195719554},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547195719555},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1547195719580},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547195719581},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1547195719582},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547195719584},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547195719584},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1547195719598},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1547195719615},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1547195719627},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1547195719628},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1547195719629},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547195719629},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547195719630},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1547195719630},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1547195719626},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1547195719635},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1547195719636},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1547195719636},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547195719637},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1547195719637},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1547195719638},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547195719638},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1547195719639},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547195719641},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1547195719641},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1547195719642},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1547195719642},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1547195719643},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1547195719645},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1547195719645},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1547195719646},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1547195719647},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1547195719647},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1547195719648},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1547195719678},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547195719695},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547195719696},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547195719696},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547195719697},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547195719698},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547195719698},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1547195719703},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1547195719704},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1547195719708},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547195719709},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547195719713},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547195719713},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547195719714},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547195719744},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547195719745},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1547195719684},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1547195719685},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1547195719686},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1547195719687},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1547195719704},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547195719723},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547195719747},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1547195719586},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1547195719588},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547195719588},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1547195719589},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1547195719590},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547195719591},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547195719592},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1547195719593},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547195719594},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1547195719595},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547195719595},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547195719597},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1547195719596},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1547195719598},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1547195719609},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1547195719610},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1547195719611},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547195719611},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1547195719612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1547195719612},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1547195719613},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1547195719613},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1547195719614},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1547195719615},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1547195719599},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1547195719600},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1547195719601},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1547195719601},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1547195719602},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547195719602},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1547195719603},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1547195719603},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1547195719604},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547195719605},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547195719605},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1547195719606},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547195719606},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1547195719607},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1547195719608},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1547195719608},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547195719616},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1547195719617},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1547195719617},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547195719618},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547195719619},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1547195719619},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1547195719620},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1547195719620},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1547195719621},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1547195719622},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1547195719622},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1547195719623},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1547195719624},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1547195719624},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1547195719625},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547195719625},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1547195719626},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547195719639},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547195719640},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547195719644},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547195719681},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547195719682},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547195719682},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547195719684},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547195719699},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1547195719700},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1547195719701},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1547195719700},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1547195719702},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1547195719702},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547195719716},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547195719718},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547195719721},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547195719722},{"_id":"source/images/objpools.png","hash":"bae8e4039d54db2e62c61378ea03ece43f778f44","modified":1583744449786},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1547195719691},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1547195719743},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1547195719720},{"_id":"themes/next/source/images/avatar.png","hash":"0143509d8b5f1dd4c1eac48c5a112ba2f09efd3b","modified":1547195719665},{"_id":"public/about/index.html","hash":"0f3a2896e8b79cc765928ab1ec3e513932faa1d6","modified":1718769492813},{"_id":"public/memo/index.html","hash":"66e2521a2d2475f5919bbfe663fd0db17d0b390e","modified":1718769492813},{"_id":"public/2019/10/01/2019-10-01-sdm/index.html","hash":"c8761db2e4c1db6cfe04f056ef4e9bbbaa008557","modified":1718769492813},{"_id":"public/2017/10/26/2017-10-26-romanticism/index.html","hash":"c1443f25d36471be967f85aaa9c6fb0bb2daff11","modified":1718769492813},{"_id":"public/2017/10/18/2017-10-18-revolt/index.html","hash":"4a2a56dc8cab6f1d5bc4e3c5daf3de0ed6560b09","modified":1718769492813},{"_id":"public/2017/10/01/2017-10-01-lullabye/index.html","hash":"7f80d3742ec7bfc15791a1683ddbf49455ae356b","modified":1718769492813},{"_id":"public/2017/09/19/2017-09-19-world-line-collect/index.html","hash":"75152b2a965802929f932f1c2234e03b99972454","modified":1718769492813},{"_id":"public/2017/09/06/2017-09-06-dream-woods/index.html","hash":"588de2b8e2fca93ccbe32e044281c83263743326","modified":1718769492813},{"_id":"public/2017/08/06/2017-08-06-tiger-tea/index.html","hash":"a6008b263bd015e5bf640d5f92d5946dd5ed6206","modified":1718769492813},{"_id":"public/2017/07/30/2017-07-30-far-tommorrow/index.html","hash":"6fa0b106eadb409d186f43052bb5a4681460b9fc","modified":1718769492813},{"_id":"public/2017/01/01/2017-01-01-pain/index.html","hash":"b86436393ed93e64666989b55405c3a4ebc6ad31","modified":1718769492813},{"_id":"public/categories/develop/index.html","hash":"14f8a6ddf289bfd46fdb96b8a42460b5c3aae5fd","modified":1718769492813},{"_id":"public/categories/develop/page/2/index.html","hash":"8b43b979f71e91c64f86ffb55be9cc1db1f5ca8f","modified":1718769492813},{"_id":"public/categories/develop/page/3/index.html","hash":"75b51a0dee826a423027c3220a0a8c88a05d60a5","modified":1718769492813},{"_id":"public/archives/page/4/index.html","hash":"8f75e0ae77b3ee42de0984f7847f0e40056537e8","modified":1718769492813},{"_id":"public/archives/2017/index.html","hash":"d6cfccb505993a315b7d9ebe6d675d5202365404","modified":1718769492813},{"_id":"public/archives/2017/01/index.html","hash":"67a39379da034823e5c2c42ec292d27184d8cdbc","modified":1718769492813},{"_id":"public/archives/2017/07/index.html","hash":"623821109a381e46e9ebc0dd0e465b97becf6b8f","modified":1718769492813},{"_id":"public/archives/2017/08/index.html","hash":"7dfb8ed82269f56839157fa8506349177118731e","modified":1718769492813},{"_id":"public/archives/2017/09/index.html","hash":"eff3d68ca16b03f9871c31cfcbc397d418a655f9","modified":1718769492813},{"_id":"public/archives/2017/10/index.html","hash":"8e42763c1b20a4daafd73c034ecdf4fe8cfb549b","modified":1718769492813},{"_id":"public/archives/2018/index.html","hash":"b5631b917634cdcb4d7e31c9da7065603c3cde90","modified":1718769492813},{"_id":"public/archives/2018/12/index.html","hash":"56f300bafb12b86cac12f1943d1bc6894537d382","modified":1718769492813},{"_id":"public/archives/2019/page/3/index.html","hash":"f8739fcb89f94f970b90272ebcb8b2e0c090bc84","modified":1718769492813},{"_id":"public/archives/2019/01/index.html","hash":"ab437d26a59af997f5967b1db4920e299885fc83","modified":1718769492813},{"_id":"public/archives/2019/02/index.html","hash":"88e7d555c482ff16ccbf721b10d06de00e024d51","modified":1718769492813},{"_id":"public/archives/2019/06/index.html","hash":"71ccc10b226548d9620d06836ef769c7f81b91e8","modified":1718769492813},{"_id":"public/archives/2019/09/index.html","hash":"7e11716e86985aa2d4039dddd2bd7172e899f51a","modified":1718769492813},{"_id":"public/archives/2019/10/index.html","hash":"64d95a11f318e7c9d3f9cb8de40031275b9677f8","modified":1718769492813},{"_id":"public/archives/2019/11/index.html","hash":"ad5deb6242c7ed1999f4a472a847c3a9fe5b6c96","modified":1718769492813},{"_id":"public/archives/2019/12/index.html","hash":"9bd585033600be8367150ea49902c48d58553dba","modified":1718769492813},{"_id":"public/archives/2020/index.html","hash":"3652fe4de9ab15202ff43a5a91a91d789b4593de","modified":1718769492813},{"_id":"public/archives/2020/02/index.html","hash":"0fe13f4bd4ad7c61597bdaef0d03c980580209b5","modified":1718769492813},{"_id":"public/archives/2020/05/index.html","hash":"5ee25c2e4b2dadcd963333767b6785c4fbea8c51","modified":1718769492813},{"_id":"public/archives/2020/06/index.html","hash":"d8dde4549bb3bd04d68c9d2691c6e47587d547c1","modified":1718769492813},{"_id":"public/archives/2020/07/index.html","hash":"038d854dd3867fc2fa4dbebb37f908515071b1e6","modified":1718769492813},{"_id":"public/2020/07/24/2020-07-24-state_sync/index.html","hash":"a9fa2764b0471905fd57f584c52e5843ba459932","modified":1718769492813},{"_id":"public/2020/07/21/2020-07-21-math_of_combat/index.html","hash":"fa16e20fd0bf88569bb69862affe1b81afa3d6e6","modified":1718769492813},{"_id":"public/2020/06/18/2020-06-18-skill-tag/index.html","hash":"6582e34c1c6d7cc4ecfcdef511e073e2ec040357","modified":1718769492813},{"_id":"public/2020/06/18/2020-07-15-gcd/index.html","hash":"ed7895b3f098578d57f1bfd94610981d46ce18e8","modified":1718769492813},{"_id":"public/2020/06/16/2020-06-16-lua-oop/index.html","hash":"729eecedee726a1c5a6beff7ea4a24af9b96be98","modified":1718769492813},{"_id":"public/2020/05/09/2020-05-09-memory_alloctor/index.html","hash":"687e126530766f727fcf88854a3fce073bbd2847","modified":1718769492813},{"_id":"public/2020/05/09/2020-06-15-shadowsock-proxy/index.html","hash":"75bc55fee7d417aa76153a775d1aeb499d8693b2","modified":1718769492813},{"_id":"public/2020/02/07/2020-02-03-shared-memory-resume-overview/index.html","hash":"0f6bccfb5be15102ad65bfb3ff90c4be3826787f","modified":1718769492813},{"_id":"public/2020/02/07/2020-02-07-shared-memory-buddy_system/index.html","hash":"79f59d2b9e097694838d4ec50313558320dca72f","modified":1718769492813},{"_id":"public/2019/12/17/2019-12-17-elf-load/index.html","hash":"4031a354ba1cfcafa9ea04ce65612d352e6fd3de","modified":1718769492813},{"_id":"public/2019/12/16/2019-12-16-elf-link/index.html","hash":"86751f89b93236d40ac4ddb0803821405d61cb42","modified":1718769492813},{"_id":"public/2019/12/11/2019-12-11-asm-syntax/index.html","hash":"9710ff253e1576cd0f0a8b2e6181dc144d398279","modified":1718769492813},{"_id":"public/2019/11/29/2019-12-06-is-a-and-has-a/index.html","hash":"24c47acafbc2ff88d633064986b8313897f61f2f","modified":1718769492813},{"_id":"public/2019/11/29/2019-11-29-static-linking/index.html","hash":"7752c1038a72344780e1ad921f592054ad13df70","modified":1718769492813},{"_id":"public/2019/11/28/2019-11-28-pie-pic-linker-option/index.html","hash":"b7462dfe1f8623f4d19d9495623f55a17ec47f95","modified":1718769492813},{"_id":"public/2019/11/23/2019-11-23-elf-hash/index.html","hash":"6a5f3b49653899ea04f29cc774ad7a9e50600608","modified":1718769492813},{"_id":"public/2019/11/09/2019-11-12-elf-section-symbol/index.html","hash":"db508dafe8274df0c05932b771434279ad15ba1b","modified":1718769492813},{"_id":"public/2019/11/05/2019-11-05-fast-check-linux/index.html","hash":"cac5306a661997ea2feb620920a83bcfe321edd5","modified":1718769492813},{"_id":"public/2019/11/04/2019-11-04-aslr/index.html","hash":"af4ed69cc2ff5ec4e7e8d264337dcff1c16155c9","modified":1718769492813},{"_id":"public/2019/11/04/2019-11-04-kernel-thread/index.html","hash":"4fc70d4e5ffbe2e86c3480f8a50239eba3f27333","modified":1718769492813},{"_id":"public/2019/09/16/2019-09-16-problem-domain/index.html","hash":"ccc551bed2c6e0e16dd9f382552a66b007bbaabc","modified":1718769492813},{"_id":"public/2019/06/08/2019-06-08-rvo/index.html","hash":"488df55f69d61dd4904d34811c881e9564f16b09","modified":1718769492813},{"_id":"public/2019/02/14/2019-02-14-vba/index.html","hash":"b4bd1ddb01198127e1455447fad8f46b3237deae","modified":1718769492813},{"_id":"public/2019/01/29/2019-01-17-Odyssey/index.html","hash":"55e3734c19fb714f7d12db141a0c92f2734db36f","modified":1718769492813},{"_id":"public/2019/01/17/2019-01-17-type-system-erase/index.html","hash":"705fdbee76741a70698459b1ce03c3d3d4a49e9a","modified":1718769492813},{"_id":"public/2019/01/11/2019-01-11-AT&T-INTEL-ASM/index.html","hash":"ef5e8bb9c309a7b426e1e5a79ac2e210b683b1bc","modified":1718769492813},{"_id":"public/2019/01/10/2019-01-10-unordered_map/index.html","hash":"4bdf1d145a3fd0231c602f56536dd5ccc05bbee3","modified":1718769492813},{"_id":"public/2019/01/07/2019-01-08-fps-synchronization/index.html","hash":"d0185a9a773ad25f62568f7cf3a060fc42d0dc72","modified":1718769492813},{"_id":"public/2019/01/07/2019-01-07-elite/index.html","hash":"2800f6ad672bdc21f212f20f3abdd90b6e2d7b3f","modified":1718769492813},{"_id":"public/2018/12/22/2018-12-22-attribute/index.html","hash":"2aab3056a353ffd73c8a49fdb46a3bda4a6de9f9","modified":1718769492813},{"_id":"public/archives/index.html","hash":"b8cfdbd1de8bfe3c8b031c573be11c5b559287fd","modified":1718769492813},{"_id":"public/archives/page/2/index.html","hash":"85b0cb447cd1e468aa9ddbb99f2fbb67ca91751a","modified":1718769492813},{"_id":"public/archives/page/3/index.html","hash":"9145e9e4d5921e770938b073397f15b09c977e90","modified":1718769492813},{"_id":"public/archives/2019/index.html","hash":"b26a8a667b196cbf913320e4dd1dd29bbb26cd05","modified":1718769492813},{"_id":"public/archives/2019/page/2/index.html","hash":"dc03b0c24ba7a1364444972b74269c0b65ac88a7","modified":1718769492813},{"_id":"public/index.html","hash":"f1bfc51f0ac3dcf58689fc4f7aebe48119c19363","modified":1718769492813},{"_id":"public/page/2/index.html","hash":"e21ad70552262c3f9a2de8106e839d0a6e84ef1d","modified":1718769492813},{"_id":"public/page/3/index.html","hash":"75aa48fcdb567751b122d022533d123eedd31138","modified":1718769492813},{"_id":"public/page/4/index.html","hash":"e8fc9d31f5a30d3b0d18e86c9c7c0c401cfbcccc","modified":1718769492813},{"_id":"public/images/buddy_system.gif","hash":"53d45229038782f9230fbfa7d204a5febea0e87b","modified":1595818202410},{"_id":"public/images/system_memory.jpg","hash":"fd3d1d3234f1558a0d9fc832134a29dd307a8dd4","modified":1595818202410},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1595818202410},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1595818202410},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1595818202410},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1595818202410},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1595818202410},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1595818202410},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1595818202410},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1595818202410},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1595818202410},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1595818202410},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1595818202410},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1595818202410},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1595818202410},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1595818202410},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1595818202410},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1595818202410},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1595818202410},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1595818202410},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1595818202410},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1595818202410},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1595818202410},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1595818202410},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1595818202410},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1595818202410},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1595818202410},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1595818202410},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1595818202410},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1595818202410},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1595818202410},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1595818202410},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1595818202410},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1595818202410},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1595818202410},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1595818202410},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1595818202410},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1595818202410},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1595818202410},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1595818202410},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1595818202410},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1595818202410},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1595818202410},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1595818202410},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1595818202410},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1595818202410},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1595818202410},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1595818202410},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1595818202410},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1595818202410},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1595818202410},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1595818202410},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1595818202410},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1595818202410},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1595818202410},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1595818202410},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1595818202410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1595818202410},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1595818202410},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1595818202410},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1595818202410},{"_id":"public/css/main.css","hash":"d3a00f4834d0f55004f4e9d9c3c96092656cdfe6","modified":1595818202410},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1595818202410},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1595818202410},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1595818202410},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1595818202410},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1595818202410},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1595818202410},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1595818202410},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1595818202410},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1595818202410},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1595818202410},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1595818202410},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1595818202410},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1595818202410},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1595818202410},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1595818202410},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1595818202410},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1595818202410},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1595818202410},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1595818202410},{"_id":"public/images/objpools.png","hash":"bae8e4039d54db2e62c61378ea03ece43f778f44","modified":1595818202410},{"_id":"public/images/avatar.png","hash":"0143509d8b5f1dd4c1eac48c5a112ba2f09efd3b","modified":1595818202410},{"_id":"source/_posts/2020-08-03-shm-resume.md","hash":"d43852f421667da08ff35512bc4e1d72440e7ffd","modified":1597203982390},{"_id":"public/2020/08/03/2020-08-03-shm-resume/index.html","hash":"3cd488bbec2aa460489310a145ae1fef56ad70a2","modified":1718769492813},{"_id":"public/archives/2020/08/index.html","hash":"5f4af3be63e81b465663a8f3fda65e1fc2a79cd7","modified":1718769492813},{"_id":"source/_posts/2020-08-11-shm-allocator.md","hash":"b84ecf39d0617816f20d31254163faede50a6640","modified":1597923444699},{"_id":"public/archives/page/5/index.html","hash":"1e27a1ac648e003753ae69830df976af14b1b178","modified":1718769492813},{"_id":"public/archives/2020/page/2/index.html","hash":"583218dfd8a3752a624aeb2711c83041ff9362ff","modified":1718769492813},{"_id":"public/page/5/index.html","hash":"70697023655086a974655a81fe773ddc406a95f3","modified":1718769492813},{"_id":"public/2020/08/11/2020-08-11-shm-allocator/index.html","hash":"2d174b705d2f565696ca02f158459e110d581ae3","modified":1718769492813},{"_id":"source/_posts/2020-09-30-git-lfs.md","hash":"f1205a7fa331f296628eb93feb61bb22038ec64f","modified":1602250926505},{"_id":"public/categories/develop/page/4/index.html","hash":"3afc330be81dbd1757011dbffdd3f16e78d7649f","modified":1718769492813},{"_id":"public/2020/08/11/2020-09-30-git-lfs/index.html","hash":"06515951fc598836f9f64941936544e10c2b6a35","modified":1601459031320},{"_id":"public/archives/2020/09/index.html","hash":"6384b0adf31128d172bc70ca18b5b847a5ae3dd8","modified":1718769492813},{"_id":"public/2020/09/30/2020-09-30-git-lfs/index.html","hash":"2e2ed31ed5328fd874289f711f85c23f2823fbdb","modified":1718769492813},{"_id":"source/_posts/2020-10-03-raspberrypi.md","hash":"ccb9c2fe978f6d6f4ada089203e255896b426069","modified":1602251724295},{"_id":"public/2020/10/03/2020-10-03-raspberrypi/index.html","hash":"e5d895ff8b600e548e0255b5bff6d077ee57a50b","modified":1718769492813},{"_id":"public/archives/2020/10/index.html","hash":"f524e904357b5affd3df2d634178a5aa71bd429d","modified":1718769492813},{"_id":"source/_posts/2020-12-17-twice-as-bright-half-as-long.md","hash":"51ee5623b704e56237c6605b270bca49d5ffae62","modified":1608541819084},{"_id":"source/_posts/2020-10-22-glm.md","hash":"4a49b308c367f791e3730178a81e21ebfeba2b8d","modified":1603420305576},{"_id":"public/2020/12/17/2020-12-17-twice-as-bright-half-as-long/index.html","hash":"b0e02cce589abe69c39f968cfefa10f987de55fa","modified":1718769492813},{"_id":"public/archives/2020/12/index.html","hash":"e1c38f7f0a579cc11db1accdd8a48992460880e5","modified":1718769492813},{"_id":"public/2020/10/22/2020-10-22-glm/index.html","hash":"fa4787f1b389b5579b8566bb619e0f9a1765c70e","modified":1718769492813},{"_id":"source/_posts/2021-04-02-gcc-inline-assembly.md","hash":"79cb57fb8107ed0643a1b946462c5e0161ba0449","modified":1617375461781},{"_id":"public/2021/04/02/2021-04-02-gcc-inline-assembly/index.html","hash":"089f4f28cf8452d9dfe6097a4ee3f5afea3bd4d0","modified":1718769492813},{"_id":"public/archives/2021/index.html","hash":"7847916d61207a6f04f91cd8bf58881e1f618874","modified":1718769492813},{"_id":"public/archives/2021/04/index.html","hash":"2823680325de1ae6e28e29c43c8eb71b38a404c1","modified":1718769492813},{"_id":"source/_posts/2021-05-10-localization.md","hash":"2dead955775f07518f91f52122ab121d5218cc46","modified":1623133930997},{"_id":"source/_posts/2021-04-13-scl-devtoolset.md","hash":"e41aaeb10e5ae21b2dcb8b1a4ba83e66a92255d0","modified":1623134007484},{"_id":"source/_posts/2021-04-02-perf-clock.md","hash":"df6861b1e478b77b4528ed909bff3c9711fabd40","modified":1623325033626},{"_id":"source/_posts/2021-06-04-latency-mem-test.md","hash":"f345e502e7db3a0c8228992c4fd92c339a7388e4","modified":1623133920935},{"_id":"public/archives/2021/02/index.html","hash":"719d5393c18ff01360a70a099e17bac2b046bb09","modified":1718769492813},{"_id":"public/archives/2021/06/index.html","hash":"42d7419810f66ca72641f827785c0d2fc15caa34","modified":1718769492813},{"_id":"public/archives/2021/05/index.html","hash":"dbb643bbb74fddc7dcb4da814a3332b88a3216b6","modified":1718769492813},{"_id":"public/2021/05/10/2021-05-10-localization/index.html","hash":"d8fbac239b2fe81e87e2ec1ce9669d388296e850","modified":1718769492813},{"_id":"public/2021/06/04/2021-06-04-latency-mem-test/index.html","hash":"0630e96d6593171ce4998879eeca21ddfd8c58c0","modified":1718769492813},{"_id":"public/2021/02/19/2021-04-13-scl-devtoolset/index.html","hash":"d783cb73074efbf019b0ca446dc70e4563f5e37d","modified":1718769492813},{"_id":"public/2021/02/19/2021-04-02-perf-clock/index.html","hash":"db50f11e98c005a4c5fb180e2069850df0c1eaa9","modified":1718769492813},{"_id":"source/_posts/2021-07-02-wsl.md","hash":"05d30fa51b7f1666d98bf4374c5cc5319b68cf21","modified":1631690722744},{"_id":"public/2021/07/02/2021-07-02-wsl/index.html","hash":"83d012a978c514c39824b4daec9e06cbc3491ee5","modified":1718769492813},{"_id":"public/archives/page/6/index.html","hash":"3cdfb4746001551d040d3b7b20b20cc7135ffe9b","modified":1718769492813},{"_id":"public/archives/2021/07/index.html","hash":"22bf79f24ced5560beee5b54af2ee16aecb37529","modified":1718769492813},{"_id":"public/page/6/index.html","hash":"ab6cd4d52bd96c497ac74c32ed7fc61c3c0deaf7","modified":1718769492813},{"_id":"source/_posts/2021-09-15-dev_env.md","hash":"838614babdb790c410a393b663f6b6a6d9a9301a","modified":1631691022375},{"_id":"source/_posts/2021-11-15-OI-optimize.md","hash":"ba2e12a2d97ab3d85c541e1b589090e07d7347fd","modified":1636966391310},{"_id":"public/archives/2021/11/index.html","hash":"ea88e2be05fcfd19aebdd00b5234aad9a0b9760c","modified":1718769492813},{"_id":"public/categories/develop/page/5/index.html","hash":"2f4130d2ac4ba5fd7f62ad39abeebf014a0f1c6d","modified":1718769492813},{"_id":"public/2021/11/15/2021-11-15-OI-optimize/index.html","hash":"696497b0856752da008cb8c5fb7da2d40af99bbd","modified":1718769492813},{"_id":"public/2021/07/02/2021-09-15-dev_env/index.html","hash":"ab1222aa921d7e2e6dcc10505ad7c1aa6a3a1574","modified":1718769492813},{"_id":"source/_posts/2022-03-07-detour_crowd-path_corridor.md","hash":"5cddd141ebda4a90d6c45027e5eca5d4749e0769","modified":1646798458560},{"_id":"source/_posts/2022_08_04_kcp_knowledge.md","hash":"63f81399d4ea7c7a0a09bdef49b7d0dfc899aff8","modified":1658838720413},{"_id":"source/_posts/2022-02-09-mmap-overcommit-oom.md","hash":"7a5eedcb670f84536dcdf35a98e19a74b46e8a90","modified":1644578536615},{"_id":"source/_posts/2022-09-14-digital-twin.md","hash":"5d3f163e3f57c4b82535ea4f96c78561838c6ab5","modified":1705568763486},{"_id":"source/_posts/2024-01-18-ssh_rsa_autologin.md","hash":"206b9f9ac019ca35dad23f6d3c5649397bb99e3c","modified":1705568685558},{"_id":"source/_posts/2024-04-01-sleep-checklist.md","hash":"76b91a4a4667855bac3ad0dd317a9e93775f8457","modified":1711960312978},{"_id":"public/2022/09/14/2022-09-14-digital-twin/index.html","hash":"d3afd5c000c3aafe9d26c0c9823989abf8cf132e","modified":1718769492813},{"_id":"public/archives/2022/index.html","hash":"c731bd03aab2e672ecc1edfa1d6b416683584b01","modified":1718769492813},{"_id":"public/archives/2022/09/index.html","hash":"2134886b6d517fc3174dfb8044dbd7cc6a561b5c","modified":1718769492813},{"_id":"public/archives/2024/01/index.html","hash":"a9beb6e4329c24c94bb2029ad04eebc325272903","modified":1718769492813},{"_id":"public/archives/2022/03/index.html","hash":"2d0616789927e61fcf4a6dcdf678899a5dc573c6","modified":1718769492813},{"_id":"public/archives/2024/index.html","hash":"c4321693d0f93351f7647a5da24cc9ac43d1f3e2","modified":1718769492813},{"_id":"public/archives/2024/04/index.html","hash":"ca99afc37bc2c2f9dfd978afb3d4ed4c9064ea92","modified":1718769492813},{"_id":"public/archives/2024/06/index.html","hash":"ea205859d91221d0c89c2697c1173288cff7f03a","modified":1718769492813},{"_id":"public/2024/06/19/2022_08_04_kcp_knowledge/index.html","hash":"b66e66e5452bcdd923bbf454f709ba7e8075480e","modified":1718769492813},{"_id":"public/2024/01/18/2024-01-18-ssh_rsa_autologin/index.html","hash":"4c36eeab2739ca59c8ff27d1c7159190a22ae09f","modified":1718769492813},{"_id":"public/2024/04/01/2024-04-01-sleep-checklist/index.html","hash":"ad8dfd340658bc676d8ab97be947d3cdf99b4c04","modified":1718769492813},{"_id":"public/2022/03/07/2022-03-07-detour_crowd-path_corridor/index.html","hash":"ffe01b143937b1f8e1d0a46c817eb8d209a62d72","modified":1718769492813},{"_id":"public/2021/11/15/2022-02-09-mmap-overcommit-oom/index.html","hash":"9617b4b10d17331b9a6e114600bf1c375d54f4db","modified":1718769492813}],"Category":[{"name":"develop","_id":"ckd3wyeii000d7w5h8krdax44"}],"Data":[],"Page":[{"layout":"default","title":"About","date":"2017-06-09T16:34:58.000Z","_content":"\n### 个人简介:  \n\n* 夏天  \n\n### 联系方式  \n\n* NONE  \n\n### 关于本站：\n\n* 如微风在耳边轻语 如夏虫在冬季沉眠   \n","source":"about/index.md","raw":"---\nlayout: default\ntitle: \"About\"\ndate: 2017-06-10 00:34:58\n---\n\n### 个人简介:  \n\n* 夏天  \n\n### 联系方式  \n\n* NONE  \n\n### 关于本站：\n\n* 如微风在耳边轻语 如夏虫在冬季沉眠   \n","updated":"2019-01-11T08:35:19.341Z","path":"about/index.html","comments":1,"_id":"ckd3wyei000017w5hals19jke","content":"<h3><span id=\"个人简介\">个人简介:</span></h3><ul>\n<li>夏天  </li>\n</ul>\n<h3><span id=\"联系方式\">联系方式</span></h3><ul>\n<li>NONE  </li>\n</ul>\n<h3><span id=\"关于本站\">关于本站：</span></h3><ul>\n<li>如微风在耳边轻语 如夏虫在冬季沉眠</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介:\"></a>个人简介:</h3><ul>\n<li>夏天  </li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>NONE  </li>\n</ul>\n<h3 id=\"关于本站：\"><a href=\"#关于本站：\" class=\"headerlink\" title=\"关于本站：\"></a>关于本站：</h3><ul>\n<li>如微风在耳边轻语 如夏虫在冬季沉眠</li>\n</ul>\n"},{"layout":"default","title":"Memo","_content":"\n#### URL收藏\n* Markdown语法：<http://wowubuntu.com/markdown>  \n* Git简明操作: <http://rogerdudler.github.io/git-guide/index.zh.html>    \n* LUA5.3DOC: <http://cloudwu.github.io/lua53doc>  \n* VS背景娘插件 <https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE>  \n\n#### Jekyll 本地调试环境搭建  \n* debian: apt-get install jekyll\n* mac: gem install jekyll\n* markdown previewer : atom==> <https://www.v2ex.com/t/249859>  \n* sublime  Ctrl+` <https://packagecontrol.io/installation#st3> install OmniMarkupPreviewer\n  \n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n","source":"memo/index.md","raw":"---\nlayout: default\ntitle: \"Memo\"\n---\n\n#### URL收藏\n* Markdown语法：<http://wowubuntu.com/markdown>  \n* Git简明操作: <http://rogerdudler.github.io/git-guide/index.zh.html>    \n* LUA5.3DOC: <http://cloudwu.github.io/lua53doc>  \n* VS背景娘插件 <https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE>  \n\n#### Jekyll 本地调试环境搭建  \n* debian: apt-get install jekyll\n* mac: gem install jekyll\n* markdown previewer : atom==> <https://www.v2ex.com/t/249859>  \n* sublime  Ctrl+` <https://packagecontrol.io/installation#st3> install OmniMarkupPreviewer\n  \n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n","date":"2019-01-11T08:35:19.343Z","updated":"2019-01-11T08:35:19.343Z","path":"memo/index.html","comments":1,"_id":"ckd3wyei400037w5h1tz14e0s","content":"<h4><span id=\"url收藏\">URL收藏</span></h4><ul>\n<li>Markdown语法：<a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"noopener\">http://wowubuntu.com/markdown</a>  </li>\n<li>Git简明操作: <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">http://rogerdudler.github.io/git-guide/index.zh.html</a>    </li>\n<li>LUA5.3DOC: <a href=\"http://cloudwu.github.io/lua53doc\" target=\"_blank\" rel=\"noopener\">http://cloudwu.github.io/lua53doc</a>  </li>\n<li>VS背景娘插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE</a>  </li>\n</ul>\n<h4><span id=\"jekyll-本地调试环境搭建\">Jekyll 本地调试环境搭建</span></h4><ul>\n<li>debian: apt-get install jekyll</li>\n<li>mac: gem install jekyll</li>\n<li>markdown previewer : atom==&gt; <a href=\"https://www.v2ex.com/t/249859\" target=\"_blank\" rel=\"noopener\">https://www.v2ex.com/t/249859</a>  </li>\n<li>sublime  Ctrl+` <a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"noopener\">https://packagecontrol.io/installation#st3</a> install OmniMarkupPreviewer</li>\n</ul>\n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"URL收藏\"><a href=\"#URL收藏\" class=\"headerlink\" title=\"URL收藏\"></a>URL收藏</h4><ul>\n<li>Markdown语法：<a href=\"http://wowubuntu.com/markdown\" target=\"_blank\" rel=\"noopener\">http://wowubuntu.com/markdown</a>  </li>\n<li>Git简明操作: <a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\" rel=\"noopener\">http://rogerdudler.github.io/git-guide/index.zh.html</a>    </li>\n<li>LUA5.3DOC: <a href=\"http://cloudwu.github.io/lua53doc\" target=\"_blank\" rel=\"noopener\">http://cloudwu.github.io/lua53doc</a>  </li>\n<li>VS背景娘插件 <a href=\"https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE\" target=\"_blank\" rel=\"noopener\">https://marketplace.visualstudio.com/items?itemName=kbuchi.ClaudiaIDE</a>  </li>\n</ul>\n<h4 id=\"Jekyll-本地调试环境搭建\"><a href=\"#Jekyll-本地调试环境搭建\" class=\"headerlink\" title=\"Jekyll 本地调试环境搭建\"></a>Jekyll 本地调试环境搭建</h4><ul>\n<li>debian: apt-get install jekyll</li>\n<li>mac: gem install jekyll</li>\n<li>markdown previewer : atom==&gt; <a href=\"https://www.v2ex.com/t/249859\" target=\"_blank\" rel=\"noopener\">https://www.v2ex.com/t/249859</a>  </li>\n<li>sublime  Ctrl+` <a href=\"https://packagecontrol.io/installation#st3\" target=\"_blank\" rel=\"noopener\">https://packagecontrol.io/installation#st3</a> install OmniMarkupPreviewer</li>\n</ul>\n<!-- Blog Comments -->\n<div class=\"media\">\n  <!-- UY BEGIN -->\n  <div id=\"uyan_frame\">\n  </div>\n  <script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=1511840\">\n  </script>\n  <!-- UY END -->\n</div>\n"}],"Post":[{"title":"从梦境展开 到回归梦境","date":"2016-12-31T19:21:00.000Z","author":"yawei.zhang","_content":"我想 真正的知识是来自于对痛苦的体验与思考  \n因为现实中走投无路的痛苦  \n所以寻求认知的改变  \n寻找知识的表征.     \n\n在那个并不存在的仲夏夜  \n我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.  \n我望着满天璀璨的繁星  \n一簇簇相拥的  \n一串串排好的  \n还有横越天际明沙般的  \n倒映在我的眼眸中  \n在黑暗中轻盈的流转    \n我问你看到的星空是否也如此般的湍急  \n我问你时间的指针是不是在兀自疯狂的旋转.   \n\n没有任何声音的回应 夜晚一如此的宁静.  \n我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.  \n  <!-- more -->\n经验的快乐像是虚幻的拟春之物  \n喧嚣的人群只是遮蔽眼眸的盲流  \n我独自越过万水千山  \n走向空旷无垠的荒漠  \n没有迷人的风景  \n也没有鲜花和掌声  \n这是一个人烟罕至的边境  \n笼罩着天空的是格外真切的孤独和痛苦   \n在那世界的尽头  \n在所有存在都被虚无所吞噬的地方  \n一定还有着什么  \n那里是时空和因果的起点  \n或许自己穷尽生命所寻找的答案并不存在   \n也或许答案是什么也没有的虚无   \n而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     \n \n我回忆起少年时的一个梦境  \n我抱着课本从沾满露水的青草家园走来   \n雨后的辽阔的晴空   \n投射在水面倒影中斑驳的云彩  \n拂面吹来凉爽的微风  \n还有那翻过书页哗啦啦的声响  \n时间如同凝滞在岁月的琥珀中  \n我出神的望着远方.   \n\n从睡梦中醒来  \n我一如往常般记不起自己是在哪里  \n又是哪个时代  \n仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起   \n然后随着梦的消退   \n一点点重新铺展开来  \n这铺展开来的叫做现实  \n仿佛是来自于梦境   \n也或许会在某个黄昏的时候  \n重新回归于梦境.   \n\n","source":"_posts/2017-01-01-pain.md","raw":"---\ntitle: 从梦境展开 到回归梦境  \ndate: 2017-01-01 03:21:00\nauthor: yawei.zhang \n---\n我想 真正的知识是来自于对痛苦的体验与思考  \n因为现实中走投无路的痛苦  \n所以寻求认知的改变  \n寻找知识的表征.     \n\n在那个并不存在的仲夏夜  \n我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.  \n我望着满天璀璨的繁星  \n一簇簇相拥的  \n一串串排好的  \n还有横越天际明沙般的  \n倒映在我的眼眸中  \n在黑暗中轻盈的流转    \n我问你看到的星空是否也如此般的湍急  \n我问你时间的指针是不是在兀自疯狂的旋转.   \n\n没有任何声音的回应 夜晚一如此的宁静.  \n我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.  \n  <!-- more -->\n经验的快乐像是虚幻的拟春之物  \n喧嚣的人群只是遮蔽眼眸的盲流  \n我独自越过万水千山  \n走向空旷无垠的荒漠  \n没有迷人的风景  \n也没有鲜花和掌声  \n这是一个人烟罕至的边境  \n笼罩着天空的是格外真切的孤独和痛苦   \n在那世界的尽头  \n在所有存在都被虚无所吞噬的地方  \n一定还有着什么  \n那里是时空和因果的起点  \n或许自己穷尽生命所寻找的答案并不存在   \n也或许答案是什么也没有的虚无   \n而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     \n \n我回忆起少年时的一个梦境  \n我抱着课本从沾满露水的青草家园走来   \n雨后的辽阔的晴空   \n投射在水面倒影中斑驳的云彩  \n拂面吹来凉爽的微风  \n还有那翻过书页哗啦啦的声响  \n时间如同凝滞在岁月的琥珀中  \n我出神的望着远方.   \n\n从睡梦中醒来  \n我一如往常般记不起自己是在哪里  \n又是哪个时代  \n仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起   \n然后随着梦的消退   \n一点点重新铺展开来  \n这铺展开来的叫做现实  \n仿佛是来自于梦境   \n也或许会在某个黄昏的时候  \n重新回归于梦境.   \n\n","slug":"2017-01-01-pain","published":1,"updated":"2019-01-17T14:03:51.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyehv00007w5h0pu1bza2","content":"<p>我想 真正的知识是来自于对痛苦的体验与思考<br>因为现实中走投无路的痛苦<br>所以寻求认知的改变<br>寻找知识的表征.     </p>\n<p>在那个并不存在的仲夏夜<br>我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.<br>我望着满天璀璨的繁星<br>一簇簇相拥的<br>一串串排好的<br>还有横越天际明沙般的<br>倒映在我的眼眸中<br>在黑暗中轻盈的流转<br>我问你看到的星空是否也如此般的湍急<br>我问你时间的指针是不是在兀自疯狂的旋转.   </p>\n<p>没有任何声音的回应 夜晚一如此的宁静.<br>我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.<br>  <a id=\"more\"></a><br>经验的快乐像是虚幻的拟春之物<br>喧嚣的人群只是遮蔽眼眸的盲流<br>我独自越过万水千山<br>走向空旷无垠的荒漠<br>没有迷人的风景<br>也没有鲜花和掌声<br>这是一个人烟罕至的边境<br>笼罩着天空的是格外真切的孤独和痛苦<br>在那世界的尽头<br>在所有存在都被虚无所吞噬的地方<br>一定还有着什么<br>那里是时空和因果的起点<br>或许自己穷尽生命所寻找的答案并不存在<br>也或许答案是什么也没有的虚无<br>而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     </p>\n<p>我回忆起少年时的一个梦境<br>我抱着课本从沾满露水的青草家园走来<br>雨后的辽阔的晴空<br>投射在水面倒影中斑驳的云彩<br>拂面吹来凉爽的微风<br>还有那翻过书页哗啦啦的声响<br>时间如同凝滞在岁月的琥珀中<br>我出神的望着远方.   </p>\n<p>从睡梦中醒来<br>我一如往常般记不起自己是在哪里<br>又是哪个时代<br>仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起<br>然后随着梦的消退<br>一点点重新铺展开来<br>这铺展开来的叫做现实<br>仿佛是来自于梦境<br>也或许会在某个黄昏的时候<br>重新回归于梦境.</p>\n","site":{"data":{}},"excerpt":"<p>我想 真正的知识是来自于对痛苦的体验与思考<br>因为现实中走投无路的痛苦<br>所以寻求认知的改变<br>寻找知识的表征.     </p>\n<p>在那个并不存在的仲夏夜<br>我静静的躺在开满鲜花的山坡上, 夜色宁静如水, 萤火飞舞在我的周围.<br>我望着满天璀璨的繁星<br>一簇簇相拥的<br>一串串排好的<br>还有横越天际明沙般的<br>倒映在我的眼眸中<br>在黑暗中轻盈的流转<br>我问你看到的星空是否也如此般的湍急<br>我问你时间的指针是不是在兀自疯狂的旋转.   </p>\n<p>没有任何声音的回应 夜晚一如此的宁静.<br>我知道 时间之箭只从我身上划过 又如汹涌的河流奔向孤寂的黑暗中.<br>","more":"<br>经验的快乐像是虚幻的拟春之物<br>喧嚣的人群只是遮蔽眼眸的盲流<br>我独自越过万水千山<br>走向空旷无垠的荒漠<br>没有迷人的风景<br>也没有鲜花和掌声<br>这是一个人烟罕至的边境<br>笼罩着天空的是格外真切的孤独和痛苦<br>在那世界的尽头<br>在所有存在都被虚无所吞噬的地方<br>一定还有着什么<br>那里是时空和因果的起点<br>或许自己穷尽生命所寻找的答案并不存在<br>也或许答案是什么也没有的虚无<br>而追寻 只是用另外一种痛苦的方式消退那本来的疼痛.     </p>\n<p>我回忆起少年时的一个梦境<br>我抱着课本从沾满露水的青草家园走来<br>雨后的辽阔的晴空<br>投射在水面倒影中斑驳的云彩<br>拂面吹来凉爽的微风<br>还有那翻过书页哗啦啦的声响<br>时间如同凝滞在岁月的琥珀中<br>我出神的望着远方.   </p>\n<p>从睡梦中醒来<br>我一如往常般记不起自己是在哪里<br>又是哪个时代<br>仿佛所有的记忆超越时间和空间的秩序糅杂成碎片挤压在一起<br>然后随着梦的消退<br>一点点重新铺展开来<br>这铺展开来的叫做现实<br>仿佛是来自于梦境<br>也或许会在某个黄昏的时候<br>重新回归于梦境.</p>"},{"title":"太久的明天 让人视而不见","date":"2017-07-29T19:21:00.000Z","author":"yawei.zhang","_content":"我的世界里没有光  所有的星星也都坠落   \n一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中   \n我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离   \n我在想 我的存在是不是从来都是没有意义的 是错误的   \n我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  \n\n是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.   \n是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  \n\n是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   \n\n或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  \n\n或者本来就是这样吧 把自己骗过去就好.   \n\n","source":"_posts/2017-07-30-far-tommorrow.md","raw":"---\ntitle: 太久的明天 让人视而不见  \ndate: 2017-07-30 03:21:00\nauthor: yawei.zhang \n---\n我的世界里没有光  所有的星星也都坠落   \n一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中   \n我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离   \n我在想 我的存在是不是从来都是没有意义的 是错误的   \n我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  \n\n是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.   \n是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  \n\n是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   \n\n或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  \n\n或者本来就是这样吧 把自己骗过去就好.   \n\n","slug":"2017-07-30-far-tommorrow","published":1,"updated":"2019-01-17T14:03:57.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyei200027w5h8sbkbr6x","content":"<p>我的世界里没有光  所有的星星也都坠落<br>一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中<br>我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离<br>我在想 我的存在是不是从来都是没有意义的 是错误的<br>我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  </p>\n<p>是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.<br>是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  </p>\n<p>是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   </p>\n<p>或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  </p>\n<p>或者本来就是这样吧 把自己骗过去就好.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我的世界里没有光  所有的星星也都坠落<br>一个孤独的灵魂 游荡在黑色的夜 黑色的水 黑色的荒野中<br>我怀疑我是一个怪物 让人讨厌的 让人恐惧的 让人远离<br>我在想 我的存在是不是从来都是没有意义的 是错误的<br>我在想 为什么 自己还活着  是什么在支撑着如此痛苦的人生在继续旋转着  </p>\n<p>是意志力吗? 那种内在的 独立的 顽强的  源于感性体验而又超越感性的核心内驱力.  不是 我没有 我很脆弱.<br>是信念吗?  建立在成功的经验之上, 源于对自己能力于外界的可控性的充分的洞察,  不是 我没有 我没有成功的经验, 只有侥幸的成功.  </p>\n<p>是因为活着就不甘心死去,  生来就唾弃平庸吗?  可是明明什么都做不到, 失去的不能挽回, 得不到的永远在远方.   </p>\n<p>或者 从失败中寻找可怜的小幸福, 从平庸中获取细微的确定性,  然后想尽各种谎言欺骗自己的内心 告诉自己, 瞧那个人 还是挺优秀的 挺有希望的.  </p>\n<p>或者本来就是这样吧 把自己骗过去就好.</p>\n"},{"title":"老虎来喝下午茶","date":"2017-08-06T07:24:00.000Z","author":"yawei.zhang","_content":"```  \n    老虎来到我的家, 它怯生生的问\"我的肚子好饿, 可不可以与你们一起喝下午茶呢?\".  \n\n    老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  \n\n    老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   \n\n    老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  \n\n    老虎离开我的家，它就再没有出现过.    \n\n```\n\n  **对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.    \n  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过**.   \n","source":"_posts/2017-08-06-tiger-tea.md","raw":"---\ntitle: 老虎来喝下午茶  \ndate: 2017-08-06 15:24:00\nauthor: yawei.zhang \n---\n```  \n    老虎来到我的家, 它怯生生的问\"我的肚子好饿, 可不可以与你们一起喝下午茶呢?\".  \n\n    老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  \n\n    老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   \n\n    老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  \n\n    老虎离开我的家，它就再没有出现过.    \n\n```\n\n  **对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.    \n  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过**.   \n","slug":"2017-08-06-tiger-tea","published":1,"updated":"2019-01-17T14:04:00.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyei500047w5he81hbz2r","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">老虎来到我的家, 它怯生生的问&quot;我的肚子好饿, 可不可以与你们一起喝下午茶呢?&quot;.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   </span><br><span class=\"line\"></span><br><span class=\"line\">老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎离开我的家，它就再没有出现过.</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.<br>  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过</strong>.</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">老虎来到我的家, 它怯生生的问&quot;我的肚子好饿, 可不可以与你们一起喝下午茶呢?&quot;.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎来到我的家，它大摇大摆地走进来，坐下来与妈妈和我喝下午茶.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎来到我的家，它吃光了家里的所有食物，还喝光了家里的水.   </span><br><span class=\"line\"></span><br><span class=\"line\">老虎离开我的家，它像绅士一样和我们说“谢谢”、“再见”.  </span><br><span class=\"line\"></span><br><span class=\"line\">老虎离开我的家，它就再没有出现过.</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>对于我爱的你,  就像那只怯生生的来喝下午茶的老虎,  在我毫无防备的时候闯进了我的生命里.<br>  而在我准备好迎接你的到来时,  当我们可以开始一场不那么狼狈和仓促的下午茶的时候,  你从我的世界离开了,  再也没有回来过</strong>.</p>\n"},{"title":"illusion","date":"2017-09-05T17:03:00.000Z","author":"yawei.zhang","_content":"\n梦的深处 斑驳的光影  \n如草蛇般穿行过忽明忽暗的丛莽  \n<!-- more -->\n爬满藤蔓植物的森林  \n似乎想起了什么 \n什么也没有想起来  \n现实如流矢没入不曾预期的句点  \n戛然而止   \n不 没有结束      \n梦境从这里延续  \n一切都从这里开始   \n现实才是梦的终结  \n我在这里  \nyou stay with me  \nWell I could sleep forever   \n\n\n\n\n\n\n","source":"_posts/2017-09-06-dream-woods.md","raw":"---\ntitle: illusion   \ndate: 2017-09-06 01:03:00\nauthor: yawei.zhang \n---\n\n梦的深处 斑驳的光影  \n如草蛇般穿行过忽明忽暗的丛莽  \n<!-- more -->\n爬满藤蔓植物的森林  \n似乎想起了什么 \n什么也没有想起来  \n现实如流矢没入不曾预期的句点  \n戛然而止   \n不 没有结束      \n梦境从这里延续  \n一切都从这里开始   \n现实才是梦的终结  \n我在这里  \nyou stay with me  \nWell I could sleep forever   \n\n\n\n\n\n\n","slug":"2017-09-06-dream-woods","published":1,"updated":"2019-01-17T14:04:04.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyei600057w5hfgnsg22n","content":"<p>梦的深处 斑驳的光影<br>如草蛇般穿行过忽明忽暗的丛莽  </p>\n<a id=\"more\"></a>\n<p>爬满藤蔓植物的森林<br>似乎想起了什么<br>什么也没有想起来<br>现实如流矢没入不曾预期的句点<br>戛然而止<br>不 没有结束<br>梦境从这里延续<br>一切都从这里开始<br>现实才是梦的终结<br>我在这里<br>you stay with me<br>Well I could sleep forever</p>\n","site":{"data":{}},"excerpt":"<p>梦的深处 斑驳的光影<br>如草蛇般穿行过忽明忽暗的丛莽  </p>","more":"<p>爬满藤蔓植物的森林<br>似乎想起了什么<br>什么也没有想起来<br>现实如流矢没入不曾预期的句点<br>戛然而止<br>不 没有结束<br>梦境从这里延续<br>一切都从这里开始<br>现实才是梦的终结<br>我在这里<br>you stay with me<br>Well I could sleep forever</p>"},{"title":"Lullabye For Lan","date":"2017-09-30T19:21:00.000Z","author":"yawei.zhang","_content":"\n","source":"_posts/2017-10-01-lullabye.md","raw":"---\ntitle: Lullabye For Lan\ndate: 2017-10-01 03:21:00\nauthor: yawei.zhang \n---\n\n","slug":"2017-10-01-lullabye","published":1,"updated":"2019-03-06T13:03:54.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeia00067w5h0ogt4i1u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"wolrd line convergence","date":"2017-09-18T17:03:00.000Z","author":"yawei.zhang","_content":"disturb the world line convergence  failed ..  \nworldline changes   failed ..  \nprolog beginning .. \nprolog saved one moment .. \nprolog crash ..  \nback stack failed .. \ngarbage collect ..  \nundo this worldline ..  \nthrown into the unknown ...    \n\n\n\n","source":"_posts/2017-09-19-world-line-collect.md","raw":"---\ntitle: wolrd line convergence\ndate: 2017-09-19 01:03:00\nauthor: yawei.zhang \n---\ndisturb the world line convergence  failed ..  \nworldline changes   failed ..  \nprolog beginning .. \nprolog saved one moment .. \nprolog crash ..  \nback stack failed .. \ngarbage collect ..  \nundo this worldline ..  \nthrown into the unknown ...    \n\n\n\n","slug":"2017-09-19-world-line-collect","published":1,"updated":"2019-01-17T14:04:07.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeic00077w5h24yhfyiz","content":"<p>disturb the world line convergence  failed ..<br>worldline changes   failed ..<br>prolog beginning ..<br>prolog saved one moment ..<br>prolog crash ..<br>back stack failed ..<br>garbage collect ..<br>undo this worldline ..<br>thrown into the unknown …</p>\n","site":{"data":{}},"excerpt":"","more":"<p>disturb the world line convergence  failed ..<br>worldline changes   failed ..<br>prolog beginning ..<br>prolog saved one moment ..<br>prolog crash ..<br>back stack failed ..<br>garbage collect ..<br>undo this worldline ..<br>thrown into the unknown …</p>\n"},{"title":"Revolt","date":"2017-10-17T19:21:00.000Z","author":"yawei.zhang","_content":"把自己埋在冰土里  \n跟自己说再见  \n跟这个世界说声晚安   \n听着心脏的跳动一点点消失  \n一点点的宁静      \n在我的脑海中   \n在我的坟墓边上有一朵小花   \n安静的在黑夜里摇曳   \n脉搏停止跳动的那一刻   \n躯体本能的求生欲望失去了意志上最后的束缚   \nRevolt  !   \n新的意志在死去的躯体上开始重建  \n   \n\n","source":"_posts/2017-10-18-revolt.md","raw":"---\ntitle: Revolt\ndate: 2017-10-18 03:21:00\nauthor: yawei.zhang \n---\n把自己埋在冰土里  \n跟自己说再见  \n跟这个世界说声晚安   \n听着心脏的跳动一点点消失  \n一点点的宁静      \n在我的脑海中   \n在我的坟墓边上有一朵小花   \n安静的在黑夜里摇曳   \n脉搏停止跳动的那一刻   \n躯体本能的求生欲望失去了意志上最后的束缚   \nRevolt  !   \n新的意志在死去的躯体上开始重建  \n   \n\n","slug":"2017-10-18-revolt","published":1,"updated":"2019-01-17T14:04:16.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeid00087w5h6gw9f0uh","content":"<p>把自己埋在冰土里<br>跟自己说再见<br>跟这个世界说声晚安<br>听着心脏的跳动一点点消失<br>一点点的宁静<br>在我的脑海中<br>在我的坟墓边上有一朵小花<br>安静的在黑夜里摇曳<br>脉搏停止跳动的那一刻<br>躯体本能的求生欲望失去了意志上最后的束缚<br>Revolt  !<br>新的意志在死去的躯体上开始重建</p>\n","site":{"data":{}},"excerpt":"","more":"<p>把自己埋在冰土里<br>跟自己说再见<br>跟这个世界说声晚安<br>听着心脏的跳动一点点消失<br>一点点的宁静<br>在我的脑海中<br>在我的坟墓边上有一朵小花<br>安静的在黑夜里摇曳<br>脉搏停止跳动的那一刻<br>躯体本能的求生欲望失去了意志上最后的束缚<br>Revolt  !<br>新的意志在死去的躯体上开始重建</p>\n"},{"title":"浪漫主义","date":"2017-10-25T19:21:00.000Z","author":"yawei.zhang","_content":"人的感受是正当的  也是自然的   \n因为要完成自己的职责 完成自己的目标 完成他人的所有期望    \n做一个正义的 温暖的  无限包容的 开放的  神圣的人  \n所以去承受自己所不能承受的痛苦  \n无限的束缚和压抑自我感受  \n变成一具非人的行尸  \n这并不可能存在  也一点不浪漫   \n \n浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  \n\n","source":"_posts/2017-10-26-romanticism.md","raw":"---\ntitle: 浪漫主义\ndate: 2017-10-26 03:21:00\nauthor: yawei.zhang \n---\n人的感受是正当的  也是自然的   \n因为要完成自己的职责 完成自己的目标 完成他人的所有期望    \n做一个正义的 温暖的  无限包容的 开放的  神圣的人  \n所以去承受自己所不能承受的痛苦  \n无限的束缚和压抑自我感受  \n变成一具非人的行尸  \n这并不可能存在  也一点不浪漫   \n \n浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受  \n\n","slug":"2017-10-26-romanticism","published":1,"updated":"2019-01-17T14:04:19.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeie00097w5h9huz3b80","content":"<p>人的感受是正当的  也是自然的<br>因为要完成自己的职责 完成自己的目标 完成他人的所有期望<br>做一个正义的 温暖的  无限包容的 开放的  神圣的人<br>所以去承受自己所不能承受的痛苦<br>无限的束缚和压抑自我感受<br>变成一具非人的行尸<br>这并不可能存在  也一点不浪漫   </p>\n<p>浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受</p>\n","site":{"data":{}},"excerpt":"","more":"<p>人的感受是正当的  也是自然的<br>因为要完成自己的职责 完成自己的目标 完成他人的所有期望<br>做一个正义的 温暖的  无限包容的 开放的  神圣的人<br>所以去承受自己所不能承受的痛苦<br>无限的束缚和压抑自我感受<br>变成一具非人的行尸<br>这并不可能存在  也一点不浪漫   </p>\n<p>浪漫是在悲剧的环境中乐观的正视并且尊重自己的感受</p>\n"},{"title":"ELITE","date":"2019-01-06T19:21:00.000Z","author":"yawei.zhang","_content":"\n\n\n### 对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜  \n---  \n\n在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：[有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。](#)  \n\n这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：[在大部分人习以为常的场景下，有探究规律本质的欲望。](#)  \n\n> 举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。  \n> 但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？  \n> 能意识到这个问题的人，就有成为聪明人的潜质。  \n\n当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  \n\n为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  \n\n如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   \n\n对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   \n> 和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：   \n> **为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？**   \n\n这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   \n\n  <!-- more -->\n### 能在一件事情上极为专注\n---  \n\n「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   \n\n这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    \n\n这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   \n\n```\n以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  \n而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。  \n```\n\n### 有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件   \n---  \n\n正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   \n\n但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   \n\n有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  \n\n\n### 用发展的眼光看问题，会不断修正对事物的印象   \n---  \n\n人们总说，我们对一件事或一个人的第一印象是非常重要的。   \n\n从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   \n\n这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  \n\n与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  \n\n\n### 大多数在骨子里争强好胜，但也更愿意臣服于事实   \n---  \n\n什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   \n\n事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  \n\n和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  \n\n\n### 在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识  \n---  \n\n他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  \n\n因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  \n\n\n### 往往能包容事物的多样性  \n---  \n\n这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  \n\n他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；   \n他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   \n\n对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   \n\n（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   \n\n特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  \n\n\n### 鲜见低质量的社交   \n---  \n\n有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   \n\n比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。  \n但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  \n\n「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   \n\n\n### 很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教   \n---  \n\n「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   \n\n比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   \n\n而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   \n\n这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  \n\n\n### 善于在不同的人面前展现截然不同的个性   \n---  \n\n「聪明人」不会在所有人面前都让自己显得聪明。   \n\n因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。  \n而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  \n\n「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   \n\n所以你看，很多聪明人在别人面前总显得傻乎乎的。   \n\n而那些真正傻乎乎的人，却以为自己才是聪明人呢~   \n","source":"_posts/2019-01-07-elite.md","raw":"---\ntitle: ELITE\ndate: 2019-01-07 03:21:00\nauthor: yawei.zhang \n---\n\n\n\n### 对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜  \n---  \n\n在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：[有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。](#)  \n\n这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：[在大部分人习以为常的场景下，有探究规律本质的欲望。](#)  \n\n> 举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。  \n> 但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？  \n> 能意识到这个问题的人，就有成为聪明人的潜质。  \n\n当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  \n\n为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  \n\n如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   \n\n对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   \n> 和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：   \n> **为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？**   \n\n这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   \n\n  <!-- more -->\n### 能在一件事情上极为专注\n---  \n\n「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   \n\n这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    \n\n这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   \n\n```\n以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  \n而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。  \n```\n\n### 有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件   \n---  \n\n正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   \n\n但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   \n\n有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  \n\n\n### 用发展的眼光看问题，会不断修正对事物的印象   \n---  \n\n人们总说，我们对一件事或一个人的第一印象是非常重要的。   \n\n从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   \n\n这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  \n\n与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  \n\n\n### 大多数在骨子里争强好胜，但也更愿意臣服于事实   \n---  \n\n什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   \n\n事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  \n\n和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  \n\n\n### 在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识  \n---  \n\n他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  \n\n因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  \n\n\n### 往往能包容事物的多样性  \n---  \n\n这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  \n\n他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；   \n他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   \n\n对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   \n\n（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   \n\n特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  \n\n\n### 鲜见低质量的社交   \n---  \n\n有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   \n\n比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。  \n但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  \n\n「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   \n\n\n### 很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教   \n---  \n\n「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   \n\n比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   \n\n而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   \n\n这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  \n\n\n### 善于在不同的人面前展现截然不同的个性   \n---  \n\n「聪明人」不会在所有人面前都让自己显得聪明。   \n\n因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。  \n而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  \n\n「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   \n\n所以你看，很多聪明人在别人面前总显得傻乎乎的。   \n\n而那些真正傻乎乎的人，却以为自己才是聪明人呢~   \n","slug":"2019-01-07-elite","published":1,"updated":"2019-01-17T14:04:25.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeif000a7w5h2crbcelt","content":"<h3><span id=\"对事物有极强的好奇心并愿意与有好奇心的人惺惺相惜\">对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜</span></h3><hr>\n<p>在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：<a href=\"#\">有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。</a>  </p>\n<p>这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：<a href=\"#\">在大部分人习以为常的场景下，有探究规律本质的欲望。</a>  </p>\n<blockquote>\n<p>举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。<br>但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？<br>能意识到这个问题的人，就有成为聪明人的潜质。  </p>\n</blockquote>\n<p>当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  </p>\n<p>为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  </p>\n<p>如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   </p>\n<p>对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   </p>\n<blockquote>\n<p>和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：<br><strong>为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？</strong>   </p>\n</blockquote>\n<p>这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   </p>\n  <a id=\"more\"></a>\n<h3><span id=\"能在一件事情上极为专注\">能在一件事情上极为专注</span></h3><hr>\n<p>「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   </p>\n<p>这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    </p>\n<p>这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  </span><br><span class=\"line\">而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"有极强的概括和拓展能力并善于对不同的人用不同的方式解释同一个事件\">有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件</span></h3><hr>\n<p>正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   </p>\n<p>但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   </p>\n<p>有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  </p>\n<h3><span id=\"用发展的眼光看问题会不断修正对事物的印象\">用发展的眼光看问题，会不断修正对事物的印象</span></h3><hr>\n<p>人们总说，我们对一件事或一个人的第一印象是非常重要的。   </p>\n<p>从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   </p>\n<p>这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  </p>\n<p>与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  </p>\n<h3><span id=\"大多数在骨子里争强好胜但也更愿意臣服于事实\">大多数在骨子里争强好胜，但也更愿意臣服于事实</span></h3><hr>\n<p>什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   </p>\n<p>事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  </p>\n<p>和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  </p>\n<h3><span id=\"在讨论问题时会提前确认好口径和立场这使得他们之间更容易达成共识\">在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识</span></h3><hr>\n<p>他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  </p>\n<p>因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  </p>\n<h3><span id=\"往往能包容事物的多样性\">往往能包容事物的多样性</span></h3><hr>\n<p>这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  </p>\n<p>他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；<br>他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   </p>\n<p>对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   </p>\n<p>（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   </p>\n<p>特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  </p>\n<h3><span id=\"鲜见低质量的社交\">鲜见低质量的社交</span></h3><hr>\n<p>有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   </p>\n<p>比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。<br>但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  </p>\n<p>「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   </p>\n<h3><span id=\"很少因为自己的身份产生优越感这使得能在特定问题上能虚心向比自己层次低的人请教\">很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教</span></h3><hr>\n<p>「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   </p>\n<p>比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   </p>\n<p>而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   </p>\n<p>这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  </p>\n<h3><span id=\"善于在不同的人面前展现截然不同的个性\">善于在不同的人面前展现截然不同的个性</span></h3><hr>\n<p>「聪明人」不会在所有人面前都让自己显得聪明。   </p>\n<p>因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。<br>而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  </p>\n<p>「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   </p>\n<p>所以你看，很多聪明人在别人面前总显得傻乎乎的。   </p>\n<p>而那些真正傻乎乎的人，却以为自己才是聪明人呢~</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"><a href=\"#对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\" class=\"headerlink\" title=\"对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜\"></a>对事物有极强的好奇心，并愿意与有好奇心的人惺惺相惜</h3><hr>\n<p>在我看来，「好奇心」是辨别一个人是否聪明的「入门标准」。所谓入门标准，是指：<a href=\"#\">有好奇心的人未必聪明，但没有好奇心的人几乎一定不聪明。</a>  </p>\n<p>这里所说的「好奇心」，不是指爱八卦或者窥探别人的隐私之类，而是指：<a href=\"#\">在大部分人习以为常的场景下，有探究规律本质的欲望。</a>  </p>\n<blockquote>\n<p>举个例子：人类在地球上生活了那么多年，看了那么多日出日落，都没觉得有什么奇怪的地方。<br>但有一个人突然很好奇，为什么太阳从东边升起，西边落下，两次日出的时间间隔又差不多？<br>能意识到这个问题的人，就有成为聪明人的潜质。  </p>\n</blockquote>\n<p>当然，「好奇心」是可以伪造的。有些人，为了证明自己很有好奇心（继而证明自己很聪明），总是喜欢问各种各样「不明觉厉」的问题。  </p>\n<p>为此，我特意添上了后半句话：真正有好奇心的人，是愿意和另一个有好奇心的人惺惺相惜的。  </p>\n<p>如果你看到一个人，自己喜欢问很多问题，但是在别人提类似问题的时候却显得十分不耐烦，那就并不能说明他是一个有好奇心的人，只能说明他是「好表现」的人。   </p>\n<p>对于辨别一个人是否真正有好奇心，我这边有一个小 trick：   </p>\n<blockquote>\n<p>和人聊天时，有时对方会提到星座。如果他表现得对星座这个话题很感兴趣，我可能会向他抛出一个问题：<br><strong>为什么很多人会觉得 处（chǔ）女座 的人有强（qiǎng）迫症呢？</strong>   </p>\n</blockquote>\n<p>这个问题是很开放的，并没有什么标准答案。但我注意到，有相当一部分人会对这个问题表现出鄙夷和不耐烦，而他们本身却不是不相信星座的人。后来的事实证明，那些几乎都是不太聪明的人。   </p>","more":"<h3 id=\"能在一件事情上极为专注\"><a href=\"#能在一件事情上极为专注\" class=\"headerlink\" title=\"能在一件事情上极为专注\"></a>能在一件事情上极为专注</h3><hr>\n<p>「专注力」是另一个辨别一个人是否聪明的「入门标准」，即：高效的人未必聪明，但聪明的人必然高效。   </p>\n<p>这并不是说「聪明人」总能把自己的一天安排得井井有条。实际上，很多「聪明人」并非勤奋，有些甚至十分懒惰，但无论是勤奋的聪明人，还是懒惰的聪明人，都 总能在需要竭尽全力去做一件事情的时候调动起自己所有的注意力。在这段时间内，他能达到比常人高效很多倍的程度。    </p>\n<p>这真是一种天赋，硬生生地拉开了「聪明人」和「不太聪明的人」的距离。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以上 2 条是聪明人的「入门标准」，但凡是聪明人，总该具备。  </span><br><span class=\"line\">而下面 8 条则是聪明人的「进阶标准」，是聪明人容易具备的特性，但偶有几条不符合，也无妨。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"><a href=\"#有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\" class=\"headerlink\" title=\"有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件\"></a>有极强的概括和拓展能力，并善于对不同的人用不同的方式解释同一个事件</h3><hr>\n<p>正如很多回答所提到的，能用简单的语言去概括和抽象复杂的事件，是聪明人的另一个显著标志。   </p>\n<p>但聪明人同样知道，无论一个概括如何精准，都无法完全避免信息的缺失。因此，他们不仅仅会抽象一个复杂事件，也懂得如何去还原它——这意味着他们不仅需要拥有概括能力，并且懂得那些丢失的信息具有什么特性，从而便于自己拓展回去，甚至拓展更多。   </p>\n<p>有了这两方面的能力，他就可以把一件事情用各种不同的方式和信息量去描述。这使得在面对各种（与事情相关度不一）关心事件的人时，他可以依据对方对事物的了解水平，去选择最合适的讲解方式了。  </p>\n<h3 id=\"用发展的眼光看问题，会不断修正对事物的印象\"><a href=\"#用发展的眼光看问题，会不断修正对事物的印象\" class=\"headerlink\" title=\"用发展的眼光看问题，会不断修正对事物的印象\"></a>用发展的眼光看问题，会不断修正对事物的印象</h3><hr>\n<p>人们总说，我们对一件事或一个人的第一印象是非常重要的。   </p>\n<p>从心理学的角度说，这句话当然是对的。但我观察后发现，在平庸的环境中，这句话几乎可以成为金科玉律，但对聪明的人，这句话却可能不太适用。   </p>\n<p>这是因为，聪明人非常乐于用发展的眼光看问题，他们相信，事物是不断变化的。除此之外，他们十分乐于接受变化后的事物，对感兴趣的事物，他们热衷于比较变化前和变化后事物的区别，然后思考变化的原因。  </p>\n<p>与之相对的，大部分不太聪明的人却对事物的变化十分不敏感。这可能源于他们对事物认知方式的缺陷：他们中的很多人，喜欢给一个人和一件事贴上「标签」以便于记忆，这使得「去标签化」会让他们感到极为不适。  </p>\n<h3 id=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"><a href=\"#大多数在骨子里争强好胜，但也更愿意臣服于事实\" class=\"headerlink\" title=\"大多数在骨子里争强好胜，但也更愿意臣服于事实\"></a>大多数在骨子里争强好胜，但也更愿意臣服于事实</h3><hr>\n<p>什么叫「骨子里争强好胜」呢？ 就是说，虽然他们未必热爱口舌上的辩论，但在内心中，通常总有着稳定而难以侵犯的处世原则（他自己未必能感知到，但确实存在），一旦你试图动摇他的原则，他一定会不惜一切代价捍卫它。   </p>\n<p>事实上，他们的处世原则也往往是逻辑上高度自洽的，因为他们通常对「逻辑」有着高度的认同。这就使得，如果你用事实和逻辑去挑战他，他也更愿意承认自己的错误。  </p>\n<p>和聪明人辩论是很舒服的，因为他们十分清楚什么状况下该认输，极少会在不占理的情况下胡搅蛮缠。  </p>\n<h3 id=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"><a href=\"#在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\" class=\"headerlink\" title=\"在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识\"></a>在讨论问题时，会提前确认好口径和立场，这使得他们之间更容易达成共识</h3><hr>\n<p>他们深知，世界上大部分无谓的争论，其本质在于定义和立场的不同。  </p>\n<p>因此，在讨论问题前，他们习惯于先去确认一些并不显而易见的概念的定义（在他们眼里，很多概念绝非普通人眼里那样显而易见），以及讨论问题的双方所在的立场。确认了这些以后，讨论问题往往会变得十分轻松，也十分容易达成共识。  </p>\n<h3 id=\"往往能包容事物的多样性\"><a href=\"#往往能包容事物的多样性\" class=\"headerlink\" title=\"往往能包容事物的多样性\"></a>往往能包容事物的多样性</h3><hr>\n<p>这世上有很多反对同性恋、反对吃狗肉的人，而这些人在「聪明人」之中极为罕见。  </p>\n<p>他们知道，同性恋的人虽然和自己的性取向不同，但对社会并没有什么显性的害处；<br>他们知道，虽然自己不吃狗肉，但对有些人来说，吃狗肉和吃鸡肉、鸭肉、猪肉并没有太大的区别，这也不会对自己造成什么影响，所以没有必要去反对它。   </p>\n<p>对与自己不同而无害的「异类」的包容，从另一角度看，源于他们对自身「适应力」的自信。他们能和各种各样的人和睦相处，因此无需通过渴望别人和自己一样来获得安全感。   </p>\n<p>（当然，在这一点上，会有一小部分反例，如阿斯伯格综合征患者）   </p>\n<p>特别地，这种对自身适应力的自信，也会让他们在「独处」的时候也毫不费力。这也是很多回答中所提到的：聪明的人，一定善于独处。  </p>\n<h3 id=\"鲜见低质量的社交\"><a href=\"#鲜见低质量的社交\" class=\"headerlink\" title=\"鲜见低质量的社交\"></a>鲜见低质量的社交</h3><hr>\n<p>有一句很著名的话，「要知道，比你厉害的人通常是懒得鸟你的」。这确实是残酷的现实。   </p>\n<p>比如，在大学里，很多人喜欢在夜里和朋友们漫无目的地出去喝酒吹牛。<br>但在「聪明人」的群体中，这种情形则要少见得多。这不是说他们不近人情，他们不这么做，是因为 他们有意识地去控制「漫无目的」社交的时间。  </p>\n<p>「聪明人」往往更能感受到生命的短暂。自己的时间是宝贵的，即使要社交，也要用在刀刃上。与其和狐朋狗友喝个一醉方休，不如和身边一些拥有特殊能力和资源的人多聊聊天。如果暂时找不到，他们也更愿意一个人呆着。   </p>\n<h3 id=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"><a href=\"#很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\" class=\"headerlink\" title=\"很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教\"></a>很少因为自己的身份产生优越感，这使得能在特定问题上能虚心向比自己层次低的人请教</h3><hr>\n<p>「聪明人」可能也会有优越感，但这种优越感不会来自于他们的身份，而是来自于他们的实力。   </p>\n<p>比如，一个考上北大的人，如果整天炫耀自己是北大的学生，他可能并不是特别聪明。因为这种优越感来自于「北大」这个身份，这就意味着，他在潜意识中觉得自己的身份高于自己的真实实力。   </p>\n<p>而一个真正聪明的人，对自己的能力高度自信，这使得他无需利用身份去证明自己的厉害。   </p>\n<p>这是一种更为健康的心态，一个对自己足够自信的人，很少会摆什么架子，这就使得他更愿意在特定的问题上毫不做作地虚心向比自己层次低的人请教。  </p>\n<h3 id=\"善于在不同的人面前展现截然不同的个性\"><a href=\"#善于在不同的人面前展现截然不同的个性\" class=\"headerlink\" title=\"善于在不同的人面前展现截然不同的个性\"></a>善于在不同的人面前展现截然不同的个性</h3><hr>\n<p>「聪明人」不会在所有人面前都让自己显得聪明。   </p>\n<p>因为他们知道，和不同的人，应该用什么方式社交，才能达到最高效、让自己最舒服的状态。<br>而在一些人面前显得聪明，反而会让他背负很多本不必背负的责任，从而成为他的累赘。  </p>\n<p>「聪明」是个大杀器，得好好掂量着用才能发挥最大的威力。   </p>\n<p>所以你看，很多聪明人在别人面前总显得傻乎乎的。   </p>\n<p>而那些真正傻乎乎的人，却以为自己才是聪明人呢~</p>"},{"title":"unordered_map","date":"2019-01-10T09:21:00.000Z","author":"yawei.zhang","_content":"\n### 基本概念  \n* **哈希算法：** 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  \n* **哈希表：** 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  \n* **非哈希表：** 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   \n* **哈希冲突：** 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    \n  <!-- more -->  \n\n### 常见的Hash函数  \n* **直接定址法：** 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  \n* **数字分析法：** 提取关键字中取值比较均匀的数字作为哈希地址。  \n* **除留余数法：** 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  \n* **分段叠加法：** 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  \n* **平方取中法：** 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  \n* **伪随机数法：** 采用一个伪随机数当作哈希函数。  \n\n### 常见的解决冲突方案   \n\n#### 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。  \n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。  \n开放定址法的缺点在于**删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。**只到有下个元素插入才能真正删除该元素。  \n\n* **线行探查法**   \n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  \n\n* **平方探查法**  \n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  \n\n* **双散列函数探查法**  \n这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  \n\n#### 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n\n注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，**jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。**   \n\n#### 再哈希法  \n就是同时构造多个不同的哈希函数：  \nHi = RHi(key)   i= 1,2,3 ... k;\n当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   \n\n#### 建立公共溢出区  \n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  \n\n\n### 与map的区别   \n#### 迭代器失效情况   \n\n##### unordered_map:   \n| 操作 | 失效情况  |\n| --- | ---  |\n| 所有只读操作 swap std::swap                     | 决不  \n| clear  rehash  reserve operator=               |  始终  \n| insert  emplace  emplace_hint  operator[]      | 仅若重哈希导致  \n| erase                                           | 仅为指向被擦除元素者  \n\n##### map (通常实现为红黑树,非强制标准):   \n| 操作 | 失效情况  |\n| --- | ---  |\n| insert  emplace  emplace_hint  operator[]      | 没有失效情况  \n| erase                                           | 仅为指向被擦除元素者  \n\n\n##### 其他 \n* map是有序的，unordered_map是无序的  \n* 两者之间的查找速度不同（log(N)和N）  \n* 由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  \n* 迭代器失效情况, map更稳健    \n* 遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  \n* unordered_map不能反向遍历  \n* O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  \n* 散列表的时间复杂度仍然是O(N), 性能上map更稳定  \n\n","source":"_posts/2019-01-10-unordered_map.md","raw":"---\ntitle: unordered_map\ndate: 2019-01-10 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 基本概念  \n* **哈希算法：** 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  \n* **哈希表：** 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  \n* **非哈希表：** 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   \n* **哈希冲突：** 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    \n  <!-- more -->  \n\n### 常见的Hash函数  \n* **直接定址法：** 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  \n* **数字分析法：** 提取关键字中取值比较均匀的数字作为哈希地址。  \n* **除留余数法：** 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  \n* **分段叠加法：** 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  \n* **平方取中法：** 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  \n* **伪随机数法：** 采用一个伪随机数当作哈希函数。  \n\n### 常见的解决冲突方案   \n\n#### 开放定址法\n从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。  \n在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。  \n开放定址法的缺点在于**删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。**只到有下个元素插入才能真正删除该元素。  \n\n* **线行探查法**   \n线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  \n\n* **平方探查法**  \n平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²...直到找到空闲单元。\n在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  \n\n* **双散列函数探查法**  \n这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  \n\n#### 链地址法（拉链法）\n链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。\n\n注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，**jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。**   \n\n#### 再哈希法  \n就是同时构造多个不同的哈希函数：  \nHi = RHi(key)   i= 1,2,3 ... k;\n当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   \n\n#### 建立公共溢出区  \n将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  \n\n\n### 与map的区别   \n#### 迭代器失效情况   \n\n##### unordered_map:   \n| 操作 | 失效情况  |\n| --- | ---  |\n| 所有只读操作 swap std::swap                     | 决不  \n| clear  rehash  reserve operator=               |  始终  \n| insert  emplace  emplace_hint  operator[]      | 仅若重哈希导致  \n| erase                                           | 仅为指向被擦除元素者  \n\n##### map (通常实现为红黑树,非强制标准):   \n| 操作 | 失效情况  |\n| --- | ---  |\n| insert  emplace  emplace_hint  operator[]      | 没有失效情况  \n| erase                                           | 仅为指向被擦除元素者  \n\n\n##### 其他 \n* map是有序的，unordered_map是无序的  \n* 两者之间的查找速度不同（log(N)和N）  \n* 由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  \n* 迭代器失效情况, map更稳健    \n* 遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  \n* unordered_map不能反向遍历  \n* O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  \n* 散列表的时间复杂度仍然是O(N), 性能上map更稳定  \n\n","slug":"2019-01-10-unordered_map","published":1,"updated":"2019-01-17T14:04:32.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeig000b7w5hdftdh5zy","content":"<h3><span id=\"基本概念\">基本概念</span></h3><ul>\n<li><strong>哈希算法：</strong> 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  </li>\n<li><strong>哈希表：</strong> 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  </li>\n<li><strong>非哈希表：</strong> 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   </li>\n<li><strong>哈希冲突：</strong> 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。    <a id=\"more\"></a>  \n\n</li>\n</ul>\n<h3><span id=\"常见的hash函数\">常见的Hash函数</span></h3><ul>\n<li><strong>直接定址法：</strong> 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  </li>\n<li><strong>数字分析法：</strong> 提取关键字中取值比较均匀的数字作为哈希地址。  </li>\n<li><strong>除留余数法：</strong> 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  </li>\n<li><strong>分段叠加法：</strong> 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  </li>\n<li><strong>平方取中法：</strong> 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  </li>\n<li><strong>伪随机数法：</strong> 采用一个伪随机数当作哈希函数。  </li>\n</ul>\n<h3><span id=\"常见的解决冲突方案\">常见的解决冲突方案</span></h3><h4><span id=\"开放定址法\">开放定址法</span></h4><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。<br>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于<strong>删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。</strong>只到有下个元素插入才能真正删除该元素。  </p>\n<ul>\n<li><p><strong>线行探查法</strong><br>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  </p>\n</li>\n<li><p><strong>平方探查法</strong><br>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  </p>\n</li>\n<li><p><strong>双散列函数探查法</strong><br>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  </p>\n</li>\n</ul>\n<h4><span id=\"链地址法拉链法\">链地址法（拉链法）</span></h4><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，<strong>jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</strong>   </p>\n<h4><span id=\"再哈希法\">再哈希法</span></h4><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key)   i= 1,2,3 … k;<br>当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   </p>\n<h4><span id=\"建立公共溢出区\">建立公共溢出区</span></h4><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  </p>\n<h3><span id=\"与map的区别\">与map的区别</span></h3><h4><span id=\"迭代器失效情况\">迭代器失效情况</span></h4><h5><span id=\"unordered_map\">unordered_map:</span></h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>所有只读操作 swap std::swap</td>\n<td>决不</td>\n</tr>\n<tr>\n<td>clear  rehash  reserve operator=</td>\n<td>始终</td>\n</tr>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>仅若重哈希导致</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者</td>\n</tr>\n</tbody></table>\n<h5><span id=\"map-通常实现为红黑树非强制标准\">map (通常实现为红黑树,非强制标准):</span></h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>没有失效情况</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者</td>\n</tr>\n</tbody></table>\n<h5><span id=\"其他\">其他</span></h5><ul>\n<li>map是有序的，unordered_map是无序的  </li>\n<li>两者之间的查找速度不同（log(N)和N）  </li>\n<li>由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  </li>\n<li>迭代器失效情况, map更稳健    </li>\n<li>遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  </li>\n<li>unordered_map不能反向遍历  </li>\n<li>O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  </li>\n<li>散列表的时间复杂度仍然是O(N), 性能上map更稳定</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>哈希算法：</strong> 根据设定的哈希函数H（key）和处理冲突方法将一组关键字映象到一个有限的地址区间上的算法。也称为散列算法、杂凑算法。  </li>\n<li><strong>哈希表：</strong> 数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。  </li>\n<li><strong>非哈希表：</strong> 与哈希表相对应，集合中的 数据和其存放位置没任何关联关系的集合。 由此可见，哈希算法是一种特殊的算法，能将任意数据散列后映射到有限的空间上，通常计算机软件中用作快速查找或加密使用。   </li>\n<li><strong>哈希冲突：</strong> 两个不同的输入值，根据同一散列函数计算出的散列值相同的现象叫做碰撞。","more":"</li>\n</ul>\n<h3 id=\"常见的Hash函数\"><a href=\"#常见的Hash函数\" class=\"headerlink\" title=\"常见的Hash函数\"></a>常见的Hash函数</h3><ul>\n<li><strong>直接定址法：</strong> 直接以关键字k或者k加上某个常数（k+c）作为哈希地址。  </li>\n<li><strong>数字分析法：</strong> 提取关键字中取值比较均匀的数字作为哈希地址。  </li>\n<li><strong>除留余数法：</strong> 用关键字k除以某个不大于哈希表长度m的数p，将所得余数作为哈希表地址。  </li>\n<li><strong>分段叠加法：</strong> 按照哈希表地址位数将关键字分成位数相等的几部分，其中最后一部分可以比较短。然后将这几部分相加，舍弃最高进位后的结果就是该关键字的哈希地址。  </li>\n<li><strong>平方取中法：</strong> 如果关键字各个部分分布都不均匀的话，可以先求出它的平方值，然后按照需求取中间的几位作为哈希地址。  </li>\n<li><strong>伪随机数法：</strong> 采用一个伪随机数当作哈希函数。  </li>\n</ul>\n<h3 id=\"常见的解决冲突方案\"><a href=\"#常见的解决冲突方案\" class=\"headerlink\" title=\"常见的解决冲突方案\"></a>常见的解决冲突方案</h3><h4 id=\"开放定址法\"><a href=\"#开放定址法\" class=\"headerlink\" title=\"开放定址法\"></a>开放定址法</h4><p>从发生冲突的那个单元起，按照一定的次序，从哈希表中找到一个空闲的单元。然后把发生冲突的元素存入到该单元的一种方法。开放定址法需要的表长度要大于等于所需要存放的元素。<br>在开放定址法中解决冲突的方法有：线行探查法、平方探查法、双散列函数探查法。<br>开放定址法的缺点在于<strong>删除元素的时候不能真的删除，否则会引起查找错误，只能做一个特殊标记。</strong>只到有下个元素插入才能真正删除该元素。  </p>\n<ul>\n<li><p><strong>线行探查法</strong><br>线行探查法是开放定址法中最简单的冲突处理方法，它从发生冲突的单元起，依次判断下一个单元是否为空，当达到最后一个单元时，再从表首依次判断。直到碰到空闲的单元或者探查完全部单元为止。  </p>\n</li>\n<li><p><strong>平方探查法</strong><br>平方探查法即是发生冲突时，用发生冲突的单元d[i], 加上 1²、 2²等。即d[i] + 1²，d[i] + 2², d[i] + 3²…直到找到空闲单元。<br>在实际操作中，平方探查法不能探查到全部剩余的单元。不过在实际应用中，能探查到一半单元也就可以了。若探查到一半单元仍找不到一个空闲单元，表明此散列表太满，应该重新建立。  </p>\n</li>\n<li><p><strong>双散列函数探查法</strong><br>这种方法使用两个散列函数hl和h2。其中hl和前面的h一样，以关键字为自变量，产生一个0至m—l之间的数作为散列地址；h2也以关键字为自变量，产生一个l至m—1之间的、并和m互素的数(即m不能被该数整除)作为探查序列的地址增量(即步长)，探查序列的步长值是固定值l；对于平方探查法，探查序列的步长值是探查次数i的两倍减l；对于双散列函数探查法，其探查序列的步长值是同一关键字的另一散列函数的值。  </p>\n</li>\n</ul>\n<h4 id=\"链地址法（拉链法）\"><a href=\"#链地址法（拉链法）\" class=\"headerlink\" title=\"链地址法（拉链法）\"></a>链地址法（拉链法）</h4><p>链接地址法的思路是将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行。链表法适用于经常进行插入和删除的情况。</p>\n<p>注：在java中，链接地址法也是HashMap解决哈希冲突的方法之一，jdk1.7完全采用单链表来存储同义词，<strong>jdk1.8则采用了一种混合模式，对于链表长度大于8的，会转换为红黑树存储。</strong>   </p>\n<h4 id=\"再哈希法\"><a href=\"#再哈希法\" class=\"headerlink\" title=\"再哈希法\"></a>再哈希法</h4><p>就是同时构造多个不同的哈希函数：<br>Hi = RHi(key)   i= 1,2,3 … k;<br>当H1 = RH1(key)  发生冲突时，再用H2 = RH2(key) 进行计算，直到冲突不再产生，这种方法不易产生聚集，但是增加了计算时间。   </p>\n<h4 id=\"建立公共溢出区\"><a href=\"#建立公共溢出区\" class=\"headerlink\" title=\"建立公共溢出区\"></a>建立公共溢出区</h4><p>将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。  </p>\n<h3 id=\"与map的区别\"><a href=\"#与map的区别\" class=\"headerlink\" title=\"与map的区别\"></a>与map的区别</h3><h4 id=\"迭代器失效情况\"><a href=\"#迭代器失效情况\" class=\"headerlink\" title=\"迭代器失效情况\"></a>迭代器失效情况</h4><h5 id=\"unordered-map\"><a href=\"#unordered-map\" class=\"headerlink\" title=\"unordered_map:\"></a>unordered_map:</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>所有只读操作 swap std::swap</td>\n<td>决不</td>\n</tr>\n<tr>\n<td>clear  rehash  reserve operator=</td>\n<td>始终</td>\n</tr>\n<tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>仅若重哈希导致</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者</td>\n</tr>\n</tbody></table>\n<h5 id=\"map-通常实现为红黑树-非强制标准\"><a href=\"#map-通常实现为红黑树-非强制标准\" class=\"headerlink\" title=\"map (通常实现为红黑树,非强制标准):\"></a>map (通常实现为红黑树,非强制标准):</h5><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>失效情况</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>insert  emplace  emplace_hint  operator[]</td>\n<td>没有失效情况</td>\n</tr>\n<tr>\n<td>erase</td>\n<td>仅为指向被擦除元素者</td>\n</tr>\n</tbody></table>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><ul>\n<li>map是有序的，unordered_map是无序的  </li>\n<li>两者之间的查找速度不同（log(N)和N）  </li>\n<li>由于hash要控制负载率在0-1之间，所以unordered_map消耗空间更大。  </li>\n<li>迭代器失效情况, map更稳健    </li>\n<li>遍历, unordered_map需要逐桶遍历  可能有大量的无效桶  .  </li>\n<li>unordered_map不能反向遍历  </li>\n<li>O(lgN)和常数级的差别很小。比如10000个元素的map，log_2(N) = 13.28，才不到14次。  </li>\n<li>散列表的时间复杂度仍然是O(N), 性能上map更稳定</li>\n</ul>"},{"title":"MMO属性中英文对照","date":"2018-12-22T09:21:00.000Z","author":"yawei.zhang","_content":"\n[wwowwiki属性说明](http://wowwiki.wikia.com/wiki/Attribute)  \n\n---  \n###  一级属性 | 主要属性  \nStrength STR 力量 \n>  gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力  \n> Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.  \n> 力量不会影响致命一击的机会。力量不会增加阻挡的机会。  \n<!-- more -->\n\nAgility AGI 敏捷 \n> Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.  \n> 增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. \n\nIntellect INT 智力   \n> increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases. \n> 每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.  \n> 杂注 智力也可以提升法力上限, 回蓝速度等 \n\nStamina STA 耐力  \n> Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.  \n> 前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 \n\nSpirit SPI 精神 \n> Increases in-combat mana regeneration for healers. It's the primary attribute for mana regeneration of healers. \n> 增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  \n\n\n---  \n### 二级属性 | 次要属性 | 直接参与战斗计算 \n\nMastery 掌握熟练度  \n\n###### Physical combat  物理对抗   \n\nWeapon damage 武器伤害\n> 战武器增加近战伤害 远程武器增加远程伤害 ... \n\nHit 命中  \n> 增加近战中的命中率  \n\nAttack power AP 攻击强度 攻击力   (Melee 近战)\n\nAttack Speed 攻击速度  \n\nRanged Attack Power RAP 远程攻击力\n\nArmor penetration 护甲穿透  \n> 这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算   \n> 护盾 一般是可消耗的 \n\n###### Enhancements 增益  \n\nCritical strike 暴击 \n\nCrushing blow 破碎打击  \n\nHaste 急速  \n> Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.   \n> 急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。  \n> It also increases these attributes for the player's pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player's damage over time and heal over time effects.   \n> 它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。\n> Spell haste also reduces the length of the global cooldown for spells and some melee abilities.    \n> 法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） \n\n\nExpertise 专精  \n\n###### Spell combat  法术对抗\n\nSpell power SP 法强 \n>  Increases damage and healing of spells  \n\nSpell hit  法术命中  \n\nSpell crit chance 法术暴击 \n\nSpell penetration 法术穿透 \n\nCasting speed 施法速度  \n\n\n###### Defense  防御 \n\nHelped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.  \n通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  \n\nAvoidance 避免攻击  \n\nMiss 命中失败\n> 来源于dodage属性的公式计算结果   \n\n\nDodge 躲避 \n> 躲避传入近战攻击的机会。远程攻击不能被躲避。  \n\nParry 格挡  \n> 它是用近战武器招架近战攻击的机会。远程攻击无法格挡。\n> 魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  \n\nAbsorb 偏转  \n> 类似格挡 属于同一位置\n\nImmune 免疫 \n> 目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  \n\nEvade 回避  \n> 怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  \n\nBlock 阻挡  \n> Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].   \n> 用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]  \n> 阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。\n> 阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  \n\nArmor 护甲 \n> 减少受到的物理伤害。  \n\nBonus Armor 额外护甲  \n\nResistance 抵抗  \n> 减少魔法攻击造成的伤害。  \n\nResilience 韧性(恢复力)  \n\n---   \n### 三级属性 | 特征属性提升  \n\nIndestructible rating 坚不可摧 \n\nMultistrike rating 多次击打 \n> 触发第二次打击的概率   \n \nLeech rating 吸血/水蛭  \n> Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.  \n> 将一定比例的伤害或者治疗转化为自我修复 \n\nVersatility rating  多功能级别  \n> 例如 1%的伤害提升同时降低受到伤害的0.5% \n\n\n---  \n### 杂项  \nSwing 动作  \n> 两次swing的间隔一般接近攻击速度   \n> 魔兽的动作只有前摇  \n\nmelee weapons  近战武器\nranged weapons 远程武器 \n\ndiminishing 收益减免  \n\nHealth 血 \nMana 魔法 \nmove speed  移速\nattack speed 攻速  \nregen 回复(血蓝)\n\nRage 怒气  \nattack 攻击  \n\nlucky 幸运  \ncurse 诅咒\n\nhit 命中  \ndodge 闪避 \n\ncrithit 暴击  \ncrithit resist 抗暴 \n\nresist 抗\n\ndamage 伤害 \n\npct 比例 \n\ndexterity 灵巧 \n\nelite 精英  \n\nMitigation 减轻缓和 \nBonus 增强 \n\ncritical strike 致命一击\n\nBlock 阻止\n\nAvoidance 回避 \nmiss 丢失  \ndodge 闪避  \nparry 格挡 \n\nabsorb 吸收  \nDeflect 扭曲 \nEvade 逃避 \nImmune 免疫\nReflect 反弹\n\nResilience 恢复力/ 伤害减免\n\nDefense 防御  \n\n普通-Normal (大部分近战单位)\n\n穿刺-Pierce (大部分远程攻击单位)\n\n攻城-Siege (攻城单位)\n\n混乱-Chaos (一些野外生物，强力召唤单位)\n\n魔法-Magic (大部分的魔法单位和空中单位)\n> 魔法攻击对虚无形态的单位附加66%额外伤害。 \n\n英雄-Hero\n\n武器类型 \n> 普通-Normal\n> 远程-Missile\n\n火炮-Artillery\n> 一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。\n\n直接-Instant\n> 不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。\n\n溅射-Splash\n> 对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。\n\n特殊武器类型\n> Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。\n> Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。\n> Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。\n> Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。\n\n护甲类型\n\n无甲-Unarmored (大部分魔法单位)\n> 一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。\n轻甲-Light (大部分空中单位)\n\n中甲-Medium (大部分远程攻击单位和农民)\n\n重甲-Heavy (大部分近战单位)\n\n城甲-Fort (建筑)\n","source":"_posts/2018-12-22-attribute.md","raw":"---\ntitle: MMO属性中英文对照  \ndate: 2018-12-22 17:21:00\nauthor: yawei.zhang \n---\n\n[wwowwiki属性说明](http://wowwiki.wikia.com/wiki/Attribute)  \n\n---  \n###  一级属性 | 主要属性  \nStrength STR 力量 \n>  gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力  \n> Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.  \n> 力量不会影响致命一击的机会。力量不会增加阻挡的机会。  \n<!-- more -->\n\nAgility AGI 敏捷 \n> Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.  \n> 增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. \n\nIntellect INT 智力   \n> increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases. \n> 每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.  \n> 杂注 智力也可以提升法力上限, 回蓝速度等 \n\nStamina STA 耐力  \n> Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.  \n> 前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 \n\nSpirit SPI 精神 \n> Increases in-combat mana regeneration for healers. It's the primary attribute for mana regeneration of healers. \n> 增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  \n\n\n---  \n### 二级属性 | 次要属性 | 直接参与战斗计算 \n\nMastery 掌握熟练度  \n\n###### Physical combat  物理对抗   \n\nWeapon damage 武器伤害\n> 战武器增加近战伤害 远程武器增加远程伤害 ... \n\nHit 命中  \n> 增加近战中的命中率  \n\nAttack power AP 攻击强度 攻击力   (Melee 近战)\n\nAttack Speed 攻击速度  \n\nRanged Attack Power RAP 远程攻击力\n\nArmor penetration 护甲穿透  \n> 这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算   \n> 护盾 一般是可消耗的 \n\n###### Enhancements 增益  \n\nCritical strike 暴击 \n\nCrushing blow 破碎打击  \n\nHaste 急速  \n> Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.   \n> 急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。  \n> It also increases these attributes for the player's pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player's damage over time and heal over time effects.   \n> 它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。\n> Spell haste also reduces the length of the global cooldown for spells and some melee abilities.    \n> 法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） \n\n\nExpertise 专精  \n\n###### Spell combat  法术对抗\n\nSpell power SP 法强 \n>  Increases damage and healing of spells  \n\nSpell hit  法术命中  \n\nSpell crit chance 法术暴击 \n\nSpell penetration 法术穿透 \n\nCasting speed 施法速度  \n\n\n###### Defense  防御 \n\nHelped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.  \n通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  \n\nAvoidance 避免攻击  \n\nMiss 命中失败\n> 来源于dodage属性的公式计算结果   \n\n\nDodge 躲避 \n> 躲避传入近战攻击的机会。远程攻击不能被躲避。  \n\nParry 格挡  \n> 它是用近战武器招架近战攻击的机会。远程攻击无法格挡。\n> 魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  \n\nAbsorb 偏转  \n> 类似格挡 属于同一位置\n\nImmune 免疫 \n> 目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  \n\nEvade 回避  \n> 怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  \n\nBlock 阻挡  \n> Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].   \n> 用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]  \n> 阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。\n> 阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  \n\nArmor 护甲 \n> 减少受到的物理伤害。  \n\nBonus Armor 额外护甲  \n\nResistance 抵抗  \n> 减少魔法攻击造成的伤害。  \n\nResilience 韧性(恢复力)  \n\n---   \n### 三级属性 | 特征属性提升  \n\nIndestructible rating 坚不可摧 \n\nMultistrike rating 多次击打 \n> 触发第二次打击的概率   \n \nLeech rating 吸血/水蛭  \n> Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.  \n> 将一定比例的伤害或者治疗转化为自我修复 \n\nVersatility rating  多功能级别  \n> 例如 1%的伤害提升同时降低受到伤害的0.5% \n\n\n---  \n### 杂项  \nSwing 动作  \n> 两次swing的间隔一般接近攻击速度   \n> 魔兽的动作只有前摇  \n\nmelee weapons  近战武器\nranged weapons 远程武器 \n\ndiminishing 收益减免  \n\nHealth 血 \nMana 魔法 \nmove speed  移速\nattack speed 攻速  \nregen 回复(血蓝)\n\nRage 怒气  \nattack 攻击  \n\nlucky 幸运  \ncurse 诅咒\n\nhit 命中  \ndodge 闪避 \n\ncrithit 暴击  \ncrithit resist 抗暴 \n\nresist 抗\n\ndamage 伤害 \n\npct 比例 \n\ndexterity 灵巧 \n\nelite 精英  \n\nMitigation 减轻缓和 \nBonus 增强 \n\ncritical strike 致命一击\n\nBlock 阻止\n\nAvoidance 回避 \nmiss 丢失  \ndodge 闪避  \nparry 格挡 \n\nabsorb 吸收  \nDeflect 扭曲 \nEvade 逃避 \nImmune 免疫\nReflect 反弹\n\nResilience 恢复力/ 伤害减免\n\nDefense 防御  \n\n普通-Normal (大部分近战单位)\n\n穿刺-Pierce (大部分远程攻击单位)\n\n攻城-Siege (攻城单位)\n\n混乱-Chaos (一些野外生物，强力召唤单位)\n\n魔法-Magic (大部分的魔法单位和空中单位)\n> 魔法攻击对虚无形态的单位附加66%额外伤害。 \n\n英雄-Hero\n\n武器类型 \n> 普通-Normal\n> 远程-Missile\n\n火炮-Artillery\n> 一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。\n\n直接-Instant\n> 不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。\n\n溅射-Splash\n> 对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。\n\n特殊武器类型\n> Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。\n> Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。\n> Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。\n> Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。\n\n护甲类型\n\n无甲-Unarmored (大部分魔法单位)\n> 一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。\n轻甲-Light (大部分空中单位)\n\n中甲-Medium (大部分远程攻击单位和农民)\n\n重甲-Heavy (大部分近战单位)\n\n城甲-Fort (建筑)\n","slug":"2018-12-22-attribute","published":1,"updated":"2019-01-17T14:04:23.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeih000c7w5ha6y03nne","content":"<p><a href=\"http://wowwiki.wikia.com/wiki/Attribute\" target=\"_blank\" rel=\"noopener\">wwowwiki属性说明</a>  </p>\n<hr>\n<h3><span id=\"一级属性-主要属性\">一级属性 | 主要属性</span></h3><p>Strength STR 力量 </p>\n<blockquote>\n<p> gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力<br>Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.<br>力量不会影响致命一击的机会。力量不会增加阻挡的机会。  </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>Agility AGI 敏捷 </p>\n<blockquote>\n<p>Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.<br>增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. </p>\n</blockquote>\n<p>Intellect INT 智力   </p>\n<blockquote>\n<p>increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases.<br>每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.<br>杂注 智力也可以提升法力上限, 回蓝速度等 </p>\n</blockquote>\n<p>Stamina STA 耐力  </p>\n<blockquote>\n<p>Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.<br>前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 </p>\n</blockquote>\n<p>Spirit SPI 精神 </p>\n<blockquote>\n<p>Increases in-combat mana regeneration for healers. It’s the primary attribute for mana regeneration of healers.<br>增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  </p>\n</blockquote>\n<hr>\n<h3><span id=\"二级属性-次要属性-直接参与战斗计算\">二级属性 | 次要属性 | 直接参与战斗计算</span></h3><p>Mastery 掌握熟练度  </p>\n<h6><span id=\"physical-combat-物理对抗\">Physical combat  物理对抗</span></h6><p>Weapon damage 武器伤害</p>\n<blockquote>\n<p>战武器增加近战伤害 远程武器增加远程伤害 … </p>\n</blockquote>\n<p>Hit 命中  </p>\n<blockquote>\n<p>增加近战中的命中率  </p>\n</blockquote>\n<p>Attack power AP 攻击强度 攻击力   (Melee 近战)</p>\n<p>Attack Speed 攻击速度  </p>\n<p>Ranged Attack Power RAP 远程攻击力</p>\n<p>Armor penetration 护甲穿透  </p>\n<blockquote>\n<p>这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算<br>护盾 一般是可消耗的 </p>\n</blockquote>\n<h6><span id=\"enhancements-增益\">Enhancements 增益</span></h6><p>Critical strike 暴击 </p>\n<p>Crushing blow 破碎打击  </p>\n<p>Haste 急速  </p>\n<blockquote>\n<p>Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.<br>急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。<br>It also increases these attributes for the player’s pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player’s damage over time and heal over time effects.<br>它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。<br>Spell haste also reduces the length of the global cooldown for spells and some melee abilities.<br>法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） </p>\n</blockquote>\n<p>Expertise 专精  </p>\n<h6><span id=\"spell-combat-法术对抗\">Spell combat  法术对抗</span></h6><p>Spell power SP 法强 </p>\n<blockquote>\n<p> Increases damage and healing of spells  </p>\n</blockquote>\n<p>Spell hit  法术命中  </p>\n<p>Spell crit chance 法术暴击 </p>\n<p>Spell penetration 法术穿透 </p>\n<p>Casting speed 施法速度  </p>\n<h6><span id=\"defense-防御\">Defense  防御</span></h6><p>Helped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.<br>通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  </p>\n<p>Avoidance 避免攻击  </p>\n<p>Miss 命中失败</p>\n<blockquote>\n<p>来源于dodage属性的公式计算结果   </p>\n</blockquote>\n<p>Dodge 躲避 </p>\n<blockquote>\n<p>躲避传入近战攻击的机会。远程攻击不能被躲避。  </p>\n</blockquote>\n<p>Parry 格挡  </p>\n<blockquote>\n<p>它是用近战武器招架近战攻击的机会。远程攻击无法格挡。<br>魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  </p>\n</blockquote>\n<p>Absorb 偏转  </p>\n<blockquote>\n<p>类似格挡 属于同一位置</p>\n</blockquote>\n<p>Immune 免疫 </p>\n<blockquote>\n<p>目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  </p>\n</blockquote>\n<p>Evade 回避  </p>\n<blockquote>\n<p>怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  </p>\n</blockquote>\n<p>Block 阻挡  </p>\n<blockquote>\n<p>Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].<br>用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]<br>阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。<br>阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  </p>\n</blockquote>\n<p>Armor 护甲 </p>\n<blockquote>\n<p>减少受到的物理伤害。  </p>\n</blockquote>\n<p>Bonus Armor 额外护甲  </p>\n<p>Resistance 抵抗  </p>\n<blockquote>\n<p>减少魔法攻击造成的伤害。  </p>\n</blockquote>\n<p>Resilience 韧性(恢复力)  </p>\n<hr>\n<h3><span id=\"三级属性-特征属性提升\">三级属性 | 特征属性提升</span></h3><p>Indestructible rating 坚不可摧 </p>\n<p>Multistrike rating 多次击打 </p>\n<blockquote>\n<p>触发第二次打击的概率   </p>\n</blockquote>\n<p>Leech rating 吸血/水蛭  </p>\n<blockquote>\n<p>Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.<br>将一定比例的伤害或者治疗转化为自我修复 </p>\n</blockquote>\n<p>Versatility rating  多功能级别  </p>\n<blockquote>\n<p>例如 1%的伤害提升同时降低受到伤害的0.5% </p>\n</blockquote>\n<hr>\n<h3><span id=\"杂项\">杂项</span></h3><p>Swing 动作  </p>\n<blockquote>\n<p>两次swing的间隔一般接近攻击速度<br>魔兽的动作只有前摇  </p>\n</blockquote>\n<p>melee weapons  近战武器<br>ranged weapons 远程武器 </p>\n<p>diminishing 收益减免  </p>\n<p>Health 血<br>Mana 魔法<br>move speed  移速<br>attack speed 攻速<br>regen 回复(血蓝)</p>\n<p>Rage 怒气<br>attack 攻击  </p>\n<p>lucky 幸运<br>curse 诅咒</p>\n<p>hit 命中<br>dodge 闪避 </p>\n<p>crithit 暴击<br>crithit resist 抗暴 </p>\n<p>resist 抗</p>\n<p>damage 伤害 </p>\n<p>pct 比例 </p>\n<p>dexterity 灵巧 </p>\n<p>elite 精英  </p>\n<p>Mitigation 减轻缓和<br>Bonus 增强 </p>\n<p>critical strike 致命一击</p>\n<p>Block 阻止</p>\n<p>Avoidance 回避<br>miss 丢失<br>dodge 闪避<br>parry 格挡 </p>\n<p>absorb 吸收<br>Deflect 扭曲<br>Evade 逃避<br>Immune 免疫<br>Reflect 反弹</p>\n<p>Resilience 恢复力/ 伤害减免</p>\n<p>Defense 防御  </p>\n<p>普通-Normal (大部分近战单位)</p>\n<p>穿刺-Pierce (大部分远程攻击单位)</p>\n<p>攻城-Siege (攻城单位)</p>\n<p>混乱-Chaos (一些野外生物，强力召唤单位)</p>\n<p>魔法-Magic (大部分的魔法单位和空中单位)</p>\n<blockquote>\n<p>魔法攻击对虚无形态的单位附加66%额外伤害。 </p>\n</blockquote>\n<p>英雄-Hero</p>\n<p>武器类型 </p>\n<blockquote>\n<p>普通-Normal<br>远程-Missile</p>\n</blockquote>\n<p>火炮-Artillery</p>\n<blockquote>\n<p>一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。</p>\n</blockquote>\n<p>直接-Instant</p>\n<blockquote>\n<p>不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。</p>\n</blockquote>\n<p>溅射-Splash</p>\n<blockquote>\n<p>对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。</p>\n</blockquote>\n<p>特殊武器类型</p>\n<blockquote>\n<p>Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。<br>Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。<br>Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。<br>Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。</p>\n</blockquote>\n<p>护甲类型</p>\n<p>无甲-Unarmored (大部分魔法单位)</p>\n<blockquote>\n<p>一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。<br>轻甲-Light (大部分空中单位)</p>\n</blockquote>\n<p>中甲-Medium (大部分远程攻击单位和农民)</p>\n<p>重甲-Heavy (大部分近战单位)</p>\n<p>城甲-Fort (建筑)</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://wowwiki.wikia.com/wiki/Attribute\" target=\"_blank\" rel=\"noopener\">wwowwiki属性说明</a>  </p>\n<hr>\n<h3 id=\"一级属性-主要属性\"><a href=\"#一级属性-主要属性\" class=\"headerlink\" title=\"一级属性 | 主要属性\"></a>一级属性 | 主要属性</h3><p>Strength STR 力量 </p>\n<blockquote>\n<p> gain 1 melee attack power per point of strength .  每点力量增加1点攻击 力<br>Strength does not affect the chance to land a critical strike. Strength does not improve the chance to block.<br>力量不会影响致命一击的机会。力量不会增加阻挡的机会。  </p>\n</blockquote>","more":"<p>Agility AGI 敏捷 </p>\n<blockquote>\n<p>Increases attack power with ranged weapons (not including wands) or melee weapons for certain classes.<br>增加使用远程武器(不包括魔杖)或近战武器的攻击强度 对某些类型而言. </p>\n</blockquote>\n<p>Intellect INT 智力   </p>\n<blockquote>\n<p>increases spell power by 1 per point at level 80 or above. Intellect is now the main source of spell power for most cases.<br>每点智力增加1点法术强度在80级以及之后. 智力现在是法强的主要来源, 在大多数情况下.<br>杂注 智力也可以提升法力上限, 回蓝速度等 </p>\n</blockquote>\n<p>Stamina STA 耐力  </p>\n<blockquote>\n<p>Stamina provides 1 health per stamina for the first 20 points of stamina, and 60 health per point of stamina thereafter.<br>前20点耐力提供1点生命每耐力，之后为60点生命值每耐力。 </p>\n</blockquote>\n<p>Spirit SPI 精神 </p>\n<blockquote>\n<p>Increases in-combat mana regeneration for healers. It’s the primary attribute for mana regeneration of healers.<br>增加healers在战斗中的魔法恢复.  他是healers回复法力(魔法)的主要属性  </p>\n</blockquote>\n<hr>\n<h3 id=\"二级属性-次要属性-直接参与战斗计算\"><a href=\"#二级属性-次要属性-直接参与战斗计算\" class=\"headerlink\" title=\"二级属性 | 次要属性 | 直接参与战斗计算\"></a>二级属性 | 次要属性 | 直接参与战斗计算</h3><p>Mastery 掌握熟练度  </p>\n<h6 id=\"Physical-combat-物理对抗\"><a href=\"#Physical-combat-物理对抗\" class=\"headerlink\" title=\"Physical combat  物理对抗\"></a>Physical combat  物理对抗</h6><p>Weapon damage 武器伤害</p>\n<blockquote>\n<p>战武器增加近战伤害 远程武器增加远程伤害 … </p>\n</blockquote>\n<p>Hit 命中  </p>\n<blockquote>\n<p>增加近战中的命中率  </p>\n</blockquote>\n<p>Attack power AP 攻击强度 攻击力   (Melee 近战)</p>\n<p>Attack Speed 攻击速度  </p>\n<p>Ranged Attack Power RAP 远程攻击力</p>\n<p>Armor penetration 护甲穿透  </p>\n<blockquote>\n<p>这个护甲对应魔兽里的 无甲 轻甲,重甲,  穿刺, 攻城类的对抗计算, 不存在护甲消耗概念, 类似攻击力/防御力计算<br>护盾 一般是可消耗的 </p>\n</blockquote>\n<h6 id=\"Enhancements-增益\"><a href=\"#Enhancements-增益\" class=\"headerlink\" title=\"Enhancements 增益\"></a>Enhancements 增益</h6><p>Critical strike 暴击 </p>\n<p>Crushing blow 破碎打击  </p>\n<p>Haste 急速  </p>\n<blockquote>\n<p>Haste is a secondary attribute that increases attack speed, ranged attack speed and casting speed.<br>急速是次要属性，可提高攻击速度，远程攻击速度和施法速度。<br>It also increases these attributes for the player’s pets, increases the regeneration rate of some resources, and increases the tick rate of most of the player’s damage over time and heal over time effects.<br>它还增加了玩家宠物的这些属性，增加了一些资源的再生率，增加随着时间的推移的效果 例如大部分DOT HOT等。<br>Spell haste also reduces the length of the global cooldown for spells and some melee abilities.<br>法术急速也减少了法术和一些近战技能的全局冷却时间。对于大多数类，基本GCD是1.5秒，而Haste可以将它减少到最小0.75秒（需要100％急速） </p>\n</blockquote>\n<p>Expertise 专精  </p>\n<h6 id=\"Spell-combat-法术对抗\"><a href=\"#Spell-combat-法术对抗\" class=\"headerlink\" title=\"Spell combat  法术对抗\"></a>Spell combat  法术对抗</h6><p>Spell power SP 法强 </p>\n<blockquote>\n<p> Increases damage and healing of spells  </p>\n</blockquote>\n<p>Spell hit  法术命中  </p>\n<p>Spell crit chance 法术暴击 </p>\n<p>Spell penetration 法术穿透 </p>\n<p>Casting speed 施法速度  </p>\n<h6 id=\"Defense-防御\"><a href=\"#Defense-防御\" class=\"headerlink\" title=\"Defense  防御\"></a>Defense  防御</h6><p>Helped prevent physical damage by reducing the chance to be hit or critically hit. Additionally, it also increased block, dodge and parry.<br>通过减少被击中或受到重击的机会来帮助防止物理伤害。此外，它还增加了阻挡，闪避和招架。  </p>\n<p>Avoidance 避免攻击  </p>\n<p>Miss 命中失败</p>\n<blockquote>\n<p>来源于dodage属性的公式计算结果   </p>\n</blockquote>\n<p>Dodge 躲避 </p>\n<blockquote>\n<p>躲避传入近战攻击的机会。远程攻击不能被躲避。  </p>\n</blockquote>\n<p>Parry 格挡  </p>\n<blockquote>\n<p>它是用近战武器招架近战攻击的机会。远程攻击无法格挡。<br>魔兽中的格挡更类似一个被动buff,  防御者产生格挡后会提升(甚至重置)一次攻击间隔(攻击速度而言). 从更高的视角来看 这是一个绑定到英雄成长的被动buff.  </p>\n</blockquote>\n<p>Absorb 偏转  </p>\n<blockquote>\n<p>类似格挡 属于同一位置</p>\n</blockquote>\n<p>Immune 免疫 </p>\n<blockquote>\n<p>目标存在一个buff或者状态,标签导致对该目标的法术/效果被豁免.  </p>\n</blockquote>\n<p>Evade 回避  </p>\n<blockquote>\n<p>怪物在返回原始位置时免疫所有攻击和控制, 并且恢复健康状态  .  </p>\n</blockquote>\n<p>Block 阻挡  </p>\n<blockquote>\n<p>Chance to block melee and ranged attacks with a shield. Warrior and paladin tanks receive additional block chance through their respective mastery and abilities such as [Shield Block].<br>用盾牌阻挡近战和远程攻击的机会。战士和圣骑士坦克通过他们各自的掌握和能力获得额外的阻挡机会，例如[盾牌挡]<br>阻止等级 - 提高阻止攻击的几率。删除了大灾变，徽标，小 大灾变。<br>阻挡值 - 通常仅在代表吸收的固定损伤量的防护罩上的值。删除了大灾变，徽标，小 大灾变。  </p>\n</blockquote>\n<p>Armor 护甲 </p>\n<blockquote>\n<p>减少受到的物理伤害。  </p>\n</blockquote>\n<p>Bonus Armor 额外护甲  </p>\n<p>Resistance 抵抗  </p>\n<blockquote>\n<p>减少魔法攻击造成的伤害。  </p>\n</blockquote>\n<p>Resilience 韧性(恢复力)  </p>\n<hr>\n<h3 id=\"三级属性-特征属性提升\"><a href=\"#三级属性-特征属性提升\" class=\"headerlink\" title=\"三级属性 | 特征属性提升\"></a>三级属性 | 特征属性提升</h3><p>Indestructible rating 坚不可摧 </p>\n<p>Multistrike rating 多次击打 </p>\n<blockquote>\n<p>触发第二次打击的概率   </p>\n</blockquote>\n<p>Leech rating 吸血/水蛭  </p>\n<blockquote>\n<p>Leech is a new minor stat that converts a percentage of damage and/or healing done to self-healing.<br>将一定比例的伤害或者治疗转化为自我修复 </p>\n</blockquote>\n<p>Versatility rating  多功能级别  </p>\n<blockquote>\n<p>例如 1%的伤害提升同时降低受到伤害的0.5% </p>\n</blockquote>\n<hr>\n<h3 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h3><p>Swing 动作  </p>\n<blockquote>\n<p>两次swing的间隔一般接近攻击速度<br>魔兽的动作只有前摇  </p>\n</blockquote>\n<p>melee weapons  近战武器<br>ranged weapons 远程武器 </p>\n<p>diminishing 收益减免  </p>\n<p>Health 血<br>Mana 魔法<br>move speed  移速<br>attack speed 攻速<br>regen 回复(血蓝)</p>\n<p>Rage 怒气<br>attack 攻击  </p>\n<p>lucky 幸运<br>curse 诅咒</p>\n<p>hit 命中<br>dodge 闪避 </p>\n<p>crithit 暴击<br>crithit resist 抗暴 </p>\n<p>resist 抗</p>\n<p>damage 伤害 </p>\n<p>pct 比例 </p>\n<p>dexterity 灵巧 </p>\n<p>elite 精英  </p>\n<p>Mitigation 减轻缓和<br>Bonus 增强 </p>\n<p>critical strike 致命一击</p>\n<p>Block 阻止</p>\n<p>Avoidance 回避<br>miss 丢失<br>dodge 闪避<br>parry 格挡 </p>\n<p>absorb 吸收<br>Deflect 扭曲<br>Evade 逃避<br>Immune 免疫<br>Reflect 反弹</p>\n<p>Resilience 恢复力/ 伤害减免</p>\n<p>Defense 防御  </p>\n<p>普通-Normal (大部分近战单位)</p>\n<p>穿刺-Pierce (大部分远程攻击单位)</p>\n<p>攻城-Siege (攻城单位)</p>\n<p>混乱-Chaos (一些野外生物，强力召唤单位)</p>\n<p>魔法-Magic (大部分的魔法单位和空中单位)</p>\n<blockquote>\n<p>魔法攻击对虚无形态的单位附加66%额外伤害。 </p>\n</blockquote>\n<p>英雄-Hero</p>\n<p>武器类型 </p>\n<blockquote>\n<p>普通-Normal<br>远程-Missile</p>\n</blockquote>\n<p>火炮-Artillery</p>\n<blockquote>\n<p>一般是攻城型单位的武器类型，特点是在杀死单位时有暴尸的效果。</p>\n</blockquote>\n<p>直接-Instant</p>\n<blockquote>\n<p>不同于一般的远程武器，它的特点是速度快，一般远程武器从发出“子弹”到“子弹”打到敌方单位都有可见的飞行路线，如女巫的攻击；而直接类型的武器是没有的，火枪手和蒸汽坦克都是很好的例子。</p>\n</blockquote>\n<p>溅射-Splash</p>\n<blockquote>\n<p>对攻击目标附近的单位造成一定的伤害，有全伤害范围、1/2伤害范围、1/4伤害范围的说明。</p>\n</blockquote>\n<p>特殊武器类型</p>\n<blockquote>\n<p>Mbounce:Missile+bounce远程反弹 女猎手特有的攻击方式，女猎手虽然是普通攻击，但是是远程的。<br>Msplash:Missile+splash 远程溅射 很多高等级远程单位的攻击方式。<br>Aline:Artillery+line 火炮直线 投刃车特有攻击方式。注意的是，这是投刃车研究好穿刺剑刃后的武器类型，在那之前，他只是火炮类型，只能攻击一个单位。直线攻击的特点是当攻击一个目标时，目标附近有攻击者的敌对单位，就对这个单位造成同等的伤害。有点类似于反弹，但是反弹对第二个目标的伤害是有减成的。<br>Mline:Missile+line 远程直线 狮鹫骑士特有攻击方式。注意的是，这是狮鹫骑士研究好风暴战锤后的武器类型，在那之前，他只是远程类型，只能攻击一个单位。</p>\n</blockquote>\n<p>护甲类型</p>\n<p>无甲-Unarmored (大部分魔法单位)</p>\n<blockquote>\n<p>一些无甲单位是出于平衡性的设定，比如女猎手、石像鬼、角鹰兽、风暴之鸦形态下的猛禽德鲁伊。<br>轻甲-Light (大部分空中单位)</p>\n</blockquote>\n<p>中甲-Medium (大部分远程攻击单位和农民)</p>\n<p>重甲-Heavy (大部分近战单位)</p>\n<p>城甲-Fort (建筑)</p>"},{"title":"FPS游戏同步术语","date":"2019-01-07T09:21:00.000Z","author":"yawei.zhang","_content":"\n在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  \n\n网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。  \n  <!-- more -->  \n  \n1）**Latency**：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。\n\n80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。\n\n2）**Hit Box**：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。\n\n3）**Tick Rate**：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。\n\n比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms\n\n4）**Client Update Rate**：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。\n\n5）**Framerate**：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS\n\n6）**Refresh Rate**：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。\n\n7）**Interpolation**：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。\n\n8）**Extrapolation**：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。\n\n9）**Lag Compensation**：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：\n\nClientDelay = (1/2 * Latency) + InterpolationDelay\n\n延迟补偿的实际操作步骤：\n\n1.  Player A看到Player B向一个角落跑去\n2.  Player A开枪，其客户端把这个操作发送给服务器\n3.  假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作\n4.  服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。\n5.  服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：  \n    (1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)\n6.  在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。\n\n需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。\n\n按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。\n\n若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。\n\n如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。  \n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。  \n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。\n\n在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。\n\n如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：\n\n1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。\n\n2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。\n\n3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。\n\n4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。\n\n5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。\n\n6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。\n\n7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。\n\n8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。\n","source":"_posts/2019-01-08-fps-synchronization.md","raw":"---\ntitle: FPS游戏同步术语\ndate: 2019-01-07 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  \n\n网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。  \n  <!-- more -->  \n  \n1）**Latency**：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。\n\n80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。\n\n2）**Hit Box**：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。\n\n3）**Tick Rate**：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。\n\n比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms\n\n4）**Client Update Rate**：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。\n\n5）**Framerate**：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS\n\n6）**Refresh Rate**：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。\n\n7）**Interpolation**：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。\n\n8）**Extrapolation**：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。\n\n9）**Lag Compensation**：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为\"Client Delay\"）可用下式给出：\n\nClientDelay = (1/2 * Latency) + InterpolationDelay\n\n延迟补偿的实际操作步骤：\n\n1.  Player A看到Player B向一个角落跑去\n2.  Player A开枪，其客户端把这个操作发送给服务器\n3.  假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作\n4.  服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A's interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。\n5.  服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：  \n    (1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)\n6.  在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。\n\n需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。\n\n按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。\n\n若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。\n\n如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。  \n若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。  \n服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。\n\n在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。\n\n如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：\n\n1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。\n\n2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。\n\n3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。\n\n4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。\n\n5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。\n\n6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。\n\n7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。\n\n8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。\n","slug":"2019-01-08-fps-synchronization","published":1,"updated":"2019-01-17T14:04:29.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeim000e7w5h2fm213vp","content":"<p>在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  </p>\n<p>网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。<br>  <a id=\"more\"></a>  </p>\n<p>1）<strong>Latency</strong>：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。</p>\n<p>80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。</p>\n<p>2）<strong>Hit Box</strong>：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。</p>\n<p>3）<strong>Tick Rate</strong>：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。</p>\n<p>比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms</p>\n<p>4）<strong>Client Update Rate</strong>：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。</p>\n<p>5）<strong>Framerate</strong>：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS</p>\n<p>6）<strong>Refresh Rate</strong>：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。</p>\n<p>7）<strong>Interpolation</strong>：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。</p>\n<p>8）<strong>Extrapolation</strong>：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。</p>\n<p>9）<strong>Lag Compensation</strong>：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为”Client Delay”）可用下式给出：</p>\n<p>ClientDelay = (1/2 * Latency) + InterpolationDelay</p>\n<p>延迟补偿的实际操作步骤：</p>\n<ol>\n<li>Player A看到Player B向一个角落跑去</li>\n<li>Player A开枪，其客户端把这个操作发送给服务器</li>\n<li>假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作</li>\n<li>服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A’s interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。</li>\n<li>服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：<br>(1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)</li>\n<li>在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。</li>\n</ol>\n<p>需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。</p>\n<p>按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。</p>\n<p>若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。</p>\n<p>如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。<br>若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。<br>服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。</p>\n<p>在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。</p>\n<p>如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：</p>\n<p>1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。</p>\n<p>2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。</p>\n<p>3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。</p>\n<p>4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。</p>\n<p>5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。</p>\n<p>6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。</p>\n<p>7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。</p>\n<p>8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。</p>\n","site":{"data":{}},"excerpt":"<p>在一个采用C/S架构的游戏中，客户端和服务端的游戏状态有差异是不可避免的。客户端和服务端各自都维护了一份游戏状态。这两份游戏状态依赖网络包通信保持同步。但由于各客户端到服务端的时延具有不确定性，游戏状态同步变得非常困难。通常服务端在游戏拓扑中承载的是状态仲裁者的角色，客户端玩家看到的“经验证”的有效游戏状态总是延后于服务端的游戏状态。  </p>\n<p>网络时延是必然存在的，所以游戏状态的不同步也是必然存在的。但我们可以通过技术手段尽量减轻不同步问题对用户体验带来的影响。<br>","more":"</p>\n<p>1）<strong>Latency</strong>：Latency指的是数据包从客户端发送到服务端再收到服务端回包所用的时间，通常被称为RTT。虽然单程的数据包传输时间并不总是等于RTT/2，但是简单起见我们可以认为两者是相等的。下文说到Latency都是说一个RTT时间，单程Latency则是指RTT/2。</p>\n<p>80年代有个工具叫ping使用ICMP echo测试延迟，所以人们常把RTT和ping联系起来。ping这个指令现在还在用。</p>\n<p>2）<strong>Hit Box</strong>：角色的3D模型代表了哪些区域是参与到“命中”计算的。你看不到hit box，你只能看到模型。hit box可能比模型大，也可能比模型小，也有可能很不精确，这都取决于具体的实现。我们知道，tick rate会影响命中判定，但是hit box不精确可能对玩家在是否命中方面的感受影响更大。</p>\n<p>3）<strong>Tick Rate</strong>：Tick Rate指游戏服务端更新游戏状态的频率。单位是hertz。如果服务器的Tick Rate是64，这就意味着服务端每秒钟最多向客户端发送64次数据包。这些同步数据包包括了游戏状态更新，比如player和场景对象位置等。一次tick的长度就是其持续时间，单位为ms。</p>\n<p>比如，64 rate时tick长度是15.6ms，20 rate时是50ms，10 rate时是100ms</p>\n<p>4）<strong>Client Update Rate</strong>：这是客户端接收服务端更新的频率。比如说，如果client update rate是20，而服务器tick rate是64，那么从体验上来说，这个客户端实际是在和一个tick rate为20的服务器联机。通常这个是配在客户端本地的，也有可能是写死的。</p>\n<p>5）<strong>Framerate</strong>：这个是指客户端每秒最多可以渲染多少帧，通常被称为FPS</p>\n<p>6）<strong>Refresh Rate</strong>：显示设备每秒钟刷新多少次。单位为hertz。如果framerate是30，一个显示频率为60的设备将把每个画面显示两次。反过来，如果framerate是120，但是显示频率为60，那么显示设备只能显示每秒60帧。显示设备的频率比framerate大，提升framerate才有意义。大多数显示设备频率是60或120。</p>\n<p>7）<strong>Interpolation</strong>：这是一种平滑场景对象移动的技术。实际上内插值所做的就是在场景对象的两个位置之间做插值，以让运动过程平滑。插值延迟通常是2tick，也不尽然。举个内插值的例子，如果一个玩家沿着一条直线移动，在tick1的时候位置在0.5m，在tick2的时候位置在1m，内插值的作用就是让客户端看起来是平滑的从0.5m移到1m。但是服务器实际看到的是离散的位置，要么在0.5m或1m，不可能在中间的某个位置。如果没有插值，游戏的抖动将非常明显，特别是在从服务端更新了一个运动对象的位置后。内插值只在客户端做，实际上减慢了将整个游戏状态绘制到屏幕上的速率。</p>\n<p>8）<strong>Extrapolation</strong>：这是客户端补偿延迟的另一种技术。客户端将场景对象的位置做外插值，这样就不会导致绘制的时候没有更新到新数据。通常优先使用内插值，特别是FPS游戏，因为玩家的移动是不可预期的，外插值的结果可能通常是错的。</p>\n<p>9）<strong>Lag Compensation</strong>：延迟补偿是服务端减小客户端延迟影响的一种方法。如果没有延迟补偿，或者延迟补偿做的不好，由于客户端看到的是经过延迟后的游戏状态，玩家要命中目标就必须使用一些预判技巧。实际上，延迟补偿所做的，就是当服务器从客户端收到操作（比如开枪）后，将操作发生时间往回调一个单向时延的时间。服务端游戏状态和客户端游戏状态的时间差异（也被称为”Client Delay”）可用下式给出：</p>\n<p>ClientDelay = (1/2 * Latency) + InterpolationDelay</p>\n<p>延迟补偿的实际操作步骤：</p>\n<ol>\n<li>Player A看到Player B向一个角落跑去</li>\n<li>Player A开枪，其客户端把这个操作发送给服务器</li>\n<li>假定A的延迟的一半是Xms，那么Xms后服务器将收到Player A的操作</li>\n<li>服务器从记录的历史信息中找到A开枪时B所在的位置。一般情况下，服务器应该往回看 (Xms + Player A’s interpolation delay) 来回滚到A开枪时的游戏状态。但是这个时间是可以调的，取决于开发者希望延迟补偿算法如何工作。</li>\n<li>服务器判定这次的开枪是否命中。如果子弹的轨迹和目标模型的hit box相交，就认为是命中了。在这个例子中，我们假定命中了。在Player B看来，他觉得自己已经躲到墙后面了。但是Player B看到的游戏状态所处的时间和Server认定的开枪时间是有差异的，可以表示为：<br>(1/2 * PlayerALatency + 1/2 * PlayerBLatency + TimeSinceLastTick)</li>\n<li>在下一次tick中，服务器使用计算结果更新所有客户端：Player A看到自己命中了目标，Player B看到自己掉血或挂掉了。</li>\n</ol>\n<p>需要注意的是，如果两个玩家对射，而且都命中了，游戏如何处理就取决于实现了。比如说在CS:GO中，如果先收到的射击操作命中了目标玩家，那么后续收到的那个玩家的射击就会被丢弃。这样就避免了两个玩家的射击请求在同一帧，然后都命中，都挂掉。在Overwatch中，这种情况是可能的。这里是有取舍的。</p>\n<p>按照CS:GO的做法，网络较好的玩家是有很大优势的。经常会有“我在挂掉前打中了目标，但是他没死”的情况。你甚至在挂掉前能听到你的枪响和命中的声音，却没对目标造成伤害。</p>\n<p>若是在Overwatch中，玩家反应时间的差异对结果影响较小。比如说，如果服务器tick rate是64，若Player A比Player B早15ms射击，那么双方的射击都是在同一个15.6ms tick之内，所以最终结果是双方都命中，都死掉了。</p>\n<p>如果延迟补偿过度，就会出现“我朝目标早前的位置开枪，却还是命中他了”。<br>若延迟补偿不足，则会出现“我必须对目标的移动做预判，这样才能命中”。<br>服务器做延迟补偿所记录的历史数据应该是有限的，不然高延迟的玩家会明显拖累其他玩家的游戏体验。</p>\n<p>在Overwatch中，服务端延迟补偿也被称为Favoring the shooter，也就是说，如果你在自己屏幕上瞄准了目标并射击，那么很大概率将命中目标。也有例外情况。比如，若你射击目标的那一刻，目标跳跃躲开了，这时服务器认为目标做了一个完美的闪避，可能会被判断未命中。所以计算命中时并不总是使用射击那一刻的信息。这是为了玩家体验打的补丁。</p>\n<p>如果你是要设计一套同步方案，根据设计目的不同可能有不同的方案。公平性、即时反馈、网络流量等都可能是重要的设计目标。可以参考以下因素：</p>\n<p>1）网络链接。延迟越低越好。选择一个延迟最低的服务器开始游戏是很重要的。网络上的拥塞程度也会导致网络延迟。延迟补偿可以帮助解决“射击和命中”的问题，但是如果你的网络不好，更多的情况下，你可能会体验到“已经跑到墙后面还是被打中”或者“我先射击但还是死掉了”的情况。</p>\n<p>2）如果你的客户端frame rate很低（只要低于显示设备刷新频率或跟他差不多），会导致感受延迟变大，通常比tick rate带来的问题更严重。</p>\n<p>3）尽量使用内插值。大多数游戏使用的内插值间隔是tick间隔的两倍，主要考虑到如果一个数据包丢掉了，玩家的移动中断也不会在屏幕上表现出来。如果网络状况很好，没有丢包，把插值间隔设置为tick间隔是没有问题的。但是如果有丢包，就会导致抖动。比如在CS:GO中，这对体验的影响比把服务端tick rate从20调高到64带来的体验影响更明显。如果这个值设的太低，会导致极大的抖动。</p>\n<p>4）如果有可能，你应该增加游戏的client update rate来优化体验。其代价是CPU和带宽消耗。对于客户端来说，除非你家的网络带宽非常低，增加CPU和带宽消耗是可以接受的。</p>\n<p>5）如果你的显示设备刷新率是60hz，那么很有可能你根本感受不到tick rate在64和128会有什么差异，因为由于tick rate差异导致的改变根本无法通过你的显示设备体现出来。</p>\n<p>6）通常来说，服务端tick rate越高，用户交互就越流畅，也更准确。当然网络同步量也越大。如果我们对比tick rate64（CS:GO比赛）和20（Overwatch Beta服务器宣传的帧率），两者因为帧率差异导致的最大可感受延迟是35ms.平均情况下是17.5ms.大多数人是察觉不到其中的差异的，但是有经验的玩家通常是能感受到的。高的tick rate并不会影响到延迟补偿的工作。所以有时候，你还是会有明明自己已经跑到墙后面了可是还是死了的体验。把tick rate提高到64并不能解决这个问题。</p>\n<p>7）Responsiveness: 当你按下按键的时候，需要能立刻看到反馈。这对动作游戏和FPS游戏都是非常重要的。有多个因素会影响即时反馈。首先，客户端发送玩家的输入应该是即时的。其次，客户端不等服务端回应就根据玩家的输入做状态预测和插值。在Overwatch中，客户端会维护一个历史纪录用于验证客户端预测的准确性。最后，服务端tick rate也会影响反馈。投射物的模拟也应和玩家做类似处理，并加上飞行时间，让玩家对反馈产生的时间有预期。</p>\n<p>8）处理丢包。在Overwatch中，丢包是通过在客户端加速“命令帧”和在服务端设置命令缓存来解决的. 首先，系统采用确定性模拟技术，将时间量化为“命令帧”。每个命令帧都固定为16毫秒（比赛时是7毫秒）。服务端和客户端模拟都运行在保持同步的时钟和这个量化值之上，保持固定的更新频率。当客户端意识到丢包时，会比约定频率更快的模拟，而服务端则将命令缓冲区增大。客户端发送指令的频率加快，而服务端缓冲变大以容忍更多的丢包。客户端的指令数据包包含了未经服务端确认过的所有指令，这样服务端就有机会在实际模拟并发送确认包前更新缓冲区。</p>"},{"title":"AT&T 和 INTEL 汇编格式区别","date":"2019-01-11T09:21:00.000Z","author":"yawei.zhang","_content":"\n### 一、AT&T 格式Linux 汇编语法格式\n\n\n* 在 AT&T 汇编格式中，寄存器名要加上 '%' 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|   pushl %eax        |           push eax          |\n\n  <!-- more -->  \n\n* 在 AT&T 汇编格式中，用 '$' 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|       pushl $1       |           push 1            |\n\n\n* AT&T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&T 汇编格式中，目标操作数在源操作数的右边。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------        |        -----------          |\n|      addl $1, %eax   |         add eax, 1          |\n\n\n\n* 在 AT&T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 \"byte ptr\" 和 \"word ptr\" 等前缀来表示的。例如：\n\n|       AT&T格式       |         Intel格式                   |\n|       -------        |        -----------                  |\n|      movb val, %al   |         mov al, byte ptr val        |\n\n\n* 在 AT&T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*'作为前缀，而在 Intel 格式中则不需要。  \n* 远程转移指令和远程子调用指令的操作码，在 AT&T 汇编格式中为 \"ljump\" 和 \"lcall\"，而在 Intel 汇编格式中则为 \"jmp far\" 和 \"call far\"，即：  \n\n|       AT&T格式                    |         Intel格式                   |\n|       -------                     |        -----------                  |\n|      ljump $section, $offset      |        jmp far section:offset       |\n|     lcall $section, $offset       |        call far section:offset      |\n\n\n* 与之相应的远程返回指令则为：\n\n|       AT&T格式               |         Intel格式                 |\n|       -------                 |        -----------             |\n|      lret $stack_adjust      |        ret far stack_adjust      |\n\n\n* 内存操作数的寻址方式  \n\n|       AT&T格式                             |         Intel格式                                 |\n|       -------                              |        -----------                               |\n|      section:disp(base, index, scale)      |        section:[base + index*scale + disp]      |\n\n\n\n* 由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：\n```\ndisp + base + index * scale\n```\n\n* 下面是一些内存操作数的例子：  \n\n|       AT&T格式                             |          Intel格式                                 |\n|       -------                             |          -----------                               |\n|      movl -4(%ebp), %eax                  |          mov eax, [ebp - 4]                       |\n|      movl array(, %eax, 4), %eax          |          mov eax, [eax*4 + array]                 |\n|      movw array(%ebx, %eax, 4), %cx       |          mov cx, [ebx + 4*eax + array]              |\n|      movb $4, %fs:(%eax)                  |          mov fs:eax, 4                             |\n\n\n\n\n### 二、Hello World!\n\n既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 \"Hello World!\"，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  \n\n在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  \n\nLinux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&T 汇编语言格式：   \n\n###### 例1. AT&T 格式\n\n* #hello.s\n```\n.data                    # 数据段声明\n\n        msg : .string \"Hello, world!\\\\n\" # 要输出的字符串\n\n        len = . - msg                   # 字串长度\n\n.text                    # 代码段声明\n\n.global _start           # 指定入口函数\n\n_start:                  # 在屏幕上显示一个字符串\n\n        movl $len, %edx  # 参数三：字符串长度\n\n        movl $msg, %ecx  # 参数二：要显示的字符串\n\n        movl $1, %ebx    # 参数一：文件描述符(stdout)\n\n        movl $4, %eax    # 系统调用号(sys_write)\n\n        int  $0x80       # 调用内核功能\n\n                         # 退出程序\n\n        movl $0,%ebx     # 参数一：退出代码\n\n        movl $1,%eax     # 系统调用号(sys_exit)\n\n        int  $0x80       # 调用内核功能\n```\n\n初次接触到 AT&T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：\n\n###### 例2. Intel 格式\n\n; hello.asm\n```\nsection .data            ; 数据段声明\n\n        msg db \"Hello, world!\", 0xA     ; 要输出的字符串\n\n        len equ $ - msg                 ; 字串长度\n\nsection .text            ; 代码段声明\n\nglobal _start            ; 指定入口函数\n\n_start:                  ; 在屏幕上显示一个字符串\n\n        mov edx, len     ; 参数三：字符串长度\n\n        mov ecx, msg     ; 参数二：要显示的字符串\n\n        mov ebx, 1       ; 参数一：文件描述符(stdout)\n\n        mov eax, 4       ; 系统调用号(sys_write)\n\n        int 0x80         ; 调用内核功能\n\n                         ; 退出程序\n\n        mov ebx, 0       ; 参数一：退出代码\n\n        mov eax, 1       ; 系统调用号(sys_exit)\n\n        int 0x80         ; 调用内核功能\n```\n\n上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。\n\n### 四、系统调用\n\n即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。\n\n在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。\n\n和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。\n\n所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：\n```\nssize_t write(int fd, const void *buf, size_t count);\n```\n该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。\n\n或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：\n```\nvoid * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c\n```\n当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。\n\n由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。\n\n### 五、命令行参数\n\n在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：\n\n例3. 处理命令行参数\n\n##### args.S\n```\n.text\n\n.globl _start\n\n_start:\n\npopl %ecx # argc\n\nvnext:\n\npopl %ecx # argv\n\ntest %ecx, %ecx # 空指针表明结束\n\njz exit\n\nmovl %ecx, %ebx\n\nxorl %edx, %edx\n\nstrlen:\n\nmovb (%ebx), %al\n\ninc %edx\n\ninc %ebx\n\ntest %al, %al\n\njnz strlen\n\nmovb $10, -1(%ebx)\n\nmovl $4, %eax # 系统调用号(sys_write)\n\nmovl $1, %ebx # 文件描述符(stdout)\n\nint $0x80\n\njmp vnext\n\nexit: movl $1,%eax # 系统调用号(sys_exit)\n\nxorl %ebx, %ebx # 退出代码\n\nint $0x80\n\nret\n```\n\n### 六、GCC 内联汇编\n\n用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比\"纯粹\"的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。\n\nGCC 提供了很好的内联汇编支持，最基本的格式是：\n```\n__asm__(\"asm statements\");\n```\n例如：\n```\n__asm__(\"nop\");\n```\n如果需要同时执行多条汇编语句，则应该用\"\\\\n\\\\t\"将各个语句分隔开，例如：\n```\n__asm__( \"pushl %%eax \\\\n\\\\t\"\n\n\"movl $0, %%eax \\\\n\\\\t\"\n\n\"popl %eax\");\n```\n通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：\n```\n__asm__(\"asm statements\" : outputs : inputs : registers-modified);\n```\n插入到 C 代码中的汇编语句是以\":\"分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。\n\n在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出\"样板\"和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。\n\n在GCC 内联汇编语句的指令部中，加上前缀''%''的数字(如%0，%1)表示的就是需要使用寄存器的\"样板\"操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用'' %''作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个''%''，以免产生混淆。\n\n紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个\"约束\"，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以''=''号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。\n\n输出部后面是输入部，输入约束的格式和输出约束相似，但不带''=''号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。\n\n有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。\n\n下面是一个内联汇编的简单例子：\n\n###### 例4.内联汇编\n```\nint main()\n{\n    int a = 10, b = 0;\n\n    __asm__ __volatile__(\"movl %1, %%eax;\\\\n\\\\r\"\n\n    \"movl %%eax, %0;\"\n\n    :\"=r\"(b)\n\n    :\"r\"(a)\n\n    :\"%eax\");\n\n    printf(\"Result: %d, %d\\\\n\", a, b);\n}\n```\n\n上面的程序完成将变量a的值赋予变量b，有几点需要说明：\n\n变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。\n输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符''=''。\n在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个''%''，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个''%''的标识符都看成是操作数，而不是寄存器。\n内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。\n由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。\n在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上''%''作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：\n\n\n|                限定符                 |            意义          \n|                -----                 |            -----          \n|                \"m\"、\"v\"、\"o\"          |            内存单元        \n|                \"r\"                    |            任何寄存器         \n|                \"q\"                    |            寄存器eax、ebx、ecx、edx之一     \n|                \"i\"、\"h\"               |            直接操作数          \n|                \"E\"和\"F\"               |            浮点数           \n|                \"g\"                    |            任意          \n|                \"a\"、\"b\"、\"c\"、\"d\"      |            分别表示寄存器eax、ebx、ecx和edx          \n|                \"S\"和\"D\"               |            寄存器esi、edi          \n|                \"I\"                    |            常数（0至31）         \n\n\n\n\n### 七.  LIBCO协程的swap代码  \n```\n.globl coctx_swap\n#if !defined( __APPLE__ )\n.type  coctx_swap, @function\n#endif\ncoctx_swap:\n\n#if defined(__i386__)\n\tleal 4(%esp), %eax //sp \n\tmovl 4(%esp), %esp \n\tleal 32(%esp), %esp //parm a : &regs[7] + sizeof(void*)\n\n\tpushl %eax //esp ->parm a \n\n\tpushl %ebp\n\tpushl %esi\n\tpushl %edi\n\tpushl %edx\n\tpushl %ecx\n\tpushl %ebx\n\tpushl -4(%eax)\n\n\t\n\tmovl 4(%eax), %esp //parm b -> &regs[0]\n\n\tpopl %eax  //ret func addr\n\tpopl %ebx  \n\tpopl %ecx\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpopl %ebp\n\tpopl %esp\n\tpushl %eax //set ret func addr\n\n\txorl %eax, %eax\n\tret\n\n#elif defined(__x86_64__)\n\tleaq 8(%rsp),%rax\n\tleaq 112(%rdi),%rsp\n\tpushq %rax\n\tpushq %rbx\n\tpushq %rcx\n\tpushq %rdx\n\n\tpushq -8(%rax) //ret func addr\n\n\tpushq %rsi\n\tpushq %rdi\n\tpushq %rbp\n\tpushq %r8\n\tpushq %r9\n\tpushq %r12\n\tpushq %r13\n\tpushq %r14\n\tpushq %r15\n\t\n\tmovq %rsi, %rsp\n\tpopq %r15\n\tpopq %r14\n\tpopq %r13\n\tpopq %r12\n\tpopq %r9\n\tpopq %r8\n\tpopq %rbp\n\tpopq %rdi\n\tpopq %rsi\n\tpopq %rax //ret func addr\n\tpopq %rdx\n\tpopq %rcx\n\tpopq %rbx\n\tpopq %rsp\n\tpushq %rax\n\t\n\txorl %eax, %eax\n\tret\n#endif\n\n```\n\n使用方式:  \n```\n\n#define ESP 0\n#define EIP 1\n#define EAX 2\n#define ECX 3\n// -----------\n#define RSP 0\n#define RIP 1\n#define RBX 2\n#define RDI 3\n#define RSI 4\n\n#define RBP 5\n#define R12 6\n#define R13 7\n#define R14 8\n#define R15 9\n#define RDX 10\n#define RCX 11\n#define R8 12\n#define R9 13\n\n\n//----- --------\n// 32 bit\n// | regs[0]: ret |\n// | regs[1]: ebx |\n// | regs[2]: ecx |\n// | regs[3]: edx |\n// | regs[4]: edi |\n// | regs[5]: esi |\n// | regs[6]: ebp |\n// | regs[7]: eax |  = esp\nenum\n{\n\tkEIP = 0,\n\tkESP = 7,\n};\n\n//-------------\n// 64 bit\n//low | regs[0]: r15 |\n//    | regs[1]: r14 |\n//    | regs[2]: r13 |\n//    | regs[3]: r12 |\n//    | regs[4]: r9  |\n//    | regs[5]: r8  | \n//    | regs[6]: rbp |\n//    | regs[7]: rdi |\n//    | regs[8]: rsi |\n//    | regs[9]: ret |  //ret func addr\n//    | regs[10]: rdx |\n//    | regs[11]: rcx | \n//    | regs[12]: rbx |\n//hig | regs[13]: rsp |\nenum\n{\n\tkRDI = 7,\n\tkRSI = 8,\n\tkRETAddr = 9,\n\tkRSP = 13,\n};\n\nint coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )\n{\n\tchar *sp = ctx->ss_sp + ctx->ss_size;\n\tsp = (char*) ((unsigned long)sp & -16LL  );\n\n\tmemset(ctx->regs, 0, sizeof(ctx->regs));\n\n\tctx->regs[ kRSP ] = sp - 8;\n\n\tctx->regs[ kRETAddr] = (char*)pfn;\n\n\tctx->regs[ kRDI ] = (char*)s;\n\tctx->regs[ kRSI ] = (char*)s1;\n\treturn 0;\n}\n\nint coctx_init( coctx_t *ctx )\n{\n\tmemset( ctx,0,sizeof(*ctx));\n\treturn 0;\n}\n\nextern \"C\"\n{\n    extern void coctx_swap(coctx_t *, coctx_t*) asm(\"coctx_swap\");\n};\n\ncoctx_init(&worker.ctx);\ncoctx_make(&worker.ctx, stress, (void*)0, &worker);\nclock_t start = clock();\nfor (int i = 0; i < 1000 * 10000; ++i)\n{\n    coctx_swap(&main_co.ctx, &worker.ctx);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-01-11-AT&T-INTEL-ASM.md","raw":"---\ntitle: AT&T 和 INTEL 汇编格式区别  \ndate: 2019-01-11 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 一、AT&T 格式Linux 汇编语法格式\n\n\n* 在 AT&T 汇编格式中，寄存器名要加上 '%' 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|   pushl %eax        |           push eax          |\n\n  <!-- more -->  \n\n* 在 AT&T 汇编格式中，用 '$' 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------       |        -----------          |\n|       pushl $1       |           push 1            |\n\n\n* AT&T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&T 汇编格式中，目标操作数在源操作数的右边。例如：  \n\n|       AT&T格式       |         Intel格式           |\n|       -------        |        -----------          |\n|      addl $1, %eax   |         add eax, 1          |\n\n\n\n* 在 AT&T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀'b'、'w'、'l'分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 \"byte ptr\" 和 \"word ptr\" 等前缀来表示的。例如：\n\n|       AT&T格式       |         Intel格式                   |\n|       -------        |        -----------                  |\n|      movb val, %al   |         mov al, byte ptr val        |\n\n\n* 在 AT&T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上'*'作为前缀，而在 Intel 格式中则不需要。  \n* 远程转移指令和远程子调用指令的操作码，在 AT&T 汇编格式中为 \"ljump\" 和 \"lcall\"，而在 Intel 汇编格式中则为 \"jmp far\" 和 \"call far\"，即：  \n\n|       AT&T格式                    |         Intel格式                   |\n|       -------                     |        -----------                  |\n|      ljump $section, $offset      |        jmp far section:offset       |\n|     lcall $section, $offset       |        call far section:offset      |\n\n\n* 与之相应的远程返回指令则为：\n\n|       AT&T格式               |         Intel格式                 |\n|       -------                 |        -----------             |\n|      lret $stack_adjust      |        ret far stack_adjust      |\n\n\n* 内存操作数的寻址方式  \n\n|       AT&T格式                             |         Intel格式                                 |\n|       -------                              |        -----------                               |\n|      section:disp(base, index, scale)      |        section:[base + index*scale + disp]      |\n\n\n\n* 由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：\n```\ndisp + base + index * scale\n```\n\n* 下面是一些内存操作数的例子：  \n\n|       AT&T格式                             |          Intel格式                                 |\n|       -------                             |          -----------                               |\n|      movl -4(%ebp), %eax                  |          mov eax, [ebp - 4]                       |\n|      movl array(, %eax, 4), %eax          |          mov eax, [eax*4 + array]                 |\n|      movw array(%ebx, %eax, 4), %cx       |          mov cx, [ebx + 4*eax + array]              |\n|      movb $4, %fs:(%eax)                  |          mov fs:eax, 4                             |\n\n\n\n\n### 二、Hello World!\n\n既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 \"Hello World!\"，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  \n\n在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  \n\nLinux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&T 汇编语言格式：   \n\n###### 例1. AT&T 格式\n\n* #hello.s\n```\n.data                    # 数据段声明\n\n        msg : .string \"Hello, world!\\\\n\" # 要输出的字符串\n\n        len = . - msg                   # 字串长度\n\n.text                    # 代码段声明\n\n.global _start           # 指定入口函数\n\n_start:                  # 在屏幕上显示一个字符串\n\n        movl $len, %edx  # 参数三：字符串长度\n\n        movl $msg, %ecx  # 参数二：要显示的字符串\n\n        movl $1, %ebx    # 参数一：文件描述符(stdout)\n\n        movl $4, %eax    # 系统调用号(sys_write)\n\n        int  $0x80       # 调用内核功能\n\n                         # 退出程序\n\n        movl $0,%ebx     # 参数一：退出代码\n\n        movl $1,%eax     # 系统调用号(sys_exit)\n\n        int  $0x80       # 调用内核功能\n```\n\n初次接触到 AT&T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：\n\n###### 例2. Intel 格式\n\n; hello.asm\n```\nsection .data            ; 数据段声明\n\n        msg db \"Hello, world!\", 0xA     ; 要输出的字符串\n\n        len equ $ - msg                 ; 字串长度\n\nsection .text            ; 代码段声明\n\nglobal _start            ; 指定入口函数\n\n_start:                  ; 在屏幕上显示一个字符串\n\n        mov edx, len     ; 参数三：字符串长度\n\n        mov ecx, msg     ; 参数二：要显示的字符串\n\n        mov ebx, 1       ; 参数一：文件描述符(stdout)\n\n        mov eax, 4       ; 系统调用号(sys_write)\n\n        int 0x80         ; 调用内核功能\n\n                         ; 退出程序\n\n        mov ebx, 0       ; 参数一：退出代码\n\n        mov eax, 1       ; 系统调用号(sys_exit)\n\n        int 0x80         ; 调用内核功能\n```\n\n上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。\n\n### 四、系统调用\n\n即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。\n\n在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。\n\n和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。\n\n所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：\n```\nssize_t write(int fd, const void *buf, size_t count);\n```\n该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。\n\n或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：\n```\nvoid * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c\n```\n当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。\n\n由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。\n\n### 五、命令行参数\n\n在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：\n\n例3. 处理命令行参数\n\n##### args.S\n```\n.text\n\n.globl _start\n\n_start:\n\npopl %ecx # argc\n\nvnext:\n\npopl %ecx # argv\n\ntest %ecx, %ecx # 空指针表明结束\n\njz exit\n\nmovl %ecx, %ebx\n\nxorl %edx, %edx\n\nstrlen:\n\nmovb (%ebx), %al\n\ninc %edx\n\ninc %ebx\n\ntest %al, %al\n\njnz strlen\n\nmovb $10, -1(%ebx)\n\nmovl $4, %eax # 系统调用号(sys_write)\n\nmovl $1, %ebx # 文件描述符(stdout)\n\nint $0x80\n\njmp vnext\n\nexit: movl $1,%eax # 系统调用号(sys_exit)\n\nxorl %ebx, %ebx # 退出代码\n\nint $0x80\n\nret\n```\n\n### 六、GCC 内联汇编\n\n用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比\"纯粹\"的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。\n\nGCC 提供了很好的内联汇编支持，最基本的格式是：\n```\n__asm__(\"asm statements\");\n```\n例如：\n```\n__asm__(\"nop\");\n```\n如果需要同时执行多条汇编语句，则应该用\"\\\\n\\\\t\"将各个语句分隔开，例如：\n```\n__asm__( \"pushl %%eax \\\\n\\\\t\"\n\n\"movl $0, %%eax \\\\n\\\\t\"\n\n\"popl %eax\");\n```\n通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：\n```\n__asm__(\"asm statements\" : outputs : inputs : registers-modified);\n```\n插入到 C 代码中的汇编语句是以\":\"分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。\n\n在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出\"样板\"和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。\n\n在GCC 内联汇编语句的指令部中，加上前缀''%''的数字(如%0，%1)表示的就是需要使用寄存器的\"样板\"操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用'' %''作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个''%''，以免产生混淆。\n\n紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个\"约束\"，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以''=''号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。\n\n输出部后面是输入部，输入约束的格式和输出约束相似，但不带''=''号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。\n\n有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。\n\n下面是一个内联汇编的简单例子：\n\n###### 例4.内联汇编\n```\nint main()\n{\n    int a = 10, b = 0;\n\n    __asm__ __volatile__(\"movl %1, %%eax;\\\\n\\\\r\"\n\n    \"movl %%eax, %0;\"\n\n    :\"=r\"(b)\n\n    :\"r\"(a)\n\n    :\"%eax\");\n\n    printf(\"Result: %d, %d\\\\n\", a, b);\n}\n```\n\n上面的程序完成将变量a的值赋予变量b，有几点需要说明：\n\n变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。\n输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符''=''。\n在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个''%''，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个''%''的标识符都看成是操作数，而不是寄存器。\n内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。\n由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。\n在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上''%''作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：\n\n\n|                限定符                 |            意义          \n|                -----                 |            -----          \n|                \"m\"、\"v\"、\"o\"          |            内存单元        \n|                \"r\"                    |            任何寄存器         \n|                \"q\"                    |            寄存器eax、ebx、ecx、edx之一     \n|                \"i\"、\"h\"               |            直接操作数          \n|                \"E\"和\"F\"               |            浮点数           \n|                \"g\"                    |            任意          \n|                \"a\"、\"b\"、\"c\"、\"d\"      |            分别表示寄存器eax、ebx、ecx和edx          \n|                \"S\"和\"D\"               |            寄存器esi、edi          \n|                \"I\"                    |            常数（0至31）         \n\n\n\n\n### 七.  LIBCO协程的swap代码  \n```\n.globl coctx_swap\n#if !defined( __APPLE__ )\n.type  coctx_swap, @function\n#endif\ncoctx_swap:\n\n#if defined(__i386__)\n\tleal 4(%esp), %eax //sp \n\tmovl 4(%esp), %esp \n\tleal 32(%esp), %esp //parm a : &regs[7] + sizeof(void*)\n\n\tpushl %eax //esp ->parm a \n\n\tpushl %ebp\n\tpushl %esi\n\tpushl %edi\n\tpushl %edx\n\tpushl %ecx\n\tpushl %ebx\n\tpushl -4(%eax)\n\n\t\n\tmovl 4(%eax), %esp //parm b -> &regs[0]\n\n\tpopl %eax  //ret func addr\n\tpopl %ebx  \n\tpopl %ecx\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpopl %ebp\n\tpopl %esp\n\tpushl %eax //set ret func addr\n\n\txorl %eax, %eax\n\tret\n\n#elif defined(__x86_64__)\n\tleaq 8(%rsp),%rax\n\tleaq 112(%rdi),%rsp\n\tpushq %rax\n\tpushq %rbx\n\tpushq %rcx\n\tpushq %rdx\n\n\tpushq -8(%rax) //ret func addr\n\n\tpushq %rsi\n\tpushq %rdi\n\tpushq %rbp\n\tpushq %r8\n\tpushq %r9\n\tpushq %r12\n\tpushq %r13\n\tpushq %r14\n\tpushq %r15\n\t\n\tmovq %rsi, %rsp\n\tpopq %r15\n\tpopq %r14\n\tpopq %r13\n\tpopq %r12\n\tpopq %r9\n\tpopq %r8\n\tpopq %rbp\n\tpopq %rdi\n\tpopq %rsi\n\tpopq %rax //ret func addr\n\tpopq %rdx\n\tpopq %rcx\n\tpopq %rbx\n\tpopq %rsp\n\tpushq %rax\n\t\n\txorl %eax, %eax\n\tret\n#endif\n\n```\n\n使用方式:  \n```\n\n#define ESP 0\n#define EIP 1\n#define EAX 2\n#define ECX 3\n// -----------\n#define RSP 0\n#define RIP 1\n#define RBX 2\n#define RDI 3\n#define RSI 4\n\n#define RBP 5\n#define R12 6\n#define R13 7\n#define R14 8\n#define R15 9\n#define RDX 10\n#define RCX 11\n#define R8 12\n#define R9 13\n\n\n//----- --------\n// 32 bit\n// | regs[0]: ret |\n// | regs[1]: ebx |\n// | regs[2]: ecx |\n// | regs[3]: edx |\n// | regs[4]: edi |\n// | regs[5]: esi |\n// | regs[6]: ebp |\n// | regs[7]: eax |  = esp\nenum\n{\n\tkEIP = 0,\n\tkESP = 7,\n};\n\n//-------------\n// 64 bit\n//low | regs[0]: r15 |\n//    | regs[1]: r14 |\n//    | regs[2]: r13 |\n//    | regs[3]: r12 |\n//    | regs[4]: r9  |\n//    | regs[5]: r8  | \n//    | regs[6]: rbp |\n//    | regs[7]: rdi |\n//    | regs[8]: rsi |\n//    | regs[9]: ret |  //ret func addr\n//    | regs[10]: rdx |\n//    | regs[11]: rcx | \n//    | regs[12]: rbx |\n//hig | regs[13]: rsp |\nenum\n{\n\tkRDI = 7,\n\tkRSI = 8,\n\tkRETAddr = 9,\n\tkRSP = 13,\n};\n\nint coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )\n{\n\tchar *sp = ctx->ss_sp + ctx->ss_size;\n\tsp = (char*) ((unsigned long)sp & -16LL  );\n\n\tmemset(ctx->regs, 0, sizeof(ctx->regs));\n\n\tctx->regs[ kRSP ] = sp - 8;\n\n\tctx->regs[ kRETAddr] = (char*)pfn;\n\n\tctx->regs[ kRDI ] = (char*)s;\n\tctx->regs[ kRSI ] = (char*)s1;\n\treturn 0;\n}\n\nint coctx_init( coctx_t *ctx )\n{\n\tmemset( ctx,0,sizeof(*ctx));\n\treturn 0;\n}\n\nextern \"C\"\n{\n    extern void coctx_swap(coctx_t *, coctx_t*) asm(\"coctx_swap\");\n};\n\ncoctx_init(&worker.ctx);\ncoctx_make(&worker.ctx, stress, (void*)0, &worker);\nclock_t start = clock();\nfor (int i = 0; i < 1000 * 10000; ++i)\n{\n    coctx_swap(&main_co.ctx, &worker.ctx);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-01-11-AT&T-INTEL-ASM","published":1,"updated":"2019-01-17T14:04:35.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyein000f7w5h82e66b5c","content":"<h3><span id=\"一-atampt-格式linux-汇编语法格式\">一、AT&amp;T 格式Linux 汇编语法格式</span></h3><ul>\n<li>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’ 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pushl %eax</td>\n<td>push eax</td>\n</tr>\n</tbody></table>\n  <a id=\"more\"></a>  \n\n<ul>\n<li>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pushl $1</td>\n<td>push 1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addl $1, %eax</td>\n<td>add eax, 1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的。例如：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movb val, %al</td>\n<td>mov al, byte ptr val</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要。  </li>\n<li>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”，即：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ljump $section, $offset</td>\n<td>jmp far section:offset</td>\n</tr>\n<tr>\n<td>lcall $section, $offset</td>\n<td>call far section:offset</td>\n</tr>\n</tbody></table>\n<ul>\n<li>与之相应的远程返回指令则为：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lret $stack_adjust</td>\n<td>ret far stack_adjust</td>\n</tr>\n</tbody></table>\n<ul>\n<li>内存操作数的寻址方式  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>section:disp(base, index, scale)</td>\n<td>section:[base + index*scale + disp]</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disp + base + index * scale</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面是一些内存操作数的例子：  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movl -4(%ebp), %eax</td>\n<td>mov eax, [ebp - 4]</td>\n</tr>\n<tr>\n<td>movl array(, %eax, 4), %eax</td>\n<td>mov eax, [eax*4 + array]</td>\n</tr>\n<tr>\n<td>movw array(%ebx, %eax, 4), %cx</td>\n<td>mov cx, [ebx + 4*eax + array]</td>\n</tr>\n<tr>\n<td>movb $4, %fs:(%eax)</td>\n<td>mov fs:eax, 4</td>\n</tr>\n</tbody></table>\n<h3><span id=\"二-hello-world\">二、Hello World!</span></h3><p>既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 “Hello World!”，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  </p>\n<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  </p>\n<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：   </p>\n<h6><span id=\"例1-atampt-格式\">例1. AT&amp;T 格式</span></h6><ul>\n<li>#hello.s<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data                    # 数据段声明</span><br><span class=\"line\"></span><br><span class=\"line\">        msg : .string &quot;Hello, world!\\\\n&quot; # 要输出的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        len &#x3D; . - msg                   # 字串长度</span><br><span class=\"line\"></span><br><span class=\"line\">.text                    # 代码段声明</span><br><span class=\"line\"></span><br><span class=\"line\">.global _start           # 指定入口函数</span><br><span class=\"line\"></span><br><span class=\"line\">_start:                  # 在屏幕上显示一个字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $len, %edx  # 参数三：字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $msg, %ecx  # 参数二：要显示的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $1, %ebx    # 参数一：文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $4, %eax    # 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">        int  $0x80       # 调用内核功能</span><br><span class=\"line\"></span><br><span class=\"line\">                         # 退出程序</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $0,%ebx     # 参数一：退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $1,%eax     # 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">        int  $0x80       # 调用内核功能</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：</p>\n<h6><span id=\"例2-intel-格式\">例2. Intel 格式</span></h6><p>; hello.asm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">section .data            ; 数据段声明</span><br><span class=\"line\"></span><br><span class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        len equ $ - msg                 ; 字串长度</span><br><span class=\"line\"></span><br><span class=\"line\">section .text            ; 代码段声明</span><br><span class=\"line\"></span><br><span class=\"line\">global _start            ; 指定入口函数</span><br><span class=\"line\"></span><br><span class=\"line\">_start:                  ; 在屏幕上显示一个字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        mov edx, len     ; 参数三：字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ebx, 1       ; 参数一：文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, 4       ; 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br><span class=\"line\"></span><br><span class=\"line\">                         ; 退出程序</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ebx, 0       ; 参数一：退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, 1       ; 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure>\n\n<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>\n<h3><span id=\"四-系统调用\">四、系统调用</span></h3><p>即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。</p>\n<p>在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。</p>\n<p>和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。</p>\n<p>所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：</name></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</span><br></pre></td></tr></table></figure>\n<p>该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。</p>\n<p>或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c</span><br></pre></td></tr></table></figure>\n<p>当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。</p>\n<p>由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。</p>\n<h3><span id=\"五-命令行参数\">五、命令行参数</span></h3><p>在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：</p>\n<p>例3. 处理命令行参数</p>\n<h5><span id=\"argss\">args.S</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text</span><br><span class=\"line\"></span><br><span class=\"line\">.globl _start</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\"></span><br><span class=\"line\">popl %ecx # argc</span><br><span class=\"line\"></span><br><span class=\"line\">vnext:</span><br><span class=\"line\"></span><br><span class=\"line\">popl %ecx # argv</span><br><span class=\"line\"></span><br><span class=\"line\">test %ecx, %ecx # 空指针表明结束</span><br><span class=\"line\"></span><br><span class=\"line\">jz exit</span><br><span class=\"line\"></span><br><span class=\"line\">movl %ecx, %ebx</span><br><span class=\"line\"></span><br><span class=\"line\">xorl %edx, %edx</span><br><span class=\"line\"></span><br><span class=\"line\">strlen:</span><br><span class=\"line\"></span><br><span class=\"line\">movb (%ebx), %al</span><br><span class=\"line\"></span><br><span class=\"line\">inc %edx</span><br><span class=\"line\"></span><br><span class=\"line\">inc %ebx</span><br><span class=\"line\"></span><br><span class=\"line\">test %al, %al</span><br><span class=\"line\"></span><br><span class=\"line\">jnz strlen</span><br><span class=\"line\"></span><br><span class=\"line\">movb $10, -1(%ebx)</span><br><span class=\"line\"></span><br><span class=\"line\">movl $4, %eax # 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">movl $1, %ebx # 文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">int $0x80</span><br><span class=\"line\"></span><br><span class=\"line\">jmp vnext</span><br><span class=\"line\"></span><br><span class=\"line\">exit: movl $1,%eax # 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">xorl %ebx, %ebx # 退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">int $0x80</span><br><span class=\"line\"></span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"六-gcc-内联汇编\">六、GCC 内联汇编</span></h3><p>用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比”纯粹”的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。</p>\n<p>GCC 提供了很好的内联汇编支持，最基本的格式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;asm statements&quot;);</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;nop&quot;);</span><br></pre></td></tr></table></figure>\n<p>如果需要同时执行多条汇编语句，则应该用”\\n\\t”将各个语句分隔开，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__( &quot;pushl %%eax \\\\n\\\\t&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;movl $0, %%eax \\\\n\\\\t&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;popl %eax&quot;);</span><br></pre></td></tr></table></figure>\n<p>通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;asm statements&quot; : outputs : inputs : registers-modified);</span><br></pre></td></tr></table></figure>\n<p>插入到 C 代码中的汇编语句是以”:”分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。</p>\n<p>在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出”样板”和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。</p>\n<p>在GCC 内联汇编语句的指令部中，加上前缀’’%’’的数字(如%0，%1)表示的就是需要使用寄存器的”样板”操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用’’ %’’作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个’’%’’，以免产生混淆。</p>\n<p>紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个”约束”，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以’’=’’号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。</p>\n<p>输出部后面是输入部，输入约束的格式和输出约束相似，但不带’’=’’号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。</p>\n<p>有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。</p>\n<p>下面是一个内联汇编的简单例子：</p>\n<h6><span id=\"例4内联汇编\">例4.内联汇编</span></h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a &#x3D; 10, b &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    __asm__ __volatile__(&quot;movl %1, %%eax;\\\\n\\\\r&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;movl %%eax, %0;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;&#x3D;r&quot;(b)</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;r&quot;(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;%eax&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Result: %d, %d\\\\n&quot;, a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序完成将变量a的值赋予变量b，有几点需要说明：</p>\n<p>变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。<br>输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符’’=’’。<br>在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个’’%’’，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个’’%’’的标识符都看成是操作数，而不是寄存器。<br>内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。<br>由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。<br>在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上’’%’’作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：</p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“m”、”v”、”o”</td>\n<td>内存单元</td>\n</tr>\n<tr>\n<td>“r”</td>\n<td>任何寄存器</td>\n</tr>\n<tr>\n<td>“q”</td>\n<td>寄存器eax、ebx、ecx、edx之一</td>\n</tr>\n<tr>\n<td>“i”、”h”</td>\n<td>直接操作数</td>\n</tr>\n<tr>\n<td>“E”和”F”</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>“g”</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>“a”、”b”、”c”、”d”</td>\n<td>分别表示寄存器eax、ebx、ecx和edx</td>\n</tr>\n<tr>\n<td>“S”和”D”</td>\n<td>寄存器esi、edi</td>\n</tr>\n<tr>\n<td>“I”</td>\n<td>常数（0至31）</td>\n</tr>\n</tbody></table>\n<h3><span id=\"七-libco协程的swap代码\">七.  LIBCO协程的swap代码</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.globl coctx_swap</span><br><span class=\"line\">#if !defined( __APPLE__ )</span><br><span class=\"line\">.type  coctx_swap, @function</span><br><span class=\"line\">#endif</span><br><span class=\"line\">coctx_swap:</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__i386__)</span><br><span class=\"line\">\tleal 4(%esp), %eax &#x2F;&#x2F;sp </span><br><span class=\"line\">\tmovl 4(%esp), %esp </span><br><span class=\"line\">\tleal 32(%esp), %esp &#x2F;&#x2F;parm a : &amp;regs[7] + sizeof(void*)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushl %eax &#x2F;&#x2F;esp -&gt;parm a </span><br><span class=\"line\"></span><br><span class=\"line\">\tpushl %ebp</span><br><span class=\"line\">\tpushl %esi</span><br><span class=\"line\">\tpushl %edi</span><br><span class=\"line\">\tpushl %edx</span><br><span class=\"line\">\tpushl %ecx</span><br><span class=\"line\">\tpushl %ebx</span><br><span class=\"line\">\tpushl -4(%eax)</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmovl 4(%eax), %esp &#x2F;&#x2F;parm b -&gt; &amp;regs[0]</span><br><span class=\"line\"></span><br><span class=\"line\">\tpopl %eax  &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">\tpopl %ebx  </span><br><span class=\"line\">\tpopl %ecx</span><br><span class=\"line\">\tpopl %edx</span><br><span class=\"line\">\tpopl %edi</span><br><span class=\"line\">\tpopl %esi</span><br><span class=\"line\">\tpopl %ebp</span><br><span class=\"line\">\tpopl %esp</span><br><span class=\"line\">\tpushl %eax &#x2F;&#x2F;set ret func addr</span><br><span class=\"line\"></span><br><span class=\"line\">\txorl %eax, %eax</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">#elif defined(__x86_64__)</span><br><span class=\"line\">\tleaq 8(%rsp),%rax</span><br><span class=\"line\">\tleaq 112(%rdi),%rsp</span><br><span class=\"line\">\tpushq %rax</span><br><span class=\"line\">\tpushq %rbx</span><br><span class=\"line\">\tpushq %rcx</span><br><span class=\"line\">\tpushq %rdx</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushq -8(%rax) &#x2F;&#x2F;ret func addr</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushq %rsi</span><br><span class=\"line\">\tpushq %rdi</span><br><span class=\"line\">\tpushq %rbp</span><br><span class=\"line\">\tpushq %r8</span><br><span class=\"line\">\tpushq %r9</span><br><span class=\"line\">\tpushq %r12</span><br><span class=\"line\">\tpushq %r13</span><br><span class=\"line\">\tpushq %r14</span><br><span class=\"line\">\tpushq %r15</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmovq %rsi, %rsp</span><br><span class=\"line\">\tpopq %r15</span><br><span class=\"line\">\tpopq %r14</span><br><span class=\"line\">\tpopq %r13</span><br><span class=\"line\">\tpopq %r12</span><br><span class=\"line\">\tpopq %r9</span><br><span class=\"line\">\tpopq %r8</span><br><span class=\"line\">\tpopq %rbp</span><br><span class=\"line\">\tpopq %rdi</span><br><span class=\"line\">\tpopq %rsi</span><br><span class=\"line\">\tpopq %rax &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">\tpopq %rdx</span><br><span class=\"line\">\tpopq %rcx</span><br><span class=\"line\">\tpopq %rbx</span><br><span class=\"line\">\tpopq %rsp</span><br><span class=\"line\">\tpushq %rax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\txorl %eax, %eax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>使用方式:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#define ESP 0</span><br><span class=\"line\">#define EIP 1</span><br><span class=\"line\">#define EAX 2</span><br><span class=\"line\">#define ECX 3</span><br><span class=\"line\">&#x2F;&#x2F; -----------</span><br><span class=\"line\">#define RSP 0</span><br><span class=\"line\">#define RIP 1</span><br><span class=\"line\">#define RBX 2</span><br><span class=\"line\">#define RDI 3</span><br><span class=\"line\">#define RSI 4</span><br><span class=\"line\"></span><br><span class=\"line\">#define RBP 5</span><br><span class=\"line\">#define R12 6</span><br><span class=\"line\">#define R13 7</span><br><span class=\"line\">#define R14 8</span><br><span class=\"line\">#define R15 9</span><br><span class=\"line\">#define RDX 10</span><br><span class=\"line\">#define RCX 11</span><br><span class=\"line\">#define R8 12</span><br><span class=\"line\">#define R9 13</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;----- --------</span><br><span class=\"line\">&#x2F;&#x2F; 32 bit</span><br><span class=\"line\">&#x2F;&#x2F; | regs[0]: ret |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[1]: ebx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[2]: ecx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[3]: edx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[4]: edi |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[5]: esi |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[6]: ebp |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[7]: eax |  &#x3D; esp</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkEIP &#x3D; 0,</span><br><span class=\"line\">\tkESP &#x3D; 7,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;-------------</span><br><span class=\"line\">&#x2F;&#x2F; 64 bit</span><br><span class=\"line\">&#x2F;&#x2F;low | regs[0]: r15 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[1]: r14 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[2]: r13 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[3]: r12 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[4]: r9  |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[5]: r8  | </span><br><span class=\"line\">&#x2F;&#x2F;    | regs[6]: rbp |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[7]: rdi |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[8]: rsi |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[9]: ret |  &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[10]: rdx |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[11]: rcx | </span><br><span class=\"line\">&#x2F;&#x2F;    | regs[12]: rbx |</span><br><span class=\"line\">&#x2F;&#x2F;hig | regs[13]: rsp |</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkRDI &#x3D; 7,</span><br><span class=\"line\">\tkRSI &#x3D; 8,</span><br><span class=\"line\">\tkRETAddr &#x3D; 9,</span><br><span class=\"line\">\tkRSP &#x3D; 13,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar *sp &#x3D; ctx-&gt;ss_sp + ctx-&gt;ss_size;</span><br><span class=\"line\">\tsp &#x3D; (char*) ((unsigned long)sp &amp; -16LL  );</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemset(ctx-&gt;regs, 0, sizeof(ctx-&gt;regs));</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRSP ] &#x3D; sp - 8;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRETAddr] &#x3D; (char*)pfn;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRDI ] &#x3D; (char*)s;</span><br><span class=\"line\">\tctx-&gt;regs[ kRSI ] &#x3D; (char*)s1;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int coctx_init( coctx_t *ctx )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmemset( ctx,0,sizeof(*ctx));</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    extern void coctx_swap(coctx_t *, coctx_t*) asm(&quot;coctx_swap&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">coctx_init(&amp;worker.ctx);</span><br><span class=\"line\">coctx_make(&amp;worker.ctx, stress, (void*)0, &amp;worker);</span><br><span class=\"line\">clock_t start &#x3D; clock();</span><br><span class=\"line\">for (int i &#x3D; 0; i &lt; 1000 * 10000; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    coctx_swap(&amp;main_co.ctx, &amp;worker.ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"一、AT-amp-T-格式Linux-汇编语法格式\"><a href=\"#一、AT-amp-T-格式Linux-汇编语法格式\" class=\"headerlink\" title=\"一、AT&amp;T 格式Linux 汇编语法格式\"></a>一、AT&amp;T 格式Linux 汇编语法格式</h3><ul>\n<li>在 AT&amp;T 汇编格式中，寄存器名要加上 ‘%’ 作为前缀；而在 Intel 汇编格式中，寄存器名不需要加前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pushl %eax</td>\n<td>push eax</td>\n</tr>\n</tbody></table>","more":"<ul>\n<li>在 AT&amp;T 汇编格式中，用 ‘$’ 前缀表示一个立即操作数；而在 Intel 汇编格式中，立即数的表示不用带任何前缀。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pushl $1</td>\n<td>push 1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>AT&amp;T 和 Intel 格式中的源操作数和目标操作数的位置正好相反。在 Intel 汇编格式中，目标操作数在源操作数的左边；而在 AT&amp;T 汇编格式中，目标操作数在源操作数的右边。例如：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addl $1, %eax</td>\n<td>add eax, 1</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，操作数的字长由操作符的最后一个字母决定，后缀’b’、’w’、’l’分别表示操作数为字节（byte，8 比特）、字（word，16 比特）和长字（long，32比特）；而在 Intel 汇编格式中，操作数的字长是用 “byte ptr” 和 “word ptr” 等前缀来表示的。例如：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movb val, %al</td>\n<td>mov al, byte ptr val</td>\n</tr>\n</tbody></table>\n<ul>\n<li>在 AT&amp;T 汇编格式中，绝对转移和调用指令（jump/call）的操作数前要加上’*’作为前缀，而在 Intel 格式中则不需要。  </li>\n<li>远程转移指令和远程子调用指令的操作码，在 AT&amp;T 汇编格式中为 “ljump” 和 “lcall”，而在 Intel 汇编格式中则为 “jmp far” 和 “call far”，即：  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ljump $section, $offset</td>\n<td>jmp far section:offset</td>\n</tr>\n<tr>\n<td>lcall $section, $offset</td>\n<td>call far section:offset</td>\n</tr>\n</tbody></table>\n<ul>\n<li>与之相应的远程返回指令则为：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lret $stack_adjust</td>\n<td>ret far stack_adjust</td>\n</tr>\n</tbody></table>\n<ul>\n<li>内存操作数的寻址方式  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>section:disp(base, index, scale)</td>\n<td>section:[base + index*scale + disp]</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>由于 Linux 工作在保护模式下，用的是 32 位线性地址，所以在计算地址时不用考虑段基址和偏移量，而是采用如下的地址计算方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disp + base + index * scale</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下面是一些内存操作数的例子：  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T格式</th>\n<th>Intel格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movl -4(%ebp), %eax</td>\n<td>mov eax, [ebp - 4]</td>\n</tr>\n<tr>\n<td>movl array(, %eax, 4), %eax</td>\n<td>mov eax, [eax*4 + array]</td>\n</tr>\n<tr>\n<td>movw array(%ebx, %eax, 4), %cx</td>\n<td>mov cx, [ebx + 4*eax + array]</td>\n</tr>\n<tr>\n<td>movb $4, %fs:(%eax)</td>\n<td>mov fs:eax, 4</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、Hello-World\"><a href=\"#二、Hello-World\" class=\"headerlink\" title=\"二、Hello World!\"></a>二、Hello World!</h3><p>既然所有程序设计语言的第一个例子都是在屏幕上打印一个字符串 “Hello World!”，那我们也以这种方式来开始介绍 Linux 下的汇编语言程序设计。  </p>\n<p>在 Linux 操作系统中，你有很多办法可以实现在屏幕上显示一个字符串，但最简洁的方式是使用 Linux 内核提供的系统调用。使用这种方法最大的好处是可以直接和操作系统的内核进行通讯，不需要链接诸如 libc 这样的函数库，也不需要使用 ELF 解释器，因而代码尺寸小且执行速度快。  </p>\n<p>Linux 是一个运行在保护模式下的 32 位操作系统，采用 flat memory 模式，目前最常用到的是 ELF 格式的二进制代码。一个 ELF 格式的可执行程序通常划分为如下几个部分：.text、.data 和 .bss，其中 .text 是只读的代码区，.data 是可读可写的数据区，而 .bss 则是可读可写且没有初始化的数据区。代码区和数据区在 ELF 中统称为 section，根据实际需要你可以使用其它标准的 section，也可以添加自定义 section，但一个 ELF 可执行程序至少应该有一个 .text 部分。下面给出我们的第一个汇编程序，用的是 AT&amp;T 汇编语言格式：   </p>\n<h6 id=\"例1-AT-amp-T-格式\"><a href=\"#例1-AT-amp-T-格式\" class=\"headerlink\" title=\"例1. AT&amp;T 格式\"></a>例1. AT&amp;T 格式</h6><ul>\n<li>#hello.s<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data                    # 数据段声明</span><br><span class=\"line\"></span><br><span class=\"line\">        msg : .string &quot;Hello, world!\\\\n&quot; # 要输出的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        len &#x3D; . - msg                   # 字串长度</span><br><span class=\"line\"></span><br><span class=\"line\">.text                    # 代码段声明</span><br><span class=\"line\"></span><br><span class=\"line\">.global _start           # 指定入口函数</span><br><span class=\"line\"></span><br><span class=\"line\">_start:                  # 在屏幕上显示一个字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $len, %edx  # 参数三：字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $msg, %ecx  # 参数二：要显示的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $1, %ebx    # 参数一：文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $4, %eax    # 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">        int  $0x80       # 调用内核功能</span><br><span class=\"line\"></span><br><span class=\"line\">                         # 退出程序</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $0,%ebx     # 参数一：退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">        movl $1,%eax     # 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">        int  $0x80       # 调用内核功能</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>初次接触到 AT&amp;T 格式的汇编代码时，很多程序员都认为太晦涩难懂了，没有关系，在 Linux 平台上你同样可以使用 Intel 格式来编写汇编程序：</p>\n<h6 id=\"例2-Intel-格式\"><a href=\"#例2-Intel-格式\" class=\"headerlink\" title=\"例2. Intel 格式\"></a>例2. Intel 格式</h6><p>; hello.asm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">section .data            ; 数据段声明</span><br><span class=\"line\"></span><br><span class=\"line\">        msg db &quot;Hello, world!&quot;, 0xA     ; 要输出的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        len equ $ - msg                 ; 字串长度</span><br><span class=\"line\"></span><br><span class=\"line\">section .text            ; 代码段声明</span><br><span class=\"line\"></span><br><span class=\"line\">global _start            ; 指定入口函数</span><br><span class=\"line\"></span><br><span class=\"line\">_start:                  ; 在屏幕上显示一个字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        mov edx, len     ; 参数三：字符串长度</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ebx, 1       ; 参数一：文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, 4       ; 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br><span class=\"line\"></span><br><span class=\"line\">                         ; 退出程序</span><br><span class=\"line\"></span><br><span class=\"line\">        mov ebx, 0       ; 参数一：退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">        mov eax, 1       ; 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">        int 0x80         ; 调用内核功能</span><br></pre></td></tr></table></figure>\n\n<p>上面两个汇编程序采用的语法虽然完全不同，但功能却都是调用 Linux 内核提供的 sys_write 来显示一个字符串，然后再调用 sys_exit 退出程序。在 Linux 内核源文件 include/asm-i386/unistd.h 中，可以找到所有系统调用的定义。</p>\n<h3 id=\"四、系统调用\"><a href=\"#四、系统调用\" class=\"headerlink\" title=\"四、系统调用\"></a>四、系统调用</h3><p>即便是最简单的汇编程序，也难免要用到诸如输入、输出以及退出等操作，而要进行这些操作则需要调用操作系统所提供的服务，也就是系统调用。除非你的程序只完成加减乘除等数学运算，否则将很难避免使用系统调用，事实上除了系统调用不同之外，各种操作系统的汇编编程往往都是很类似的。</p>\n<p>在 Linux 平台下有两种方式来使用系统调用：利用封装后的 C 库（libc）或者通过汇编直接调用。其中通过汇编语言来直接调用系统调用，是最高效地使用 Linux 内核服务的方法，因为最终生成的程序不需要与任何库进行链接，而是直接和内核通信。</p>\n<p>和 DOS 一样，Linux 下的系统调用也是通过中断（int 0x80）来实现的。在执行 int 80 指令时，寄存器 eax 中存放的是系统调用的功能号，而传给系统调用的参数则必须按顺序放到寄存器 ebx，ecx，edx，esi，edi 中，当系统调用完成之后，返回值可以在寄存器 eax 中获得。</p>\n<p>所有的系统调用功能号都可以在文件 /usr/include/bits/syscall.h 中找到，为了便于使用，它们是用 SYS_<name> 这样的宏来定义的，如 SYS_write、SYS_exit 等。例如，经常用到的 write 函数是如下定义的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t write(int fd, const void *buf, size_t count);</span><br></pre></td></tr></table></figure>\n<p>该函数的功能最终是通过 SYS_write 这一系统调用来实现的。根据上面的约定，参数 fb、buf 和 count 分别存在寄存器 ebx、ecx 和 edx 中，而系统调用号 SYS_write 则放在寄存器 eax 中，当 int 0x80 指令执行完毕后，返回值可以从寄存器 eax 中获得。</p>\n<p>或许你已经发现，在进行系统调用时至多只有 5 个寄存器能够用来保存参数，难道所有系统调用的参数个数都不超过 5 吗？当然不是，例如 mmap 函数就有 6 个参数，这些参数最后都需要传递给系统调用 SYS_mmap：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void * mmap(void *start, size_t length, int prot , int flags, int fd, off_t offset);c</span><br></pre></td></tr></table></figure>\n<p>当一个系统调用所需的参数个数大于 5 时，执行int 0x80 指令时仍需将系统调用功能号保存在寄存器 eax 中，所不同的只是全部参数应该依次放在一块连续的内存区域里，同时在寄存器 ebx 中保存指向该内存区域的指针。系统调用完成之后，返回值仍将保存在寄存器 eax 中。</p>\n<p>由于只是需要一块连续的内存区域来保存系统调用的参数，因此完全可以像普通的函数调用一样使用栈(stack)来传递系统调用所需的参数。但要注意一点， Linux 采用的是 C 语言的调用模式，这就意味着所有参数必须以相反的顺序进栈，即最后一个参数先入栈，而第一个参数则最后入栈。如果采用栈来传递系统调用所需的参数，在执行 int 0x80 指令时还应该将栈指针的当前值复制到寄存器 ebx中。</p>\n<h3 id=\"五、命令行参数\"><a href=\"#五、命令行参数\" class=\"headerlink\" title=\"五、命令行参数\"></a>五、命令行参数</h3><p>在 Linux 操作系统中，当一个可执行程序通过命令行启动时，其所需的参数将被保存到栈中：首先是 argc，然后是指向各个命令行参数的指针数组 argv，最后是指向环境变量的指针数据 envp。在编写汇编语言程序时，很多时候需要对这些参数进行处理，下面的代码示范了如何在汇编代码中进行命令行参数的处理：</p>\n<p>例3. 处理命令行参数</p>\n<h5 id=\"args-S\"><a href=\"#args-S\" class=\"headerlink\" title=\"args.S\"></a>args.S</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text</span><br><span class=\"line\"></span><br><span class=\"line\">.globl _start</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\"></span><br><span class=\"line\">popl %ecx # argc</span><br><span class=\"line\"></span><br><span class=\"line\">vnext:</span><br><span class=\"line\"></span><br><span class=\"line\">popl %ecx # argv</span><br><span class=\"line\"></span><br><span class=\"line\">test %ecx, %ecx # 空指针表明结束</span><br><span class=\"line\"></span><br><span class=\"line\">jz exit</span><br><span class=\"line\"></span><br><span class=\"line\">movl %ecx, %ebx</span><br><span class=\"line\"></span><br><span class=\"line\">xorl %edx, %edx</span><br><span class=\"line\"></span><br><span class=\"line\">strlen:</span><br><span class=\"line\"></span><br><span class=\"line\">movb (%ebx), %al</span><br><span class=\"line\"></span><br><span class=\"line\">inc %edx</span><br><span class=\"line\"></span><br><span class=\"line\">inc %ebx</span><br><span class=\"line\"></span><br><span class=\"line\">test %al, %al</span><br><span class=\"line\"></span><br><span class=\"line\">jnz strlen</span><br><span class=\"line\"></span><br><span class=\"line\">movb $10, -1(%ebx)</span><br><span class=\"line\"></span><br><span class=\"line\">movl $4, %eax # 系统调用号(sys_write)</span><br><span class=\"line\"></span><br><span class=\"line\">movl $1, %ebx # 文件描述符(stdout)</span><br><span class=\"line\"></span><br><span class=\"line\">int $0x80</span><br><span class=\"line\"></span><br><span class=\"line\">jmp vnext</span><br><span class=\"line\"></span><br><span class=\"line\">exit: movl $1,%eax # 系统调用号(sys_exit)</span><br><span class=\"line\"></span><br><span class=\"line\">xorl %ebx, %ebx # 退出代码</span><br><span class=\"line\"></span><br><span class=\"line\">int $0x80</span><br><span class=\"line\"></span><br><span class=\"line\">ret</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、GCC-内联汇编\"><a href=\"#六、GCC-内联汇编\" class=\"headerlink\" title=\"六、GCC 内联汇编\"></a>六、GCC 内联汇编</h3><p>用汇编编写的程序虽然运行速度快，但开发速度非常慢，效率也很低。如果只是想对关键代码段进行优化，或许更好的办法是将汇编指令嵌入到 C 语言程序中，从而充分利用高级语言和汇编语言各自的特点。但一般来讲，在 C 代码中嵌入汇编语句要比”纯粹”的汇编语言代码复杂得多，因为需要解决如何分配寄存器，以及如何与C代码中的变量相结合等问题。</p>\n<p>GCC 提供了很好的内联汇编支持，最基本的格式是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;asm statements&quot;);</span><br></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;nop&quot;);</span><br></pre></td></tr></table></figure>\n<p>如果需要同时执行多条汇编语句，则应该用”\\n\\t”将各个语句分隔开，例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__( &quot;pushl %%eax \\\\n\\\\t&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;movl $0, %%eax \\\\n\\\\t&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;popl %eax&quot;);</span><br></pre></td></tr></table></figure>\n<p>通常嵌入到 C 代码中的汇编语句很难做到与其它部分没有任何关系，因此更多时候需要用到完整的内联汇编格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;asm statements&quot; : outputs : inputs : registers-modified);</span><br></pre></td></tr></table></figure>\n<p>插入到 C 代码中的汇编语句是以”:”分隔的四个部分，其中第一部分就是汇编代码本身，通常称为指令部，其格式和在汇编语言中使用的格式基本相同。指令部分是必须的，而其它部分则可以根据实际情况而省略。</p>\n<p>在将汇编语句嵌入到C代码中时，操作数如何与C代码中的变量相结合是个很大的问题。GCC采用如下方法来解决这个问题：程序员提供具体的指令，而对寄存器的使用则只需给出”样板”和约束条件就可以了，具体如何将寄存器与变量结合起来完全由GCC和GAS来负责。</p>\n<p>在GCC 内联汇编语句的指令部中，加上前缀’’%’’的数字(如%0，%1)表示的就是需要使用寄存器的”样板”操作数。指令部中使用了几个样板操作数，就表明有几个变量需要与寄存器相结合，这样GCC和GAS在编译和汇编时会根据后面给定的约束条件进行恰当的处理。由于样板操作数也使用’’ %’’作为前缀，因此在涉及到具体的寄存器时，寄存器名前面应该加上两个’’%’’，以免产生混淆。</p>\n<p>紧跟在指令部后面的是输出部，是规定输出变量如何与样板操作数进行结合的条件，每个条件称为一个”约束”，必要时可以包含多个约束，相互之间用逗号分隔开就可以了。每个输出约束都以’’=’’号开始，然后紧跟一个对操作数类型进行说明的字后，最后是如何与变量相结合的约束。凡是与输出部中说明的操作数相结合的寄存器或操作数本身，在执行完嵌入的汇编代码后均不保留执行之前的内容，这是GCC在调度寄存器时所使用的依据。</p>\n<p>输出部后面是输入部，输入约束的格式和输出约束相似，但不带’’=’’号。如果一个输入约束要求使用寄存器，则GCC在预处理时就会为之分配一个寄存器，并插入必要的指令将操作数装入该寄存器。与输入部中说明的操作数结合的寄存器或操作数本身，在执行完嵌入的汇编代码后也不保留执行之前的内容。</p>\n<p>有时在进行某些操作时，除了要用到进行数据输入和输出的寄存器外，还要使用多个寄存器来保存中间计算结果，这样就难免会破坏原有寄存器的内容。在GCC内联汇编格式中的最后一个部分中，可以对将产生副作用的寄存器进行说明，以便GCC能够采用相应的措施。</p>\n<p>下面是一个内联汇编的简单例子：</p>\n<h6 id=\"例4-内联汇编\"><a href=\"#例4-内联汇编\" class=\"headerlink\" title=\"例4.内联汇编\"></a>例4.内联汇编</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a &#x3D; 10, b &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    __asm__ __volatile__(&quot;movl %1, %%eax;\\\\n\\\\r&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;movl %%eax, %0;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;&#x3D;r&quot;(b)</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;r&quot;(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    :&quot;%eax&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;Result: %d, %d\\\\n&quot;, a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序完成将变量a的值赋予变量b，有几点需要说明：</p>\n<p>变量b是输出操作数，通过%0来引用，而变量a是输入操作数，通过%1来引用。<br>输入操作数和输出操作数都使用r进行约束，表示将变量a和变量b存储在寄存器中。输入约束和输出约束的不同点在于输出约束多一个约束修饰符’’=’’。<br>在内联汇编语句中使用寄存器eax时，寄存器名前应该加两个’’%’’，即%%eax。内联汇编中使用%0、%1等来标识变量，任何只带一个’’%’’的标识符都看成是操作数，而不是寄存器。<br>内联汇编语句的最后一个部分告诉GCC它将改变寄存器eax中的值，GCC在处理时不应使用该寄存器来存储任何其它的值。<br>由于变量b被指定成输出操作数，当内联汇编语句执行完毕后，它所保存的值将被更新。<br>在内联汇编中用到的操作数从输出部的第一个约束开始编号，序号从0开始，每个约束记数一次，指令部要引用这些操作数时，只需在序号前加上’’%’’作为前缀就可以了。需要注意的是，内联汇编语句的指令部在引用一个操作数时总是将其作为32位的长字使用，但实际情况可能需要的是字或字节，因此应该在约束中指明正确的限定符：</p>\n<table>\n<thead>\n<tr>\n<th>限定符</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>“m”、”v”、”o”</td>\n<td>内存单元</td>\n</tr>\n<tr>\n<td>“r”</td>\n<td>任何寄存器</td>\n</tr>\n<tr>\n<td>“q”</td>\n<td>寄存器eax、ebx、ecx、edx之一</td>\n</tr>\n<tr>\n<td>“i”、”h”</td>\n<td>直接操作数</td>\n</tr>\n<tr>\n<td>“E”和”F”</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>“g”</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>“a”、”b”、”c”、”d”</td>\n<td>分别表示寄存器eax、ebx、ecx和edx</td>\n</tr>\n<tr>\n<td>“S”和”D”</td>\n<td>寄存器esi、edi</td>\n</tr>\n<tr>\n<td>“I”</td>\n<td>常数（0至31）</td>\n</tr>\n</tbody></table>\n<h3 id=\"七-LIBCO协程的swap代码\"><a href=\"#七-LIBCO协程的swap代码\" class=\"headerlink\" title=\"七.  LIBCO协程的swap代码\"></a>七.  LIBCO协程的swap代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.globl coctx_swap</span><br><span class=\"line\">#if !defined( __APPLE__ )</span><br><span class=\"line\">.type  coctx_swap, @function</span><br><span class=\"line\">#endif</span><br><span class=\"line\">coctx_swap:</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__i386__)</span><br><span class=\"line\">\tleal 4(%esp), %eax &#x2F;&#x2F;sp </span><br><span class=\"line\">\tmovl 4(%esp), %esp </span><br><span class=\"line\">\tleal 32(%esp), %esp &#x2F;&#x2F;parm a : &amp;regs[7] + sizeof(void*)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushl %eax &#x2F;&#x2F;esp -&gt;parm a </span><br><span class=\"line\"></span><br><span class=\"line\">\tpushl %ebp</span><br><span class=\"line\">\tpushl %esi</span><br><span class=\"line\">\tpushl %edi</span><br><span class=\"line\">\tpushl %edx</span><br><span class=\"line\">\tpushl %ecx</span><br><span class=\"line\">\tpushl %ebx</span><br><span class=\"line\">\tpushl -4(%eax)</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmovl 4(%eax), %esp &#x2F;&#x2F;parm b -&gt; &amp;regs[0]</span><br><span class=\"line\"></span><br><span class=\"line\">\tpopl %eax  &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">\tpopl %ebx  </span><br><span class=\"line\">\tpopl %ecx</span><br><span class=\"line\">\tpopl %edx</span><br><span class=\"line\">\tpopl %edi</span><br><span class=\"line\">\tpopl %esi</span><br><span class=\"line\">\tpopl %ebp</span><br><span class=\"line\">\tpopl %esp</span><br><span class=\"line\">\tpushl %eax &#x2F;&#x2F;set ret func addr</span><br><span class=\"line\"></span><br><span class=\"line\">\txorl %eax, %eax</span><br><span class=\"line\">\tret</span><br><span class=\"line\"></span><br><span class=\"line\">#elif defined(__x86_64__)</span><br><span class=\"line\">\tleaq 8(%rsp),%rax</span><br><span class=\"line\">\tleaq 112(%rdi),%rsp</span><br><span class=\"line\">\tpushq %rax</span><br><span class=\"line\">\tpushq %rbx</span><br><span class=\"line\">\tpushq %rcx</span><br><span class=\"line\">\tpushq %rdx</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushq -8(%rax) &#x2F;&#x2F;ret func addr</span><br><span class=\"line\"></span><br><span class=\"line\">\tpushq %rsi</span><br><span class=\"line\">\tpushq %rdi</span><br><span class=\"line\">\tpushq %rbp</span><br><span class=\"line\">\tpushq %r8</span><br><span class=\"line\">\tpushq %r9</span><br><span class=\"line\">\tpushq %r12</span><br><span class=\"line\">\tpushq %r13</span><br><span class=\"line\">\tpushq %r14</span><br><span class=\"line\">\tpushq %r15</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmovq %rsi, %rsp</span><br><span class=\"line\">\tpopq %r15</span><br><span class=\"line\">\tpopq %r14</span><br><span class=\"line\">\tpopq %r13</span><br><span class=\"line\">\tpopq %r12</span><br><span class=\"line\">\tpopq %r9</span><br><span class=\"line\">\tpopq %r8</span><br><span class=\"line\">\tpopq %rbp</span><br><span class=\"line\">\tpopq %rdi</span><br><span class=\"line\">\tpopq %rsi</span><br><span class=\"line\">\tpopq %rax &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">\tpopq %rdx</span><br><span class=\"line\">\tpopq %rcx</span><br><span class=\"line\">\tpopq %rbx</span><br><span class=\"line\">\tpopq %rsp</span><br><span class=\"line\">\tpushq %rax</span><br><span class=\"line\">\t</span><br><span class=\"line\">\txorl %eax, %eax</span><br><span class=\"line\">\tret</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>使用方式:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#define ESP 0</span><br><span class=\"line\">#define EIP 1</span><br><span class=\"line\">#define EAX 2</span><br><span class=\"line\">#define ECX 3</span><br><span class=\"line\">&#x2F;&#x2F; -----------</span><br><span class=\"line\">#define RSP 0</span><br><span class=\"line\">#define RIP 1</span><br><span class=\"line\">#define RBX 2</span><br><span class=\"line\">#define RDI 3</span><br><span class=\"line\">#define RSI 4</span><br><span class=\"line\"></span><br><span class=\"line\">#define RBP 5</span><br><span class=\"line\">#define R12 6</span><br><span class=\"line\">#define R13 7</span><br><span class=\"line\">#define R14 8</span><br><span class=\"line\">#define R15 9</span><br><span class=\"line\">#define RDX 10</span><br><span class=\"line\">#define RCX 11</span><br><span class=\"line\">#define R8 12</span><br><span class=\"line\">#define R9 13</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;----- --------</span><br><span class=\"line\">&#x2F;&#x2F; 32 bit</span><br><span class=\"line\">&#x2F;&#x2F; | regs[0]: ret |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[1]: ebx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[2]: ecx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[3]: edx |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[4]: edi |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[5]: esi |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[6]: ebp |</span><br><span class=\"line\">&#x2F;&#x2F; | regs[7]: eax |  &#x3D; esp</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkEIP &#x3D; 0,</span><br><span class=\"line\">\tkESP &#x3D; 7,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;-------------</span><br><span class=\"line\">&#x2F;&#x2F; 64 bit</span><br><span class=\"line\">&#x2F;&#x2F;low | regs[0]: r15 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[1]: r14 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[2]: r13 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[3]: r12 |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[4]: r9  |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[5]: r8  | </span><br><span class=\"line\">&#x2F;&#x2F;    | regs[6]: rbp |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[7]: rdi |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[8]: rsi |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[9]: ret |  &#x2F;&#x2F;ret func addr</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[10]: rdx |</span><br><span class=\"line\">&#x2F;&#x2F;    | regs[11]: rcx | </span><br><span class=\"line\">&#x2F;&#x2F;    | regs[12]: rbx |</span><br><span class=\"line\">&#x2F;&#x2F;hig | regs[13]: rsp |</span><br><span class=\"line\">enum</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tkRDI &#x3D; 7,</span><br><span class=\"line\">\tkRSI &#x3D; 8,</span><br><span class=\"line\">\tkRETAddr &#x3D; 9,</span><br><span class=\"line\">\tkRSP &#x3D; 13,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int coctx_make( coctx_t *ctx,coctx_pfn_t pfn,const void *s,const void *s1 )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar *sp &#x3D; ctx-&gt;ss_sp + ctx-&gt;ss_size;</span><br><span class=\"line\">\tsp &#x3D; (char*) ((unsigned long)sp &amp; -16LL  );</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemset(ctx-&gt;regs, 0, sizeof(ctx-&gt;regs));</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRSP ] &#x3D; sp - 8;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRETAddr] &#x3D; (char*)pfn;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx-&gt;regs[ kRDI ] &#x3D; (char*)s;</span><br><span class=\"line\">\tctx-&gt;regs[ kRSI ] &#x3D; (char*)s1;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int coctx_init( coctx_t *ctx )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmemset( ctx,0,sizeof(*ctx));</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extern &quot;C&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    extern void coctx_swap(coctx_t *, coctx_t*) asm(&quot;coctx_swap&quot;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">coctx_init(&amp;worker.ctx);</span><br><span class=\"line\">coctx_make(&amp;worker.ctx, stress, (void*)0, &amp;worker);</span><br><span class=\"line\">clock_t start &#x3D; clock();</span><br><span class=\"line\">for (int i &#x3D; 0; i &lt; 1000 * 10000; ++i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    coctx_swap(&amp;main_co.ctx, &amp;worker.ctx);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"古希腊历史和奥德赛","date":"2019-01-29T06:21:00.000Z","author":"yawei.zhang","_content":"\n> 在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  \n\n> 希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    \n\n> 提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  \n\n### story line:\n![古代希腊](http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg)   \n  \n  <!-- more --> \n> 公元前一万年  亚特兰蒂斯 被洪水毁灭  \n\n> 公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  \n\n> 公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 \n\n> 公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).\n\n\n> 公元前753年 罗马建城  \n\n> 公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  \n \n> 公元前8世纪 700-799 《奥德赛》成书  \n\n> 公元前650年 斯巴达成为希腊军事霸主  \n\n> 公元前600年 希腊称波斯地区为 波斯  \n\n> 公元前509 罗马共和国 元老院与罗马人民  \n\n> 公元前499年 希波战争  \n\n> 公元前490年  (希波战争)马拉松战役  \n\n> 公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士  \n> 公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败  \n> 公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  \n\n\n> 公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    \n\n> 公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  \n\n> 公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  \n\n\n> 公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  \n\n> 公元前146年 斯巴达被罗马征服  \n\n> 公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  \n> \n> 公元17世纪 罗马废除君主制,成立意大利共和国  \n> 公元1861年 意大利统一  意大利王国  \n> 公元1935年 波斯国王宣布国际改称伊朗 \n> 公元1946年 意大利建立共和国  \n\n\n##### 金苹果  \n希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  \n\n事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。\n\n在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   \n\n##### 三叉戟  \n在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  \n\n特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  \n\n普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.\n\n奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  \n\n\n刺客信条:\n这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。\n\n三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。\n\n  \n\n\n##### 金羊毛  \n\n在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。\n\n故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。\n\n\n##### 裹尸布  \n耶稣被钉死在十字架后用的裹尸布, 殓布.   \n朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.   \n圣杯,真十字架 圣枪都为圣物.   \n\n\n##### 弥赛亚  \n弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。\n\n### 刺客信条 结构  伊甸碎片设计\n\n裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   \n\n游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  \n\n裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。\n\n在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：\n\n　　1、改变先行者的身体结构。\n\n　　2、把思想储存到一些无机物里（比如石头）。\n\n　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  \n\n　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  \n\n\n信条和组织\n\n刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。\n\n巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。\n\n\n\n\n\n\n\n### 轴心时代   \n雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    \n\n完成超越突破拥有超越视野的四种结构:    \n\n* **个体生命的意义在来世 要依靠外力才能实现**  \n这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  \n\n* **个体生命的意义在今生 要依靠外力才能实现**  \n这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。\n\n* **个体生命的意义在来世 要依靠个体自身才能实现**  \n  这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。\n\n* **个体生命的意义在今生 要依靠个体自身才能实现**  \n  这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。\n\n","source":"_posts/2019-01-17-Odyssey.md","raw":"---\ntitle: 古希腊历史和奥德赛  \ndate: 2019-01-29 14:21:00\ncategories: \nauthor: yawei.zhang \n---\n\n> 在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  \n\n> 希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    \n\n> 提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  \n\n### story line:\n![古代希腊](http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg)   \n  \n  <!-- more --> \n> 公元前一万年  亚特兰蒂斯 被洪水毁灭  \n\n> 公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  \n\n> 公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 \n\n> 公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).\n\n\n> 公元前753年 罗马建城  \n\n> 公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  \n \n> 公元前8世纪 700-799 《奥德赛》成书  \n\n> 公元前650年 斯巴达成为希腊军事霸主  \n\n> 公元前600年 希腊称波斯地区为 波斯  \n\n> 公元前509 罗马共和国 元老院与罗马人民  \n\n> 公元前499年 希波战争  \n\n> 公元前490年  (希波战争)马拉松战役  \n\n> 公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士  \n> 公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败  \n> 公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  \n\n\n> 公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    \n\n> 公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  \n\n> 公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  \n\n\n> 公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  \n\n> 公元前146年 斯巴达被罗马征服  \n\n> 公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  \n> \n> 公元17世纪 罗马废除君主制,成立意大利共和国  \n> 公元1861年 意大利统一  意大利王国  \n> 公元1935年 波斯国王宣布国际改称伊朗 \n> 公元1946年 意大利建立共和国  \n\n\n##### 金苹果  \n希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  \n\n事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。\n\n在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   \n\n##### 三叉戟  \n在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  \n\n特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  \n\n普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.\n\n奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  \n\n\n刺客信条:\n这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。\n\n三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。\n\n  \n\n\n##### 金羊毛  \n\n在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。\n\n故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。\n\n\n##### 裹尸布  \n耶稣被钉死在十字架后用的裹尸布, 殓布.   \n朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.   \n圣杯,真十字架 圣枪都为圣物.   \n\n\n##### 弥赛亚  \n弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。\n\n### 刺客信条 结构  伊甸碎片设计\n\n裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   \n\n游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  \n\n裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。\n\n在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：\n\n　　1、改变先行者的身体结构。\n\n　　2、把思想储存到一些无机物里（比如石头）。\n\n　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  \n\n　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  \n\n\n信条和组织\n\n刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。\n\n巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。\n\n\n\n\n\n\n\n### 轴心时代   \n雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    \n\n完成超越突破拥有超越视野的四种结构:    \n\n* **个体生命的意义在来世 要依靠外力才能实现**  \n这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  \n\n* **个体生命的意义在今生 要依靠外力才能实现**  \n这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。\n\n* **个体生命的意义在来世 要依靠个体自身才能实现**  \n  这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。\n\n* **个体生命的意义在今生 要依靠个体自身才能实现**  \n  这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。\n\n","slug":"2019-01-17-Odyssey","published":1,"updated":"2019-02-19T07:22:36.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeip000g7w5he3b0d2kh","content":"<blockquote>\n<p>在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  </p>\n</blockquote>\n<blockquote>\n<p>希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    </p>\n</blockquote>\n<blockquote>\n<p>提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  </p>\n</blockquote>\n<h3><span id=\"story-line\">story line:</span></h3><p><img src=\"http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg\" alt=\"古代希腊\">   </p>\n  <a id=\"more\"></a> \n<blockquote>\n<p>公元前一万年  亚特兰蒂斯 被洪水毁灭  </p>\n</blockquote>\n<blockquote>\n<p>公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  </p>\n</blockquote>\n<blockquote>\n<p>公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 </p>\n</blockquote>\n<blockquote>\n<p>公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).</p>\n</blockquote>\n<blockquote>\n<p>公元前753年 罗马建城  </p>\n</blockquote>\n<blockquote>\n<p>公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  </p>\n</blockquote>\n<blockquote>\n<p>公元前8世纪 700-799 《奥德赛》成书  </p>\n</blockquote>\n<blockquote>\n<p>公元前650年 斯巴达成为希腊军事霸主  </p>\n</blockquote>\n<blockquote>\n<p>公元前600年 希腊称波斯地区为 波斯  </p>\n</blockquote>\n<blockquote>\n<p>公元前509 罗马共和国 元老院与罗马人民  </p>\n</blockquote>\n<blockquote>\n<p>公元前499年 希波战争  </p>\n</blockquote>\n<blockquote>\n<p>公元前490年  (希波战争)马拉松战役  </p>\n</blockquote>\n<blockquote>\n<p>公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士<br>公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败<br>公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  </p>\n</blockquote>\n<blockquote>\n<p>公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    </p>\n</blockquote>\n<blockquote>\n<p>公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  </p>\n</blockquote>\n<blockquote>\n<p>公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  </p>\n</blockquote>\n<blockquote>\n<p>公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  </p>\n</blockquote>\n<blockquote>\n<p>公元前146年 斯巴达被罗马征服  </p>\n</blockquote>\n<blockquote>\n<p>公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  </p>\n<p>公元17世纪 罗马废除君主制,成立意大利共和国<br>公元1861年 意大利统一  意大利王国<br>公元1935年 波斯国王宣布国际改称伊朗<br>公元1946年 意大利建立共和国  </p>\n</blockquote>\n<h5><span id=\"金苹果\">金苹果</span></h5><p>希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  </p>\n<p>事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。</p>\n<p>在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   </p>\n<h5><span id=\"三叉戟\">三叉戟</span></h5><p>在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  </p>\n<p>特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  </p>\n<p>普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.</p>\n<p>奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  </p>\n<p>刺客信条:<br>这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。</p>\n<p>三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。</p>\n<h5><span id=\"金羊毛\">金羊毛</span></h5><p>在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。</p>\n<p>故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。</p>\n<h5><span id=\"裹尸布\">裹尸布</span></h5><p>耶稣被钉死在十字架后用的裹尸布, 殓布.<br>朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.<br>圣杯,真十字架 圣枪都为圣物.   </p>\n<h5><span id=\"弥赛亚\">弥赛亚</span></h5><p>弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。</p>\n<h3><span id=\"刺客信条-结构-伊甸碎片设计\">刺客信条 结构  伊甸碎片设计</span></h3><p>裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   </p>\n<p>游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  </p>\n<p>裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。</p>\n<p>在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：</p>\n<p>　　1、改变先行者的身体结构。</p>\n<p>　　2、把思想储存到一些无机物里（比如石头）。</p>\n<p>　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  </p>\n<p>　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  </p>\n<p>信条和组织</p>\n<p>刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。</p>\n<p>巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。</p>\n<h3><span id=\"轴心时代\">轴心时代</span></h3><p>雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    </p>\n<p>完成超越突破拥有超越视野的四种结构:    </p>\n<ul>\n<li><p><strong>个体生命的意义在来世 要依靠外力才能实现</strong><br>这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  </p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠外力才能实现</strong><br>这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。</p>\n</li>\n<li><p><strong>个体生命的意义在来世 要依靠个体自身才能实现</strong><br>这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。</p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠个体自身才能实现</strong><br>这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在现代英语中，人们将奥德赛这个词引申为“长途的冒险行程”，用来形容类似的探索或者冒险经历。  </p>\n</blockquote>\n<blockquote>\n<p>希腊半岛又称为巴尔干半岛(有时包含更多的区域),  雅典位于阿提卡半岛, 斯巴达和奥林匹亚位于伯罗奔尼撒半岛.    </p>\n</blockquote>\n<blockquote>\n<p>提洛岛是基克拉泽斯群岛的心脏, 希腊神话中女神勒托的居住地, 阿波罗和阿耳忒弥斯的出生地, 为宗教圣地.  </p>\n</blockquote>\n<h3 id=\"story-line\"><a href=\"#story-line\" class=\"headerlink\" title=\"story line:\"></a>story line:</h3><p><img src=\"http://a0.att.hudong.com/41/79/01300000433093124784792406044.jpg\" alt=\"古代希腊\">   </p>","more":"<blockquote>\n<p>公元前一万年  亚特兰蒂斯 被洪水毁灭  </p>\n</blockquote>\n<blockquote>\n<p>公元前1900(BC) 迈锡尼人(老斯巴达人)到达希腊半岛, 1500BC统治希腊半岛, 1380BC统治东地中海.  </p>\n</blockquote>\n<blockquote>\n<p>公元前1250左右 特洛伊战争爆发  迈锡尼人衰落 </p>\n</blockquote>\n<blockquote>\n<p>公元前1100年至前950年期间 多利亚人入侵伯罗奔尼撒半岛 建都斯巴达  (新斯巴达人, 原斯巴达人变为奴隶 迈锡尼人).</p>\n</blockquote>\n<blockquote>\n<p>公元前753年 罗马建城  </p>\n</blockquote>\n<blockquote>\n<p>公元前736  斯巴达第一次美塞尼亚战争, 第二次美塞尼亚战争, 斯巴达人转型为军国主义(人口比例奴隶7,斯巴达人3)  </p>\n</blockquote>\n<blockquote>\n<p>公元前8世纪 700-799 《奥德赛》成书  </p>\n</blockquote>\n<blockquote>\n<p>公元前650年 斯巴达成为希腊军事霸主  </p>\n</blockquote>\n<blockquote>\n<p>公元前600年 希腊称波斯地区为 波斯  </p>\n</blockquote>\n<blockquote>\n<p>公元前509 罗马共和国 元老院与罗马人民  </p>\n</blockquote>\n<blockquote>\n<p>公元前499年 希波战争  </p>\n</blockquote>\n<blockquote>\n<p>公元前490年  (希波战争)马拉松战役  </p>\n</blockquote>\n<blockquote>\n<p>公元前480年约9月 (希波战争)温泉关战役 斯巴达300勇士<br>公元前480年9月   (希波战争)萨拉米斯海战 波斯海军大败<br>公元前479年      (希波战争)普拉提亚战役 波斯陆军大败  </p>\n</blockquote>\n<blockquote>\n<p>公元前431到404年 伯罗奔尼撒战争爆发 (雅典的提洛同盟和斯巴达的伯罗奔尼撒战争联盟)   (前470-前399 苏格拉底, 前429-前347 柏拉图, 前384-前322 亚里士多德(亚历山大老师))    </p>\n</blockquote>\n<blockquote>\n<p>公元前371年 斯巴达在留克特拉战役中战败 (底比斯 神圣少年爱军..)  </p>\n</blockquote>\n<blockquote>\n<p>公元前356-前334前323 亚历山大大帝 十年的亚历山大东征 征服波斯帝国  </p>\n</blockquote>\n<blockquote>\n<p>公元前215年-前148 罗马共和国 四次马其顿战争征服马其顿控制整个希腊  </p>\n</blockquote>\n<blockquote>\n<p>公元前146年 斯巴达被罗马征服  </p>\n</blockquote>\n<blockquote>\n<p>公元前44年 凯撒大帝遇刺, 屋大维击败安东尼开创罗马帝国   存在将近一千五百年.  </p>\n<p>公元17世纪 罗马废除君主制,成立意大利共和国<br>公元1861年 意大利统一  意大利王国<br>公元1935年 波斯国王宣布国际改称伊朗<br>公元1946年 意大利建立共和国  </p>\n</blockquote>\n<h5 id=\"金苹果\"><a href=\"#金苹果\" class=\"headerlink\" title=\"金苹果\"></a>金苹果</h5><p>希腊神话中重要的承前启后的事件（金苹果事件→帕里斯的评判→特洛伊战争）。  </p>\n<p>事发人间英雄佩琉斯与海中女神忒提斯的婚宴。由于婚事直接由天神宙斯撮合，当时邀请了一批神级较高的神祇赴宴。据一些史诗记载是因为金制的名贵餐具有限——当然也不排除其本身不受欢迎的因素——管辖纠纷的女神厄里斯未被邀请。觉得受到冒犯的厄里斯不请自来，一言不发，在宴席上留下一个硕大华丽的黄金苹果，上面刻有“καλλίστῃ”（kallistē(i)/ Kallisti）的字样，意思是“献给最美丽的女神”；该物被称为“引致纠纷的金苹果”。</p>\n<p>在场神级最高、同时也最为美艳的三位女神：雅典娜、阿佛罗狄忒和赫拉卷入了金苹果所引致的纠纷，她们要求宙斯评判谁可以获得金苹果。宙斯则认为，凡间一位潇洒俊朗、一表人才的王子帕里斯更适合成为这道难题的评判，其人当时正在特洛伊城附近的艾达山上牧羊。于是，天后赫拉、智慧女神雅典娜与爱神阿佛罗狄忒在神使赫耳墨斯的前导下，前往艾达山，请帕里斯王子作仲裁。帕里斯将象征“最美女神”的金苹果给了爱神阿佛罗狄忒，因为她承诺帕里斯将会得到人间最美丽女子海伦的爱情。   </p>\n<h5 id=\"三叉戟\"><a href=\"#三叉戟\" class=\"headerlink\" title=\"三叉戟\"></a>三叉戟</h5><p>在希腊神话中，这是海神波塞顿的象征物和武器，传说是他用三叉劈开大山，将山石变成岛屿。如同对应于波塞顿的罗马神尼普顿也是以三叉为象征。但在基督教、天主教里认为三叉是魔鬼撒旦的武器（二短一长的形体有男性阳具的象征），这些转变和对立被一些学者认为是新宗教代替旧宗教时的证据。  </p>\n<p>特洛伊的城墙是太阳神阿波罗以及海神波塞冬共同建造(篡位失败被宙斯惩罚), 但因普里阿摩斯的父亲拉俄墨冬拒绝回礼被海神引海水淹了一次.  </p>\n<p>普里阿摩斯是最后一个特洛伊王, 儿子赫克托和阿基里斯(希腊第一勇士,阿喀琉斯之踵)决斗被战死. 另外一个儿子帕里斯这时金苹果事件里的裁判, 海伦和帕里斯私奔到特洛伊城 引发特洛伊战争, 阿喀琉斯的儿子涅俄普托勒摩斯在特洛伊战争中杀死特洛伊国王普里阿摩斯.</p>\n<p>奥德修斯(奥德赛)在特洛伊胜利回国途中(西西里岛 意大利 罗马)(葡萄酒灌醉)刺瞎独目巨人(荷马奥德赛中为波塞冬的儿子),躲在绵羊肚子下面逃走,得罪海神波塞冬, 十年后才回到自己国家.   (赫西奥德神话中 宙斯的长矛,波塞冬的三叉戟,冥王哈迪斯的双股叉都为独眼巨人打造)  </p>\n<p>刺客信条:<br>这个波塞多的标志性武器也是一件伊甸碎片，出场于刺客信条末裔小说。三叉戟原本为伊述人制造和保管，数千年后，它落入亚历山大大帝手中，利用三叉戟的力量战无不胜，最终造就了庞大的帝国。</p>\n<p>三叉戟有三块戟尖，每块都可以单独作为匕首使用，拥有不同的能力：一块使人敬畏，一块使人钦慕，一块使人迷信。</p>\n<h5 id=\"金羊毛\"><a href=\"#金羊毛\" class=\"headerlink\" title=\"金羊毛\"></a>金羊毛</h5><p>在希腊神话中，金羊毛是一种稀世珍宝，代表着权威和王权。</p>\n<p>故事的主人公叫伊阿宋，是古希腊王国的王位继承人，年幼时他亲眼目睹了亲叔叔珀利阿斯如何为了王位残忍地谋害了父亲。侥幸逃命之后，伊阿宋远离了故土，卧薪尝胆二十年努力学习各种技艺，期待能重返家园，夺回王位。珀利阿斯听说了他准备回来的消息后，宣布判处伊阿宋死刑。为了活命，伊阿宋答应给叔叔献上众神的礼物——金羊毛，于是他跟一群勇敢的水手们一起踏上了寻找金羊毛的惊险旅程，并最终实现了自己的目标。</p>\n<h5 id=\"裹尸布\"><a href=\"#裹尸布\" class=\"headerlink\" title=\"裹尸布\"></a>裹尸布</h5><p>耶稣被钉死在十字架后用的裹尸布, 殓布.<br>朗基努斯枪: 罗马士兵确认耶稣是否死亡的长矛.<br>圣杯,真十字架 圣枪都为圣物.   </p>\n<h5 id=\"弥赛亚\"><a href=\"#弥赛亚\" class=\"headerlink\" title=\"弥赛亚\"></a>弥赛亚</h5><p>弥赛亚（天主教译作默西亚，英语：Messiah），是个圣经词语，与希腊语词基督是一个意思，在希伯来语中最初的意思是受膏者，指的是上帝所选中的人，具有特殊的权力，受膏者是“被委任担当特别职务的人”的意思，是一个头衔或者称号，并不是名字。</p>\n<h3 id=\"刺客信条-结构-伊甸碎片设计\"><a href=\"#刺客信条-结构-伊甸碎片设计\" class=\"headerlink\" title=\"刺客信条 结构  伊甸碎片设计\"></a>刺客信条 结构  伊甸碎片设计</h3><p>裹尸布是一种用来治疗伤病的伊甸碎片。是一块沾有血迹的白布，通常被放在一个简朴的木盒子里。布上还有一个双臂展开，手掌朝外的人印，此人似乎正受到折磨。   </p>\n<p>游戏中的裹尸布，传说能够让人起死回生，但实际情况是：裹尸布只能让人恢复一点活力，而且时间很短，有的时候还会产生幻觉。这些幻觉主要是：过去裹尸布使用者留下的记忆。  </p>\n<p>裹尸布的制造者叫“康苏斯”，在罗马神话中代表五谷之神（如果不是留言告诉我）在游戏里通过乔凡自称博学之神。康苏斯应该是第一文明的一位科研人员。他对于生命、物质、能量、时间相互转换非常精通。</p>\n<p>在第一文明寻找避免大灾难的方法时，康苏斯曾提出了几个大胆的设想：</p>\n<p>　　1、改变先行者的身体结构。</p>\n<p>　　2、把思想储存到一些无机物里（比如石头）。</p>\n<p>　　（六种方案里提到过）康苏斯将自己的思想意识存储在裹尸布之中。任何使用裹尸布的人，都会被康苏斯的意识短暂控制。  </p>\n<p>　有关裹尸布最早的传说来自希腊神话。它当时被称作金羊毛，具有神秘的力量。伊阿宋从一棵由毒龙把守的树上，取下了金羊毛。  </p>\n<p>信条和组织</p>\n<p>刺客的信条和圣殿骑士团都已经存在了数千年之久（同时诞生于大约公元75000年前），变化了不知多少形式，多少名称。刺客宇宙中，我们约定俗成地将他们称为为刺客和圣殿骑士。比如，起源中，刺客其实是叫无形者，而圣殿骑士是上古维序者。</p>\n<p>巴耶克建立了无形者并将之作为信条，使用了我们后来所熟知的标志，巴耶克的袖剑是古代刺客墓穴中获得的，因此，巴耶克并不是第一个刺客。因此，《奥德赛》中出现的将会是另一种形式的刺客组织。</p>\n<h3 id=\"轴心时代\"><a href=\"#轴心时代\" class=\"headerlink\" title=\"轴心时代\"></a>轴心时代</h3><p>雅思贝尔斯的分析框架 超越突破是指产生了不依赖于社会而以个人为载体的思想, 然后再把该思想视角重新投向社会,以此思想产生的价值作为社会存在合理性的最终依据.    </p>\n<p>完成超越突破拥有超越视野的四种结构:    </p>\n<ul>\n<li><p><strong>个体生命的意义在来世 要依靠外力才能实现</strong><br>这就是希伯来救赎型文明 即一神论宗教文明 从最早的犹太教 到后来的基督教 伊斯兰教都是这条藤结出的果实 相关宗教史暂时挖个坑。  </p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠外力才能实现</strong><br>这就是古希腊求知型文明 即逻各斯 哲学文明 从最早的原子论 数学 逻辑学 到现在都科学大厦 都是在这一基础上建构的。</p>\n</li>\n<li><p><strong>个体生命的意义在来世 要依靠个体自身才能实现</strong><br>这就是古印度解脱型文明 即心灵文明（以修心 冥想为特色） 从最早的婆罗门教 佛教 耆那教 到回来的印度教 都是这一文明开出的花朵。</p>\n</li>\n<li><p><strong>个体生命的意义在今生 要依靠个体自身才能实现</strong><br>这就是大中华儒家文明 即伦理文明。从春秋战国的儒墨道法 诸子百家 到汉代天人合一 到两晋的玄学 到后来的理学 心学 是这一文明在不同时期的演化形态。</p>\n</li>\n</ul>"},{"title":"RVO源码阅读笔记","date":"2019-06-08T10:37:00.000Z","author":"yawei.zhang","_content":"\n \n##### KDTREE  \n空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### 路径规划  \n##### 高级规划  \nDIJKSTRA 最短路径  等寻路方法  \n##### 底层规划  \nVO RVO ORCA等Obstacle Avoidance避障算法  \n\n### KDTREE\n这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### VO  Velocity Obstacles  速度障碍  \n核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外   \n抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  \n\n### RVO Reciprocal Velocity Obstacles  互惠的速度障碍  \n核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   \n\n### ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免  \n核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   \n\n* **对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA**  \n* **在候选集中求解跟自己偏好速度最近的一个速度vnewA**  \n\n<!-- more --> \n##### computeNewVelocity  \n``` cpp\n/* Search for the best new velocity. */\nvoid Agent::computeNewVelocity()\n{\n    orcaLines_.clear();\n\n    const size_t numObstLines = orcaLines_.size();\n\n    const float invTimeHorizon = 1.0f / timeHorizon_;\n\n    /* Create agent ORCA lines. */\n    for (size_t i = 0; i < agentNeighbors_.size(); ++i) {\n        const Agent *const other = agentNeighbors_[i].second;\n\n        const Vector2 relativePosition = other->position_ - position_;\n        const Vector2 relativeVelocity = velocity_ - other->velocity_;\n        const float distSq = absSq(relativePosition);\n        const float combinedRadius = radius_ + other->radius_;\n        const float combinedRadiusSq = sqr(combinedRadius);\n\n        Line line;\n        Vector2 u;\n\n        if (distSq > combinedRadiusSq) {\n            /* No collision. */\n            const Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;\n            /* Vector from cutoff center to relative velocity. */\n            const float wLengthSq = absSq(w);\n\n            const float dotProduct1 = w * relativePosition;\n\n            if (dotProduct1 < 0.0f && sqr(dotProduct1) > combinedRadiusSq * wLengthSq) {\n                /* Project on cut-off circle. */\n                const float wLength = std::sqrt(wLengthSq);\n                const Vector2 unitW = w / wLength;\n\n                line.direction = Vector2(unitW.y(), -unitW.x());\n                u = (combinedRadius * invTimeHorizon - wLength) * unitW;\n            }\n            else {\n                /* Project on legs. */\n                const float leg = std::sqrt(distSq - combinedRadiusSq);\n\n                if (det(relativePosition, w) > 0.0f) {\n                    /* Project on left leg. */\n                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n                else {\n                    /* Project on right leg. */\n                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n\n                const float dotProduct2 = relativeVelocity * line.direction;\n\n                u = dotProduct2 * line.direction - relativeVelocity;\n            }\n        }\n        else {\n            /* Collision. Project on cut-off circle of time timeStep. */\n            const float invTimeStep = 1.0f / sim_->timeStep_;\n\n            /* Vector from cutoff center to relative velocity. */\n            const Vector2 w = relativeVelocity - invTimeStep * relativePosition;\n\n            const float wLength = abs(w);\n            const Vector2 unitW = w / wLength;\n\n            line.direction = Vector2(unitW.y(), -unitW.x());\n            u = (combinedRadius * invTimeStep - wLength) * unitW;\n        }\n\n        line.point = velocity_ + 0.5f * u;\n        orcaLines_.push_back(line);\n    }\n\n    size_t lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, false, newVelocity_);\n\n    if (lineFail < orcaLines_.size()) {\n        //linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);\n    }\n}\n```\n##### linearProgram2\n``` cpp\nsize_t linearProgram2(const std::vector<Line> &lines, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    if (directionOpt) {\n        /*\n            * Optimize direction. Note that the optimization velocity is of unit\n            * length in this case.\n            */\n        result = optVelocity * radius;\n    }\n    else if (absSq(optVelocity) > sqr(radius)) {\n        /* Optimize closest point and outside circle. */\n        result = normalize(optVelocity) * radius;\n    }\n    else {\n        /* Optimize closest point and inside circle. */\n        result = optVelocity;\n    }\n\n    for (size_t i = 0; i < lines.size(); ++i) {\n        if (det(lines[i].direction, lines[i].point - result) > 0.0f) {\n            /* Result does not satisfy constraint i. Compute new optimal result. */\n            const Vector2 tempResult = result;\n\n            if (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) {\n                result = tempResult;\n                return i;\n            }\n        }\n    }\n\n    return lines.size();\n}\n```\n\n##### linearProgram1\n``` cpp \nbool linearProgram1(const std::vector<Line> &lines, size_t lineNo, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    const float dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    const float discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    if (discriminant < 0.0f) {\n        /* Max speed circle fully invalidates line lineNo. */\n        return false;\n    }\n\n    const float sqrtDiscriminant = std::sqrt(discriminant);\n    float tLeft = -dotProduct - sqrtDiscriminant;\n    float tRight = -dotProduct + sqrtDiscriminant;\n\n    for (size_t i = 0; i < lineNo; ++i) {\n        const float denominator = det(lines[lineNo].direction, lines[i].direction);\n        const float numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        if (std::fabs(denominator) <= RVO_EPSILON) {\n            /* Lines lineNo and i are (almost) parallel. */\n            if (numerator < 0.0f) {\n                return false;\n            }\n            else {\n                continue;\n            }\n        }\n\n        const float t = numerator / denominator;\n\n        if (denominator >= 0.0f) {\n            /* Line i bounds line lineNo on the right. */\n            tRight = std::min(tRight, t);\n        }\n        else {\n            /* Line i bounds line lineNo on the left. */\n            tLeft = std::max(tLeft, t);\n        }\n\n        if (tLeft > tRight) {\n            return false;\n        }\n    }\n\n    if (directionOpt) {\n        /* Optimize direction. */\n        if (optVelocity * lines[lineNo].direction > 0.0f) {\n            /* Take right extreme. */\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            /* Take left extreme. */\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    else {\n        /* Optimize closest point. */\n        const float t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        if (t < tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        else if (t > tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    return true;\n}\n``` \n","source":"_posts/2019-06-08-rvo.md","raw":"---\ntitle: RVO源码阅读笔记  \ndate: 2019-06-08 18:37:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n \n##### KDTREE  \n空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### 路径规划  \n##### 高级规划  \nDIJKSTRA 最短路径  等寻路方法  \n##### 底层规划  \nVO RVO ORCA等Obstacle Avoidance避障算法  \n\n### KDTREE\n这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  \n\n### VO  Velocity Obstacles  速度障碍  \n核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外   \n抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  \n\n### RVO Reciprocal Velocity Obstacles  互惠的速度障碍  \n核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   \n\n### ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免  \n核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   \n\n* **对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA**  \n* **在候选集中求解跟自己偏好速度最近的一个速度vnewA**  \n\n<!-- more --> \n##### computeNewVelocity  \n``` cpp\n/* Search for the best new velocity. */\nvoid Agent::computeNewVelocity()\n{\n    orcaLines_.clear();\n\n    const size_t numObstLines = orcaLines_.size();\n\n    const float invTimeHorizon = 1.0f / timeHorizon_;\n\n    /* Create agent ORCA lines. */\n    for (size_t i = 0; i < agentNeighbors_.size(); ++i) {\n        const Agent *const other = agentNeighbors_[i].second;\n\n        const Vector2 relativePosition = other->position_ - position_;\n        const Vector2 relativeVelocity = velocity_ - other->velocity_;\n        const float distSq = absSq(relativePosition);\n        const float combinedRadius = radius_ + other->radius_;\n        const float combinedRadiusSq = sqr(combinedRadius);\n\n        Line line;\n        Vector2 u;\n\n        if (distSq > combinedRadiusSq) {\n            /* No collision. */\n            const Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;\n            /* Vector from cutoff center to relative velocity. */\n            const float wLengthSq = absSq(w);\n\n            const float dotProduct1 = w * relativePosition;\n\n            if (dotProduct1 < 0.0f && sqr(dotProduct1) > combinedRadiusSq * wLengthSq) {\n                /* Project on cut-off circle. */\n                const float wLength = std::sqrt(wLengthSq);\n                const Vector2 unitW = w / wLength;\n\n                line.direction = Vector2(unitW.y(), -unitW.x());\n                u = (combinedRadius * invTimeHorizon - wLength) * unitW;\n            }\n            else {\n                /* Project on legs. */\n                const float leg = std::sqrt(distSq - combinedRadiusSq);\n\n                if (det(relativePosition, w) > 0.0f) {\n                    /* Project on left leg. */\n                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n                else {\n                    /* Project on right leg. */\n                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;\n                }\n\n                const float dotProduct2 = relativeVelocity * line.direction;\n\n                u = dotProduct2 * line.direction - relativeVelocity;\n            }\n        }\n        else {\n            /* Collision. Project on cut-off circle of time timeStep. */\n            const float invTimeStep = 1.0f / sim_->timeStep_;\n\n            /* Vector from cutoff center to relative velocity. */\n            const Vector2 w = relativeVelocity - invTimeStep * relativePosition;\n\n            const float wLength = abs(w);\n            const Vector2 unitW = w / wLength;\n\n            line.direction = Vector2(unitW.y(), -unitW.x());\n            u = (combinedRadius * invTimeStep - wLength) * unitW;\n        }\n\n        line.point = velocity_ + 0.5f * u;\n        orcaLines_.push_back(line);\n    }\n\n    size_t lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, false, newVelocity_);\n\n    if (lineFail < orcaLines_.size()) {\n        //linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);\n    }\n}\n```\n##### linearProgram2\n``` cpp\nsize_t linearProgram2(const std::vector<Line> &lines, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    if (directionOpt) {\n        /*\n            * Optimize direction. Note that the optimization velocity is of unit\n            * length in this case.\n            */\n        result = optVelocity * radius;\n    }\n    else if (absSq(optVelocity) > sqr(radius)) {\n        /* Optimize closest point and outside circle. */\n        result = normalize(optVelocity) * radius;\n    }\n    else {\n        /* Optimize closest point and inside circle. */\n        result = optVelocity;\n    }\n\n    for (size_t i = 0; i < lines.size(); ++i) {\n        if (det(lines[i].direction, lines[i].point - result) > 0.0f) {\n            /* Result does not satisfy constraint i. Compute new optimal result. */\n            const Vector2 tempResult = result;\n\n            if (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) {\n                result = tempResult;\n                return i;\n            }\n        }\n    }\n\n    return lines.size();\n}\n```\n\n##### linearProgram1\n``` cpp \nbool linearProgram1(const std::vector<Line> &lines, size_t lineNo, float radius, const Vector2 &optVelocity, bool directionOpt, Vector2 &result)\n{\n    const float dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    const float discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    if (discriminant < 0.0f) {\n        /* Max speed circle fully invalidates line lineNo. */\n        return false;\n    }\n\n    const float sqrtDiscriminant = std::sqrt(discriminant);\n    float tLeft = -dotProduct - sqrtDiscriminant;\n    float tRight = -dotProduct + sqrtDiscriminant;\n\n    for (size_t i = 0; i < lineNo; ++i) {\n        const float denominator = det(lines[lineNo].direction, lines[i].direction);\n        const float numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        if (std::fabs(denominator) <= RVO_EPSILON) {\n            /* Lines lineNo and i are (almost) parallel. */\n            if (numerator < 0.0f) {\n                return false;\n            }\n            else {\n                continue;\n            }\n        }\n\n        const float t = numerator / denominator;\n\n        if (denominator >= 0.0f) {\n            /* Line i bounds line lineNo on the right. */\n            tRight = std::min(tRight, t);\n        }\n        else {\n            /* Line i bounds line lineNo on the left. */\n            tLeft = std::max(tLeft, t);\n        }\n\n        if (tLeft > tRight) {\n            return false;\n        }\n    }\n\n    if (directionOpt) {\n        /* Optimize direction. */\n        if (optVelocity * lines[lineNo].direction > 0.0f) {\n            /* Take right extreme. */\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            /* Take left extreme. */\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    else {\n        /* Optimize closest point. */\n        const float t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        if (t < tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        else if (t > tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        else {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    return true;\n}\n``` \n","slug":"2019-06-08-rvo","published":1,"updated":"2019-06-08T10:38:30.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeir000i7w5h338udyfv","content":"<h5><span id=\"kdtree\">KDTREE</span></h5><p>空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3><span id=\"路径规划\">路径规划</span></h3><h5><span id=\"高级规划\">高级规划</span></h5><p>DIJKSTRA 最短路径  等寻路方法  </p>\n<h5><span id=\"底层规划\">底层规划</span></h5><p>VO RVO ORCA等Obstacle Avoidance避障算法  </p>\n<h3><span id=\"kdtree\">KDTREE</span></h3><p>这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3><span id=\"vo-velocity-obstacles-速度障碍\">VO  Velocity Obstacles  速度障碍</span></h3><p>核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外<br>抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  </p>\n<h3><span id=\"rvo-reciprocal-velocity-obstacles-互惠的速度障碍\">RVO Reciprocal Velocity Obstacles  互惠的速度障碍</span></h3><p>核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   </p>\n<h3><span id=\"orca-optimal-reciprocal-collision-avoidance-最优互惠碰撞避免\">ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免</span></h3><p>核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   </p>\n<ul>\n<li><strong>对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA</strong>  </li>\n<li><strong>在候选集中求解跟自己偏好速度最近的一个速度vnewA</strong>  </li>\n</ul>\n<a id=\"more\"></a> \n<h5><span id=\"computenewvelocity\">computeNewVelocity</span></h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Search for the best new velocity. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Agent::computeNewVelocity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    orcaLines_.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> numObstLines = orcaLines_.size();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeHorizon = <span class=\"number\">1.0f</span> / timeHorizon_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Create agent ORCA lines. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; agentNeighbors_.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Agent *<span class=\"keyword\">const</span> other = agentNeighbors_[i].second;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativePosition = other-&gt;position_ - position_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativeVelocity = velocity_ - other-&gt;velocity_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> distSq = absSq(relativePosition);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadius = radius_ + other-&gt;radius_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadiusSq = sqr(combinedRadius);</span><br><span class=\"line\"></span><br><span class=\"line\">        Line line;</span><br><span class=\"line\">        Vector2 u;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (distSq &gt; combinedRadiusSq) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* No collision. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;</span><br><span class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLengthSq = absSq(w);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct1 = w * relativePosition;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dotProduct1 &lt; <span class=\"number\">0.0f</span> &amp;&amp; sqr(dotProduct1) &gt; combinedRadiusSq * wLengthSq) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Project on cut-off circle. */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(wLengthSq);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                line.direction = Vector2(unitW.y(), -unitW.x());</span><br><span class=\"line\">                u = (combinedRadius * invTimeHorizon - wLength) * unitW;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Project on legs. */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> leg = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(distSq - combinedRadiusSq);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (det(relativePosition, w) &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* Project on left leg. */</span></span><br><span class=\"line\">                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* Project on right leg. */</span></span><br><span class=\"line\">                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct2 = relativeVelocity * line.direction;</span><br><span class=\"line\"></span><br><span class=\"line\">                u = dotProduct2 * line.direction - relativeVelocity;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Collision. Project on cut-off circle of time timeStep. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeStep = <span class=\"number\">1.0f</span> / sim_-&gt;timeStep_;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeStep * relativePosition;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">abs</span>(w);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</span><br><span class=\"line\"></span><br><span class=\"line\">            line.direction = Vector2(unitW.y(), -unitW.x());</span><br><span class=\"line\">            u = (combinedRadius * invTimeStep - wLength) * unitW;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        line.point = velocity_ + <span class=\"number\">0.5f</span> * u;</span><br><span class=\"line\">        orcaLines_.push_back(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, <span class=\"literal\">false</span>, newVelocity_);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lineFail &lt; orcaLines_.size()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"linearprogram2\">linearProgram2</span></h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">linearProgram2</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionOpt) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * Optimize direction. Note that the optimization velocity is of unit</span></span><br><span class=\"line\"><span class=\"comment\">            * length in this case.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        result = optVelocity * radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absSq(optVelocity) &gt; sqr(radius)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Optimize closest point and outside circle. */</span></span><br><span class=\"line\">        result = normalize(optVelocity) * radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Optimize closest point and inside circle. */</span></span><br><span class=\"line\">        result = optVelocity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lines.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (det(lines[i].direction, lines[i].point - result) &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Result does not satisfy constraint i. Compute new optimal result. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 tempResult = result;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) &#123;</span><br><span class=\"line\">                result = tempResult;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"linearprogram1\">linearProgram1</span></h5><pre><code class=\"cpp\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linearProgram1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">size_t</span> lineNo, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span></span>\n<span class=\"function\"></span>{\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    <span class=\"keyword\">if</span> (discriminant &lt; <span class=\"number\">0.0f</span>) {\n        <span class=\"comment\">/* Max speed circle fully invalidates line lineNo. */</span>\n        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n    }\n\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sqrtDiscriminant = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(discriminant);\n    <span class=\"keyword\">float</span> tLeft = -dotProduct - sqrtDiscriminant;\n    <span class=\"keyword\">float</span> tRight = -dotProduct + sqrtDiscriminant;\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lineNo; ++i) {\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> denominator = det(lines[lineNo].direction, lines[i].direction);\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>(denominator) &lt;= RVO_EPSILON) {\n            <span class=\"comment\">/* Lines lineNo and i are (almost) parallel. */</span>\n            <span class=\"keyword\">if</span> (numerator &lt; <span class=\"number\">0.0f</span>) {\n                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">continue</span>;\n            }\n        }\n\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = numerator / denominator;\n\n        <span class=\"keyword\">if</span> (denominator &gt;= <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Line i bounds line lineNo on the right. */</span>\n            tRight = <span class=\"built_in\">std</span>::min(tRight, t);\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Line i bounds line lineNo on the left. */</span>\n            tLeft = <span class=\"built_in\">std</span>::max(tLeft, t);\n        }\n\n        <span class=\"keyword\">if</span> (tLeft &gt; tRight) {\n            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n        }\n    }\n\n    <span class=\"keyword\">if</span> (directionOpt) {\n        <span class=\"comment\">/* Optimize direction. */</span>\n        <span class=\"keyword\">if</span> (optVelocity * lines[lineNo].direction &gt; <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Take right extreme. */</span>\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Take left extreme. */</span>\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    <span class=\"keyword\">else</span> {\n        <span class=\"comment\">/* Optimize closest point. */</span>\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        <span class=\"keyword\">if</span> (t &lt; tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt; tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n}</code></pre>\n","site":{"data":{}},"excerpt":"<h5 id=\"KDTREE\"><a href=\"#KDTREE\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h5><p>空间K维划分, 用来快速寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"路径规划\"><a href=\"#路径规划\" class=\"headerlink\" title=\"路径规划\"></a>路径规划</h3><h5 id=\"高级规划\"><a href=\"#高级规划\" class=\"headerlink\" title=\"高级规划\"></a>高级规划</h5><p>DIJKSTRA 最短路径  等寻路方法  </p>\n<h5 id=\"底层规划\"><a href=\"#底层规划\" class=\"headerlink\" title=\"底层规划\"></a>底层规划</h5><p>VO RVO ORCA等Obstacle Avoidance避障算法  </p>\n<h3 id=\"KDTREE-1\"><a href=\"#KDTREE-1\" class=\"headerlink\" title=\"KDTREE\"></a>KDTREE</h3><p>这个是一个简单的KDTREE实现 用来寻找距离最近的障碍(指定数量)  优化RVO的资源消耗.  </p>\n<h3 id=\"VO-Velocity-Obstacles-速度障碍\"><a href=\"#VO-Velocity-Obstacles-速度障碍\" class=\"headerlink\" title=\"VO  Velocity Obstacles  速度障碍\"></a>VO  Velocity Obstacles  速度障碍</h3><p>核心思想: 只要在未来有可能会发生碰撞的速度 都排除在外<br>抖动现象: 两个位移单位存在可能会发生路径碰撞的情况下会同时采取保守的避让速度,导致新速度偏离过大又大幅度回归,从而产生震荡.  </p>\n<h3 id=\"RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\"><a href=\"#RVO-Reciprocal-Velocity-Obstacles-互惠的速度障碍\" class=\"headerlink\" title=\"RVO Reciprocal Velocity Obstacles  互惠的速度障碍\"></a>RVO Reciprocal Velocity Obstacles  互惠的速度障碍</h3><p>核心思想: 优化VO思想, 假定对方也会采取避障行为, 缩小(average VO)速度.   </p>\n<h3 id=\"ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\"><a href=\"#ORCA-Optimal-Reciprocal-Collision-Avoidance-最优互惠碰撞避免\" class=\"headerlink\" title=\"ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免\"></a>ORCA  Optimal Reciprocal Collision Avoidance  最优互惠碰撞避免</h3><p>核心思想: 优化RVO, 额外考虑速度大小, 求解过程使用线性规划,更高效简洁.   </p>\n<ul>\n<li><strong>对其他所有agents的ORCA求交（线性规划），再与自己可选速度求交集，得候选速度集ORCAτA</strong>  </li>\n<li><strong>在候选集中求解跟自己偏好速度最近的一个速度vnewA</strong>  </li>\n</ul>","more":"<h5 id=\"computeNewVelocity\"><a href=\"#computeNewVelocity\" class=\"headerlink\" title=\"computeNewVelocity\"></a>computeNewVelocity</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Search for the best new velocity. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Agent::computeNewVelocity</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    orcaLines_.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">size_t</span> numObstLines = orcaLines_.size();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeHorizon = <span class=\"number\">1.0f</span> / timeHorizon_;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Create agent ORCA lines. */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; agentNeighbors_.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Agent *<span class=\"keyword\">const</span> other = agentNeighbors_[i].second;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativePosition = other-&gt;position_ - position_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Vector2 relativeVelocity = velocity_ - other-&gt;velocity_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> distSq = absSq(relativePosition);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadius = radius_ + other-&gt;radius_;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> combinedRadiusSq = sqr(combinedRadius);</span><br><span class=\"line\"></span><br><span class=\"line\">        Line line;</span><br><span class=\"line\">        Vector2 u;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (distSq &gt; combinedRadiusSq) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* No collision. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeHorizon * relativePosition;</span><br><span class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLengthSq = absSq(w);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct1 = w * relativePosition;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dotProduct1 &lt; <span class=\"number\">0.0f</span> &amp;&amp; sqr(dotProduct1) &gt; combinedRadiusSq * wLengthSq) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Project on cut-off circle. */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(wLengthSq);</span><br><span class=\"line\">                <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</span><br><span class=\"line\"></span><br><span class=\"line\">                line.direction = Vector2(unitW.y(), -unitW.x());</span><br><span class=\"line\">                u = (combinedRadius * invTimeHorizon - wLength) * unitW;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/* Project on legs. */</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> leg = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(distSq - combinedRadiusSq);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (det(relativePosition, w) &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* Project on left leg. */</span></span><br><span class=\"line\">                    line.direction = Vector2(relativePosition.x() * leg - relativePosition.y() * combinedRadius, relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* Project on right leg. */</span></span><br><span class=\"line\">                    line.direction = -Vector2(relativePosition.x() * leg + relativePosition.y() * combinedRadius, -relativePosition.x() * combinedRadius + relativePosition.y() * leg) / distSq;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct2 = relativeVelocity * line.direction;</span><br><span class=\"line\"></span><br><span class=\"line\">                u = dotProduct2 * line.direction - relativeVelocity;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Collision. Project on cut-off circle of time timeStep. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> invTimeStep = <span class=\"number\">1.0f</span> / sim_-&gt;timeStep_;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Vector from cutoff center to relative velocity. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 w = relativeVelocity - invTimeStep * relativePosition;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> wLength = <span class=\"built_in\">abs</span>(w);</span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 unitW = w / wLength;</span><br><span class=\"line\"></span><br><span class=\"line\">            line.direction = Vector2(unitW.y(), -unitW.x());</span><br><span class=\"line\">            u = (combinedRadius * invTimeStep - wLength) * unitW;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        line.point = velocity_ + <span class=\"number\">0.5f</span> * u;</span><br><span class=\"line\">        orcaLines_.push_back(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> lineFail = linearProgram2(orcaLines_, maxSpeed_, prefVelocity_, <span class=\"literal\">false</span>, newVelocity_);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lineFail &lt; orcaLines_.size()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//linearProgram3(orcaLines_, numObstLines, lineFail, maxSpeed_, newVelocity_);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"linearProgram2\"><a href=\"#linearProgram2\" class=\"headerlink\" title=\"linearProgram2\"></a>linearProgram2</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">size_t</span> <span class=\"title\">linearProgram2</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directionOpt) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * Optimize direction. Note that the optimization velocity is of unit</span></span><br><span class=\"line\"><span class=\"comment\">            * length in this case.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        result = optVelocity * radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (absSq(optVelocity) &gt; sqr(radius)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Optimize closest point and outside circle. */</span></span><br><span class=\"line\">        result = normalize(optVelocity) * radius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Optimize closest point and inside circle. */</span></span><br><span class=\"line\">        result = optVelocity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lines.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (det(lines[i].direction, lines[i].point - result) &gt; <span class=\"number\">0.0f</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Result does not satisfy constraint i. Compute new optimal result. */</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> Vector2 tempResult = result;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!linearProgram1(lines, i, radius, optVelocity, directionOpt, result)) &#123;</span><br><span class=\"line\">                result = tempResult;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> lines.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"linearProgram1\"><a href=\"#linearProgram1\" class=\"headerlink\" title=\"linearProgram1\"></a>linearProgram1</h5><pre><code class=\"cpp\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">linearProgram1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Line&gt; &amp;lines, <span class=\"keyword\">size_t</span> lineNo, <span class=\"keyword\">float</span> radius, <span class=\"keyword\">const</span> Vector2 &amp;optVelocity, <span class=\"keyword\">bool</span> directionOpt, Vector2 &amp;result)</span></span>\n<span class=\"function\"></span>{\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> dotProduct = lines[lineNo].point * lines[lineNo].direction;\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> discriminant = sqr(dotProduct) + sqr(radius) - absSq(lines[lineNo].point);\n\n    <span class=\"keyword\">if</span> (discriminant &lt; <span class=\"number\">0.0f</span>) {\n        <span class=\"comment\">/* Max speed circle fully invalidates line lineNo. */</span>\n        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n    }\n\n    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> sqrtDiscriminant = <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>(discriminant);\n    <span class=\"keyword\">float</span> tLeft = -dotProduct - sqrtDiscriminant;\n    <span class=\"keyword\">float</span> tRight = -dotProduct + sqrtDiscriminant;\n\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>; i &lt; lineNo; ++i) {\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> denominator = det(lines[lineNo].direction, lines[i].direction);\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> numerator = det(lines[i].direction, lines[lineNo].point - lines[i].point);\n\n        <span class=\"keyword\">if</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>(denominator) &lt;= RVO_EPSILON) {\n            <span class=\"comment\">/* Lines lineNo and i are (almost) parallel. */</span>\n            <span class=\"keyword\">if</span> (numerator &lt; <span class=\"number\">0.0f</span>) {\n                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n            }\n            <span class=\"keyword\">else</span> {\n                <span class=\"keyword\">continue</span>;\n            }\n        }\n\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = numerator / denominator;\n\n        <span class=\"keyword\">if</span> (denominator &gt;= <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Line i bounds line lineNo on the right. */</span>\n            tRight = <span class=\"built_in\">std</span>::min(tRight, t);\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Line i bounds line lineNo on the left. */</span>\n            tLeft = <span class=\"built_in\">std</span>::max(tLeft, t);\n        }\n\n        <span class=\"keyword\">if</span> (tLeft &gt; tRight) {\n            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\n        }\n    }\n\n    <span class=\"keyword\">if</span> (directionOpt) {\n        <span class=\"comment\">/* Optimize direction. */</span>\n        <span class=\"keyword\">if</span> (optVelocity * lines[lineNo].direction &gt; <span class=\"number\">0.0f</span>) {\n            <span class=\"comment\">/* Take right extreme. */</span>\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            <span class=\"comment\">/* Take left extreme. */</span>\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n    }\n    <span class=\"keyword\">else</span> {\n        <span class=\"comment\">/* Optimize closest point. */</span>\n        <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> t = lines[lineNo].direction * (optVelocity - lines[lineNo].point);\n\n        <span class=\"keyword\">if</span> (t &lt; tLeft) {\n            result = lines[lineNo].point + tLeft * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t &gt; tRight) {\n            result = lines[lineNo].point + tRight * lines[lineNo].direction;\n        }\n        <span class=\"keyword\">else</span> {\n            result = lines[lineNo].point + t * lines[lineNo].direction;\n        }\n    }\n\n    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n}</code></pre>"},{"title":"问题的解决","date":"2019-09-15T16:00:00.000Z","author":"yawei.zhang","_content":"\n在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.    \n该过程分为四个阶段  \n* 发现问题\n* 分析（明确）问题\n* 提出假设  \n* 验证假设  \n\n其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    \n\n问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   \n\n\n## 问题解决的一般性阶段及其描述:    \n\n* **问题的存在,发现和提出**  \n* **定义问题域, 即定义问题集以及问题的约束集**  \n* **从问题域中递归的构造可演算的计算(概念)模型**  \n* **制定现实可执行的解决方案**  \n* **实施并植入问题域所在现实环境验证**   \n* **问题的解决**  \n\n在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近'真正的问题'的问题定义, 以及'真正的问题解决'的结果, 从而采用形式化的方法寻找到最优的解决路径   \n\n<!-- more --> \n### 问题的存在   \n问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  \n\n* 数学领域 问题是关于数学对象和结构的疑问, 比如很具体的'求X^2-1=0的解' 或者很一般的'为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。'.     \n* 商业领域 问题是现状和期望的差别 例如\"某项目上线后各项数据低于预期\"  (Root-Cause-Analyze来分析问题)\n* 社会领域 问题是某类困境.  \n\n更具体一些, 差异主要分为两种情况:\n* 主体对上下文的理解和目标状态的理解程度的差异  \n* 客体和目标状态的差异    \n  \n'期望'表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 \"问题是独立于问题解决的主体存在的客观世界的一种表达方式\", 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   \n\n**主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会'不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)', 从而更有利于发现符合逻辑的解释方法和解决方法.**       \n\n* 问题\n问题是期望和现状的差异, 是客观存在的, 是提问的基础.   \n* 提问  \n提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   \n* 目标\n目标是达成'解决问题'的某个具体状态  \n\n\n\n### 对问题的思考   \n* 基本的问题特征  \n  * 定义明确的问题和定义不明确的问题  \n    * 定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    \n  \n  * 复杂规模评估  \n    * 组成问题的部分是否可枚举(不可枚举) \n    * 组成问题的部分是否具备同质性(异质性)  \n    * 组成问题的部分是否彼此连通(连接的层次关系, 分配关系) \n    * 问题是否存在时间限制  \n    * 问题是否对时间敏感 \n    * 问题是否存在相位效应\n    * 问题是否存在动态的不可预测性\n    * 问题的来源是否透明可见  \n    * 问题的发生过程是否透明可见  \n    * 问题是否同时存在多个目标状态  \n      * 多个目标之间是否存在以上可能导致问题复杂的'规模,时间,动态,透明'等复杂问题.\n      * 部分目标是否存在冲突, 不表达等相容问题  \n\n* 分析问题的基本障碍\n  * 确认偏误\n  * 心理(思维)定势\n  * 功能固定性\n  * 不必要的约束\n  * 不相关的信息\n\n* 结构化的问题分析方式   \n  * 搜集和界定问题  \n    * 搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   \n      * 确认期望结果集  \n      * 确认非期望结果集(现状集)  \n    * 提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   \n    * 界定问题域的所属集合以及其约束.   \n  * 逻辑树,问题域建模  \n    * 寻找逻辑关系和结构关系  \n      * 寻找时间/步骤顺序 (时序)  \n      * 寻找空间/结构顺序 (拓扑)  \n      * 寻找程度/重要性顺序 (主次非)  \n    * 基本思维方法\n      * 归纳推理  \n        * 归类分组 概括其共性  以MECE为准则尽量做到不重不漏 \n      * 演绎推理 \n        * 三段论 排除问题或者得出明确的结论   \n      * 质疑和提问  \n  * 构建逻辑模型(逻辑树)  \n    * 自上而下构建\n      * 提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   \n    * 自下而上构建\n      * 通过已确认的基础部分进行有序的组合构造/抽象出上层模型  \n  * 验证和迭代模型   \n\n### 计算机科学领域中的问题解决\n* 定义问题域 (定义问题集以及问题的约束集)   \n  * 包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   \n* 通过形式化方法构建计算模型  \n  * 计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   \n  * 使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     \n  * 构建的基本策略  \n    * 通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    \n* 问题解决域 系统模型构建   \n  * 问题解决域定义了解决问题的过程(实现路径)  \n  * 问题解决域定义了解决问题的目标\n  * 问题解决域定义了解决方案所必须运行的抽象环境.   \n  * 解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   \n  \n* 杂注   \n  * 工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   \n  * 业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    \n  * 数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     \n\n\n### 相关理论:\n\n* 序理论 \n  * 序理论研究数学排序的直觉概念上的各种二元关系.  \n    * 从自然数的<=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. \n  * 序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  \n    * 通过指定 \"<=关系必须是数学意义上的次序关系\"这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序\n      * 这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   \n\n  * (非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  \n    * 偏序集合: 配备了偏序关系的集合    \n    * 定义: \n      * 自反性:   对任意x∈A，有xRx  \n      * 反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 全序：对集合中任意两个元素都有关系  \n    * 全序关系必然是偏序关系 \n  * 严格次序  \n    * <=为平常次序,  <为严格次序  \n  * 严格偏序 \n    * 定义\n      * 反自反性:   对任意x∈A，xRx必然不成立  \n      * 非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 可视化 \n      * 可以使用hasse图等直观的表示部分有序的元素和关系 \n\n \n* 域理论:  \n  * 域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   \n  * 域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息(分形).  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  \n    1. 通过对计算的每个域增加一个额外的元素 即形式化'部分信息'或者'不完全信息'的概念,  来构造演算的模型,  并且计算的域被装备一个'次序关系', 这其中的'未定义结果'或者说'部分信息'为最小元素. \n    2. 在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  \n    3. 接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素\")等价于完成一个计算.   \n   \n  * 收敛规范\n    * 在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a<=c 和 b <= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  \n      * 意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   \n      * 有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  \n      * \"有向, 偏序\" 很自然的我们会对dcpo 有向完全偏序感兴趣  \n      * 把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  \n  * 域的基础  \n    * 因为我们无法计算无限大的对象 因此在实践中 \"是否可以保证可以将域的所有元素作为更简单元素的极限来获得\" 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  \n\n* 领域建模  \n  * 领域分解  \n    * 大领域分解成小领域  \n  * 分析细化  \n    * 面向对象法 问题域映射为解决域 \n      * OOA 面向对象的分析方法   \n      * OOD 面向对象的设计方法  \n  * 基于获得的领域知识建模  \n    * 确定实体和属性 (数据结构)  \n    * 描述实体间静态关系 (数据结构和接口)   \n    * 描述实体间动态关系 (核心逻辑, 状态机) \n    * 描述实体的生命周期 \n    * 建立完整的映射\n  * 验证迭代  \n\n  \n* Root-Cause-Analyze  \n  * 核心问题和根本原因    \n  * 产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   \n  * 不同的原因产生不同问题, 在组成'差异'的子集中, 核心问题来自于root cause, 其他问题 或者不是造成'差异'的主要部分,  也或者是属于核心问题的衍生.  \n\n* 科学方法的基本循环步骤  (表征, 假设, 验证)    \n  * 问题的认知与表述 (表征, 通过观察和分析明确问题)  \n    * 问题需要满足 可观察 可经验（empirical） 可量度   \n  * 提出假设  \n    * 提出一个达到解决问题的目标       \n  * 预测(解释)     \n    * 对提出的假设或者理论进行归纳和演绎推论  \n  * 实验   \n    * 对上述表征 假设 预测进行测试验证   \n  * 实验结果分析  提出新的假设   \n  * 发布结果   ","source":"_posts/2019-09-16-problem-domain.md","raw":"---\ntitle: 问题的解决  \ndate: 2019-09-16\ncategories: develop \nauthor: yawei.zhang \n---\n\n在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.    \n该过程分为四个阶段  \n* 发现问题\n* 分析（明确）问题\n* 提出假设  \n* 验证假设  \n\n其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    \n\n问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   \n\n\n## 问题解决的一般性阶段及其描述:    \n\n* **问题的存在,发现和提出**  \n* **定义问题域, 即定义问题集以及问题的约束集**  \n* **从问题域中递归的构造可演算的计算(概念)模型**  \n* **制定现实可执行的解决方案**  \n* **实施并植入问题域所在现实环境验证**   \n* **问题的解决**  \n\n在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近'真正的问题'的问题定义, 以及'真正的问题解决'的结果, 从而采用形式化的方法寻找到最优的解决路径   \n\n<!-- more --> \n### 问题的存在   \n问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  \n\n* 数学领域 问题是关于数学对象和结构的疑问, 比如很具体的'求X^2-1=0的解' 或者很一般的'为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。'.     \n* 商业领域 问题是现状和期望的差别 例如\"某项目上线后各项数据低于预期\"  (Root-Cause-Analyze来分析问题)\n* 社会领域 问题是某类困境.  \n\n更具体一些, 差异主要分为两种情况:\n* 主体对上下文的理解和目标状态的理解程度的差异  \n* 客体和目标状态的差异    \n  \n'期望'表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 \"问题是独立于问题解决的主体存在的客观世界的一种表达方式\", 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   \n\n**主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会'不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)', 从而更有利于发现符合逻辑的解释方法和解决方法.**       \n\n* 问题\n问题是期望和现状的差异, 是客观存在的, 是提问的基础.   \n* 提问  \n提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   \n* 目标\n目标是达成'解决问题'的某个具体状态  \n\n\n\n### 对问题的思考   \n* 基本的问题特征  \n  * 定义明确的问题和定义不明确的问题  \n    * 定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    \n  \n  * 复杂规模评估  \n    * 组成问题的部分是否可枚举(不可枚举) \n    * 组成问题的部分是否具备同质性(异质性)  \n    * 组成问题的部分是否彼此连通(连接的层次关系, 分配关系) \n    * 问题是否存在时间限制  \n    * 问题是否对时间敏感 \n    * 问题是否存在相位效应\n    * 问题是否存在动态的不可预测性\n    * 问题的来源是否透明可见  \n    * 问题的发生过程是否透明可见  \n    * 问题是否同时存在多个目标状态  \n      * 多个目标之间是否存在以上可能导致问题复杂的'规模,时间,动态,透明'等复杂问题.\n      * 部分目标是否存在冲突, 不表达等相容问题  \n\n* 分析问题的基本障碍\n  * 确认偏误\n  * 心理(思维)定势\n  * 功能固定性\n  * 不必要的约束\n  * 不相关的信息\n\n* 结构化的问题分析方式   \n  * 搜集和界定问题  \n    * 搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   \n      * 确认期望结果集  \n      * 确认非期望结果集(现状集)  \n    * 提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   \n    * 界定问题域的所属集合以及其约束.   \n  * 逻辑树,问题域建模  \n    * 寻找逻辑关系和结构关系  \n      * 寻找时间/步骤顺序 (时序)  \n      * 寻找空间/结构顺序 (拓扑)  \n      * 寻找程度/重要性顺序 (主次非)  \n    * 基本思维方法\n      * 归纳推理  \n        * 归类分组 概括其共性  以MECE为准则尽量做到不重不漏 \n      * 演绎推理 \n        * 三段论 排除问题或者得出明确的结论   \n      * 质疑和提问  \n  * 构建逻辑模型(逻辑树)  \n    * 自上而下构建\n      * 提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   \n    * 自下而上构建\n      * 通过已确认的基础部分进行有序的组合构造/抽象出上层模型  \n  * 验证和迭代模型   \n\n### 计算机科学领域中的问题解决\n* 定义问题域 (定义问题集以及问题的约束集)   \n  * 包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   \n* 通过形式化方法构建计算模型  \n  * 计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   \n  * 使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     \n  * 构建的基本策略  \n    * 通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    \n* 问题解决域 系统模型构建   \n  * 问题解决域定义了解决问题的过程(实现路径)  \n  * 问题解决域定义了解决问题的目标\n  * 问题解决域定义了解决方案所必须运行的抽象环境.   \n  * 解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   \n  \n* 杂注   \n  * 工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   \n  * 业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    \n  * 数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     \n\n\n### 相关理论:\n\n* 序理论 \n  * 序理论研究数学排序的直觉概念上的各种二元关系.  \n    * 从自然数的<=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. \n  * 序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  \n    * 通过指定 \"<=关系必须是数学意义上的次序关系\"这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序\n      * 这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   \n\n  * (非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  \n    * 偏序集合: 配备了偏序关系的集合    \n    * 定义: \n      * 自反性:   对任意x∈A，有xRx  \n      * 反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 全序：对集合中任意两个元素都有关系  \n    * 全序关系必然是偏序关系 \n  * 严格次序  \n    * <=为平常次序,  <为严格次序  \n  * 严格偏序 \n    * 定义\n      * 反自反性:   对任意x∈A，xRx必然不成立  \n      * 非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    \n      * 传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。\n  * 可视化 \n      * 可以使用hasse图等直观的表示部分有序的元素和关系 \n\n \n* 域理论:  \n  * 域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   \n  * 域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息(分形).  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  \n    1. 通过对计算的每个域增加一个额外的元素 即形式化'部分信息'或者'不完全信息'的概念,  来构造演算的模型,  并且计算的域被装备一个'次序关系', 这其中的'未定义结果'或者说'部分信息'为最小元素. \n    2. 在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  \n    3. 接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素\")等价于完成一个计算.   \n   \n  * 收敛规范\n    * 在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a<=c 和 b <= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  \n      * 意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   \n      * 有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  \n      * \"有向, 偏序\" 很自然的我们会对dcpo 有向完全偏序感兴趣  \n      * 把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  \n  * 域的基础  \n    * 因为我们无法计算无限大的对象 因此在实践中 \"是否可以保证可以将域的所有元素作为更简单元素的极限来获得\" 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  \n\n* 领域建模  \n  * 领域分解  \n    * 大领域分解成小领域  \n  * 分析细化  \n    * 面向对象法 问题域映射为解决域 \n      * OOA 面向对象的分析方法   \n      * OOD 面向对象的设计方法  \n  * 基于获得的领域知识建模  \n    * 确定实体和属性 (数据结构)  \n    * 描述实体间静态关系 (数据结构和接口)   \n    * 描述实体间动态关系 (核心逻辑, 状态机) \n    * 描述实体的生命周期 \n    * 建立完整的映射\n  * 验证迭代  \n\n  \n* Root-Cause-Analyze  \n  * 核心问题和根本原因    \n  * 产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   \n  * 不同的原因产生不同问题, 在组成'差异'的子集中, 核心问题来自于root cause, 其他问题 或者不是造成'差异'的主要部分,  也或者是属于核心问题的衍生.  \n\n* 科学方法的基本循环步骤  (表征, 假设, 验证)    \n  * 问题的认知与表述 (表征, 通过观察和分析明确问题)  \n    * 问题需要满足 可观察 可经验（empirical） 可量度   \n  * 提出假设  \n    * 提出一个达到解决问题的目标       \n  * 预测(解释)     \n    * 对提出的假设或者理论进行归纳和演绎推论  \n  * 实验   \n    * 对上述表征 假设 预测进行测试验证   \n  * 实验结果分析  提出新的假设   \n  * 发布结果   ","slug":"2019-09-16-problem-domain","published":1,"updated":"2019-12-10T07:35:57.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeis000j7w5hcs6ga59g","content":"<p>在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.<br>该过程分为四个阶段  </p>\n<ul>\n<li>发现问题</li>\n<li>分析（明确）问题</li>\n<li>提出假设  </li>\n<li>验证假设  </li>\n</ul>\n<p>其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    </p>\n<p>问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   </p>\n<h2><span id=\"问题解决的一般性阶段及其描述\">问题解决的一般性阶段及其描述:</span></h2><ul>\n<li><strong>问题的存在,发现和提出</strong>  </li>\n<li><strong>定义问题域, 即定义问题集以及问题的约束集</strong>  </li>\n<li><strong>从问题域中递归的构造可演算的计算(概念)模型</strong>  </li>\n<li><strong>制定现实可执行的解决方案</strong>  </li>\n<li><strong>实施并植入问题域所在现实环境验证</strong>   </li>\n<li><strong>问题的解决</strong>  </li>\n</ul>\n<p>在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近’真正的问题’的问题定义, 以及’真正的问题解决’的结果, 从而采用形式化的方法寻找到最优的解决路径   </p>\n<a id=\"more\"></a> \n<h3><span id=\"问题的存在\">问题的存在</span></h3><p>问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  </p>\n<ul>\n<li>数学领域 问题是关于数学对象和结构的疑问, 比如很具体的’求X^2-1=0的解’ 或者很一般的’为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。’.     </li>\n<li>商业领域 问题是现状和期望的差别 例如”某项目上线后各项数据低于预期”  (Root-Cause-Analyze来分析问题)</li>\n<li>社会领域 问题是某类困境.  </li>\n</ul>\n<p>更具体一些, 差异主要分为两种情况:</p>\n<ul>\n<li>主体对上下文的理解和目标状态的理解程度的差异  </li>\n<li>客体和目标状态的差异    </li>\n</ul>\n<p>‘期望’表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 “问题是独立于问题解决的主体存在的客观世界的一种表达方式”, 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   </p>\n<p><strong>主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会’不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)’, 从而更有利于发现符合逻辑的解释方法和解决方法.</strong>       </p>\n<ul>\n<li>问题<br>问题是期望和现状的差异, 是客观存在的, 是提问的基础.   </li>\n<li>提问<br>提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   </li>\n<li>目标<br>目标是达成’解决问题’的某个具体状态  </li>\n</ul>\n<h3><span id=\"对问题的思考\">对问题的思考</span></h3><ul>\n<li><p>基本的问题特征  </p>\n<ul>\n<li><p>定义明确的问题和定义不明确的问题  </p>\n<ul>\n<li>定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    </li>\n</ul>\n</li>\n<li><p>复杂规模评估  </p>\n<ul>\n<li>组成问题的部分是否可枚举(不可枚举) </li>\n<li>组成问题的部分是否具备同质性(异质性)  </li>\n<li>组成问题的部分是否彼此连通(连接的层次关系, 分配关系) </li>\n<li>问题是否存在时间限制  </li>\n<li>问题是否对时间敏感 </li>\n<li>问题是否存在相位效应</li>\n<li>问题是否存在动态的不可预测性</li>\n<li>问题的来源是否透明可见  </li>\n<li>问题的发生过程是否透明可见  </li>\n<li>问题是否同时存在多个目标状态  <ul>\n<li>多个目标之间是否存在以上可能导致问题复杂的’规模,时间,动态,透明’等复杂问题.</li>\n<li>部分目标是否存在冲突, 不表达等相容问题  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分析问题的基本障碍</p>\n<ul>\n<li>确认偏误</li>\n<li>心理(思维)定势</li>\n<li>功能固定性</li>\n<li>不必要的约束</li>\n<li>不相关的信息</li>\n</ul>\n</li>\n<li><p>结构化的问题分析方式   </p>\n<ul>\n<li>搜集和界定问题  <ul>\n<li>搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   <ul>\n<li>确认期望结果集  </li>\n<li>确认非期望结果集(现状集)  </li>\n</ul>\n</li>\n<li>提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   </li>\n<li>界定问题域的所属集合以及其约束.   </li>\n</ul>\n</li>\n<li>逻辑树,问题域建模  <ul>\n<li>寻找逻辑关系和结构关系  <ul>\n<li>寻找时间/步骤顺序 (时序)  </li>\n<li>寻找空间/结构顺序 (拓扑)  </li>\n<li>寻找程度/重要性顺序 (主次非)  </li>\n</ul>\n</li>\n<li>基本思维方法<ul>\n<li>归纳推理  <ul>\n<li>归类分组 概括其共性  以MECE为准则尽量做到不重不漏 </li>\n</ul>\n</li>\n<li>演绎推理 <ul>\n<li>三段论 排除问题或者得出明确的结论   </li>\n</ul>\n</li>\n<li>质疑和提问  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建逻辑模型(逻辑树)  <ul>\n<li>自上而下构建<ul>\n<li>提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   </li>\n</ul>\n</li>\n<li>自下而上构建<ul>\n<li>通过已确认的基础部分进行有序的组合构造/抽象出上层模型  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>验证和迭代模型   </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"计算机科学领域中的问题解决\">计算机科学领域中的问题解决</span></h3><ul>\n<li><p>定义问题域 (定义问题集以及问题的约束集)   </p>\n<ul>\n<li>包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   </li>\n</ul>\n</li>\n<li><p>通过形式化方法构建计算模型  </p>\n<ul>\n<li>计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   </li>\n<li>使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     </li>\n<li>构建的基本策略  <ul>\n<li>通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>问题解决域 系统模型构建   </p>\n<ul>\n<li>问题解决域定义了解决问题的过程(实现路径)  </li>\n<li>问题解决域定义了解决问题的目标</li>\n<li>问题解决域定义了解决方案所必须运行的抽象环境.   </li>\n<li>解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   </li>\n</ul>\n</li>\n<li><p>杂注   </p>\n<ul>\n<li>工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   </li>\n<li>业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    </li>\n<li>数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"相关理论\">相关理论:</span></h3><ul>\n<li><p>序理论 </p>\n<ul>\n<li><p>序理论研究数学排序的直觉概念上的各种二元关系.  </p>\n<ul>\n<li>从自然数的&lt;=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. </li>\n</ul>\n</li>\n<li><p>序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  </p>\n<ul>\n<li>通过指定 “&lt;=关系必须是数学意义上的次序关系”这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序<ul>\n<li>这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>(非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  </p>\n<ul>\n<li>偏序集合: 配备了偏序关系的集合    </li>\n<li>定义: <ul>\n<li>自反性:   对任意x∈A，有xRx  </li>\n<li>反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>全序：对集合中任意两个元素都有关系  </p>\n<ul>\n<li>全序关系必然是偏序关系 </li>\n</ul>\n</li>\n<li><p>严格次序  </p>\n<ul>\n<li>&lt;=为平常次序,  &lt;为严格次序  </li>\n</ul>\n</li>\n<li><p>严格偏序 </p>\n<ul>\n<li>定义<ul>\n<li>反自反性:   对任意x∈A，xRx必然不成立  </li>\n<li>非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可视化 </p>\n<ul>\n<li>可以使用hasse图等直观的表示部分有序的元素和关系 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>域理论:  </p>\n<ul>\n<li><p>域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   </p>\n</li>\n<li><p>域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息(分形).  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  </p>\n<ol>\n<li>通过对计算的每个域增加一个额外的元素 即形式化’部分信息’或者’不完全信息’的概念,  来构造演算的模型,  并且计算的域被装备一个’次序关系’, 这其中的’未定义结果’或者说’部分信息’为最小元素. </li>\n<li>在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  </li>\n<li>接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素”)等价于完成一个计算.   </li>\n</ol>\n</li>\n<li><p>收敛规范</p>\n<ul>\n<li>在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a&lt;=c 和 b &lt;= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  <ul>\n<li>意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   </li>\n<li>有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  </li>\n<li>“有向, 偏序” 很自然的我们会对dcpo 有向完全偏序感兴趣  </li>\n<li>把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>域的基础  </p>\n<ul>\n<li>因为我们无法计算无限大的对象 因此在实践中 “是否可以保证可以将域的所有元素作为更简单元素的极限来获得” 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>领域建模  </p>\n<ul>\n<li>领域分解  <ul>\n<li>大领域分解成小领域  </li>\n</ul>\n</li>\n<li>分析细化  <ul>\n<li>面向对象法 问题域映射为解决域 <ul>\n<li>OOA 面向对象的分析方法   </li>\n<li>OOD 面向对象的设计方法  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于获得的领域知识建模  <ul>\n<li>确定实体和属性 (数据结构)  </li>\n<li>描述实体间静态关系 (数据结构和接口)   </li>\n<li>描述实体间动态关系 (核心逻辑, 状态机) </li>\n<li>描述实体的生命周期 </li>\n<li>建立完整的映射</li>\n</ul>\n</li>\n<li>验证迭代  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Root-Cause-Analyze  </p>\n<ul>\n<li>核心问题和根本原因    </li>\n<li>产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   </li>\n<li>不同的原因产生不同问题, 在组成’差异’的子集中, 核心问题来自于root cause, 其他问题 或者不是造成’差异’的主要部分,  也或者是属于核心问题的衍生.  </li>\n</ul>\n</li>\n<li><p>科学方法的基本循环步骤  (表征, 假设, 验证)    </p>\n<ul>\n<li>问题的认知与表述 (表征, 通过观察和分析明确问题)  <ul>\n<li>问题需要满足 可观察 可经验（empirical） 可量度   </li>\n</ul>\n</li>\n<li>提出假设  <ul>\n<li>提出一个达到解决问题的目标       </li>\n</ul>\n</li>\n<li>预测(解释)     <ul>\n<li>对提出的假设或者理论进行归纳和演绎推论  </li>\n</ul>\n</li>\n<li>实验   <ul>\n<li>对上述表征 假设 预测进行测试验证   </li>\n</ul>\n</li>\n<li>实验结果分析  提出新的假设   </li>\n<li>发布结果</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在认知心理学中, 问题解决的思维过程被描述为: 在问题空间下, 经过思考与推理, 达到目的的心理历程.<br>该过程分为四个阶段  </p>\n<ul>\n<li>发现问题</li>\n<li>分析（明确）问题</li>\n<li>提出假设  </li>\n<li>验证假设  </li>\n</ul>\n<p>其中问题空间(问题域)是指问题解决者对所要解决的问题的一切可能的认识状态, 包括对问题的初始状态和目标状态的认识, 以及如何从初始状态转化为目标状态的认知操作等.    </p>\n<p>问题的解决就是对问题空间进行搜索, 找到一条从问题的初始状态到达目标状态的通路.   </p>\n<h2 id=\"问题解决的一般性阶段及其描述\"><a href=\"#问题解决的一般性阶段及其描述\" class=\"headerlink\" title=\"问题解决的一般性阶段及其描述:\"></a>问题解决的一般性阶段及其描述:</h2><ul>\n<li><strong>问题的存在,发现和提出</strong>  </li>\n<li><strong>定义问题域, 即定义问题集以及问题的约束集</strong>  </li>\n<li><strong>从问题域中递归的构造可演算的计算(概念)模型</strong>  </li>\n<li><strong>制定现实可执行的解决方案</strong>  </li>\n<li><strong>实施并植入问题域所在现实环境验证</strong>   </li>\n<li><strong>问题的解决</strong>  </li>\n</ul>\n<p>在这个过程中, 每个过程的推进都可能会伴随对其前向的阶段所做的处理发起修正, 在此过程中我们会不断的逼近’真正的问题’的问题定义, 以及’真正的问题解决’的结果, 从而采用形式化的方法寻找到最优的解决路径   </p>","more":"<h3 id=\"问题的存在\"><a href=\"#问题的存在\" class=\"headerlink\" title=\"问题的存在\"></a>问题的存在</h3><p>问题以不同的形式存在于不同的领域, 其核心是期望和现状的差异, 在不同的领域问题的描述方法和提出形式带有不同的领域特征, 例如:  </p>\n<ul>\n<li>数学领域 问题是关于数学对象和结构的疑问, 比如很具体的’求X^2-1=0的解’ 或者很一般的’为什么这些数在不同情况（领域）里面出现？请给出假说并证明之。’.     </li>\n<li>商业领域 问题是现状和期望的差别 例如”某项目上线后各项数据低于预期”  (Root-Cause-Analyze来分析问题)</li>\n<li>社会领域 问题是某类困境.  </li>\n</ul>\n<p>更具体一些, 差异主要分为两种情况:</p>\n<ul>\n<li>主体对上下文的理解和目标状态的理解程度的差异  </li>\n<li>客体和目标状态的差异    </li>\n</ul>\n<p>‘期望’表明了问题属于认知领域, 必须要有抱有期望的主体存在才会认识或者感知问题, 问题不是独立存在的, 但是对于第二种差异则有时候可以解释为 “问题是独立于问题解决的主体存在的客观世界的一种表达方式”, 只是被主体感知和表达出来, 因此 问题是否是独立存在的则有一定的争议,  但无论如何, 问题的提出必然依赖主体的认识和感知, 也就引入了解决问题的一个核心特征:   </p>\n<p><strong>主体对问题的认识会存在一定程度的偏差, 人在解决问题的过程中会’不断的更准确的定义重新定义问题的描述, 使得主体对问题的认识偏差不断的缩小(认识偏差可无限趋近但无法绝对消除)’, 从而更有利于发现符合逻辑的解释方法和解决方法.</strong>       </p>\n<ul>\n<li>问题<br>问题是期望和现状的差异, 是客观存在的, 是提问的基础.   </li>\n<li>提问<br>提问是把问题用合适的方法描述出来, 是解决问题的一个步骤.   </li>\n<li>目标<br>目标是达成’解决问题’的某个具体状态  </li>\n</ul>\n<h3 id=\"对问题的思考\"><a href=\"#对问题的思考\" class=\"headerlink\" title=\"对问题的思考\"></a>对问题的思考</h3><ul>\n<li><p>基本的问题特征  </p>\n<ul>\n<li><p>定义明确的问题和定义不明确的问题  </p>\n<ul>\n<li>定义明确的问题具有特定的最终目标 并且有明确的预期解决方案 而定义不明确的问题则没有    </li>\n</ul>\n</li>\n<li><p>复杂规模评估  </p>\n<ul>\n<li>组成问题的部分是否可枚举(不可枚举) </li>\n<li>组成问题的部分是否具备同质性(异质性)  </li>\n<li>组成问题的部分是否彼此连通(连接的层次关系, 分配关系) </li>\n<li>问题是否存在时间限制  </li>\n<li>问题是否对时间敏感 </li>\n<li>问题是否存在相位效应</li>\n<li>问题是否存在动态的不可预测性</li>\n<li>问题的来源是否透明可见  </li>\n<li>问题的发生过程是否透明可见  </li>\n<li>问题是否同时存在多个目标状态  <ul>\n<li>多个目标之间是否存在以上可能导致问题复杂的’规模,时间,动态,透明’等复杂问题.</li>\n<li>部分目标是否存在冲突, 不表达等相容问题  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分析问题的基本障碍</p>\n<ul>\n<li>确认偏误</li>\n<li>心理(思维)定势</li>\n<li>功能固定性</li>\n<li>不必要的约束</li>\n<li>不相关的信息</li>\n</ul>\n</li>\n<li><p>结构化的问题分析方式   </p>\n<ul>\n<li>搜集和界定问题  <ul>\n<li>搜集相关的问题, 期望的组成部分, 现状的组成部分, 差异的组成部分, 以及产生这些部分或者问题的原因.   <ul>\n<li>确认期望结果集  </li>\n<li>确认非期望结果集(现状集)  </li>\n</ul>\n</li>\n<li>提出各种假设并进行试验, 根据结果排除部分问题或者得出明确的结论   </li>\n<li>界定问题域的所属集合以及其约束.   </li>\n</ul>\n</li>\n<li>逻辑树,问题域建模  <ul>\n<li>寻找逻辑关系和结构关系  <ul>\n<li>寻找时间/步骤顺序 (时序)  </li>\n<li>寻找空间/结构顺序 (拓扑)  </li>\n<li>寻找程度/重要性顺序 (主次非)  </li>\n</ul>\n</li>\n<li>基本思维方法<ul>\n<li>归纳推理  <ul>\n<li>归类分组 概括其共性  以MECE为准则尽量做到不重不漏 </li>\n</ul>\n</li>\n<li>演绎推理 <ul>\n<li>三段论 排除问题或者得出明确的结论   </li>\n</ul>\n</li>\n<li>质疑和提问  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构建逻辑模型(逻辑树)  <ul>\n<li>自上而下构建<ul>\n<li>提出概括性模型并递归的拆解和具体化其组成部分,直到每个部分得到确认或者无法确认.   </li>\n</ul>\n</li>\n<li>自下而上构建<ul>\n<li>通过已确认的基础部分进行有序的组合构造/抽象出上层模型  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>验证和迭代模型   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"计算机科学领域中的问题解决\"><a href=\"#计算机科学领域中的问题解决\" class=\"headerlink\" title=\"计算机科学领域中的问题解决\"></a>计算机科学领域中的问题解决</h3><ul>\n<li><p>定义问题域 (定义问题集以及问题的约束集)   </p>\n<ul>\n<li>包含期望实现的目标, 问题的上下文,   解决方案必须的基本功能和必须运行在的问题环境.   </li>\n</ul>\n</li>\n<li><p>通过形式化方法构建计算模型  </p>\n<ul>\n<li>计算模型目前有两大分支, 图灵机和lambda演算, 他们的计算能力等价.   </li>\n<li>使用数学语言对问题域进行描述和分析, 可以对模型的可靠性和稳健性进行论证, 但因成本问题形式化的方法可以进行分级实现,  设计规范, 实现规范, 验证规范.     </li>\n<li>构建的基本策略  <ul>\n<li>通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息.  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>问题解决域 系统模型构建   </p>\n<ul>\n<li>问题解决域定义了解决问题的过程(实现路径)  </li>\n<li>问题解决域定义了解决问题的目标</li>\n<li>问题解决域定义了解决方案所必须运行的抽象环境.   </li>\n<li>解决方案从解决方案所运行的抽象环境植入到问题环境时, 这两个环境的差异往往是出错的原因.   </li>\n</ul>\n</li>\n<li><p>杂注   </p>\n<ul>\n<li>工程能力往往是针对问题解决域而言的, 在软件领域,  工作量往往是集中在工程实现层面的.   </li>\n<li>业务能力则是相对于问题域的而言,  对业务内容的敏感性, 对核心问题的洞察 .    </li>\n<li>数学素养, 几乎任何一个领域的成熟/发达程度都和这个领域中对形式化方法的渗透等级表现出极强的正相关.     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关理论\"><a href=\"#相关理论\" class=\"headerlink\" title=\"相关理论:\"></a>相关理论:</h3><ul>\n<li><p>序理论 </p>\n<ul>\n<li><p>序理论研究数学排序的直觉概念上的各种二元关系.  </p>\n<ul>\n<li>从自然数的&lt;=次序这个直觉概念很容易扩展到其他数的集合的排序, 这种大于或者小于另外一个数的概念 一般是记数系统(数制)的基本直觉. </li>\n</ul>\n</li>\n<li><p>序的概念是超出了具有直接,直观的顺序或者相对数量感觉的上下文, 在其他上下文中 序 可以获得 包含或者专用的概念,  在抽象上相当于子集关系.  </p>\n<ul>\n<li>通过指定 “&lt;=关系必须是数学意义上的次序关系”这个属性,  序理论可以在一般性(普遍)架构下获得样例中的直觉次序<ul>\n<li>这种抽象的方法可以在一般情况下得出许多定理而不必关注于任何特定的序的细节, 然后这些定理可以轻松的转移到不太抽象的应用程序中.   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>(非严格)偏序  只对部分元素成立关系(部分可比 比如集合的包含关系, 并不是任何两个集合之间都存在包含关系)  </p>\n<ul>\n<li>偏序集合: 配备了偏序关系的集合    </li>\n<li>定义: <ul>\n<li>自反性:   对任意x∈A，有xRx  </li>\n<li>反对称性: 对任意x,y∈A，若xRy，且yRx，则x=y   </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>全序：对集合中任意两个元素都有关系  </p>\n<ul>\n<li>全序关系必然是偏序关系 </li>\n</ul>\n</li>\n<li><p>严格次序  </p>\n<ul>\n<li>&lt;=为平常次序,  &lt;为严格次序  </li>\n</ul>\n</li>\n<li><p>严格偏序 </p>\n<ul>\n<li>定义<ul>\n<li>反自反性:   对任意x∈A，xRx必然不成立  </li>\n<li>非对称性: 对任意x,y∈A，若xRy不成立，且yRx不成立，则x=y ;   如果xRy成立则yRx一定不成立    </li>\n<li>传递性:   对任意x, y,z∈A，若xRy，且yRz，则xRz。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>可视化 </p>\n<ul>\n<li>可以使用hasse图等直观的表示部分有序的元素和关系 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>域理论:  </p>\n<ul>\n<li><p>域是特定种类的偏序集合, 因此域理论也可以看做序理论的分支.   </p>\n</li>\n<li><p>域理论通过处理部分有序集以对计算领域进行建模, 其中有序的元素解释为信息或者计算的部分, 其中次序较高的元素以一致的方式扩展旗下方元素的信息(分形).  通过这个方式, 域理论以非常一般化的途径对直觉概念进行形式化的逼近和收敛.  </p>\n<ol>\n<li>通过对计算的每个域增加一个额外的元素 即形式化’部分信息’或者’不完全信息’的概念,  来构造演算的模型,  并且计算的域被装备一个’次序关系’, 这其中的’未定义结果’或者说’部分信息’为最小元素. </li>\n<li>在这个模型之上, 计算的域总是部分有序的,  这种排序表示信息或者知识的层次, 元素在这个次序上越高, 它就更加明确和包含更多信息,  更低的元素表示不完全的知识或者中间结果.  </li>\n<li>接着通过在这个域上重复的应用单调函数来精制结果, 到达一个不动点(递归定义中的f(x)=x, 闭包算子的“封闭要素”)等价于完成一个计算.   </li>\n</ol>\n</li>\n<li><p>收敛规范</p>\n<ul>\n<li>在域理论中有一个重要的概念是有向子集(例如A中任意两个元素a和b, 存在一个元素c(可能与a或者b相等)使得 a&lt;=c 和 b &lt;= c), 有向子集是顺序的非空子集, 其中任何两个元素的上限均为该子集的元素.  <ul>\n<li>意味着有向子集的任何两个信息都被子集中的其他元素一致的扩展, 也因此可以将有向子集认为是一致的规范.   </li>\n<li>有向子集是域中没有两个元素矛盾的部分结果集, 这种可以比较的概念可以用做收敛序列的分析, 其中每个元素比上个元素更加具体.   在度量空间中, 序列的许多方面的作用类似域理论中的有向子集的作用.  </li>\n<li>“有向, 偏序” 很自然的我们会对dcpo 有向完全偏序感兴趣  </li>\n<li>把指定的局部结果看做不完整的知识 这个基础的思想中可以得到另外一个理想的属性 : 最小元素的存在.   最小元素对没有信息的状态进行建模-大多数计算的开始地方, 或者可以把最小元素作为完全不返回任何结果的计算输出. (域理论中的不动点)  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>域的基础  </p>\n<ul>\n<li>因为我们无法计算无限大的对象 因此在实践中 “是否可以保证可以将域的所有元素作为更简单元素的极限来获得” 非常重要, 但是通常我们还是希望可以将它们任意近似地逼近.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>领域建模  </p>\n<ul>\n<li>领域分解  <ul>\n<li>大领域分解成小领域  </li>\n</ul>\n</li>\n<li>分析细化  <ul>\n<li>面向对象法 问题域映射为解决域 <ul>\n<li>OOA 面向对象的分析方法   </li>\n<li>OOD 面向对象的设计方法  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>基于获得的领域知识建模  <ul>\n<li>确定实体和属性 (数据结构)  </li>\n<li>描述实体间静态关系 (数据结构和接口)   </li>\n<li>描述实体间动态关系 (核心逻辑, 状态机) </li>\n<li>描述实体的生命周期 </li>\n<li>建立完整的映射</li>\n</ul>\n</li>\n<li>验证迭代  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Root-Cause-Analyze  </p>\n<ul>\n<li>核心问题和根本原因    </li>\n<li>产生问题的来源链路上, root位置的的原因为 root cause  根本原因.   </li>\n<li>不同的原因产生不同问题, 在组成’差异’的子集中, 核心问题来自于root cause, 其他问题 或者不是造成’差异’的主要部分,  也或者是属于核心问题的衍生.  </li>\n</ul>\n</li>\n<li><p>科学方法的基本循环步骤  (表征, 假设, 验证)    </p>\n<ul>\n<li>问题的认知与表述 (表征, 通过观察和分析明确问题)  <ul>\n<li>问题需要满足 可观察 可经验（empirical） 可量度   </li>\n</ul>\n</li>\n<li>提出假设  <ul>\n<li>提出一个达到解决问题的目标       </li>\n</ul>\n</li>\n<li>预测(解释)     <ul>\n<li>对提出的假设或者理论进行归纳和演绎推论  </li>\n</ul>\n</li>\n<li>实验   <ul>\n<li>对上述表征 假设 预测进行测试验证   </li>\n</ul>\n</li>\n<li>实验结果分析  提出新的假设   </li>\n<li>发布结果</li>\n</ul>\n</li>\n</ul>"},{"title":"编写VBA脚本示例代码","date":"2019-02-14T09:21:00.000Z","author":"yawei.zhang","_content":"\nVBA检测脚本   \n  <!-- more --> \n```\n\nFunction Match(str As String, pattern As String)\n    Dim reg As Object\n    Set reg = CreateObject(\"VBScript.Regexp\")\n    With reg\n        .Global = False '非全局则匹配到第一个即停止\n        .pattern = pattern '正则部分\n        Match = .Test(str) '返回结果\n    End With\nEnd Function\n\n\nPrivate Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)\n\n\n    has_error = False '全局判定\n\n    For Each sht In Worksheets\n    \n        Dim matched As Boolean\n        \n        ' 跳过被#注释的sheet\n        matched = Match(sht.Name(), \"^#\")\n        If matched Then GoTo Continue\n        \n        '进行sheet内的格式检测\n        matched = Match(sht.Cells(1, 1).Value, \"^convert\")\n        If Not matched Then\n            MsgBox \"sheet:<\" & sht.Name() & \">格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.\", vbOKOnly + vbExclamation\n            GoTo Error\n        End If\n        \nContinue:\n    Next\n    \n    \nFinish:\n    MsgBox (\"表格检测通过,已保存成功.\")\n    Exit Sub\n    \nError:\n    Dim ret\n    ret = MsgBox(\"表格检测失败,请根据提示修正后再次尝试保存!\", vbOKOnly + vbCritical)\n    'If Not ret = vbOK Then Cancel = True\n    Cancel = True\n    Exit Sub\n\nEnd Sub\n\n\n\n\n```\n","source":"_posts/2019-02-14-vba.md","raw":"---\ntitle: 编写VBA脚本示例代码 \ndate: 2019-02-14 17:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\nVBA检测脚本   \n  <!-- more --> \n```\n\nFunction Match(str As String, pattern As String)\n    Dim reg As Object\n    Set reg = CreateObject(\"VBScript.Regexp\")\n    With reg\n        .Global = False '非全局则匹配到第一个即停止\n        .pattern = pattern '正则部分\n        Match = .Test(str) '返回结果\n    End With\nEnd Function\n\n\nPrivate Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)\n\n\n    has_error = False '全局判定\n\n    For Each sht In Worksheets\n    \n        Dim matched As Boolean\n        \n        ' 跳过被#注释的sheet\n        matched = Match(sht.Name(), \"^#\")\n        If matched Then GoTo Continue\n        \n        '进行sheet内的格式检测\n        matched = Match(sht.Cells(1, 1).Value, \"^convert\")\n        If Not matched Then\n            MsgBox \"sheet:<\" & sht.Name() & \">格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.\", vbOKOnly + vbExclamation\n            GoTo Error\n        End If\n        \nContinue:\n    Next\n    \n    \nFinish:\n    MsgBox (\"表格检测通过,已保存成功.\")\n    Exit Sub\n    \nError:\n    Dim ret\n    ret = MsgBox(\"表格检测失败,请根据提示修正后再次尝试保存!\", vbOKOnly + vbCritical)\n    'If Not ret = vbOK Then Cancel = True\n    Cancel = True\n    Exit Sub\n\nEnd Sub\n\n\n\n\n```\n","slug":"2019-02-14-vba","published":1,"updated":"2019-02-19T07:17:01.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeit000l7w5hgw297ulp","content":"<p>VBA检测脚本<br>  <a id=\"more\"></a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Function Match(str As String, pattern As String)</span><br><span class=\"line\">    Dim reg As Object</span><br><span class=\"line\">    Set reg &#x3D; CreateObject(&quot;VBScript.Regexp&quot;)</span><br><span class=\"line\">    With reg</span><br><span class=\"line\">        .Global &#x3D; False &#39;非全局则匹配到第一个即停止</span><br><span class=\"line\">        .pattern &#x3D; pattern &#39;正则部分</span><br><span class=\"line\">        Match &#x3D; .Test(str) &#39;返回结果</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    has_error &#x3D; False &#39;全局判定</span><br><span class=\"line\"></span><br><span class=\"line\">    For Each sht In Worksheets</span><br><span class=\"line\">    </span><br><span class=\"line\">        Dim matched As Boolean</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#39; 跳过被#注释的sheet</span><br><span class=\"line\">        matched &#x3D; Match(sht.Name(), &quot;^#&quot;)</span><br><span class=\"line\">        If matched Then GoTo Continue</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#39;进行sheet内的格式检测</span><br><span class=\"line\">        matched &#x3D; Match(sht.Cells(1, 1).Value, &quot;^convert&quot;)</span><br><span class=\"line\">        If Not matched Then</span><br><span class=\"line\">            MsgBox &quot;sheet:&lt;&quot; &amp; sht.Name() &amp; &quot;&gt;格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.&quot;, vbOKOnly + vbExclamation</span><br><span class=\"line\">            GoTo Error</span><br><span class=\"line\">        End If</span><br><span class=\"line\">        </span><br><span class=\"line\">Continue:</span><br><span class=\"line\">    Next</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">Finish:</span><br><span class=\"line\">    MsgBox (&quot;表格检测通过,已保存成功.&quot;)</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\">    </span><br><span class=\"line\">Error:</span><br><span class=\"line\">    Dim ret</span><br><span class=\"line\">    ret &#x3D; MsgBox(&quot;表格检测失败,请根据提示修正后再次尝试保存!&quot;, vbOKOnly + vbCritical)</span><br><span class=\"line\">    &#39;If Not ret &#x3D; vbOK Then Cancel &#x3D; True</span><br><span class=\"line\">    Cancel &#x3D; True</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>VBA检测脚本<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Function Match(str As String, pattern As String)</span><br><span class=\"line\">    Dim reg As Object</span><br><span class=\"line\">    Set reg &#x3D; CreateObject(&quot;VBScript.Regexp&quot;)</span><br><span class=\"line\">    With reg</span><br><span class=\"line\">        .Global &#x3D; False &#39;非全局则匹配到第一个即停止</span><br><span class=\"line\">        .pattern &#x3D; pattern &#39;正则部分</span><br><span class=\"line\">        Match &#x3D; .Test(str) &#39;返回结果</span><br><span class=\"line\">    End With</span><br><span class=\"line\">End Function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    has_error &#x3D; False &#39;全局判定</span><br><span class=\"line\"></span><br><span class=\"line\">    For Each sht In Worksheets</span><br><span class=\"line\">    </span><br><span class=\"line\">        Dim matched As Boolean</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#39; 跳过被#注释的sheet</span><br><span class=\"line\">        matched &#x3D; Match(sht.Name(), &quot;^#&quot;)</span><br><span class=\"line\">        If matched Then GoTo Continue</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#39;进行sheet内的格式检测</span><br><span class=\"line\">        matched &#x3D; Match(sht.Cells(1, 1).Value, &quot;^convert&quot;)</span><br><span class=\"line\">        If Not matched Then</span><br><span class=\"line\">            MsgBox &quot;sheet:&lt;&quot; &amp; sht.Name() &amp; &quot;&gt;格式错误: 数据表首行必须为convert声明, 否则请用#注释表名.&quot;, vbOKOnly + vbExclamation</span><br><span class=\"line\">            GoTo Error</span><br><span class=\"line\">        End If</span><br><span class=\"line\">        </span><br><span class=\"line\">Continue:</span><br><span class=\"line\">    Next</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">Finish:</span><br><span class=\"line\">    MsgBox (&quot;表格检测通过,已保存成功.&quot;)</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\">    </span><br><span class=\"line\">Error:</span><br><span class=\"line\">    Dim ret</span><br><span class=\"line\">    ret &#x3D; MsgBox(&quot;表格检测失败,请根据提示修正后再次尝试保存!&quot;, vbOKOnly + vbCritical)</span><br><span class=\"line\">    &#39;If Not ret &#x3D; vbOK Then Cancel &#x3D; True</span><br><span class=\"line\">    Cancel &#x3D; True</span><br><span class=\"line\">    Exit Sub</span><br><span class=\"line\"></span><br><span class=\"line\">End Sub</span><br></pre></td></tr></table></figure>"},{"title":"类型擦除","date":"2019-01-17T03:21:00.000Z","author":"yawei.zhang","_content":"\n### 类型擦除定义  \n\n** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  \n\n### 类型擦除语义或者可实现类型擦除效果的实现方式   \n* 多态    \n* 闭包   \n* 模板 (可以在C++模板中应用鸭子风格)   \n* 容器 any/tuploe     \n\n  <!-- more --> \n### 扩展 JAVA的泛型实现方式 类型擦除  \n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n> 输出为true  \n\n** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  \n\n** 泛型转译 **   \n\n```\npublic class Erasure <T>\n{\n    T object;\n    public Erasure(T object) \n    {\n        this.object = object;\n    }\n}\n```\n\n> Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  \n```\nErasure<String> erasure = new Erasure<String>(\"hello\");\nClass eclz = erasure.getClass();\nSystem.out.println(\"erasure class is:\"+eclz.getName());\n```\n> 打印的结果是  \n```\nerasure class is:com.frank.test.Erasure  \n```\n\n> 泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？  \n在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <T> 则会被转译成普通的 Object 类型，如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。   \n\n\n    类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n\n理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。\n```\npublic class ToolTest \n{\n    public static void main(String[] args) \n    {\n        List<Integer> ls = new ArrayList<>();\n        ls.add(23);\n//      ls.add(\"text\");\n        Method method = ls.getClass().getDeclaredMethod(\"add\",Object.class);\n        method.invoke(ls,\"test\");\n        method.invoke(ls,42.9f);\n    }\n}\n```\n\n\n","source":"_posts/2019-01-17-type-system-erase.md","raw":"---\ntitle: 类型擦除\ndate: 2019-01-17 11:21:00\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 类型擦除定义  \n\n** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  \n\n### 类型擦除语义或者可实现类型擦除效果的实现方式   \n* 多态    \n* 闭包   \n* 模板 (可以在C++模板中应用鸭子风格)   \n* 容器 any/tuploe     \n\n  <!-- more --> \n### 扩展 JAVA的泛型实现方式 类型擦除  \n```\nList<String> l1 = new ArrayList<String>();\nList<Integer> l2 = new ArrayList<Integer>();\n\nSystem.out.println(l1.getClass() == l2.getClass());\n```\n> 输出为true  \n\n** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  \n\n** 泛型转译 **   \n\n```\npublic class Erasure <T>\n{\n    T object;\n    public Erasure(T object) \n    {\n        this.object = object;\n    }\n}\n```\n\n> Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  \n```\nErasure<String> erasure = new Erasure<String>(\"hello\");\nClass eclz = erasure.getClass();\nSystem.out.println(\"erasure class is:\"+eclz.getName());\n```\n> 打印的结果是  \n```\nerasure class is:com.frank.test.Erasure  \n```\n\n> 泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？  \n在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <T> 则会被转译成普通的 Object 类型，如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。   \n\n\n    类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。\n\n理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。\n```\npublic class ToolTest \n{\n    public static void main(String[] args) \n    {\n        List<Integer> ls = new ArrayList<>();\n        ls.add(23);\n//      ls.add(\"text\");\n        Method method = ls.getClass().getDeclaredMethod(\"add\",Object.class);\n        method.invoke(ls,\"test\");\n        method.invoke(ls,42.9f);\n    }\n}\n```\n\n\n","slug":"2019-01-17-type-system-erase","published":1,"updated":"2019-02-19T07:16:59.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeiu000n7w5hb7lq9wpc","content":"<h3><span id=\"类型擦除定义\">类型擦除定义</span></h3><p>** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  </p>\n<h3><span id=\"类型擦除语义或者可实现类型擦除效果的实现方式\">类型擦除语义或者可实现类型擦除效果的实现方式</span></h3><ul>\n<li><p>多态    </p>\n</li>\n<li><p>闭包   </p>\n</li>\n<li><p>模板 (可以在C++模板中应用鸭子风格)   </p>\n</li>\n<li><p>容器 any/tuploe     </p>\n<a id=\"more\"></a> \n<h3><span id=\"扩展-java的泛型实现方式-类型擦除\">扩展 JAVA的泛型实现方式 类型擦除</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; l1 &#x3D; new ArrayList&lt;String&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; l2 &#x3D; new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(l1.getClass() &#x3D;&#x3D; l2.getClass());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出为true  </p>\n</blockquote>\n</li>\n</ul>\n<p>** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  </p>\n<p>** 泛型转译 **   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Erasure &lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T object;</span><br><span class=\"line\">    public Erasure(T object) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.object &#x3D; object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasure&lt;String&gt; erasure &#x3D; new Erasure&lt;String&gt;(&quot;hello&quot;);</span><br><span class=\"line\">Class eclz &#x3D; erasure.getClass();</span><br><span class=\"line\">System.out.println(&quot;erasure class is:&quot;+eclz.getName());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打印的结果是  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erasure class is:com.frank.test.Erasure</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？<br>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <t> 则会被转译成普通的 Object 类型，如果指定了上限如 <t extends=\"\" string=\"\"> 则类型参数就被替换成类型上限。   </t></t></p>\n</blockquote>\n<pre><code>类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。</code></pre><p>理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ToolTest </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ls &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        ls.add(23);</span><br><span class=\"line\">&#x2F;&#x2F;      ls.add(&quot;text&quot;);</span><br><span class=\"line\">        Method method &#x3D; ls.getClass().getDeclaredMethod(&quot;add&quot;,Object.class);</span><br><span class=\"line\">        method.invoke(ls,&quot;test&quot;);</span><br><span class=\"line\">        method.invoke(ls,42.9f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"类型擦除定义\"><a href=\"#类型擦除定义\" class=\"headerlink\" title=\"类型擦除定义\"></a>类型擦除定义</h3><p>** 不需要程序伴随类型修饰的操作语义成为擦除语义, 用来使程序在运行时不依赖类型.  **  </p>\n<h3 id=\"类型擦除语义或者可实现类型擦除效果的实现方式\"><a href=\"#类型擦除语义或者可实现类型擦除效果的实现方式\" class=\"headerlink\" title=\"类型擦除语义或者可实现类型擦除效果的实现方式\"></a>类型擦除语义或者可实现类型擦除效果的实现方式</h3><ul>\n<li><p>多态    </p>\n</li>\n<li><p>闭包   </p>\n</li>\n<li><p>模板 (可以在C++模板中应用鸭子风格)   </p>\n</li>\n<li><p>容器 any/tuploe     </p>","more":"<h3 id=\"扩展-JAVA的泛型实现方式-类型擦除\"><a href=\"#扩展-JAVA的泛型实现方式-类型擦除\" class=\"headerlink\" title=\"扩展 JAVA的泛型实现方式 类型擦除\"></a>扩展 JAVA的泛型实现方式 类型擦除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; l1 &#x3D; new ArrayList&lt;String&gt;();</span><br><span class=\"line\">List&lt;Integer&gt; l2 &#x3D; new ArrayList&lt;Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(l1.getClass() &#x3D;&#x3D; l2.getClass());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出为true  </p>\n</blockquote>\n</li>\n</ul>\n<p>** 泛型信息只存在于代码编译阶段，在进入 JVM 之前，与泛型相关的信息会被擦除掉，专业术语叫做类型擦除。 **  </p>\n<p>** 泛型转译 **   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Erasure &lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    T object;</span><br><span class=\"line\">    public Erasure(T object) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.object &#x3D; object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Erasure 是一个泛型类，我们查看它在运行时的状态信息可以通过反射。  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Erasure&lt;String&gt; erasure &#x3D; new Erasure&lt;String&gt;(&quot;hello&quot;);</span><br><span class=\"line\">Class eclz &#x3D; erasure.getClass();</span><br><span class=\"line\">System.out.println(&quot;erasure class is:&quot;+eclz.getName());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>打印的结果是  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">erasure class is:com.frank.test.Erasure</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>泛型类被类型擦除后，相应的类型就被替换成 Object 类型呢？<br>在泛型类被类型擦除的时候，之前泛型类中的类型参数部分如果没有指定上限，如 <T> 则会被转译成普通的 Object 类型，如果指定了上限如 <T extends String> 则类型参数就被替换成类型上限。   </p>\n</blockquote>\n<pre><code>类型擦除，是泛型能够与之前的 java 版本代码兼容共存的原因。但也因为类型擦除，它会抹掉很多继承相关的特性，这是它带来的局限性。</code></pre><p>理解类型擦除有利于我们绕过开发当中可能遇到的雷区，同样理解类型擦除也能让我们绕过泛型本身的一些限制。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ToolTest </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static void main(String[] args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; ls &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\">        ls.add(23);</span><br><span class=\"line\">&#x2F;&#x2F;      ls.add(&quot;text&quot;);</span><br><span class=\"line\">        Method method &#x3D; ls.getClass().getDeclaredMethod(&quot;add&quot;,Object.class);</span><br><span class=\"line\">        method.invoke(ls,&quot;test&quot;);</span><br><span class=\"line\">        method.invoke(ls,42.9f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SDM模型","date":"2019-09-30T16:00:00.000Z","author":"yawei.zhang","_content":" \n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","source":"_posts/2019-10-01-sdm.md","raw":"---\ntitle: SDM模型  \ndate: 2019-10-01\ncategories: develop \nauthor: yawei.zhang \n---\n \n### SDM框架对系统发展生命周期的过程描述  \nSDM(软件开发方法)框架是在SDLC在软件开发早起\n* (SDM框架)软件开发过程有以下基本的核心活动内容\n  * 需求分析 (Requirements analysis)  \n  * 领域设计 (Software design)  \n  * 系统设计 (Software engineering)  \n  * 编码开发 (Software construction)  \n  * 功能验证 (Software testing)  \n  * 错误修正 (Debugging)    \n  * 部署交付 (Software deployment)  \n  * 维护 (Software maintenance)   \n<!-- more --> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   \n\n例如:  \n* 线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   \n* 快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) \n* 加强发布协调的DevOps   \n\n同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.  \n实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为'混合模型',  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.  \n\n","slug":"2019-10-01-sdm","published":1,"updated":"2019-11-04T08:55:43.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeiv000p7w5hdr50bdtx","content":"<h3><span id=\"sdm框架对系统发展生命周期的过程描述\">SDM框架对系统发展生命周期的过程描述</span></h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)   <a id=\"more\"></a> \n根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"SDM框架对系统发展生命周期的过程描述\"><a href=\"#SDM框架对系统发展生命周期的过程描述\" class=\"headerlink\" title=\"SDM框架对系统发展生命周期的过程描述\"></a>SDM框架对系统发展生命周期的过程描述</h3><p>SDM(软件开发方法)框架是在SDLC在软件开发早起</p>\n<ul>\n<li>(SDM框架)软件开发过程有以下基本的核心活动内容<ul>\n<li>需求分析 (Requirements analysis)  </li>\n<li>领域设计 (Software design)  </li>\n<li>系统设计 (Software engineering)  </li>\n<li>编码开发 (Software construction)  </li>\n<li>功能验证 (Software testing)  </li>\n<li>错误修正 (Debugging)    </li>\n<li>部署交付 (Software deployment)  </li>\n<li>维护 (Software maintenance)","more":"根据所面临的现实问题以及所在环境的不同, 这些核心活动内容会在结构关系以及流程顺序上有相应的调整或者取舍 形成不同的规范/模型/框架等.   </li>\n</ul>\n</li>\n</ul>\n<p>例如:  </p>\n<ul>\n<li>线性过程的瀑布式开发模型 SDLC:专注于完整正确的计划   </li>\n<li>快速迭代的敏捷开发   : 持续交付来响应频繁变更的计划(快速试错) </li>\n<li>加强发布协调的DevOps   </li>\n</ul>\n<p>同设计模式一样, 这些模型提炼自对现实问题的具体解决过程, 在实际应用中并不需要一定去拘泥某个规范.<br>实际上, 在一个具备一定规模的项目中, 往往同时存在多种不同的开发方式共同组成适合该项目的开发过程,  这种方式也称之为’混合模型’,  在混合模型中,  允许一个项目沿着最有效的路径去组织属于自己的活动内容,  合适现实问题解决模型才是最恰当的.</p>"},{"title":"linux内存布局和ASLR下的可分配地址空间","date":"2019-11-03T16:00:00.000Z","author":"yawei.zhang","_content":"### 导语  \n64位下的linux地址空间虽然看起来虽然庞大2^64  但是实际上进行内核与用户空间的划分后, 包括ASLR以及PIE等机制的启用, 实际留给mmap和brk的可分配区域远远小于这个值, 大约是42T的可用地址空间. 本文根据内核代码的默认宏定义进行了X86-64下的布局分析, 给基于共享内存的用户空间选址给予一定的参考.   \n\n### 目录  \n<!-- TOC -->\n\n- [导语](#导语)\n- [目录](#目录)\n- [LINUX内存布局](#linux内存布局)\n  - [..1.1. 基本布局](#11-基本布局)\n  - [..1.2. 用户空间布局](#12-用户空间布局)\n- [ASLR地址空间随机化](#aslr地址空间随机化)\n  - [ASLR的设置与关闭](#aslr的设置与关闭)\n    - [设置randomize_va_space的等级](#设置randomize_va_space的等级)\n    - [进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE](#进程个性化设置-进程描述符的成员personality设置-addr_no_randomize)\n    - [GDB调试中打开或者关闭ASLR(默认会禁用)](#gdb调试中打开或者关闭aslr默认会禁用)\n- [内核代码中相关的宏定义和随机值计算](#内核代码中相关的宏定义和随机值计算)\n  - [TASK_SIZE 定义 用户地址空间的大小](#task_size-定义-用户地址空间的大小)\n  - [栈地址](#栈地址)\n  - [MMAP映射区起始地址](#mmap映射区起始地址)\n  - [代码段开始地址](#代码段开始地址)\n  - [HEAP区开始地址](#heap区开始地址)\n- [结论部分](#结论部分)\n  - [结论部分补充验证数据](#结论部分补充验证数据)\n\n<!-- /TOC -->\n### LINUX内存布局    \n针对X86-64内核代码的分析  \n\n#### ..1.1. 基本布局  \n| -                | -                                              |\n| ---------------- | ---------------------------------------------- |\n| 内核地址空间范围    | [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF] |\n| 用户地址空间       | [0X0000 7FFF FFFF F000, 0X0000 0000 0000 0000] |\n| 不规范地址空间      | 不属于内核或者用户的地址空间属于不规范地址空间         |\n\n用户空间的大小由宏定义TASK_SIZE决定, 在X86-64下这个大小默认为2^47-4096(128T) 对应十六进制数为: 0X0000 7FFF FFFF F000 .     \n\n#### ..1.2. 用户空间布局\n\n| - 用户空间布局 -              |\n|-------------------------------|\n| 0x0                           |\n| 保留区                        |\n| 代码段(PLT代码表部分)         |\n| 代码段                        |\n| 数据段(GOT) 只读              |\n| 数据段(.got.plt) 惰性加载机制 |\n| 数据段(Data)                  |\n| 数据段(BSS)                         |\n| 堆空间(Heap)                  |\n| ↓                             |\n| 未分配区域                    |\n| ↑                             |\n| 内存映射区域(mmap)            |\n| 栈空间(进程栈)                |\n| TASK_SIZE                     |\n\n\n### ASLR地址空间随机化\n地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种防范内存损坏漏洞被利用的计算机安全技术。  \nASLR通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数。现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行Return-to-libc攻击。\n这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制)  \n\n不同版本的操作系统和内核版本, 在ASLR的实现上会有细节的不同, 这里主要是根据目前的生产环境做的分析, 用于确认ASLR的在地址空间中对内存布局带来的扰动范围.   \n\n#### ASLR的设置与关闭\nLINUX下常见的设置或关闭有方式:  \n\n##### 设置randomize_va_space的等级  \n随机化虚拟地址空间的配置说明如下:     \n```\n/proc/sys/kernel/randomize_va_space\n0 = Disabled\n1 = Conservative Randomization\n2 = Full Randomization\n```  \n总共分了三档, 不同版本其内容随着支持程度和等级划分略有不同, 默认启用的等级也不同, 以更具体的生产环境为准 大致如下:  \n0 = 关闭  \n1 = 保守随机化: 共享库 栈 mmap  vdso随机化   \n2 = 完全随机化:  包括brk分配的内存   \n    2.1 = 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie  \n\n* 修改/关闭系统配置方式如下  \n```\necho 0 > /proc/sys/kernel/randomize_va_space\n```\n\n* 或者通过sysctl修改\n```\nsysctl -w kernel.randomize_va_space=0\n```\n\n\n\n##### 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     \n  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]  \n  * 例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   \n    * setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  \n\n##### GDB调试中打开或者关闭ASLR(默认会禁用)\n```\n关闭ASLR：\nset disable-randomization on\n开启ASLR：\nset disable-randomization off\n查看：\nshow disable-randomization\n```\n\n\n### 内核代码中相关的宏定义和随机值计算\n\n#### TASK_SIZE 定义 用户地址空间的大小    \n在X86的内核代码中, 默认的TASK_SIZE为 (1UL << 47) - 4096)   \n即 \n```\n2^47-4096 => 0x7fff ffff f000    约为128T  \n```\ngdb调试程序默认会关闭aslr, 我们通过gdb运行一个程序, 然后对齐pmap可以得到如下内存分布:  \n```\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n```\n\n00007ffffffde000 + 132K = ‭0x7FFFFFFFF000‬  和内核代码中的宏定义一致\n\n\n\n```C++\n#ifdef CONFIG_X86_32\n/*\n * User space process size: 3GB (default).\n */\n#define IA32_PAGE_OFFSET    PAGE_OFFSET\n#define TASK_SIZE        PAGE_OFFSET\n#define TASK_SIZE_LOW        TASK_SIZE\n#define TASK_SIZE_MAX        TASK_SIZE\n#define DEFAULT_MAP_WINDOW    TASK_SIZE\n#define STACK_TOP        TASK_SIZE\n#define STACK_TOP_MAX        STACK_TOP\n\n#else\n\n#ifdef CONFIG_X86_5LEVEL\n#define __VIRTUAL_MASK_SHIFT    (pgtable_l5_enabled() ? 56 : 47)\n#else\n#define __VIRTUAL_MASK_SHIFT    47\n#endif\n\n#define TASK_SIZE_MAX    ((1UL << __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)\n\n#define DEFAULT_MAP_WINDOW    ((1UL << 47) - PAGE_SIZE)\n\n/* This decides where the kernel will search for a free chunk of vm\n * space during mmap's.\n */\n#define IA32_PAGE_OFFSET    ((current->personality & ADDR_LIMIT_3GB) ? \\\n                    0xc0000000 : 0xFFFFe000)\n\n#define TASK_SIZE_LOW        (test_thread_flag(TIF_ADDR32) ? \\\n                    IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)\n#define TASK_SIZE        (test_thread_flag(TIF_ADDR32) ? \\\n                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)\n#define TASK_SIZE_OF(child)    ((test_tsk_thread_flag(child, TIF_ADDR32)) ? \\\n                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)\n\n#define STACK_TOP        TASK_SIZE_LOW\n#define STACK_TOP_MAX        TASK_SIZE_MAX\n\n#define INIT_THREAD  {                        \\\n    .addr_limit        = KERNEL_DS,            \\\n}\n\nextern unsigned long KSTK_ESP(struct task_struct *task);\n\n#endif /* CONFIG_X86_64 */\n\n```\n\n#### 栈地址 \n\n随机值大小为17G  = 0x3fffff000\n\n代码位置如下:\nload_elf_binary ->  setup_arg_page   \n```C++\nretval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),\n                 executable_stack);\n```\n\n```C++\n#define __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)\n#define STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())\n\nunsigned long randomize_stack_top(unsigned long stack_top)\n{\n    unsigned long random_variable = 0;\n\n    if (current->flags & PF_RANDOMIZE) {\n        random_variable = get_random_long();\n        random_variable &= STACK_RND_MASK;\n        random_variable <<= PAGE_SHIFT;\n    }\n    return PAGE_ALIGN(stack_top) - random_variable;\n}\n```\n\n\n#### MMAP映射区起始地址 \n```C++\nload_elf_binary -> setup_new_exec -> arch_pick_mmap_layout ->arch_pick_mmap_base  \n```\n\nmmap的起始计算为:   \nSTACK_TOP - 栈最大长度  - 间隙 -  随机值  \n栈最小长度为128M\n随机位数配置在/proc/sys/vm/mmap_rnd_bits  default=28   \n默认随机最大值为  0xFFFFFFF000  大约为1T \n用户空间起始地址0x7FFFFFFFF000\n\n```C++\n\n#define TASK_SIZE_MAX     ((1UL << 47) - PAGE_SIZE) //0x7FFFFFFFF000\n#define TASK_SIZE     TASK_SIZE_MAX\n\n#define STACK_TOP          TASK_SIZE\n#define STACK_TOP_MAX          TASK_SIZE_MAX\n\n/* 1GB for 64bit, 8MB for 32bit */\n#define __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)\n#define STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())\n\n\nstatic unsigned long stack_maxrandom_size(unsigned long task_size)\n{\n    unsigned long max = 0;\n    if (current->flags & PF_RANDOMIZE) {\n        max = (-1UL) & __STACK_RND_MASK(task_size == task_size_32bit());\n        max <<= PAGE_SHIFT;\n    }\n\n    return max;\n}\n\n//task size为0x7FFFFFFFF000\n//随机值为 random()& ((1UL << 28)   -1) 个页面, 即0x00FFFFFFF000\nvoid arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)\n{\n\n    mm->get_unmapped_area = arch_get_unmapped_area_topdown;\n\n    arch_pick_mmap_base(&mm->mmap_base, &mm->mmap_legacy_base,\n            arch_rnd(mmap64_rnd_bits), task_size_64bit(0),\n            rlim_stack);  //proc/sys/vm/mmap_rnd_bits  default=28\n\n}\n\n//\nstatic unsigned long arch_rnd(unsigned int rndbits)\n{\n    if (!(current->flags & PF_RANDOMIZE))\n        return 0;\n    return (get_random_long() & ((1UL << rndbits) - 1)) << PAGE_SHIFT;  \n}\n\n/*\n * 新布局直接调用*base = mmap_base(random_factor, task_size, rlim_stack);  \n */\nstatic void arch_pick_mmap_base(unsigned long *base, unsigned long *legacy_base,\n        unsigned long random_factor, unsigned long task_size,\n        struct rlimit *rlim_stack)\n{\n    *legacy_base = mmap_legacy_base(random_factor, task_size);\n    if (mmap_is_legacy())\n        *base = *legacy_base;\n    else\n        *base = mmap_base(random_factor, task_size, rlim_stack);\n}\n\n//这是是随机值的上下限保护 栈至少要有128M \n//task size减去随机值, 再减去栈的大小, 栈的最小值为128M  \nstatic unsigned long mmap_base(unsigned long rnd, unsigned long task_size,\n                   struct rlimit *rlim_stack)\n{\n    unsigned long gap = rlim_stack->rlim_cur;\n    unsigned long pad = stack_maxrandom_size(task_size) + stack_guard_gap;\n    unsigned long gap_min, gap_max;\n\n    /* Values close to RLIM_INFINITY can overflow. */\n    if (gap + pad > gap)\n        gap += pad;\n\n    /*\n     * Top of mmap area (just below the process stack).\n     * Leave an at least ~128 MB hole with possible stack randomization.\n     */\n    gap_min = SIZE_128M;\n    gap_max = (task_size / 6) * 5;\n\n    if (gap < gap_min)\n        gap = gap_min;\n    else if (gap > gap_max)\n        gap = gap_max;\n\n    return PAGE_ALIGN(task_size - gap - rnd);\n}\n\n//max = (0x3fffff <<= 12)   = 0x3fffff000\nstatic unsigned long stack_maxrandom_size(unsigned long task_size)\n{\n    unsigned long max = 0;\n    if (current->flags & PF_RANDOMIZE) {\n        max = (-1UL) & __STACK_RND_MASK(task_size == task_size_32bit());\n        max <<= PAGE_SHIFT;\n    }\n\n    return max;\n}\n\n```\n\n\n#### 代码段开始地址  \nELF文件如果是普通的EXEC类型则会使用指定的入口地址下面讨论PIE编译出的DYN可执行文件\n其加载地址为 DEFAULT_MAP_WINDOW /3*2上增加一个arch_mmap_rnd随机值  \nDEFAULT_MAP_WINDOW /3*2 = 0x555555554AAA\n同mmap一样为 0x00FFFFFFF000 约1个T大小    \n代码段起始位置约为84T 随机值 1T   \n\n代码段数据段等整体随机  \n```C++\nif (interpreter) {\n                load_bias = ELF_ET_DYN_BASE;\n                if (current->flags & PF_RANDOMIZE)\n                    load_bias += arch_mmap_rnd();\n                elf_flags |= MAP_FIXED;\n            } else\n                load_bias = 0;\n```\n\n```C++  \n    loc->elf_ex.e_entry += load_bias;\n    elf_bss += load_bias;\n    elf_brk += load_bias;\n    start_code += load_bias;\n    end_code += load_bias;\n    start_data += load_bias;\n    end_data += load_bias;\n```\n\n#### HEAP区开始地址  \nbrk从BSS结束地址开始, 会有一个额外的随机arch_randomize_brk   \n为固定的大小范围0x02000000, 大约为33M  \n```C++\nif ((current->flags & PF_RANDOMIZE) && (randomize_va_space > 1)) {\n\t\t/*\n\t\t * For architectures with ELF randomization, when executing\n\t\t * a loader directly (i.e. no interpreter listed in ELF\n\t\t * headers), move the brk area out of the mmap region\n\t\t * (since it grows up, and may collide early with the stack\n\t\t * growing down), and into the unused ELF_ET_DYN_BASE region.\n\t\t */\n\t\tif (IS_ENABLED(CONFIG_ARCH_HAS_ELF_RANDOMIZE) &&\n\t\t    loc->elf_ex.e_type == ET_DYN && !interpreter)\n\t\t\tcurrent->mm->brk = current->mm->start_brk =\n\t\t\t\tELF_ET_DYN_BASE;\n\n\t\tcurrent->mm->brk = current->mm->start_brk =\n\t\t\tarch_randomize_brk(current->mm);\n#ifdef compat_brk_randomized\n\t\tcurrent->brk_randomized = 1;\n#endif\n\t}\n\n```\n\n```C++\nunsigned long arch_randomize_brk(struct mm_struct *mm)\n{\n\treturn randomize_page(mm->brk, 0x02000000);\n}\n```\n\n### 结论部分    \n假定编译出来的是PIE类型的ELF并且全开ASLR设置   \n那么在mmap和heap之间的地址空间大小大约是  \n128T - 17G - 1T - 84T - 1T -33M  = 42T  \n\nmmap最小起始地址略小于0x0000 7F00 0000 0000  \nbrk起始地址最大略大于 0x0000 5655 5555 5555  \n\n这个是以T为单位的粗略计算, 考虑到计算时忽略了一些小的单位(GB级别或者更小), 包括间隙 小的随机值, 以及动态库 数据段代码段本身占用的空间, 这里可以做一个进一步的保守计算来使用这个空间.   \n\n __计算这个空间的意义在于, 例如我们对共享内存使用一个固定的地址时, 需要避免和系统本身的动态分配的地址空间相冲突, 而计算出来的地址空间的确定可以保证这一点,__  例如可以用这两个地址做一个中值计算, 把这个中值作为安全的绝对地址使用.     \n\n\n#### 结论部分补充验证数据  \n\n* 没有开启PIE和ASLR\n```\n0000000000400000      4K r-x-- a.out (deleted)\n0000000000600000      4K r---- a.out (deleted)\n0000000000601000  40964K rw--- a.out (deleted)\n0000000002e02000    132K rw---   [ anon ]\n00007ffff70f2000   1732K r-x-- libc-2.27.so\n00007ffff72a3000   2044K ----- libc-2.27.so\n00007ffff74a2000     16K r---- libc-2.27.so\n00007ffff74a6000      8K rw--- libc-2.27.so\n00007ffff74a8000     16K rw---   [ anon ]\n00007ffff74ac000     92K r-x-- libgcc_s.so.1\n00007ffff74c3000   2044K ----- libgcc_s.so.1\n00007ffff76c2000      4K r---- libgcc_s.so.1\n00007ffff76c3000      4K rw--- libgcc_s.so.1\n00007ffff76c4000   1608K r-x-- libm-2.27.so\n00007ffff7856000   2044K ----- libm-2.27.so\n00007ffff7a55000      4K r---- libm-2.27.so\n00007ffff7a56000      4K rw--- libm-2.27.so\n00007ffff7a57000   1480K r-x-- libstdc++.so.6.0.25\n00007ffff7bc9000   2048K ----- libstdc++.so.6.0.25\n00007ffff7dc9000     40K r---- libstdc++.so.6.0.25\n00007ffff7dd3000      8K rw--- libstdc++.so.6.0.25\n00007ffff7dd5000     12K rw---   [ anon ]\n00007ffff7dd8000    148K r-x-- ld-2.27.so\n00007ffff7fd7000     24K rw---   [ anon ]\n00007ffff7ff8000      8K r----   [ anon ]\n00007ffff7ffa000      8K r-x--   [ anon ]\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n```\n\n\n* 开启PIE和ASLR后多次测试得到的一个接近最小可分配空间的内存分布结果如下:\n代码段从0x0000 5640开始  \nmmap的则从0x 0000 7eff开始而不是概率更大的0x 0000 7f** 这样的地址  \n```\n00005640b5092000      4K r-x-- a.out\n00005640b5292000      4K r---- a.out\n00005640b5293000  40964K rw--- a.out\n00005640b99f2000    132K rw---   [ anon ]\n00007effd7734000  20484K rw---   [ anon ]\n00007effd8b35000   1732K r-x-- libc-2.27.so\n00007effd8ce6000   2044K ----- libc-2.27.so\n00007effd8ee5000     16K r---- libc-2.27.so\n00007effd8ee9000      8K rw--- libc-2.27.so\n00007effd8eeb000     16K rw---   [ anon ]\n00007effd8eef000     92K r-x-- libgcc_s.so.1\n00007effd8f06000   2044K ----- libgcc_s.so.1\n00007effd9105000      4K r---- libgcc_s.so.1\n00007effd9106000      4K rw--- libgcc_s.so.1\n00007effd9107000   1608K r-x-- libm-2.27.so\n00007effd9299000   2044K ----- libm-2.27.so\n00007effd9498000      4K r---- libm-2.27.so\n00007effd9499000      4K rw--- libm-2.27.so\n00007effd949a000   1480K r-x-- libstdc++.so.6.0.25\n00007effd960c000   2048K ----- libstdc++.so.6.0.25\n00007effd980c000     40K r---- libstdc++.so.6.0.25\n00007effd9816000      8K rw--- libstdc++.so.6.0.25\n00007effd9818000     12K rw---   [ anon ]\n00007effd981b000    148K r-x-- ld-2.27.so\n00007effd9a1e000     24K rw---   [ anon ]\n00007effd9a3f000      4K r---- ld-2.27.so\n00007effd9a40000      4K rw--- ld-2.27.so\n00007effd9a41000      4K rw---   [ anon ]\n00007ffd922c7000    132K rw---   [ stack ]\n00007ffd92385000      8K r----   [ anon ]\n00007ffd92387000      8K r-x--   [ anon ]\nffffffffff600000      4K r-x--   [ anon ]\n```","source":"_posts/2019-11-04-aslr.md","raw":"---\ntitle: linux内存布局和ASLR下的可分配地址空间  \ndate: 2019-11-04\ncategories: develop \nauthor: yawei.zhang \n---\n### 导语  \n64位下的linux地址空间虽然看起来虽然庞大2^64  但是实际上进行内核与用户空间的划分后, 包括ASLR以及PIE等机制的启用, 实际留给mmap和brk的可分配区域远远小于这个值, 大约是42T的可用地址空间. 本文根据内核代码的默认宏定义进行了X86-64下的布局分析, 给基于共享内存的用户空间选址给予一定的参考.   \n\n### 目录  \n<!-- TOC -->\n\n- [导语](#导语)\n- [目录](#目录)\n- [LINUX内存布局](#linux内存布局)\n  - [..1.1. 基本布局](#11-基本布局)\n  - [..1.2. 用户空间布局](#12-用户空间布局)\n- [ASLR地址空间随机化](#aslr地址空间随机化)\n  - [ASLR的设置与关闭](#aslr的设置与关闭)\n    - [设置randomize_va_space的等级](#设置randomize_va_space的等级)\n    - [进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE](#进程个性化设置-进程描述符的成员personality设置-addr_no_randomize)\n    - [GDB调试中打开或者关闭ASLR(默认会禁用)](#gdb调试中打开或者关闭aslr默认会禁用)\n- [内核代码中相关的宏定义和随机值计算](#内核代码中相关的宏定义和随机值计算)\n  - [TASK_SIZE 定义 用户地址空间的大小](#task_size-定义-用户地址空间的大小)\n  - [栈地址](#栈地址)\n  - [MMAP映射区起始地址](#mmap映射区起始地址)\n  - [代码段开始地址](#代码段开始地址)\n  - [HEAP区开始地址](#heap区开始地址)\n- [结论部分](#结论部分)\n  - [结论部分补充验证数据](#结论部分补充验证数据)\n\n<!-- /TOC -->\n### LINUX内存布局    \n针对X86-64内核代码的分析  \n\n#### ..1.1. 基本布局  \n| -                | -                                              |\n| ---------------- | ---------------------------------------------- |\n| 内核地址空间范围    | [0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF] |\n| 用户地址空间       | [0X0000 7FFF FFFF F000, 0X0000 0000 0000 0000] |\n| 不规范地址空间      | 不属于内核或者用户的地址空间属于不规范地址空间         |\n\n用户空间的大小由宏定义TASK_SIZE决定, 在X86-64下这个大小默认为2^47-4096(128T) 对应十六进制数为: 0X0000 7FFF FFFF F000 .     \n\n#### ..1.2. 用户空间布局\n\n| - 用户空间布局 -              |\n|-------------------------------|\n| 0x0                           |\n| 保留区                        |\n| 代码段(PLT代码表部分)         |\n| 代码段                        |\n| 数据段(GOT) 只读              |\n| 数据段(.got.plt) 惰性加载机制 |\n| 数据段(Data)                  |\n| 数据段(BSS)                         |\n| 堆空间(Heap)                  |\n| ↓                             |\n| 未分配区域                    |\n| ↑                             |\n| 内存映射区域(mmap)            |\n| 栈空间(进程栈)                |\n| TASK_SIZE                     |\n\n\n### ASLR地址空间随机化\n地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种防范内存损坏漏洞被利用的计算机安全技术。  \nASLR通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数。现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行Return-to-libc攻击。\n这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制)  \n\n不同版本的操作系统和内核版本, 在ASLR的实现上会有细节的不同, 这里主要是根据目前的生产环境做的分析, 用于确认ASLR的在地址空间中对内存布局带来的扰动范围.   \n\n#### ASLR的设置与关闭\nLINUX下常见的设置或关闭有方式:  \n\n##### 设置randomize_va_space的等级  \n随机化虚拟地址空间的配置说明如下:     \n```\n/proc/sys/kernel/randomize_va_space\n0 = Disabled\n1 = Conservative Randomization\n2 = Full Randomization\n```  \n总共分了三档, 不同版本其内容随着支持程度和等级划分略有不同, 默认启用的等级也不同, 以更具体的生产环境为准 大致如下:  \n0 = 关闭  \n1 = 保守随机化: 共享库 栈 mmap  vdso随机化   \n2 = 完全随机化:  包括brk分配的内存   \n    2.1 = 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie  \n\n* 修改/关闭系统配置方式如下  \n```\necho 0 > /proc/sys/kernel/randomize_va_space\n```\n\n* 或者通过sysctl修改\n```\nsysctl -w kernel.randomize_va_space=0\n```\n\n\n\n##### 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     \n  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]  \n  * 例如 ldd ./benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   \n    * setarch $(uname -m) -R ldd ./benchmark_fast 这样去查看则是固定不变的  \n\n##### GDB调试中打开或者关闭ASLR(默认会禁用)\n```\n关闭ASLR：\nset disable-randomization on\n开启ASLR：\nset disable-randomization off\n查看：\nshow disable-randomization\n```\n\n\n### 内核代码中相关的宏定义和随机值计算\n\n#### TASK_SIZE 定义 用户地址空间的大小    \n在X86的内核代码中, 默认的TASK_SIZE为 (1UL << 47) - 4096)   \n即 \n```\n2^47-4096 => 0x7fff ffff f000    约为128T  \n```\ngdb调试程序默认会关闭aslr, 我们通过gdb运行一个程序, 然后对齐pmap可以得到如下内存分布:  \n```\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n```\n\n00007ffffffde000 + 132K = ‭0x7FFFFFFFF000‬  和内核代码中的宏定义一致\n\n\n\n```C++\n#ifdef CONFIG_X86_32\n/*\n * User space process size: 3GB (default).\n */\n#define IA32_PAGE_OFFSET    PAGE_OFFSET\n#define TASK_SIZE        PAGE_OFFSET\n#define TASK_SIZE_LOW        TASK_SIZE\n#define TASK_SIZE_MAX        TASK_SIZE\n#define DEFAULT_MAP_WINDOW    TASK_SIZE\n#define STACK_TOP        TASK_SIZE\n#define STACK_TOP_MAX        STACK_TOP\n\n#else\n\n#ifdef CONFIG_X86_5LEVEL\n#define __VIRTUAL_MASK_SHIFT    (pgtable_l5_enabled() ? 56 : 47)\n#else\n#define __VIRTUAL_MASK_SHIFT    47\n#endif\n\n#define TASK_SIZE_MAX    ((1UL << __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)\n\n#define DEFAULT_MAP_WINDOW    ((1UL << 47) - PAGE_SIZE)\n\n/* This decides where the kernel will search for a free chunk of vm\n * space during mmap's.\n */\n#define IA32_PAGE_OFFSET    ((current->personality & ADDR_LIMIT_3GB) ? \\\n                    0xc0000000 : 0xFFFFe000)\n\n#define TASK_SIZE_LOW        (test_thread_flag(TIF_ADDR32) ? \\\n                    IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)\n#define TASK_SIZE        (test_thread_flag(TIF_ADDR32) ? \\\n                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)\n#define TASK_SIZE_OF(child)    ((test_tsk_thread_flag(child, TIF_ADDR32)) ? \\\n                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)\n\n#define STACK_TOP        TASK_SIZE_LOW\n#define STACK_TOP_MAX        TASK_SIZE_MAX\n\n#define INIT_THREAD  {                        \\\n    .addr_limit        = KERNEL_DS,            \\\n}\n\nextern unsigned long KSTK_ESP(struct task_struct *task);\n\n#endif /* CONFIG_X86_64 */\n\n```\n\n#### 栈地址 \n\n随机值大小为17G  = 0x3fffff000\n\n代码位置如下:\nload_elf_binary ->  setup_arg_page   \n```C++\nretval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),\n                 executable_stack);\n```\n\n```C++\n#define __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)\n#define STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())\n\nunsigned long randomize_stack_top(unsigned long stack_top)\n{\n    unsigned long random_variable = 0;\n\n    if (current->flags & PF_RANDOMIZE) {\n        random_variable = get_random_long();\n        random_variable &= STACK_RND_MASK;\n        random_variable <<= PAGE_SHIFT;\n    }\n    return PAGE_ALIGN(stack_top) - random_variable;\n}\n```\n\n\n#### MMAP映射区起始地址 \n```C++\nload_elf_binary -> setup_new_exec -> arch_pick_mmap_layout ->arch_pick_mmap_base  \n```\n\nmmap的起始计算为:   \nSTACK_TOP - 栈最大长度  - 间隙 -  随机值  \n栈最小长度为128M\n随机位数配置在/proc/sys/vm/mmap_rnd_bits  default=28   \n默认随机最大值为  0xFFFFFFF000  大约为1T \n用户空间起始地址0x7FFFFFFFF000\n\n```C++\n\n#define TASK_SIZE_MAX     ((1UL << 47) - PAGE_SIZE) //0x7FFFFFFFF000\n#define TASK_SIZE     TASK_SIZE_MAX\n\n#define STACK_TOP          TASK_SIZE\n#define STACK_TOP_MAX          TASK_SIZE_MAX\n\n/* 1GB for 64bit, 8MB for 32bit */\n#define __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)\n#define STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())\n\n\nstatic unsigned long stack_maxrandom_size(unsigned long task_size)\n{\n    unsigned long max = 0;\n    if (current->flags & PF_RANDOMIZE) {\n        max = (-1UL) & __STACK_RND_MASK(task_size == task_size_32bit());\n        max <<= PAGE_SHIFT;\n    }\n\n    return max;\n}\n\n//task size为0x7FFFFFFFF000\n//随机值为 random()& ((1UL << 28)   -1) 个页面, 即0x00FFFFFFF000\nvoid arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)\n{\n\n    mm->get_unmapped_area = arch_get_unmapped_area_topdown;\n\n    arch_pick_mmap_base(&mm->mmap_base, &mm->mmap_legacy_base,\n            arch_rnd(mmap64_rnd_bits), task_size_64bit(0),\n            rlim_stack);  //proc/sys/vm/mmap_rnd_bits  default=28\n\n}\n\n//\nstatic unsigned long arch_rnd(unsigned int rndbits)\n{\n    if (!(current->flags & PF_RANDOMIZE))\n        return 0;\n    return (get_random_long() & ((1UL << rndbits) - 1)) << PAGE_SHIFT;  \n}\n\n/*\n * 新布局直接调用*base = mmap_base(random_factor, task_size, rlim_stack);  \n */\nstatic void arch_pick_mmap_base(unsigned long *base, unsigned long *legacy_base,\n        unsigned long random_factor, unsigned long task_size,\n        struct rlimit *rlim_stack)\n{\n    *legacy_base = mmap_legacy_base(random_factor, task_size);\n    if (mmap_is_legacy())\n        *base = *legacy_base;\n    else\n        *base = mmap_base(random_factor, task_size, rlim_stack);\n}\n\n//这是是随机值的上下限保护 栈至少要有128M \n//task size减去随机值, 再减去栈的大小, 栈的最小值为128M  \nstatic unsigned long mmap_base(unsigned long rnd, unsigned long task_size,\n                   struct rlimit *rlim_stack)\n{\n    unsigned long gap = rlim_stack->rlim_cur;\n    unsigned long pad = stack_maxrandom_size(task_size) + stack_guard_gap;\n    unsigned long gap_min, gap_max;\n\n    /* Values close to RLIM_INFINITY can overflow. */\n    if (gap + pad > gap)\n        gap += pad;\n\n    /*\n     * Top of mmap area (just below the process stack).\n     * Leave an at least ~128 MB hole with possible stack randomization.\n     */\n    gap_min = SIZE_128M;\n    gap_max = (task_size / 6) * 5;\n\n    if (gap < gap_min)\n        gap = gap_min;\n    else if (gap > gap_max)\n        gap = gap_max;\n\n    return PAGE_ALIGN(task_size - gap - rnd);\n}\n\n//max = (0x3fffff <<= 12)   = 0x3fffff000\nstatic unsigned long stack_maxrandom_size(unsigned long task_size)\n{\n    unsigned long max = 0;\n    if (current->flags & PF_RANDOMIZE) {\n        max = (-1UL) & __STACK_RND_MASK(task_size == task_size_32bit());\n        max <<= PAGE_SHIFT;\n    }\n\n    return max;\n}\n\n```\n\n\n#### 代码段开始地址  \nELF文件如果是普通的EXEC类型则会使用指定的入口地址下面讨论PIE编译出的DYN可执行文件\n其加载地址为 DEFAULT_MAP_WINDOW /3*2上增加一个arch_mmap_rnd随机值  \nDEFAULT_MAP_WINDOW /3*2 = 0x555555554AAA\n同mmap一样为 0x00FFFFFFF000 约1个T大小    \n代码段起始位置约为84T 随机值 1T   \n\n代码段数据段等整体随机  \n```C++\nif (interpreter) {\n                load_bias = ELF_ET_DYN_BASE;\n                if (current->flags & PF_RANDOMIZE)\n                    load_bias += arch_mmap_rnd();\n                elf_flags |= MAP_FIXED;\n            } else\n                load_bias = 0;\n```\n\n```C++  \n    loc->elf_ex.e_entry += load_bias;\n    elf_bss += load_bias;\n    elf_brk += load_bias;\n    start_code += load_bias;\n    end_code += load_bias;\n    start_data += load_bias;\n    end_data += load_bias;\n```\n\n#### HEAP区开始地址  \nbrk从BSS结束地址开始, 会有一个额外的随机arch_randomize_brk   \n为固定的大小范围0x02000000, 大约为33M  \n```C++\nif ((current->flags & PF_RANDOMIZE) && (randomize_va_space > 1)) {\n\t\t/*\n\t\t * For architectures with ELF randomization, when executing\n\t\t * a loader directly (i.e. no interpreter listed in ELF\n\t\t * headers), move the brk area out of the mmap region\n\t\t * (since it grows up, and may collide early with the stack\n\t\t * growing down), and into the unused ELF_ET_DYN_BASE region.\n\t\t */\n\t\tif (IS_ENABLED(CONFIG_ARCH_HAS_ELF_RANDOMIZE) &&\n\t\t    loc->elf_ex.e_type == ET_DYN && !interpreter)\n\t\t\tcurrent->mm->brk = current->mm->start_brk =\n\t\t\t\tELF_ET_DYN_BASE;\n\n\t\tcurrent->mm->brk = current->mm->start_brk =\n\t\t\tarch_randomize_brk(current->mm);\n#ifdef compat_brk_randomized\n\t\tcurrent->brk_randomized = 1;\n#endif\n\t}\n\n```\n\n```C++\nunsigned long arch_randomize_brk(struct mm_struct *mm)\n{\n\treturn randomize_page(mm->brk, 0x02000000);\n}\n```\n\n### 结论部分    \n假定编译出来的是PIE类型的ELF并且全开ASLR设置   \n那么在mmap和heap之间的地址空间大小大约是  \n128T - 17G - 1T - 84T - 1T -33M  = 42T  \n\nmmap最小起始地址略小于0x0000 7F00 0000 0000  \nbrk起始地址最大略大于 0x0000 5655 5555 5555  \n\n这个是以T为单位的粗略计算, 考虑到计算时忽略了一些小的单位(GB级别或者更小), 包括间隙 小的随机值, 以及动态库 数据段代码段本身占用的空间, 这里可以做一个进一步的保守计算来使用这个空间.   \n\n __计算这个空间的意义在于, 例如我们对共享内存使用一个固定的地址时, 需要避免和系统本身的动态分配的地址空间相冲突, 而计算出来的地址空间的确定可以保证这一点,__  例如可以用这两个地址做一个中值计算, 把这个中值作为安全的绝对地址使用.     \n\n\n#### 结论部分补充验证数据  \n\n* 没有开启PIE和ASLR\n```\n0000000000400000      4K r-x-- a.out (deleted)\n0000000000600000      4K r---- a.out (deleted)\n0000000000601000  40964K rw--- a.out (deleted)\n0000000002e02000    132K rw---   [ anon ]\n00007ffff70f2000   1732K r-x-- libc-2.27.so\n00007ffff72a3000   2044K ----- libc-2.27.so\n00007ffff74a2000     16K r---- libc-2.27.so\n00007ffff74a6000      8K rw--- libc-2.27.so\n00007ffff74a8000     16K rw---   [ anon ]\n00007ffff74ac000     92K r-x-- libgcc_s.so.1\n00007ffff74c3000   2044K ----- libgcc_s.so.1\n00007ffff76c2000      4K r---- libgcc_s.so.1\n00007ffff76c3000      4K rw--- libgcc_s.so.1\n00007ffff76c4000   1608K r-x-- libm-2.27.so\n00007ffff7856000   2044K ----- libm-2.27.so\n00007ffff7a55000      4K r---- libm-2.27.so\n00007ffff7a56000      4K rw--- libm-2.27.so\n00007ffff7a57000   1480K r-x-- libstdc++.so.6.0.25\n00007ffff7bc9000   2048K ----- libstdc++.so.6.0.25\n00007ffff7dc9000     40K r---- libstdc++.so.6.0.25\n00007ffff7dd3000      8K rw--- libstdc++.so.6.0.25\n00007ffff7dd5000     12K rw---   [ anon ]\n00007ffff7dd8000    148K r-x-- ld-2.27.so\n00007ffff7fd7000     24K rw---   [ anon ]\n00007ffff7ff8000      8K r----   [ anon ]\n00007ffff7ffa000      8K r-x--   [ anon ]\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n```\n\n\n* 开启PIE和ASLR后多次测试得到的一个接近最小可分配空间的内存分布结果如下:\n代码段从0x0000 5640开始  \nmmap的则从0x 0000 7eff开始而不是概率更大的0x 0000 7f** 这样的地址  \n```\n00005640b5092000      4K r-x-- a.out\n00005640b5292000      4K r---- a.out\n00005640b5293000  40964K rw--- a.out\n00005640b99f2000    132K rw---   [ anon ]\n00007effd7734000  20484K rw---   [ anon ]\n00007effd8b35000   1732K r-x-- libc-2.27.so\n00007effd8ce6000   2044K ----- libc-2.27.so\n00007effd8ee5000     16K r---- libc-2.27.so\n00007effd8ee9000      8K rw--- libc-2.27.so\n00007effd8eeb000     16K rw---   [ anon ]\n00007effd8eef000     92K r-x-- libgcc_s.so.1\n00007effd8f06000   2044K ----- libgcc_s.so.1\n00007effd9105000      4K r---- libgcc_s.so.1\n00007effd9106000      4K rw--- libgcc_s.so.1\n00007effd9107000   1608K r-x-- libm-2.27.so\n00007effd9299000   2044K ----- libm-2.27.so\n00007effd9498000      4K r---- libm-2.27.so\n00007effd9499000      4K rw--- libm-2.27.so\n00007effd949a000   1480K r-x-- libstdc++.so.6.0.25\n00007effd960c000   2048K ----- libstdc++.so.6.0.25\n00007effd980c000     40K r---- libstdc++.so.6.0.25\n00007effd9816000      8K rw--- libstdc++.so.6.0.25\n00007effd9818000     12K rw---   [ anon ]\n00007effd981b000    148K r-x-- ld-2.27.so\n00007effd9a1e000     24K rw---   [ anon ]\n00007effd9a3f000      4K r---- ld-2.27.so\n00007effd9a40000      4K rw--- ld-2.27.so\n00007effd9a41000      4K rw---   [ anon ]\n00007ffd922c7000    132K rw---   [ stack ]\n00007ffd92385000      8K r----   [ anon ]\n00007ffd92387000      8K r-x--   [ anon ]\nffffffffff600000      4K r-x--   [ anon ]\n```","slug":"2019-11-04-aslr","published":1,"updated":"2020-03-10T06:31:55.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeiw000r7w5h4k1g7ncg","content":"<h3><span id=\"导语\">导语</span></h3><p>64位下的linux地址空间虽然看起来虽然庞大2^64  但是实际上进行内核与用户空间的划分后, 包括ASLR以及PIE等机制的启用, 实际留给mmap和brk的可分配区域远远小于这个值, 大约是42T的可用地址空间. 本文根据内核代码的默认宏定义进行了X86-64下的布局分析, 给基于共享内存的用户空间选址给予一定的参考.   </p>\n<h3><span id=\"目录\">目录</span></h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#导语\">导语</a></li>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#linux内存布局\">LINUX内存布局</a><ul>\n<li><a href=\"#11-基本布局\">..1.1. 基本布局</a></li>\n<li><a href=\"#12-用户空间布局\">..1.2. 用户空间布局</a></li>\n</ul>\n</li>\n<li><a href=\"#aslr地址空间随机化\">ASLR地址空间随机化</a><ul>\n<li><a href=\"#aslr的设置与关闭\">ASLR的设置与关闭</a><ul>\n<li><a href=\"#设置randomize_va_space的等级\">设置randomize_va_space的等级</a></li>\n<li><a href=\"#进程个性化设置-进程描述符的成员personality设置-addr_no_randomize\">进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE</a></li>\n<li><a href=\"#gdb调试中打开或者关闭aslr默认会禁用\">GDB调试中打开或者关闭ASLR(默认会禁用)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#内核代码中相关的宏定义和随机值计算\">内核代码中相关的宏定义和随机值计算</a><ul>\n<li><a href=\"#task_size-定义-用户地址空间的大小\">TASK_SIZE 定义 用户地址空间的大小</a></li>\n<li><a href=\"#栈地址\">栈地址</a></li>\n<li><a href=\"#mmap映射区起始地址\">MMAP映射区起始地址</a></li>\n<li><a href=\"#代码段开始地址\">代码段开始地址</a></li>\n<li><a href=\"#heap区开始地址\">HEAP区开始地址</a></li>\n</ul>\n</li>\n<li><a href=\"#结论部分\">结论部分</a><ul>\n<li><a href=\"#结论部分补充验证数据\">结论部分补充验证数据</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h3><span id=\"linux内存布局\">LINUX内存布局</span></h3><p>针对X86-64内核代码的分析  </p>\n<h4><span id=\"11-基本布局\">..1.1. 基本布局</span></h4><table>\n<thead>\n<tr>\n<th>-</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内核地址空间范围</td>\n<td>[0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]</td>\n</tr>\n<tr>\n<td>用户地址空间</td>\n<td>[0X0000 7FFF FFFF F000, 0X0000 0000 0000 0000]</td>\n</tr>\n<tr>\n<td>不规范地址空间</td>\n<td>不属于内核或者用户的地址空间属于不规范地址空间</td>\n</tr>\n</tbody></table>\n<p>用户空间的大小由宏定义TASK_SIZE决定, 在X86-64下这个大小默认为2^47-4096(128T) 对应十六进制数为: 0X0000 7FFF FFFF F000 .     </p>\n<h4><span id=\"12-用户空间布局\">..1.2. 用户空间布局</span></h4><table>\n<thead>\n<tr>\n<th>- 用户空间布局 -</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x0</td>\n</tr>\n<tr>\n<td>保留区</td>\n</tr>\n<tr>\n<td>代码段(PLT代码表部分)</td>\n</tr>\n<tr>\n<td>代码段</td>\n</tr>\n<tr>\n<td>数据段(GOT) 只读</td>\n</tr>\n<tr>\n<td>数据段(.got.plt) 惰性加载机制</td>\n</tr>\n<tr>\n<td>数据段(Data)</td>\n</tr>\n<tr>\n<td>数据段(BSS)</td>\n</tr>\n<tr>\n<td>堆空间(Heap)</td>\n</tr>\n<tr>\n<td>↓</td>\n</tr>\n<tr>\n<td>未分配区域</td>\n</tr>\n<tr>\n<td>↑</td>\n</tr>\n<tr>\n<td>内存映射区域(mmap)</td>\n</tr>\n<tr>\n<td>栈空间(进程栈)</td>\n</tr>\n<tr>\n<td>TASK_SIZE</td>\n</tr>\n</tbody></table>\n<h3><span id=\"aslr地址空间随机化\">ASLR地址空间随机化</span></h3><p>地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种防范内存损坏漏洞被利用的计算机安全技术。<br>ASLR通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数。现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行Return-to-libc攻击。<br>这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制)  </p>\n<p>不同版本的操作系统和内核版本, 在ASLR的实现上会有细节的不同, 这里主要是根据目前的生产环境做的分析, 用于确认ASLR的在地址空间中对内存布局带来的扰动范围.   </p>\n<h4><span id=\"aslr的设置与关闭\">ASLR的设置与关闭</span></h4><p>LINUX下常见的设置或关闭有方式:  </p>\n<h5><span id=\"设置randomize_va_space的等级\">设置randomize_va_space的等级</span></h5><p>随机化虚拟地址空间的配置说明如下:     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</span><br><span class=\"line\">0 &#x3D; Disabled</span><br><span class=\"line\">1 &#x3D; Conservative Randomization</span><br><span class=\"line\">2 &#x3D; Full Randomization</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\">总共分了三档, 不同版本其内容随着支持程度和等级划分略有不同, 默认启用的等级也不同, 以更具体的生产环境为准 大致如下:  </span><br><span class=\"line\">0 &#x3D; 关闭  </span><br><span class=\"line\">1 &#x3D; 保守随机化: 共享库 栈 mmap  vdso随机化   </span><br><span class=\"line\">2 &#x3D; 完全随机化:  包括brk分配的内存   </span><br><span class=\"line\">    2.1 &#x3D; 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie  </span><br><span class=\"line\"></span><br><span class=\"line\">* 修改&#x2F;关闭系统配置方式如下</span><br></pre></td></tr></table></figure>\n<p>echo 0 &gt; /proc/sys/kernel/randomize_va_space</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 或者通过sysctl修改</span><br></pre></td></tr></table></figure>\n<p>sysctl -w kernel.randomize_va_space=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     </span><br><span class=\"line\">  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]  </span><br><span class=\"line\">  * 例如 ldd .&#x2F;benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   </span><br><span class=\"line\">    * setarch $(uname -m) -R ldd .&#x2F;benchmark_fast 这样去查看则是固定不变的  </span><br><span class=\"line\"></span><br><span class=\"line\">##### GDB调试中打开或者关闭ASLR(默认会禁用)</span><br></pre></td></tr></table></figure>\n<p>关闭ASLR：<br>set disable-randomization on<br>开启ASLR：<br>set disable-randomization off<br>查看：<br>show disable-randomization</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 内核代码中相关的宏定义和随机值计算</span><br><span class=\"line\"></span><br><span class=\"line\">#### TASK_SIZE 定义 用户地址空间的大小    </span><br><span class=\"line\">在X86的内核代码中, 默认的TASK_SIZE为 (1UL &lt;&lt; 47) - 4096)   </span><br><span class=\"line\">即</span><br></pre></td></tr></table></figure>\n<p>2^47-4096 =&gt; 0x7fff ffff f000    约为128T  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb调试程序默认会关闭aslr, 我们通过gdb运行一个程序, 然后对齐pmap可以得到如下内存分布:</span><br></pre></td></tr></table></figure>\n<p>00007ffff7ffc000      4K r—- ld-2.27.so<br>00007ffff7ffd000      4K rw— ld-2.27.so<br>00007ffff7ffe000      4K rw—   [ anon ]<br>00007ffffffde000    132K rw—   [ stack ]<br>ffffffffff600000      4K r-x–   [ anon ]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">00007ffffffde000 + 132K &#x3D; ‭0x7FFFFFFFF000‬  和内核代码中的宏定义一致</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">#ifdef CONFIG_X86_32</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * User space process size: 3GB (default).</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">#define IA32_PAGE_OFFSET    PAGE_OFFSET</span><br><span class=\"line\">#define TASK_SIZE        PAGE_OFFSET</span><br><span class=\"line\">#define TASK_SIZE_LOW        TASK_SIZE</span><br><span class=\"line\">#define TASK_SIZE_MAX        TASK_SIZE</span><br><span class=\"line\">#define DEFAULT_MAP_WINDOW    TASK_SIZE</span><br><span class=\"line\">#define STACK_TOP        TASK_SIZE</span><br><span class=\"line\">#define STACK_TOP_MAX        STACK_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef CONFIG_X86_5LEVEL</span><br><span class=\"line\">#define __VIRTUAL_MASK_SHIFT    (pgtable_l5_enabled() ? 56 : 47)</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define __VIRTUAL_MASK_SHIFT    47</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#define TASK_SIZE_MAX    ((1UL &lt;&lt; __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">#define DEFAULT_MAP_WINDOW    ((1UL &lt;&lt; 47) - PAGE_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* This decides where the kernel will search for a free chunk of vm</span><br><span class=\"line\"> * space during mmap&#39;s.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">#define IA32_PAGE_OFFSET    ((current-&gt;personality &amp; ADDR_LIMIT_3GB) ? \\</span><br><span class=\"line\">                    0xc0000000 : 0xFFFFe000)</span><br><span class=\"line\"></span><br><span class=\"line\">#define TASK_SIZE_LOW        (test_thread_flag(TIF_ADDR32) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)</span><br><span class=\"line\">#define TASK_SIZE        (test_thread_flag(TIF_ADDR32) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)</span><br><span class=\"line\">#define TASK_SIZE_OF(child)    ((test_tsk_thread_flag(child, TIF_ADDR32)) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)</span><br><span class=\"line\"></span><br><span class=\"line\">#define STACK_TOP        TASK_SIZE_LOW</span><br><span class=\"line\">#define STACK_TOP_MAX        TASK_SIZE_MAX</span><br><span class=\"line\"></span><br><span class=\"line\">#define INIT_THREAD  &#123;                        \\</span><br><span class=\"line\">    .addr_limit        &#x3D; KERNEL_DS,            \\</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extern unsigned long KSTK_ESP(struct task_struct *task);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif &#x2F;* CONFIG_X86_64 *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"栈地址\">栈地址</span></h4><p>随机值大小为17G  = 0x3fffff000</p>\n<p>代码位置如下:<br>load_elf_binary -&gt;  setup_arg_page   </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),</span><br><span class=\"line\">                 executable_stack);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">randomize_stack_top</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> stack_top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> random_variable = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        random_variable = get_random_long();</span><br><span class=\"line\">        random_variable &amp;= STACK_RND_MASK;</span><br><span class=\"line\">        random_variable &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PAGE_ALIGN(stack_top) - random_variable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"mmap映射区起始地址\">MMAP映射区起始地址</span></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load_elf_binary -&gt; setup_new_exec -&gt; arch_pick_mmap_layout -&gt;arch_pick_mmap_base</span><br></pre></td></tr></table></figure>\n\n<p>mmap的起始计算为:<br>STACK_TOP - 栈最大长度  - 间隙 -  随机值<br>栈最小长度为128M<br>随机位数配置在/proc/sys/vm/mmap_rnd_bits  default=28<br>默认随机最大值为  0xFFFFFFF000  大约为1T<br>用户空间起始地址0x7FFFFFFFF000</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TASK_SIZE_MAX     ((1UL &lt;&lt; 47) - PAGE_SIZE) <span class=\"comment\">//0x7FFFFFFFF000</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TASK_SIZE     TASK_SIZE_MAX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_TOP          TASK_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_TOP_MAX          TASK_SIZE_MAX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 1GB for 64bit, 8MB for 32bit */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">stack_maxrandom_size</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">max</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = (<span class=\"number\">-1U</span>L) &amp; __STACK_RND_MASK(task_size == task_size_32bit());</span><br><span class=\"line\">        <span class=\"built_in\">max</span> &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//task size为0x7FFFFFFFF000</span></span><br><span class=\"line\"><span class=\"comment\">//随机值为 random()&amp; ((1UL &lt;&lt; 28)   -1) 个页面, 即0x00FFFFFFF000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">arch_pick_mmap_layout</span><span class=\"params\">(struct mm_struct *mm, struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;</span><br><span class=\"line\"></span><br><span class=\"line\">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class=\"line\">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class=\"number\">0</span>),</span><br><span class=\"line\">            rlim_stack);  <span class=\"comment\">//proc/sys/vm/mmap_rnd_bits  default=28</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">arch_rnd</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> rndbits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(current-&gt;flags &amp; PF_RANDOMIZE))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (get_random_long() &amp; ((<span class=\"number\">1U</span>L &lt;&lt; rndbits) - <span class=\"number\">1</span>)) &lt;&lt; PAGE_SHIFT;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 新布局直接调用*base = mmap_base(random_factor, task_size, rlim_stack);  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">arch_pick_mmap_base</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *base, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *legacy_base,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> random_factor, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mmap_is_legacy())</span><br><span class=\"line\">        *base = *legacy_base;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这是是随机值的上下限保护 栈至少要有128M </span></span><br><span class=\"line\"><span class=\"comment\">//task size减去随机值, 再减去栈的大小, 栈的最小值为128M  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">mmap_base</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> rnd, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> gap = rlim_stack-&gt;rlim_cur;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> pad = stack_maxrandom_size(task_size) + stack_guard_gap;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> gap_min, gap_max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Values close to RLIM_INFINITY can overflow. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gap + pad &gt; gap)</span><br><span class=\"line\">        gap += pad;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Top of mmap area (just below the process stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * Leave an at least ~128 MB hole with possible stack randomization.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    gap_min = SIZE_128M;</span><br><span class=\"line\">    gap_max = (task_size / <span class=\"number\">6</span>) * <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gap &lt; gap_min)</span><br><span class=\"line\">        gap = gap_min;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gap &gt; gap_max)</span><br><span class=\"line\">        gap = gap_max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> PAGE_ALIGN(task_size - gap - rnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//max = (0x3fffff &lt;&lt;= 12)   = 0x3fffff000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">stack_maxrandom_size</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">max</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = (<span class=\"number\">-1U</span>L) &amp; __STACK_RND_MASK(task_size == task_size_32bit());</span><br><span class=\"line\">        <span class=\"built_in\">max</span> &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4><span id=\"代码段开始地址\">代码段开始地址</span></h4><p>ELF文件如果是普通的EXEC类型则会使用指定的入口地址下面讨论PIE编译出的DYN可执行文件<br>其加载地址为 DEFAULT_MAP_WINDOW /3<em>2上增加一个arch_mmap_rnd随机值<br>DEFAULT_MAP_WINDOW /3</em>2 = 0x555555554AAA<br>同mmap一样为 0x00FFFFFFF000 约1个T大小<br>代码段起始位置约为84T 随机值 1T   </p>\n<p>代码段数据段等整体随机  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (interpreter) &#123;</span><br><span class=\"line\">                load_bias = ELF_ET_DYN_BASE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE)</span><br><span class=\"line\">                    load_bias += arch_mmap_rnd();</span><br><span class=\"line\">                elf_flags |= MAP_FIXED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                load_bias = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loc-&gt;elf_ex.e_entry += load_bias;</span><br><span class=\"line\">elf_bss += load_bias;</span><br><span class=\"line\">elf_brk += load_bias;</span><br><span class=\"line\">start_code += load_bias;</span><br><span class=\"line\">end_code += load_bias;</span><br><span class=\"line\">start_data += load_bias;</span><br><span class=\"line\">end_data += load_bias;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"heap区开始地址\">HEAP区开始地址</span></h4><p>brk从BSS结束地址开始, 会有一个额外的随机arch_randomize_brk<br>为固定的大小范围0x02000000, 大约为33M  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((current-&gt;flags &amp; PF_RANDOMIZE) &amp;&amp; (randomize_va_space &gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * For architectures with ELF randomization, when executing</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * a loader directly (i.e. no interpreter listed in ELF</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * headers), move the brk area out of the mmap region</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * (since it grows up, and may collide early with the stack</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * growing down), and into the unused ELF_ET_DYN_BASE region.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (IS_ENABLED(CONFIG_ARCH_HAS_ELF_RANDOMIZE) &amp;&amp;</span><br><span class=\"line\">\t\t    loc-&gt;elf_ex.e_type == ET_DYN &amp;&amp; !interpreter)</span><br><span class=\"line\">\t\t\tcurrent-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk =</span><br><span class=\"line\">\t\t\t\tELF_ET_DYN_BASE;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcurrent-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk =</span><br><span class=\"line\">\t\t\tarch_randomize_brk(current-&gt;mm);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> compat_brk_randomized</span></span><br><span class=\"line\">\t\tcurrent-&gt;brk_randomized = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">arch_randomize_brk</span><span class=\"params\">(struct mm_struct *mm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> randomize_page(mm-&gt;brk, <span class=\"number\">0x02000000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"结论部分\">结论部分</span></h3><p>假定编译出来的是PIE类型的ELF并且全开ASLR设置<br>那么在mmap和heap之间的地址空间大小大约是<br>128T - 17G - 1T - 84T - 1T -33M  = 42T  </p>\n<p>mmap最小起始地址略小于0x0000 7F00 0000 0000<br>brk起始地址最大略大于 0x0000 5655 5555 5555  </p>\n<p>这个是以T为单位的粗略计算, 考虑到计算时忽略了一些小的单位(GB级别或者更小), 包括间隙 小的随机值, 以及动态库 数据段代码段本身占用的空间, 这里可以做一个进一步的保守计算来使用这个空间.   </p>\n<p> <strong>计算这个空间的意义在于, 例如我们对共享内存使用一个固定的地址时, 需要避免和系统本身的动态分配的地址空间相冲突, 而计算出来的地址空间的确定可以保证这一点,</strong>  例如可以用这两个地址做一个中值计算, 把这个中值作为安全的绝对地址使用.     </p>\n<h4><span id=\"结论部分补充验证数据\">结论部分补充验证数据</span></h4><ul>\n<li>没有开启PIE和ASLR<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000400000      4K r-x-- a.out (deleted)</span><br><span class=\"line\">0000000000600000      4K r---- a.out (deleted)</span><br><span class=\"line\">0000000000601000  40964K rw--- a.out (deleted)</span><br><span class=\"line\">0000000002e02000    132K rw---   [ anon ]</span><br><span class=\"line\">00007ffff70f2000   1732K r-x-- libc-2.27.so</span><br><span class=\"line\">00007ffff72a3000   2044K ----- libc-2.27.so</span><br><span class=\"line\">00007ffff74a2000     16K r---- libc-2.27.so</span><br><span class=\"line\">00007ffff74a6000      8K rw--- libc-2.27.so</span><br><span class=\"line\">00007ffff74a8000     16K rw---   [ anon ]</span><br><span class=\"line\">00007ffff74ac000     92K r-x-- libgcc_s.so.1</span><br><span class=\"line\">00007ffff74c3000   2044K ----- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c2000      4K r---- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c3000      4K rw--- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c4000   1608K r-x-- libm-2.27.so</span><br><span class=\"line\">00007ffff7856000   2044K ----- libm-2.27.so</span><br><span class=\"line\">00007ffff7a55000      4K r---- libm-2.27.so</span><br><span class=\"line\">00007ffff7a56000      4K rw--- libm-2.27.so</span><br><span class=\"line\">00007ffff7a57000   1480K r-x-- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7bc9000   2048K ----- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dc9000     40K r---- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dd3000      8K rw--- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dd5000     12K rw---   [ anon ]</span><br><span class=\"line\">00007ffff7dd8000    148K r-x-- ld-2.27.so</span><br><span class=\"line\">00007ffff7fd7000     24K rw---   [ anon ]</span><br><span class=\"line\">00007ffff7ff8000      8K r----   [ anon ]</span><br><span class=\"line\">00007ffff7ffa000      8K r-x--   [ anon ]</span><br><span class=\"line\">00007ffff7ffc000      4K r---- ld-2.27.so</span><br><span class=\"line\">00007ffff7ffd000      4K rw--- ld-2.27.so</span><br><span class=\"line\">00007ffff7ffe000      4K rw---   [ anon ]</span><br><span class=\"line\">00007ffffffde000    132K rw---   [ stack ]</span><br><span class=\"line\">ffffffffff600000      4K r-x--   [ anon ]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>开启PIE和ASLR后多次测试得到的一个接近最小可分配空间的内存分布结果如下:<br>代码段从0x0000 5640开始<br>mmap的则从0x 0000 7eff开始而不是概率更大的0x 0000 7f** 这样的地址  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00005640b5092000      4K r-x-- a.out</span><br><span class=\"line\">00005640b5292000      4K r---- a.out</span><br><span class=\"line\">00005640b5293000  40964K rw--- a.out</span><br><span class=\"line\">00005640b99f2000    132K rw---   [ anon ]</span><br><span class=\"line\">00007effd7734000  20484K rw---   [ anon ]</span><br><span class=\"line\">00007effd8b35000   1732K r-x-- libc-2.27.so</span><br><span class=\"line\">00007effd8ce6000   2044K ----- libc-2.27.so</span><br><span class=\"line\">00007effd8ee5000     16K r---- libc-2.27.so</span><br><span class=\"line\">00007effd8ee9000      8K rw--- libc-2.27.so</span><br><span class=\"line\">00007effd8eeb000     16K rw---   [ anon ]</span><br><span class=\"line\">00007effd8eef000     92K r-x-- libgcc_s.so.1</span><br><span class=\"line\">00007effd8f06000   2044K ----- libgcc_s.so.1</span><br><span class=\"line\">00007effd9105000      4K r---- libgcc_s.so.1</span><br><span class=\"line\">00007effd9106000      4K rw--- libgcc_s.so.1</span><br><span class=\"line\">00007effd9107000   1608K r-x-- libm-2.27.so</span><br><span class=\"line\">00007effd9299000   2044K ----- libm-2.27.so</span><br><span class=\"line\">00007effd9498000      4K r---- libm-2.27.so</span><br><span class=\"line\">00007effd9499000      4K rw--- libm-2.27.so</span><br><span class=\"line\">00007effd949a000   1480K r-x-- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd960c000   2048K ----- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd980c000     40K r---- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd9816000      8K rw--- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd9818000     12K rw---   [ anon ]</span><br><span class=\"line\">00007effd981b000    148K r-x-- ld-2.27.so</span><br><span class=\"line\">00007effd9a1e000     24K rw---   [ anon ]</span><br><span class=\"line\">00007effd9a3f000      4K r---- ld-2.27.so</span><br><span class=\"line\">00007effd9a40000      4K rw--- ld-2.27.so</span><br><span class=\"line\">00007effd9a41000      4K rw---   [ anon ]</span><br><span class=\"line\">00007ffd922c7000    132K rw---   [ stack ]</span><br><span class=\"line\">00007ffd92385000      8K r----   [ anon ]</span><br><span class=\"line\">00007ffd92387000      8K r-x--   [ anon ]</span><br><span class=\"line\">ffffffffff600000      4K r-x--   [ anon ]</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h3><p>64位下的linux地址空间虽然看起来虽然庞大2^64  但是实际上进行内核与用户空间的划分后, 包括ASLR以及PIE等机制的启用, 实际留给mmap和brk的可分配区域远远小于这个值, 大约是42T的可用地址空间. 本文根据内核代码的默认宏定义进行了X86-64下的布局分析, 给基于共享内存的用户空间选址给予一定的参考.   </p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#导语\">导语</a></li>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#linux内存布局\">LINUX内存布局</a><ul>\n<li><a href=\"#11-基本布局\">..1.1. 基本布局</a></li>\n<li><a href=\"#12-用户空间布局\">..1.2. 用户空间布局</a></li>\n</ul>\n</li>\n<li><a href=\"#aslr地址空间随机化\">ASLR地址空间随机化</a><ul>\n<li><a href=\"#aslr的设置与关闭\">ASLR的设置与关闭</a><ul>\n<li><a href=\"#设置randomize_va_space的等级\">设置randomize_va_space的等级</a></li>\n<li><a href=\"#进程个性化设置-进程描述符的成员personality设置-addr_no_randomize\">进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE</a></li>\n<li><a href=\"#gdb调试中打开或者关闭aslr默认会禁用\">GDB调试中打开或者关闭ASLR(默认会禁用)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#内核代码中相关的宏定义和随机值计算\">内核代码中相关的宏定义和随机值计算</a><ul>\n<li><a href=\"#task_size-定义-用户地址空间的大小\">TASK_SIZE 定义 用户地址空间的大小</a></li>\n<li><a href=\"#栈地址\">栈地址</a></li>\n<li><a href=\"#mmap映射区起始地址\">MMAP映射区起始地址</a></li>\n<li><a href=\"#代码段开始地址\">代码段开始地址</a></li>\n<li><a href=\"#heap区开始地址\">HEAP区开始地址</a></li>\n</ul>\n</li>\n<li><a href=\"#结论部分\">结论部分</a><ul>\n<li><a href=\"#结论部分补充验证数据\">结论部分补充验证数据</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n<h3 id=\"LINUX内存布局\"><a href=\"#LINUX内存布局\" class=\"headerlink\" title=\"LINUX内存布局\"></a>LINUX内存布局</h3><p>针对X86-64内核代码的分析  </p>\n<h4 id=\"1-1-基本布局\"><a href=\"#1-1-基本布局\" class=\"headerlink\" title=\"..1.1. 基本布局\"></a>..1.1. 基本布局</h4><table>\n<thead>\n<tr>\n<th>-</th>\n<th>-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内核地址空间范围</td>\n<td>[0XFFFF 0000 0000 0000, 0XFFFF FFFF FFFF FFFF]</td>\n</tr>\n<tr>\n<td>用户地址空间</td>\n<td>[0X0000 7FFF FFFF F000, 0X0000 0000 0000 0000]</td>\n</tr>\n<tr>\n<td>不规范地址空间</td>\n<td>不属于内核或者用户的地址空间属于不规范地址空间</td>\n</tr>\n</tbody></table>\n<p>用户空间的大小由宏定义TASK_SIZE决定, 在X86-64下这个大小默认为2^47-4096(128T) 对应十六进制数为: 0X0000 7FFF FFFF F000 .     </p>\n<h4 id=\"1-2-用户空间布局\"><a href=\"#1-2-用户空间布局\" class=\"headerlink\" title=\"..1.2. 用户空间布局\"></a>..1.2. 用户空间布局</h4><table>\n<thead>\n<tr>\n<th>- 用户空间布局 -</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x0</td>\n</tr>\n<tr>\n<td>保留区</td>\n</tr>\n<tr>\n<td>代码段(PLT代码表部分)</td>\n</tr>\n<tr>\n<td>代码段</td>\n</tr>\n<tr>\n<td>数据段(GOT) 只读</td>\n</tr>\n<tr>\n<td>数据段(.got.plt) 惰性加载机制</td>\n</tr>\n<tr>\n<td>数据段(Data)</td>\n</tr>\n<tr>\n<td>数据段(BSS)</td>\n</tr>\n<tr>\n<td>堆空间(Heap)</td>\n</tr>\n<tr>\n<td>↓</td>\n</tr>\n<tr>\n<td>未分配区域</td>\n</tr>\n<tr>\n<td>↑</td>\n</tr>\n<tr>\n<td>内存映射区域(mmap)</td>\n</tr>\n<tr>\n<td>栈空间(进程栈)</td>\n</tr>\n<tr>\n<td>TASK_SIZE</td>\n</tr>\n</tbody></table>\n<h3 id=\"ASLR地址空间随机化\"><a href=\"#ASLR地址空间随机化\" class=\"headerlink\" title=\"ASLR地址空间随机化\"></a>ASLR地址空间随机化</h3><p>地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种防范内存损坏漏洞被利用的计算机安全技术。<br>ASLR通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置来利用函数。现代操作系统一般都加设这一机制，以防范恶意程序对已知地址进行Return-to-libc攻击。<br>这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制)  </p>\n<p>不同版本的操作系统和内核版本, 在ASLR的实现上会有细节的不同, 这里主要是根据目前的生产环境做的分析, 用于确认ASLR的在地址空间中对内存布局带来的扰动范围.   </p>\n<h4 id=\"ASLR的设置与关闭\"><a href=\"#ASLR的设置与关闭\" class=\"headerlink\" title=\"ASLR的设置与关闭\"></a>ASLR的设置与关闭</h4><p>LINUX下常见的设置或关闭有方式:  </p>\n<h5 id=\"设置randomize-va-space的等级\"><a href=\"#设置randomize-va-space的等级\" class=\"headerlink\" title=\"设置randomize_va_space的等级\"></a>设置randomize_va_space的等级</h5><p>随机化虚拟地址空间的配置说明如下:     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</span><br><span class=\"line\">0 &#x3D; Disabled</span><br><span class=\"line\">1 &#x3D; Conservative Randomization</span><br><span class=\"line\">2 &#x3D; Full Randomization</span><br><span class=\"line\">&#96;&#96;&#96;  </span><br><span class=\"line\">总共分了三档, 不同版本其内容随着支持程度和等级划分略有不同, 默认启用的等级也不同, 以更具体的生产环境为准 大致如下:  </span><br><span class=\"line\">0 &#x3D; 关闭  </span><br><span class=\"line\">1 &#x3D; 保守随机化: 共享库 栈 mmap  vdso随机化   </span><br><span class=\"line\">2 &#x3D; 完全随机化:  包括brk分配的内存   </span><br><span class=\"line\">    2.1 &#x3D; 代码段和数据段的随机化需要PIE位置无关可执行程序的支持  编译链接时添加 -fpie -pie  </span><br><span class=\"line\"></span><br><span class=\"line\">* 修改&#x2F;关闭系统配置方式如下</span><br></pre></td></tr></table></figure>\n<p>echo 0 &gt; /proc/sys/kernel/randomize_va_space</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 或者通过sysctl修改</span><br></pre></td></tr></table></figure>\n<p>sysctl -w kernel.randomize_va_space=0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 进程个性化设置: 进程描述符的成员personality设置 ADDR_NO_RANDOMIZE     </span><br><span class=\"line\">  * setarch $(uname -m) -R [--addr-no-randomize] [target exe]  </span><br><span class=\"line\">  * 例如 ldd .&#x2F;benchmark_fast 在aslr环境下会看到每次so的内存位置都在变化   </span><br><span class=\"line\">    * setarch $(uname -m) -R ldd .&#x2F;benchmark_fast 这样去查看则是固定不变的  </span><br><span class=\"line\"></span><br><span class=\"line\">##### GDB调试中打开或者关闭ASLR(默认会禁用)</span><br></pre></td></tr></table></figure>\n<p>关闭ASLR：<br>set disable-randomization on<br>开启ASLR：<br>set disable-randomization off<br>查看：<br>show disable-randomization</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 内核代码中相关的宏定义和随机值计算</span><br><span class=\"line\"></span><br><span class=\"line\">#### TASK_SIZE 定义 用户地址空间的大小    </span><br><span class=\"line\">在X86的内核代码中, 默认的TASK_SIZE为 (1UL &lt;&lt; 47) - 4096)   </span><br><span class=\"line\">即</span><br></pre></td></tr></table></figure>\n<p>2^47-4096 =&gt; 0x7fff ffff f000    约为128T  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb调试程序默认会关闭aslr, 我们通过gdb运行一个程序, 然后对齐pmap可以得到如下内存分布:</span><br></pre></td></tr></table></figure>\n<p>00007ffff7ffc000      4K r—- ld-2.27.so<br>00007ffff7ffd000      4K rw— ld-2.27.so<br>00007ffff7ffe000      4K rw—   [ anon ]<br>00007ffffffde000    132K rw—   [ stack ]<br>ffffffffff600000      4K r-x–   [ anon ]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">00007ffffffde000 + 132K &#x3D; ‭0x7FFFFFFFF000‬  和内核代码中的宏定义一致</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">#ifdef CONFIG_X86_32</span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * User space process size: 3GB (default).</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">#define IA32_PAGE_OFFSET    PAGE_OFFSET</span><br><span class=\"line\">#define TASK_SIZE        PAGE_OFFSET</span><br><span class=\"line\">#define TASK_SIZE_LOW        TASK_SIZE</span><br><span class=\"line\">#define TASK_SIZE_MAX        TASK_SIZE</span><br><span class=\"line\">#define DEFAULT_MAP_WINDOW    TASK_SIZE</span><br><span class=\"line\">#define STACK_TOP        TASK_SIZE</span><br><span class=\"line\">#define STACK_TOP_MAX        STACK_TOP</span><br><span class=\"line\"></span><br><span class=\"line\">#else</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef CONFIG_X86_5LEVEL</span><br><span class=\"line\">#define __VIRTUAL_MASK_SHIFT    (pgtable_l5_enabled() ? 56 : 47)</span><br><span class=\"line\">#else</span><br><span class=\"line\">#define __VIRTUAL_MASK_SHIFT    47</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">#define TASK_SIZE_MAX    ((1UL &lt;&lt; __VIRTUAL_MASK_SHIFT) - PAGE_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">#define DEFAULT_MAP_WINDOW    ((1UL &lt;&lt; 47) - PAGE_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* This decides where the kernel will search for a free chunk of vm</span><br><span class=\"line\"> * space during mmap&#39;s.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">#define IA32_PAGE_OFFSET    ((current-&gt;personality &amp; ADDR_LIMIT_3GB) ? \\</span><br><span class=\"line\">                    0xc0000000 : 0xFFFFe000)</span><br><span class=\"line\"></span><br><span class=\"line\">#define TASK_SIZE_LOW        (test_thread_flag(TIF_ADDR32) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : DEFAULT_MAP_WINDOW)</span><br><span class=\"line\">#define TASK_SIZE        (test_thread_flag(TIF_ADDR32) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)</span><br><span class=\"line\">#define TASK_SIZE_OF(child)    ((test_tsk_thread_flag(child, TIF_ADDR32)) ? \\</span><br><span class=\"line\">                    IA32_PAGE_OFFSET : TASK_SIZE_MAX)</span><br><span class=\"line\"></span><br><span class=\"line\">#define STACK_TOP        TASK_SIZE_LOW</span><br><span class=\"line\">#define STACK_TOP_MAX        TASK_SIZE_MAX</span><br><span class=\"line\"></span><br><span class=\"line\">#define INIT_THREAD  &#123;                        \\</span><br><span class=\"line\">    .addr_limit        &#x3D; KERNEL_DS,            \\</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extern unsigned long KSTK_ESP(struct task_struct *task);</span><br><span class=\"line\"></span><br><span class=\"line\">#endif &#x2F;* CONFIG_X86_64 *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"栈地址\"><a href=\"#栈地址\" class=\"headerlink\" title=\"栈地址\"></a>栈地址</h4><p>随机值大小为17G  = 0x3fffff000</p>\n<p>代码位置如下:<br>load_elf_binary -&gt;  setup_arg_page   </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retval = setup_arg_pages(bprm, randomize_stack_top(STACK_TOP),</span><br><span class=\"line\">                 executable_stack);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">randomize_stack_top</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> stack_top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> random_variable = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        random_variable = get_random_long();</span><br><span class=\"line\">        random_variable &amp;= STACK_RND_MASK;</span><br><span class=\"line\">        random_variable &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> PAGE_ALIGN(stack_top) - random_variable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"MMAP映射区起始地址\"><a href=\"#MMAP映射区起始地址\" class=\"headerlink\" title=\"MMAP映射区起始地址\"></a>MMAP映射区起始地址</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load_elf_binary -&gt; setup_new_exec -&gt; arch_pick_mmap_layout -&gt;arch_pick_mmap_base</span><br></pre></td></tr></table></figure>\n\n<p>mmap的起始计算为:<br>STACK_TOP - 栈最大长度  - 间隙 -  随机值<br>栈最小长度为128M<br>随机位数配置在/proc/sys/vm/mmap_rnd_bits  default=28<br>默认随机最大值为  0xFFFFFFF000  大约为1T<br>用户空间起始地址0x7FFFFFFFF000</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TASK_SIZE_MAX     ((1UL &lt;&lt; 47) - PAGE_SIZE) <span class=\"comment\">//0x7FFFFFFFF000</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> TASK_SIZE     TASK_SIZE_MAX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_TOP          TASK_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_TOP_MAX          TASK_SIZE_MAX</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 1GB for 64bit, 8MB for 32bit */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __STACK_RND_MASK(is32bit) ((is32bit) ? 0x7ff : 0x3fffff)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> STACK_RND_MASK __STACK_RND_MASK(mmap_is_ia32())</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">stack_maxrandom_size</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">max</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = (<span class=\"number\">-1U</span>L) &amp; __STACK_RND_MASK(task_size == task_size_32bit());</span><br><span class=\"line\">        <span class=\"built_in\">max</span> &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//task size为0x7FFFFFFFF000</span></span><br><span class=\"line\"><span class=\"comment\">//随机值为 random()&amp; ((1UL &lt;&lt; 28)   -1) 个页面, 即0x00FFFFFFF000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">arch_pick_mmap_layout</span><span class=\"params\">(struct mm_struct *mm, struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;</span><br><span class=\"line\"></span><br><span class=\"line\">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class=\"line\">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class=\"number\">0</span>),</span><br><span class=\"line\">            rlim_stack);  <span class=\"comment\">//proc/sys/vm/mmap_rnd_bits  default=28</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">arch_rnd</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> rndbits)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(current-&gt;flags &amp; PF_RANDOMIZE))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (get_random_long() &amp; ((<span class=\"number\">1U</span>L &lt;&lt; rndbits) - <span class=\"number\">1</span>)) &lt;&lt; PAGE_SHIFT;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 新布局直接调用*base = mmap_base(random_factor, task_size, rlim_stack);  </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">arch_pick_mmap_base</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *base, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> *legacy_base,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> random_factor, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mmap_is_legacy())</span><br><span class=\"line\">        *base = *legacy_base;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这是是随机值的上下限保护 栈至少要有128M </span></span><br><span class=\"line\"><span class=\"comment\">//task size减去随机值, 再减去栈的大小, 栈的最小值为128M  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">mmap_base</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> rnd, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   struct rlimit *rlim_stack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> gap = rlim_stack-&gt;rlim_cur;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> pad = stack_maxrandom_size(task_size) + stack_guard_gap;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> gap_min, gap_max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Values close to RLIM_INFINITY can overflow. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gap + pad &gt; gap)</span><br><span class=\"line\">        gap += pad;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Top of mmap area (just below the process stack).</span></span><br><span class=\"line\"><span class=\"comment\">     * Leave an at least ~128 MB hole with possible stack randomization.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    gap_min = SIZE_128M;</span><br><span class=\"line\">    gap_max = (task_size / <span class=\"number\">6</span>) * <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (gap &lt; gap_min)</span><br><span class=\"line\">        gap = gap_min;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gap &gt; gap_max)</span><br><span class=\"line\">        gap = gap_max;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> PAGE_ALIGN(task_size - gap - rnd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//max = (0x3fffff &lt;&lt;= 12)   = 0x3fffff000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">stack_maxrandom_size</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> task_size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">max</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span> = (<span class=\"number\">-1U</span>L) &amp; __STACK_RND_MASK(task_size == task_size_32bit());</span><br><span class=\"line\">        <span class=\"built_in\">max</span> &lt;&lt;= PAGE_SHIFT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"代码段开始地址\"><a href=\"#代码段开始地址\" class=\"headerlink\" title=\"代码段开始地址\"></a>代码段开始地址</h4><p>ELF文件如果是普通的EXEC类型则会使用指定的入口地址下面讨论PIE编译出的DYN可执行文件<br>其加载地址为 DEFAULT_MAP_WINDOW /3<em>2上增加一个arch_mmap_rnd随机值<br>DEFAULT_MAP_WINDOW /3</em>2 = 0x555555554AAA<br>同mmap一样为 0x00FFFFFFF000 约1个T大小<br>代码段起始位置约为84T 随机值 1T   </p>\n<p>代码段数据段等整体随机  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (interpreter) &#123;</span><br><span class=\"line\">                load_bias = ELF_ET_DYN_BASE;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current-&gt;flags &amp; PF_RANDOMIZE)</span><br><span class=\"line\">                    load_bias += arch_mmap_rnd();</span><br><span class=\"line\">                elf_flags |= MAP_FIXED;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                load_bias = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loc-&gt;elf_ex.e_entry += load_bias;</span><br><span class=\"line\">elf_bss += load_bias;</span><br><span class=\"line\">elf_brk += load_bias;</span><br><span class=\"line\">start_code += load_bias;</span><br><span class=\"line\">end_code += load_bias;</span><br><span class=\"line\">start_data += load_bias;</span><br><span class=\"line\">end_data += load_bias;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HEAP区开始地址\"><a href=\"#HEAP区开始地址\" class=\"headerlink\" title=\"HEAP区开始地址\"></a>HEAP区开始地址</h4><p>brk从BSS结束地址开始, 会有一个额外的随机arch_randomize_brk<br>为固定的大小范围0x02000000, 大约为33M  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((current-&gt;flags &amp; PF_RANDOMIZE) &amp;&amp; (randomize_va_space &gt; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * For architectures with ELF randomization, when executing</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * a loader directly (i.e. no interpreter listed in ELF</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * headers), move the brk area out of the mmap region</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * (since it grows up, and may collide early with the stack</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * growing down), and into the unused ELF_ET_DYN_BASE region.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (IS_ENABLED(CONFIG_ARCH_HAS_ELF_RANDOMIZE) &amp;&amp;</span><br><span class=\"line\">\t\t    loc-&gt;elf_ex.e_type == ET_DYN &amp;&amp; !interpreter)</span><br><span class=\"line\">\t\t\tcurrent-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk =</span><br><span class=\"line\">\t\t\t\tELF_ET_DYN_BASE;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tcurrent-&gt;mm-&gt;brk = current-&gt;mm-&gt;start_brk =</span><br><span class=\"line\">\t\t\tarch_randomize_brk(current-&gt;mm);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> compat_brk_randomized</span></span><br><span class=\"line\">\t\tcurrent-&gt;brk_randomized = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"title\">arch_randomize_brk</span><span class=\"params\">(struct mm_struct *mm)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> randomize_page(mm-&gt;brk, <span class=\"number\">0x02000000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结论部分\"><a href=\"#结论部分\" class=\"headerlink\" title=\"结论部分\"></a>结论部分</h3><p>假定编译出来的是PIE类型的ELF并且全开ASLR设置<br>那么在mmap和heap之间的地址空间大小大约是<br>128T - 17G - 1T - 84T - 1T -33M  = 42T  </p>\n<p>mmap最小起始地址略小于0x0000 7F00 0000 0000<br>brk起始地址最大略大于 0x0000 5655 5555 5555  </p>\n<p>这个是以T为单位的粗略计算, 考虑到计算时忽略了一些小的单位(GB级别或者更小), 包括间隙 小的随机值, 以及动态库 数据段代码段本身占用的空间, 这里可以做一个进一步的保守计算来使用这个空间.   </p>\n<p> <strong>计算这个空间的意义在于, 例如我们对共享内存使用一个固定的地址时, 需要避免和系统本身的动态分配的地址空间相冲突, 而计算出来的地址空间的确定可以保证这一点,</strong>  例如可以用这两个地址做一个中值计算, 把这个中值作为安全的绝对地址使用.     </p>\n<h4 id=\"结论部分补充验证数据\"><a href=\"#结论部分补充验证数据\" class=\"headerlink\" title=\"结论部分补充验证数据\"></a>结论部分补充验证数据</h4><ul>\n<li>没有开启PIE和ASLR<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000400000      4K r-x-- a.out (deleted)</span><br><span class=\"line\">0000000000600000      4K r---- a.out (deleted)</span><br><span class=\"line\">0000000000601000  40964K rw--- a.out (deleted)</span><br><span class=\"line\">0000000002e02000    132K rw---   [ anon ]</span><br><span class=\"line\">00007ffff70f2000   1732K r-x-- libc-2.27.so</span><br><span class=\"line\">00007ffff72a3000   2044K ----- libc-2.27.so</span><br><span class=\"line\">00007ffff74a2000     16K r---- libc-2.27.so</span><br><span class=\"line\">00007ffff74a6000      8K rw--- libc-2.27.so</span><br><span class=\"line\">00007ffff74a8000     16K rw---   [ anon ]</span><br><span class=\"line\">00007ffff74ac000     92K r-x-- libgcc_s.so.1</span><br><span class=\"line\">00007ffff74c3000   2044K ----- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c2000      4K r---- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c3000      4K rw--- libgcc_s.so.1</span><br><span class=\"line\">00007ffff76c4000   1608K r-x-- libm-2.27.so</span><br><span class=\"line\">00007ffff7856000   2044K ----- libm-2.27.so</span><br><span class=\"line\">00007ffff7a55000      4K r---- libm-2.27.so</span><br><span class=\"line\">00007ffff7a56000      4K rw--- libm-2.27.so</span><br><span class=\"line\">00007ffff7a57000   1480K r-x-- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7bc9000   2048K ----- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dc9000     40K r---- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dd3000      8K rw--- libstdc++.so.6.0.25</span><br><span class=\"line\">00007ffff7dd5000     12K rw---   [ anon ]</span><br><span class=\"line\">00007ffff7dd8000    148K r-x-- ld-2.27.so</span><br><span class=\"line\">00007ffff7fd7000     24K rw---   [ anon ]</span><br><span class=\"line\">00007ffff7ff8000      8K r----   [ anon ]</span><br><span class=\"line\">00007ffff7ffa000      8K r-x--   [ anon ]</span><br><span class=\"line\">00007ffff7ffc000      4K r---- ld-2.27.so</span><br><span class=\"line\">00007ffff7ffd000      4K rw--- ld-2.27.so</span><br><span class=\"line\">00007ffff7ffe000      4K rw---   [ anon ]</span><br><span class=\"line\">00007ffffffde000    132K rw---   [ stack ]</span><br><span class=\"line\">ffffffffff600000      4K r-x--   [ anon ]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>开启PIE和ASLR后多次测试得到的一个接近最小可分配空间的内存分布结果如下:<br>代码段从0x0000 5640开始<br>mmap的则从0x 0000 7eff开始而不是概率更大的0x 0000 7f** 这样的地址  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00005640b5092000      4K r-x-- a.out</span><br><span class=\"line\">00005640b5292000      4K r---- a.out</span><br><span class=\"line\">00005640b5293000  40964K rw--- a.out</span><br><span class=\"line\">00005640b99f2000    132K rw---   [ anon ]</span><br><span class=\"line\">00007effd7734000  20484K rw---   [ anon ]</span><br><span class=\"line\">00007effd8b35000   1732K r-x-- libc-2.27.so</span><br><span class=\"line\">00007effd8ce6000   2044K ----- libc-2.27.so</span><br><span class=\"line\">00007effd8ee5000     16K r---- libc-2.27.so</span><br><span class=\"line\">00007effd8ee9000      8K rw--- libc-2.27.so</span><br><span class=\"line\">00007effd8eeb000     16K rw---   [ anon ]</span><br><span class=\"line\">00007effd8eef000     92K r-x-- libgcc_s.so.1</span><br><span class=\"line\">00007effd8f06000   2044K ----- libgcc_s.so.1</span><br><span class=\"line\">00007effd9105000      4K r---- libgcc_s.so.1</span><br><span class=\"line\">00007effd9106000      4K rw--- libgcc_s.so.1</span><br><span class=\"line\">00007effd9107000   1608K r-x-- libm-2.27.so</span><br><span class=\"line\">00007effd9299000   2044K ----- libm-2.27.so</span><br><span class=\"line\">00007effd9498000      4K r---- libm-2.27.so</span><br><span class=\"line\">00007effd9499000      4K rw--- libm-2.27.so</span><br><span class=\"line\">00007effd949a000   1480K r-x-- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd960c000   2048K ----- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd980c000     40K r---- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd9816000      8K rw--- libstdc++.so.6.0.25</span><br><span class=\"line\">00007effd9818000     12K rw---   [ anon ]</span><br><span class=\"line\">00007effd981b000    148K r-x-- ld-2.27.so</span><br><span class=\"line\">00007effd9a1e000     24K rw---   [ anon ]</span><br><span class=\"line\">00007effd9a3f000      4K r---- ld-2.27.so</span><br><span class=\"line\">00007effd9a40000      4K rw--- ld-2.27.so</span><br><span class=\"line\">00007effd9a41000      4K rw---   [ anon ]</span><br><span class=\"line\">00007ffd922c7000    132K rw---   [ stack ]</span><br><span class=\"line\">00007ffd92385000      8K r----   [ anon ]</span><br><span class=\"line\">00007ffd92387000      8K r-x--   [ anon ]</span><br><span class=\"line\">ffffffffff600000      4K r-x--   [ anon ]</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"ELF文件的SECTIO分析","date":"2019-11-08T16:00:00.000Z","author":"yawei.zhang","_content":"\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [ELF文件类型和描述](#elf文件类型和描述)\n    - [文件类型](#文件类型)\n    - [链接器视图(编译器 汇编器 链接器)](#链接器视图编译器-汇编器-链接器)\n    - [加载器视图 (系统加载器)](#加载器视图-系统加载器)\n    - [基本测试命令](#基本测试命令)\n    - [基础术语知识](#基础术语知识)\n        - [目标文件格式的比较和说明](#目标文件格式的比较和说明)\n        - [其他词汇说明](#其他词汇说明)\n\n<!-- /TOC -->\n\n### ELF文件类型和描述  \n\n---  \n\n(Executable and Linking Format) (可执行可链接格式) 文件    \n#### 文件类型\n* 可重定位文件  (relocatable file)  \n  * 由源文件编译而成但是还没有链接成可执行文件, 扩展名通常为.o  通常'目标文件(object file)'  用于与其他目标文件进行链接成可执行文件或者动态链接库.  \n  * 可重定位是指 对外部符号的访问会进行标记, 在链接时候会重写这部分访问(操作数)重定位到真正的位置上.  \n  * 重定位因为存在该修补 则有以下作用:  \n    * 重定位在执行时是直接使用真实位置 没有其他过程 性能非常好   \n    * 链接共享库的时候如果需要确定地址和修补, 则还需要保证多个共享库的地址不可以重叠, 在32位下这种保证会很容易用尽虚拟(地址)空间  \n    * 重定位需要修改代码段, 从而破坏'代码段'只读属性, 如果在链接阶段无法完成重定位, 则只能放在加载过程完成, 这样会导致'无法实现真正的代码共享' .  比如所有进程使用的相同so文件在内存中实际上只有一份就是依赖于so的代码段只读且一致这个原则上的.  \n\n* 共享目标文件(shared object file)，即动态连接库文件 它在以下两种情况下被使用\n  * 在链接过程中与其它动态链接库或可重定位文件一起构建新的目标文件\n  * 在可执行文件被加载的过程中 被动态链接到新的进程中 成为运行代码的一部分  \n  \n* 可执行文件(executable file)，经过连接的，可以执行的程序文件。  \n          \n* coredump文件 核心转储  \n\n<!-- more -->\n#### 链接器视图(编译器 汇编器 链接器)   \n链接器关心的内容   \n| LINKING VIEW \n| -\n| ELF HEADER\n| PROGRAM HEADER TABLE OPTIONAL \n| SECTION 1  .text\n| SECTION 2  .data\n| SECTION n ...\n| SECTION HEADER TABLE  \n\n#### 加载器视图 (系统加载器) \n加载器关心的内容 \n| EXECUTION VIEW \n| - \n| ELF HEADER\n| PROGRAM HEADER TABLE \n| SEGMENT 1 \n| SEGMENT 2 \n| SEGMENT N ...\n| SECTION HEADER TABLE OPTIONAL \n\n#### 基本测试命令     \n```\nldd - print shared library dependencies  \nreadelf -a 查看elf文件\nobjdump -S 查看汇编码\n\ngcc -g -c lib.cpp  编译目标文件  \ngcc -g -c -fpic lib.cpp  启用地址无关代码选项来编译目标文件   \nar -cr liblib.a  lib.o  打包目标文件到静态库   \ng++ -g -fPIC -shared so.cpp -o so.so  启用地址无关代码的链接选项和编译选项来编译共享库   \ng++ -g -fpie -fPIE -pie -o main  lib.o libso.so \n\nexport LD_LIBRARY_PATH=\"./\" 设置临时的共享库搜索路径  \n\nPIC和PIE都用于编译地址无关代码, PIE假定了最终链接的目标是可执行文件.  \npie是链接选项 用于生成DYN类型的可执行文件.   \n\n```\n\n#### 基础术语知识   \n##### 目标文件格式的比较和说明    \n* a.out 文件格式  \n  * 旧版unix like系统(包括linux1.2以及之前的版本)中用于可执行文件 目标代码 共享库等的文件格式, 后续基本被ELF取代   \n  * 后续习惯性把a.out作为可执行文件的默认输出名, 即使格式不是a.out   \n  * stabs 是一种调试数据格式, 用来存储程序信息供符号级/源代码级的调试器用, 因该信息存储在符号表的一个特殊条目中因此得名为刺 (条目 stabs)  该格式除了完成对a.out的调试信息支持, 还用于COFF ELF的变体中 .   \n\n* ELF 文件格式  \n  * Executable and Linking Format 可执行可链接的文件格式 \n  * 原名 Extensible Linking Format  可扩展可链接的文件格式\n  * DWARF 标准化的调试数据格式 为ELF的补语  \n    * 该符号是一个历史遗留的名称, 没有正式含义, 定义为\"标准化的调试数据格式\", 被广泛使用.   \n      * DWARF使用DIE(调试信息条目)的数据结构来表示每个变量, 类型, 过程, 具有标签,属性(键值对).  \n    * DIE可以嵌套形成树结构.  \n      * DIE属性可以引用树中任何位置的另外一个DIE  \n        * 例如: 表示变量的DIE有一个DW_AT_type条目，该条目指向描述变量类型的DIE  \n\n* COFF 文件格式    \n  * Common Object File Format  通用对象文件格式  类似ELF a.out  \n  * COFF文件的出现主要是因为a.out无法充分支持共享库, 包括外部格式标识, 显式地址链接.  \n  * COFF的设计过于局限和不完整, 导致实际的实现必然违反COFF标准, 目前仍然使用的较为广泛的是windows的PE版本 \n  * COFF对a.out的主要改进是在目标文件中引入了多个命名节  不同的对象文件可能具有不同数量和类型的节  \n  * 文件的第一个字节将被加载的虚拟地址称为映像基地址 文件的其余部分不一定要装入一个连续的块中 而是要装入不同的部分中  \n\n\n| Format name | Operating system                                  | Filename extension | Explicit processor declarations | Arbitrary sections | Metadata[a] | Digital signature | String table | Symbol table | 64-bit    | Fat binaries    | Can contain icon |\n| ----------- | ------------------------------------------------- | ------------------ | ------------------------------- | ------------------ | ----------- | ----------------- | ------------ | ------------ | --------- | --------------- | ---------------- |\n| 格式名      | 操作系统                                          | 文件名扩展         | 显式处理器声明                  | 任意节             | 元数据[a]   | 数字签名          | 字符串表     | 符号表       | 64位      | fat格式文件支持 | 包含图标         |\n| a.out       | Unix-like                                         | none               | No                              | No                 | No          | No                | Yes[1]       | Yes[1]       | Extension | No              | No               |\n| COFF        | Unix-like                                         | none               | Yes by file                     | Yes                | No          | No                | Yes          | Yes          | Extension | No              | No               |\n| XCOFF       | IBM AIX, BeOS, \"classic\" Mac OS                   | none               | Yes by file                     | Yes                | No          | No                | Yes          | Yes[2]       | Yes       | No              | No               |\n| ELF         | Unix-like, OpenVMS, BeOS from R4 onwards, Haiku   | none               | Yes by file                     | Yes                | Yes         | Yes[3]            | Yes          | Yes[4]       | Yes       | Extension[5]    | Extension[6]     |\n| PE          | Windows, ReactOS, HX DOS Extender, BeOS (R3 only) | .EXE               | Yes by file                     | Yes                | Yes         | Yes[10]           | Yes          | Yes          | No        | No              | Yes              |\n\n##### 其他词汇说明  \n* ELF header 文件头   \n  * ELF文件的组成描述\n  * 结构\n    * 版本信息等    \n    * ELF文件类型\n      * ET_REL 可重定位文件 .o .a\n      * ET_DYN 可共享文件 .so  PIE版本的可执行文件   \n      * ET_EXEC 可执行文件   \n      * ET_CORE 核心转储  coredump\n    * 入口点地址  0x400510  \n    * ELF header大小  \n    * PROGRAM HEADERS大小和数量\n    * SECTION HEADERS大小和数量  \n    * Section header string table index 字符串表索引节头位置(.shstrtab) \n* section header SH 节头  \n  * .text section 里装载了可执行代码\n  * .data section 里面装载了被初始化的数据\n  * .bss section 里面装载了未被初始化或者初始化为0的数据  \n    * bss 不占据ELF文件的空间 因为没有内容只有空间大小和类型信息  \n  \n  * .commont 开发环境的时候使用的GCC版本信息   \n  * .shstrtab 指的是section header string table 保存了各个section的名字   \n  * .strtab 或者 .dynstr section 里面装载了字符串信息 字符串和符号的区别是 字符串是程序执行内容中, 符号是代码符号.  \n  * .rodata 字符串常量  \n  * .eh_frame 其内部存放了以DWARF格式保存的一些调试信息 格式与 .debug_frame 是很相似的（不完全相同）.  \n  \n  * .dynsym  动态库的符号表  \n    * 动态加载需要的符号表(动态库)  \n  * .symtab section 符号表(全量)   \n    * 包括了.strtab里面定义的符号 每个符号对应的符号表是一个Elf64_Symbol结构体 除了包含.strtab外 符号表中还包含了一些section的符号表条目 \n    * Value 符号所在的section偏移, 比如代码段的相对偏移地址, 数据段的相对偏移地址    \n    * Size 大小,  如果是变量则是变量的size, 如果是函数则是指令的行数  \n    * Type 符号的类型 NOTYPE或者UND代表是外部符号, FUNC函数, OBJECT数据, SECTION 节 \n      * 如果是so/exe则还有bss data等字段    \n    * Bind 绑定类型 LOCAL GLOBAL  \n    * vis  \n    * NDX\n    * NAME 符号名  \n\n  * .rel 打头的 sections 里面装载了重定位条目   \n    * 在最终二进制文件中 使用\"符号的地址\"在此目标文件中的\"偏移量\"处修补该值   \n\n\n    * .rel.text RELOCATION RECORDS FOR  .text 包含了代码段中引用的函数和全局变量的重定位条目 包括调用当前编译单元的\n      * Offset 偏移地址 代码段中要修改掉的地址  \n      * Type 类型 不启用PIC的一般是PC32 启用后如下\n        * PLT32 函数符号 外部或者内部  \n        * GOT PC RELX 全局变量符号  包括外部和内部  \n      * VALUE 符号名和加数  \n\n\n\n    * .rela.eh_frame RELOCATION RECORDS FOR [.eh_frame  eh_frame 的重定位信息    \n      * 在编译成object file的过程中, 该section提供了当前编译单元所定义的函数符号以及符号所在代码段的偏移位置.  \n      * OFFSET 当前函数在代码段中的开始位置  \n      * TYPE   PC32 本地实现  \n      * VALUE  符号表中的类型名以及符号的Value位置   \n\n\n\n    * .rel.plt (动态库或者EXE)节的每个表项对应了所有外部过程调用符号的重定位信息  \n      * 主要是 JUMP_SLOT 类型的重定位项  \n        * 重定位只需将符号地址填入被修正的内存即可\n      * 比如定义了一个函数test, 所有call test的地方都存在这个位置  \n    * .rel.dyn section (动态库或者EXE)的每个表项对应了除了外部过程调用的符号以外的所有重定位对象(一般是数据)  \n      * 主要是 GLOB_DAT 类型的重定位项\n        * 重定位只需将符号地址填入被修正的内存即可\n      * 比如extern来自so文件的全局静态变量  \n      * 或者开启pic后自己的全局静态变量  \n  \n    * 类型  \n      * GOT Global Offset Table  全局偏移表  \n      * PC  program counter relative displacement  程序计数的相对偏移/ IP指令的操作数修改   \n      * PLT procedure linkage table  过程链接表\n      * R_386_GOT32：该重定位类型计算从全局偏移表（global offset table）的基址到符号所在的全局偏移表表项的距离，并且通知链接编辑器建立全局偏移表。（G+A-P）\n      * R_386_PLT32：该重定位类型计算符号的过程链接表表项地址，并且通知链接编辑器构建过程链接表。（L+A-P）\n      * R_386_COPY：链接编辑器创建此重定位类型是用于动态链接的。它的r_offset成员对应一个可写segment中的位置。符号表索引指定了一个在当前目标文件和共享目标文件中都存在的符号。在执行期间，动态链接器拷贝与共享目标的符号相关的数据到偏移指定的位置。（none）\n      * R_386_GLOB_DAT：用于给指定符号的地址设置一个全局偏移表表项。该特殊重定位类型确定符号和全局偏移表项之间的对应关系。（S）\n      * R_386_JMP_SLOT：链接编辑器创建此重定位类型是用于动态链接的，它的偏移给出了过程链接表表项的位置。动态链接器通过修改过程链接表表项，把控制权传递给指定符号的地址，参见第二章“过程链接表”一节。（S）\n      * R_386_RELATIVE：链接编辑器创建此重定位类型是用于动态链接的，它的偏移成员给出了共享目标中的一个位置，这个位置包含了一个表示相对地址的值。动态链接器通过把共享目标被加载的虚拟地址与相对地址相加，计算出对应的虚拟地址。此重定位类型的重定位表项必须把符号表索引置为0。（B+A）\n      * R_386_GOTOFF：此类型的重定位计算符号值和全局偏移表地址的差值，并且通知链接编辑器构建全局偏移表。（S+A-GOT）\n      * R_386_GOTPC：此类型类似于R_386_PC32。只是它在计算中使用全局偏移表的地址。这种类型的重定位引用的通常是_GLOBAL_OFFSET_TABLE_DE类型的符号，并且通知链接编辑器构建全局偏移表。（GOT+A-P）****\n\n  * 这些条目给链接的时候需要和其他可重定位文件或者库的对应的section合并时提供了必要的信息  \nR_386_32/R_386_PC32/ R_386_RELATIVE,这三种类型的重定位目标都可以位于.text(代码段).  \n这样如果linker解决 了重定位的问题,那么这个.text里面的数据已经经过了修改,那么这个.text就不可能在多 个GNU/Linux运行的进程之间共享,相对于shared library来说这样对整个系统的RAM很浪费.   \n但是相应地相对于shared library有一个优点,那就是因为启动快,因为基本上动态连接 器不需要reslove什么符号,而且代码中R_386_32/R_386_RELATIVE方式的重定位目标已经被 修改成了绝对地址,相对于需要运行时全部做间接调用的shared library来说少了很多个指令周期.   \n\n* program header PH 程序头\n  * segment信息\n* base address             基地址       \n* dynamic linker           动态连接器   \n* dynamic linking          动态连接     \n* global offset table      全局偏移量表 \n* hash table               哈希表       \n* initialization function  初始化函数   \n* link editor              连接编辑器   \n* object file              目标文件     \n* procedure linkage table  函数连接表   \n* program header           程序头       \n* program header table     程序头表     \n* program interpreter      程序解析器   \n* relocation               重定位       \n* shared object            共享目标     \n* section                  节           \n* section header           节头         \n* section header table     节头表       \n* segment                  段           \n* string table             字符串表     \n* symbol table             符号表       \n* termination function     终止函数     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-11-12-elf-section-symbol.md","raw":"---\ntitle: ELF文件的SECTIO分析    \ndate: 2019-11-09\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [ELF文件类型和描述](#elf文件类型和描述)\n    - [文件类型](#文件类型)\n    - [链接器视图(编译器 汇编器 链接器)](#链接器视图编译器-汇编器-链接器)\n    - [加载器视图 (系统加载器)](#加载器视图-系统加载器)\n    - [基本测试命令](#基本测试命令)\n    - [基础术语知识](#基础术语知识)\n        - [目标文件格式的比较和说明](#目标文件格式的比较和说明)\n        - [其他词汇说明](#其他词汇说明)\n\n<!-- /TOC -->\n\n### ELF文件类型和描述  \n\n---  \n\n(Executable and Linking Format) (可执行可链接格式) 文件    \n#### 文件类型\n* 可重定位文件  (relocatable file)  \n  * 由源文件编译而成但是还没有链接成可执行文件, 扩展名通常为.o  通常'目标文件(object file)'  用于与其他目标文件进行链接成可执行文件或者动态链接库.  \n  * 可重定位是指 对外部符号的访问会进行标记, 在链接时候会重写这部分访问(操作数)重定位到真正的位置上.  \n  * 重定位因为存在该修补 则有以下作用:  \n    * 重定位在执行时是直接使用真实位置 没有其他过程 性能非常好   \n    * 链接共享库的时候如果需要确定地址和修补, 则还需要保证多个共享库的地址不可以重叠, 在32位下这种保证会很容易用尽虚拟(地址)空间  \n    * 重定位需要修改代码段, 从而破坏'代码段'只读属性, 如果在链接阶段无法完成重定位, 则只能放在加载过程完成, 这样会导致'无法实现真正的代码共享' .  比如所有进程使用的相同so文件在内存中实际上只有一份就是依赖于so的代码段只读且一致这个原则上的.  \n\n* 共享目标文件(shared object file)，即动态连接库文件 它在以下两种情况下被使用\n  * 在链接过程中与其它动态链接库或可重定位文件一起构建新的目标文件\n  * 在可执行文件被加载的过程中 被动态链接到新的进程中 成为运行代码的一部分  \n  \n* 可执行文件(executable file)，经过连接的，可以执行的程序文件。  \n          \n* coredump文件 核心转储  \n\n<!-- more -->\n#### 链接器视图(编译器 汇编器 链接器)   \n链接器关心的内容   \n| LINKING VIEW \n| -\n| ELF HEADER\n| PROGRAM HEADER TABLE OPTIONAL \n| SECTION 1  .text\n| SECTION 2  .data\n| SECTION n ...\n| SECTION HEADER TABLE  \n\n#### 加载器视图 (系统加载器) \n加载器关心的内容 \n| EXECUTION VIEW \n| - \n| ELF HEADER\n| PROGRAM HEADER TABLE \n| SEGMENT 1 \n| SEGMENT 2 \n| SEGMENT N ...\n| SECTION HEADER TABLE OPTIONAL \n\n#### 基本测试命令     \n```\nldd - print shared library dependencies  \nreadelf -a 查看elf文件\nobjdump -S 查看汇编码\n\ngcc -g -c lib.cpp  编译目标文件  \ngcc -g -c -fpic lib.cpp  启用地址无关代码选项来编译目标文件   \nar -cr liblib.a  lib.o  打包目标文件到静态库   \ng++ -g -fPIC -shared so.cpp -o so.so  启用地址无关代码的链接选项和编译选项来编译共享库   \ng++ -g -fpie -fPIE -pie -o main  lib.o libso.so \n\nexport LD_LIBRARY_PATH=\"./\" 设置临时的共享库搜索路径  \n\nPIC和PIE都用于编译地址无关代码, PIE假定了最终链接的目标是可执行文件.  \npie是链接选项 用于生成DYN类型的可执行文件.   \n\n```\n\n#### 基础术语知识   \n##### 目标文件格式的比较和说明    \n* a.out 文件格式  \n  * 旧版unix like系统(包括linux1.2以及之前的版本)中用于可执行文件 目标代码 共享库等的文件格式, 后续基本被ELF取代   \n  * 后续习惯性把a.out作为可执行文件的默认输出名, 即使格式不是a.out   \n  * stabs 是一种调试数据格式, 用来存储程序信息供符号级/源代码级的调试器用, 因该信息存储在符号表的一个特殊条目中因此得名为刺 (条目 stabs)  该格式除了完成对a.out的调试信息支持, 还用于COFF ELF的变体中 .   \n\n* ELF 文件格式  \n  * Executable and Linking Format 可执行可链接的文件格式 \n  * 原名 Extensible Linking Format  可扩展可链接的文件格式\n  * DWARF 标准化的调试数据格式 为ELF的补语  \n    * 该符号是一个历史遗留的名称, 没有正式含义, 定义为\"标准化的调试数据格式\", 被广泛使用.   \n      * DWARF使用DIE(调试信息条目)的数据结构来表示每个变量, 类型, 过程, 具有标签,属性(键值对).  \n    * DIE可以嵌套形成树结构.  \n      * DIE属性可以引用树中任何位置的另外一个DIE  \n        * 例如: 表示变量的DIE有一个DW_AT_type条目，该条目指向描述变量类型的DIE  \n\n* COFF 文件格式    \n  * Common Object File Format  通用对象文件格式  类似ELF a.out  \n  * COFF文件的出现主要是因为a.out无法充分支持共享库, 包括外部格式标识, 显式地址链接.  \n  * COFF的设计过于局限和不完整, 导致实际的实现必然违反COFF标准, 目前仍然使用的较为广泛的是windows的PE版本 \n  * COFF对a.out的主要改进是在目标文件中引入了多个命名节  不同的对象文件可能具有不同数量和类型的节  \n  * 文件的第一个字节将被加载的虚拟地址称为映像基地址 文件的其余部分不一定要装入一个连续的块中 而是要装入不同的部分中  \n\n\n| Format name | Operating system                                  | Filename extension | Explicit processor declarations | Arbitrary sections | Metadata[a] | Digital signature | String table | Symbol table | 64-bit    | Fat binaries    | Can contain icon |\n| ----------- | ------------------------------------------------- | ------------------ | ------------------------------- | ------------------ | ----------- | ----------------- | ------------ | ------------ | --------- | --------------- | ---------------- |\n| 格式名      | 操作系统                                          | 文件名扩展         | 显式处理器声明                  | 任意节             | 元数据[a]   | 数字签名          | 字符串表     | 符号表       | 64位      | fat格式文件支持 | 包含图标         |\n| a.out       | Unix-like                                         | none               | No                              | No                 | No          | No                | Yes[1]       | Yes[1]       | Extension | No              | No               |\n| COFF        | Unix-like                                         | none               | Yes by file                     | Yes                | No          | No                | Yes          | Yes          | Extension | No              | No               |\n| XCOFF       | IBM AIX, BeOS, \"classic\" Mac OS                   | none               | Yes by file                     | Yes                | No          | No                | Yes          | Yes[2]       | Yes       | No              | No               |\n| ELF         | Unix-like, OpenVMS, BeOS from R4 onwards, Haiku   | none               | Yes by file                     | Yes                | Yes         | Yes[3]            | Yes          | Yes[4]       | Yes       | Extension[5]    | Extension[6]     |\n| PE          | Windows, ReactOS, HX DOS Extender, BeOS (R3 only) | .EXE               | Yes by file                     | Yes                | Yes         | Yes[10]           | Yes          | Yes          | No        | No              | Yes              |\n\n##### 其他词汇说明  \n* ELF header 文件头   \n  * ELF文件的组成描述\n  * 结构\n    * 版本信息等    \n    * ELF文件类型\n      * ET_REL 可重定位文件 .o .a\n      * ET_DYN 可共享文件 .so  PIE版本的可执行文件   \n      * ET_EXEC 可执行文件   \n      * ET_CORE 核心转储  coredump\n    * 入口点地址  0x400510  \n    * ELF header大小  \n    * PROGRAM HEADERS大小和数量\n    * SECTION HEADERS大小和数量  \n    * Section header string table index 字符串表索引节头位置(.shstrtab) \n* section header SH 节头  \n  * .text section 里装载了可执行代码\n  * .data section 里面装载了被初始化的数据\n  * .bss section 里面装载了未被初始化或者初始化为0的数据  \n    * bss 不占据ELF文件的空间 因为没有内容只有空间大小和类型信息  \n  \n  * .commont 开发环境的时候使用的GCC版本信息   \n  * .shstrtab 指的是section header string table 保存了各个section的名字   \n  * .strtab 或者 .dynstr section 里面装载了字符串信息 字符串和符号的区别是 字符串是程序执行内容中, 符号是代码符号.  \n  * .rodata 字符串常量  \n  * .eh_frame 其内部存放了以DWARF格式保存的一些调试信息 格式与 .debug_frame 是很相似的（不完全相同）.  \n  \n  * .dynsym  动态库的符号表  \n    * 动态加载需要的符号表(动态库)  \n  * .symtab section 符号表(全量)   \n    * 包括了.strtab里面定义的符号 每个符号对应的符号表是一个Elf64_Symbol结构体 除了包含.strtab外 符号表中还包含了一些section的符号表条目 \n    * Value 符号所在的section偏移, 比如代码段的相对偏移地址, 数据段的相对偏移地址    \n    * Size 大小,  如果是变量则是变量的size, 如果是函数则是指令的行数  \n    * Type 符号的类型 NOTYPE或者UND代表是外部符号, FUNC函数, OBJECT数据, SECTION 节 \n      * 如果是so/exe则还有bss data等字段    \n    * Bind 绑定类型 LOCAL GLOBAL  \n    * vis  \n    * NDX\n    * NAME 符号名  \n\n  * .rel 打头的 sections 里面装载了重定位条目   \n    * 在最终二进制文件中 使用\"符号的地址\"在此目标文件中的\"偏移量\"处修补该值   \n\n\n    * .rel.text RELOCATION RECORDS FOR  .text 包含了代码段中引用的函数和全局变量的重定位条目 包括调用当前编译单元的\n      * Offset 偏移地址 代码段中要修改掉的地址  \n      * Type 类型 不启用PIC的一般是PC32 启用后如下\n        * PLT32 函数符号 外部或者内部  \n        * GOT PC RELX 全局变量符号  包括外部和内部  \n      * VALUE 符号名和加数  \n\n\n\n    * .rela.eh_frame RELOCATION RECORDS FOR [.eh_frame  eh_frame 的重定位信息    \n      * 在编译成object file的过程中, 该section提供了当前编译单元所定义的函数符号以及符号所在代码段的偏移位置.  \n      * OFFSET 当前函数在代码段中的开始位置  \n      * TYPE   PC32 本地实现  \n      * VALUE  符号表中的类型名以及符号的Value位置   \n\n\n\n    * .rel.plt (动态库或者EXE)节的每个表项对应了所有外部过程调用符号的重定位信息  \n      * 主要是 JUMP_SLOT 类型的重定位项  \n        * 重定位只需将符号地址填入被修正的内存即可\n      * 比如定义了一个函数test, 所有call test的地方都存在这个位置  \n    * .rel.dyn section (动态库或者EXE)的每个表项对应了除了外部过程调用的符号以外的所有重定位对象(一般是数据)  \n      * 主要是 GLOB_DAT 类型的重定位项\n        * 重定位只需将符号地址填入被修正的内存即可\n      * 比如extern来自so文件的全局静态变量  \n      * 或者开启pic后自己的全局静态变量  \n  \n    * 类型  \n      * GOT Global Offset Table  全局偏移表  \n      * PC  program counter relative displacement  程序计数的相对偏移/ IP指令的操作数修改   \n      * PLT procedure linkage table  过程链接表\n      * R_386_GOT32：该重定位类型计算从全局偏移表（global offset table）的基址到符号所在的全局偏移表表项的距离，并且通知链接编辑器建立全局偏移表。（G+A-P）\n      * R_386_PLT32：该重定位类型计算符号的过程链接表表项地址，并且通知链接编辑器构建过程链接表。（L+A-P）\n      * R_386_COPY：链接编辑器创建此重定位类型是用于动态链接的。它的r_offset成员对应一个可写segment中的位置。符号表索引指定了一个在当前目标文件和共享目标文件中都存在的符号。在执行期间，动态链接器拷贝与共享目标的符号相关的数据到偏移指定的位置。（none）\n      * R_386_GLOB_DAT：用于给指定符号的地址设置一个全局偏移表表项。该特殊重定位类型确定符号和全局偏移表项之间的对应关系。（S）\n      * R_386_JMP_SLOT：链接编辑器创建此重定位类型是用于动态链接的，它的偏移给出了过程链接表表项的位置。动态链接器通过修改过程链接表表项，把控制权传递给指定符号的地址，参见第二章“过程链接表”一节。（S）\n      * R_386_RELATIVE：链接编辑器创建此重定位类型是用于动态链接的，它的偏移成员给出了共享目标中的一个位置，这个位置包含了一个表示相对地址的值。动态链接器通过把共享目标被加载的虚拟地址与相对地址相加，计算出对应的虚拟地址。此重定位类型的重定位表项必须把符号表索引置为0。（B+A）\n      * R_386_GOTOFF：此类型的重定位计算符号值和全局偏移表地址的差值，并且通知链接编辑器构建全局偏移表。（S+A-GOT）\n      * R_386_GOTPC：此类型类似于R_386_PC32。只是它在计算中使用全局偏移表的地址。这种类型的重定位引用的通常是_GLOBAL_OFFSET_TABLE_DE类型的符号，并且通知链接编辑器构建全局偏移表。（GOT+A-P）****\n\n  * 这些条目给链接的时候需要和其他可重定位文件或者库的对应的section合并时提供了必要的信息  \nR_386_32/R_386_PC32/ R_386_RELATIVE,这三种类型的重定位目标都可以位于.text(代码段).  \n这样如果linker解决 了重定位的问题,那么这个.text里面的数据已经经过了修改,那么这个.text就不可能在多 个GNU/Linux运行的进程之间共享,相对于shared library来说这样对整个系统的RAM很浪费.   \n但是相应地相对于shared library有一个优点,那就是因为启动快,因为基本上动态连接 器不需要reslove什么符号,而且代码中R_386_32/R_386_RELATIVE方式的重定位目标已经被 修改成了绝对地址,相对于需要运行时全部做间接调用的shared library来说少了很多个指令周期.   \n\n* program header PH 程序头\n  * segment信息\n* base address             基地址       \n* dynamic linker           动态连接器   \n* dynamic linking          动态连接     \n* global offset table      全局偏移量表 \n* hash table               哈希表       \n* initialization function  初始化函数   \n* link editor              连接编辑器   \n* object file              目标文件     \n* procedure linkage table  函数连接表   \n* program header           程序头       \n* program header table     程序头表     \n* program interpreter      程序解析器   \n* relocation               重定位       \n* shared object            共享目标     \n* section                  节           \n* section header           节头         \n* section header table     节头表       \n* segment                  段           \n* string table             字符串表     \n* symbol table             符号表       \n* termination function     终止函数     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-11-12-elf-section-symbol","published":1,"updated":"2020-03-09T03:25:56.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeix000t7w5h407ccriy","content":"<h3><span id=\"目录\">目录</span></h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#elf文件类型和描述\">ELF文件类型和描述</a><ul>\n<li><a href=\"#文件类型\">文件类型</a></li>\n<li><a href=\"#链接器视图编译器-汇编器-链接器\">链接器视图(编译器 汇编器 链接器)</a></li>\n<li><a href=\"#加载器视图-系统加载器\">加载器视图 (系统加载器)</a></li>\n<li><a href=\"#基本测试命令\">基本测试命令</a></li>\n<li><a href=\"#基础术语知识\">基础术语知识</a><ul>\n<li><a href=\"#目标文件格式的比较和说明\">目标文件格式的比较和说明</a></li>\n<li><a href=\"#其他词汇说明\">其他词汇说明</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3><span id=\"elf文件类型和描述\">ELF文件类型和描述</span></h3><hr>\n<p>(Executable and Linking Format) (可执行可链接格式) 文件    </p>\n<h4><span id=\"文件类型\">文件类型</span></h4><ul>\n<li><p>可重定位文件  (relocatable file)  </p>\n<ul>\n<li>由源文件编译而成但是还没有链接成可执行文件, 扩展名通常为.o  通常’目标文件(object file)’  用于与其他目标文件进行链接成可执行文件或者动态链接库.  </li>\n<li>可重定位是指 对外部符号的访问会进行标记, 在链接时候会重写这部分访问(操作数)重定位到真正的位置上.  </li>\n<li>重定位因为存在该修补 则有以下作用:  <ul>\n<li>重定位在执行时是直接使用真实位置 没有其他过程 性能非常好   </li>\n<li>链接共享库的时候如果需要确定地址和修补, 则还需要保证多个共享库的地址不可以重叠, 在32位下这种保证会很容易用尽虚拟(地址)空间  </li>\n<li>重定位需要修改代码段, 从而破坏’代码段’只读属性, 如果在链接阶段无法完成重定位, 则只能放在加载过程完成, 这样会导致’无法实现真正的代码共享’ .  比如所有进程使用的相同so文件在内存中实际上只有一份就是依赖于so的代码段只读且一致这个原则上的.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>共享目标文件(shared object file)，即动态连接库文件 它在以下两种情况下被使用</p>\n<ul>\n<li>在链接过程中与其它动态链接库或可重定位文件一起构建新的目标文件</li>\n<li>在可执行文件被加载的过程中 被动态链接到新的进程中 成为运行代码的一部分  </li>\n</ul>\n</li>\n<li><p>可执行文件(executable file)，经过连接的，可以执行的程序文件。  </p>\n</li>\n<li><p>coredump文件 核心转储  </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h4><span id=\"链接器视图编译器-汇编器-链接器\">链接器视图(编译器 汇编器 链接器)</span></h4><p>链接器关心的内容<br>| LINKING VIEW<br>| -<br>| ELF HEADER<br>| PROGRAM HEADER TABLE OPTIONAL<br>| SECTION 1  .text<br>| SECTION 2  .data<br>| SECTION n …<br>| SECTION HEADER TABLE  </p>\n<h4><span id=\"加载器视图-系统加载器\">加载器视图 (系统加载器)</span></h4><p>加载器关心的内容<br>| EXECUTION VIEW<br>| -<br>| ELF HEADER<br>| PROGRAM HEADER TABLE<br>| SEGMENT 1<br>| SEGMENT 2<br>| SEGMENT N …<br>| SECTION HEADER TABLE OPTIONAL </p>\n<h4><span id=\"基本测试命令\">基本测试命令</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldd - print shared library dependencies  </span><br><span class=\"line\">readelf -a 查看elf文件</span><br><span class=\"line\">objdump -S 查看汇编码</span><br><span class=\"line\"></span><br><span class=\"line\">gcc -g -c lib.cpp  编译目标文件  </span><br><span class=\"line\">gcc -g -c -fpic lib.cpp  启用地址无关代码选项来编译目标文件   </span><br><span class=\"line\">ar -cr liblib.a  lib.o  打包目标文件到静态库   </span><br><span class=\"line\">g++ -g -fPIC -shared so.cpp -o so.so  启用地址无关代码的链接选项和编译选项来编译共享库   </span><br><span class=\"line\">g++ -g -fpie -fPIE -pie -o main  lib.o libso.so </span><br><span class=\"line\"></span><br><span class=\"line\">export LD_LIBRARY_PATH&#x3D;&quot;.&#x2F;&quot; 设置临时的共享库搜索路径  </span><br><span class=\"line\"></span><br><span class=\"line\">PIC和PIE都用于编译地址无关代码, PIE假定了最终链接的目标是可执行文件.  </span><br><span class=\"line\">pie是链接选项 用于生成DYN类型的可执行文件.</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"基础术语知识\">基础术语知识</span></h4><h5><span id=\"目标文件格式的比较和说明\">目标文件格式的比较和说明</span></h5><ul>\n<li><p>a.out 文件格式  </p>\n<ul>\n<li>旧版unix like系统(包括linux1.2以及之前的版本)中用于可执行文件 目标代码 共享库等的文件格式, 后续基本被ELF取代   </li>\n<li>后续习惯性把a.out作为可执行文件的默认输出名, 即使格式不是a.out   </li>\n<li>stabs 是一种调试数据格式, 用来存储程序信息供符号级/源代码级的调试器用, 因该信息存储在符号表的一个特殊条目中因此得名为刺 (条目 stabs)  该格式除了完成对a.out的调试信息支持, 还用于COFF ELF的变体中 .   </li>\n</ul>\n</li>\n<li><p>ELF 文件格式  </p>\n<ul>\n<li>Executable and Linking Format 可执行可链接的文件格式 </li>\n<li>原名 Extensible Linking Format  可扩展可链接的文件格式</li>\n<li>DWARF 标准化的调试数据格式 为ELF的补语  <ul>\n<li>该符号是一个历史遗留的名称, 没有正式含义, 定义为”标准化的调试数据格式”, 被广泛使用.   <ul>\n<li>DWARF使用DIE(调试信息条目)的数据结构来表示每个变量, 类型, 过程, 具有标签,属性(键值对).  </li>\n</ul>\n</li>\n<li>DIE可以嵌套形成树结构.  <ul>\n<li>DIE属性可以引用树中任何位置的另外一个DIE  <ul>\n<li>例如: 表示变量的DIE有一个DW_AT_type条目，该条目指向描述变量类型的DIE  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>COFF 文件格式    </p>\n<ul>\n<li>Common Object File Format  通用对象文件格式  类似ELF a.out  </li>\n<li>COFF文件的出现主要是因为a.out无法充分支持共享库, 包括外部格式标识, 显式地址链接.  </li>\n<li>COFF的设计过于局限和不完整, 导致实际的实现必然违反COFF标准, 目前仍然使用的较为广泛的是windows的PE版本 </li>\n<li>COFF对a.out的主要改进是在目标文件中引入了多个命名节  不同的对象文件可能具有不同数量和类型的节  </li>\n<li>文件的第一个字节将被加载的虚拟地址称为映像基地址 文件的其余部分不一定要装入一个连续的块中 而是要装入不同的部分中  </li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Format name</th>\n<th>Operating system</th>\n<th>Filename extension</th>\n<th>Explicit processor declarations</th>\n<th>Arbitrary sections</th>\n<th>Metadata[a]</th>\n<th>Digital signature</th>\n<th>String table</th>\n<th>Symbol table</th>\n<th>64-bit</th>\n<th>Fat binaries</th>\n<th>Can contain icon</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>格式名</td>\n<td>操作系统</td>\n<td>文件名扩展</td>\n<td>显式处理器声明</td>\n<td>任意节</td>\n<td>元数据[a]</td>\n<td>数字签名</td>\n<td>字符串表</td>\n<td>符号表</td>\n<td>64位</td>\n<td>fat格式文件支持</td>\n<td>包含图标</td>\n</tr>\n<tr>\n<td>a.out</td>\n<td>Unix-like</td>\n<td>none</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n<td>Yes[1]</td>\n<td>Yes[1]</td>\n<td>Extension</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>COFF</td>\n<td>Unix-like</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Extension</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>XCOFF</td>\n<td>IBM AIX, BeOS, “classic” Mac OS</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes[2]</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>ELF</td>\n<td>Unix-like, OpenVMS, BeOS from R4 onwards, Haiku</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes[3]</td>\n<td>Yes</td>\n<td>Yes[4]</td>\n<td>Yes</td>\n<td>Extension[5]</td>\n<td>Extension[6]</td>\n</tr>\n<tr>\n<td>PE</td>\n<td>Windows, ReactOS, HX DOS Extender, BeOS (R3 only)</td>\n<td>.EXE</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes[10]</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h5><span id=\"其他词汇说明\">其他词汇说明</span></h5><ul>\n<li><p>ELF header 文件头   </p>\n<ul>\n<li>ELF文件的组成描述</li>\n<li>结构<ul>\n<li>版本信息等    </li>\n<li>ELF文件类型<ul>\n<li>ET_REL 可重定位文件 .o .a</li>\n<li>ET_DYN 可共享文件 .so  PIE版本的可执行文件   </li>\n<li>ET_EXEC 可执行文件   </li>\n<li>ET_CORE 核心转储  coredump</li>\n</ul>\n</li>\n<li>入口点地址  0x400510  </li>\n<li>ELF header大小  </li>\n<li>PROGRAM HEADERS大小和数量</li>\n<li>SECTION HEADERS大小和数量  </li>\n<li>Section header string table index 字符串表索引节头位置(.shstrtab) </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>section header SH 节头  </p>\n<ul>\n<li><p>.text section 里装载了可执行代码</p>\n</li>\n<li><p>.data section 里面装载了被初始化的数据</p>\n</li>\n<li><p>.bss section 里面装载了未被初始化或者初始化为0的数据  </p>\n<ul>\n<li>bss 不占据ELF文件的空间 因为没有内容只有空间大小和类型信息  </li>\n</ul>\n</li>\n<li><p>.commont 开发环境的时候使用的GCC版本信息   </p>\n</li>\n<li><p>.shstrtab 指的是section header string table 保存了各个section的名字   </p>\n</li>\n<li><p>.strtab 或者 .dynstr section 里面装载了字符串信息 字符串和符号的区别是 字符串是程序执行内容中, 符号是代码符号.  </p>\n</li>\n<li><p>.rodata 字符串常量  </p>\n</li>\n<li><p>.eh_frame 其内部存放了以DWARF格式保存的一些调试信息 格式与 .debug_frame 是很相似的（不完全相同）.  </p>\n</li>\n<li><p>.dynsym  动态库的符号表  </p>\n<ul>\n<li>动态加载需要的符号表(动态库)  </li>\n</ul>\n</li>\n<li><p>.symtab section 符号表(全量)   </p>\n<ul>\n<li>包括了.strtab里面定义的符号 每个符号对应的符号表是一个Elf64_Symbol结构体 除了包含.strtab外 符号表中还包含了一些section的符号表条目 </li>\n<li>Value 符号所在的section偏移, 比如代码段的相对偏移地址, 数据段的相对偏移地址    </li>\n<li>Size 大小,  如果是变量则是变量的size, 如果是函数则是指令的行数  </li>\n<li>Type 符号的类型 NOTYPE或者UND代表是外部符号, FUNC函数, OBJECT数据, SECTION 节 <ul>\n<li>如果是so/exe则还有bss data等字段    </li>\n</ul>\n</li>\n<li>Bind 绑定类型 LOCAL GLOBAL  </li>\n<li>vis  </li>\n<li>NDX</li>\n<li>NAME 符号名  </li>\n</ul>\n</li>\n<li><p>.rel 打头的 sections 里面装载了重定位条目   </p>\n<ul>\n<li>在最终二进制文件中 使用”符号的地址”在此目标文件中的”偏移量”处修补该值   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* .rel.text RELOCATION RECORDS FOR  .text 包含了代码段中引用的函数和全局变量的重定位条目 包括调用当前编译单元的\n  * Offset 偏移地址 代码段中要修改掉的地址  \n  * Type 类型 不启用PIC的一般是PC32 启用后如下\n    * PLT32 函数符号 外部或者内部  \n    * GOT PC RELX 全局变量符号  包括外部和内部  \n  * VALUE 符号名和加数  \n\n\n\n* .rela.eh_frame RELOCATION RECORDS FOR [.eh_frame  eh_frame 的重定位信息    \n  * 在编译成object file的过程中, 该section提供了当前编译单元所定义的函数符号以及符号所在代码段的偏移位置.  \n  * OFFSET 当前函数在代码段中的开始位置  \n  * TYPE   PC32 本地实现  \n  * VALUE  符号表中的类型名以及符号的Value位置   \n\n\n\n* .rel.plt (动态库或者EXE)节的每个表项对应了所有外部过程调用符号的重定位信息  \n  * 主要是 JUMP_SLOT 类型的重定位项  \n    * 重定位只需将符号地址填入被修正的内存即可\n  * 比如定义了一个函数test, 所有call test的地方都存在这个位置  \n* .rel.dyn section (动态库或者EXE)的每个表项对应了除了外部过程调用的符号以外的所有重定位对象(一般是数据)  \n  * 主要是 GLOB_DAT 类型的重定位项\n    * 重定位只需将符号地址填入被修正的内存即可\n  * 比如extern来自so文件的全局静态变量  \n  * 或者开启pic后自己的全局静态变量  \n\n* 类型  \n  * GOT Global Offset Table  全局偏移表  \n  * PC  program counter relative displacement  程序计数的相对偏移/ IP指令的操作数修改   \n  * PLT procedure linkage table  过程链接表\n  * R_386_GOT32：该重定位类型计算从全局偏移表（global offset table）的基址到符号所在的全局偏移表表项的距离，并且通知链接编辑器建立全局偏移表。（G+A-P）\n  * R_386_PLT32：该重定位类型计算符号的过程链接表表项地址，并且通知链接编辑器构建过程链接表。（L+A-P）\n  * R_386_COPY：链接编辑器创建此重定位类型是用于动态链接的。它的r_offset成员对应一个可写segment中的位置。符号表索引指定了一个在当前目标文件和共享目标文件中都存在的符号。在执行期间，动态链接器拷贝与共享目标的符号相关的数据到偏移指定的位置。（none）\n  * R_386_GLOB_DAT：用于给指定符号的地址设置一个全局偏移表表项。该特殊重定位类型确定符号和全局偏移表项之间的对应关系。（S）\n  * R_386_JMP_SLOT：链接编辑器创建此重定位类型是用于动态链接的，它的偏移给出了过程链接表表项的位置。动态链接器通过修改过程链接表表项，把控制权传递给指定符号的地址，参见第二章“过程链接表”一节。（S）\n  * R_386_RELATIVE：链接编辑器创建此重定位类型是用于动态链接的，它的偏移成员给出了共享目标中的一个位置，这个位置包含了一个表示相对地址的值。动态链接器通过把共享目标被加载的虚拟地址与相对地址相加，计算出对应的虚拟地址。此重定位类型的重定位表项必须把符号表索引置为0。（B+A）\n  * R_386_GOTOFF：此类型的重定位计算符号值和全局偏移表地址的差值，并且通知链接编辑器构建全局偏移表。（S+A-GOT）\n  * R_386_GOTPC：此类型类似于R_386_PC32。只是它在计算中使用全局偏移表的地址。这种类型的重定位引用的通常是_GLOBAL_OFFSET_TABLE_DE类型的符号，并且通知链接编辑器构建全局偏移表。（GOT+A-P）****</code></pre><ul>\n<li>这些条目给链接的时候需要和其他可重定位文件或者库的对应的section合并时提供了必要的信息<br>R_386_32/R_386_PC32/ R_386_RELATIVE,这三种类型的重定位目标都可以位于.text(代码段).<br>这样如果linker解决 了重定位的问题,那么这个.text里面的数据已经经过了修改,那么这个.text就不可能在多 个GNU/Linux运行的进程之间共享,相对于shared library来说这样对整个系统的RAM很浪费.<br>但是相应地相对于shared library有一个优点,那就是因为启动快,因为基本上动态连接 器不需要reslove什么符号,而且代码中R_386_32/R_386_RELATIVE方式的重定位目标已经被 修改成了绝对地址,相对于需要运行时全部做间接调用的shared library来说少了很多个指令周期.   </li>\n</ul>\n<ul>\n<li>program header PH 程序头<ul>\n<li>segment信息</li>\n</ul>\n</li>\n<li>base address             基地址       </li>\n<li>dynamic linker           动态连接器   </li>\n<li>dynamic linking          动态连接     </li>\n<li>global offset table      全局偏移量表 </li>\n<li>hash table               哈希表       </li>\n<li>initialization function  初始化函数   </li>\n<li>link editor              连接编辑器   </li>\n<li>object file              目标文件     </li>\n<li>procedure linkage table  函数连接表   </li>\n<li>program header           程序头       </li>\n<li>program header table     程序头表     </li>\n<li>program interpreter      程序解析器   </li>\n<li>relocation               重定位       </li>\n<li>shared object            共享目标     </li>\n<li>section                  节           </li>\n<li>section header           节头         </li>\n<li>section header table     节头表       </li>\n<li>segment                  段           </li>\n<li>string table             字符串表     </li>\n<li>symbol table             符号表       </li>\n<li>termination function     终止函数</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#elf文件类型和描述\">ELF文件类型和描述</a><ul>\n<li><a href=\"#文件类型\">文件类型</a></li>\n<li><a href=\"#链接器视图编译器-汇编器-链接器\">链接器视图(编译器 汇编器 链接器)</a></li>\n<li><a href=\"#加载器视图-系统加载器\">加载器视图 (系统加载器)</a></li>\n<li><a href=\"#基本测试命令\">基本测试命令</a></li>\n<li><a href=\"#基础术语知识\">基础术语知识</a><ul>\n<li><a href=\"#目标文件格式的比较和说明\">目标文件格式的比较和说明</a></li>\n<li><a href=\"#其他词汇说明\">其他词汇说明</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3 id=\"ELF文件类型和描述\"><a href=\"#ELF文件类型和描述\" class=\"headerlink\" title=\"ELF文件类型和描述\"></a>ELF文件类型和描述</h3><hr>\n<p>(Executable and Linking Format) (可执行可链接格式) 文件    </p>\n<h4 id=\"文件类型\"><a href=\"#文件类型\" class=\"headerlink\" title=\"文件类型\"></a>文件类型</h4><ul>\n<li><p>可重定位文件  (relocatable file)  </p>\n<ul>\n<li>由源文件编译而成但是还没有链接成可执行文件, 扩展名通常为.o  通常’目标文件(object file)’  用于与其他目标文件进行链接成可执行文件或者动态链接库.  </li>\n<li>可重定位是指 对外部符号的访问会进行标记, 在链接时候会重写这部分访问(操作数)重定位到真正的位置上.  </li>\n<li>重定位因为存在该修补 则有以下作用:  <ul>\n<li>重定位在执行时是直接使用真实位置 没有其他过程 性能非常好   </li>\n<li>链接共享库的时候如果需要确定地址和修补, 则还需要保证多个共享库的地址不可以重叠, 在32位下这种保证会很容易用尽虚拟(地址)空间  </li>\n<li>重定位需要修改代码段, 从而破坏’代码段’只读属性, 如果在链接阶段无法完成重定位, 则只能放在加载过程完成, 这样会导致’无法实现真正的代码共享’ .  比如所有进程使用的相同so文件在内存中实际上只有一份就是依赖于so的代码段只读且一致这个原则上的.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>共享目标文件(shared object file)，即动态连接库文件 它在以下两种情况下被使用</p>\n<ul>\n<li>在链接过程中与其它动态链接库或可重定位文件一起构建新的目标文件</li>\n<li>在可执行文件被加载的过程中 被动态链接到新的进程中 成为运行代码的一部分  </li>\n</ul>\n</li>\n<li><p>可执行文件(executable file)，经过连接的，可以执行的程序文件。  </p>\n</li>\n<li><p>coredump文件 核心转储  </p>\n</li>\n</ul>","more":"<h4 id=\"链接器视图-编译器-汇编器-链接器\"><a href=\"#链接器视图-编译器-汇编器-链接器\" class=\"headerlink\" title=\"链接器视图(编译器 汇编器 链接器)\"></a>链接器视图(编译器 汇编器 链接器)</h4><p>链接器关心的内容<br>| LINKING VIEW<br>| -<br>| ELF HEADER<br>| PROGRAM HEADER TABLE OPTIONAL<br>| SECTION 1  .text<br>| SECTION 2  .data<br>| SECTION n …<br>| SECTION HEADER TABLE  </p>\n<h4 id=\"加载器视图-系统加载器\"><a href=\"#加载器视图-系统加载器\" class=\"headerlink\" title=\"加载器视图 (系统加载器)\"></a>加载器视图 (系统加载器)</h4><p>加载器关心的内容<br>| EXECUTION VIEW<br>| -<br>| ELF HEADER<br>| PROGRAM HEADER TABLE<br>| SEGMENT 1<br>| SEGMENT 2<br>| SEGMENT N …<br>| SECTION HEADER TABLE OPTIONAL </p>\n<h4 id=\"基本测试命令\"><a href=\"#基本测试命令\" class=\"headerlink\" title=\"基本测试命令\"></a>基本测试命令</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldd - print shared library dependencies  </span><br><span class=\"line\">readelf -a 查看elf文件</span><br><span class=\"line\">objdump -S 查看汇编码</span><br><span class=\"line\"></span><br><span class=\"line\">gcc -g -c lib.cpp  编译目标文件  </span><br><span class=\"line\">gcc -g -c -fpic lib.cpp  启用地址无关代码选项来编译目标文件   </span><br><span class=\"line\">ar -cr liblib.a  lib.o  打包目标文件到静态库   </span><br><span class=\"line\">g++ -g -fPIC -shared so.cpp -o so.so  启用地址无关代码的链接选项和编译选项来编译共享库   </span><br><span class=\"line\">g++ -g -fpie -fPIE -pie -o main  lib.o libso.so </span><br><span class=\"line\"></span><br><span class=\"line\">export LD_LIBRARY_PATH&#x3D;&quot;.&#x2F;&quot; 设置临时的共享库搜索路径  </span><br><span class=\"line\"></span><br><span class=\"line\">PIC和PIE都用于编译地址无关代码, PIE假定了最终链接的目标是可执行文件.  </span><br><span class=\"line\">pie是链接选项 用于生成DYN类型的可执行文件.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础术语知识\"><a href=\"#基础术语知识\" class=\"headerlink\" title=\"基础术语知识\"></a>基础术语知识</h4><h5 id=\"目标文件格式的比较和说明\"><a href=\"#目标文件格式的比较和说明\" class=\"headerlink\" title=\"目标文件格式的比较和说明\"></a>目标文件格式的比较和说明</h5><ul>\n<li><p>a.out 文件格式  </p>\n<ul>\n<li>旧版unix like系统(包括linux1.2以及之前的版本)中用于可执行文件 目标代码 共享库等的文件格式, 后续基本被ELF取代   </li>\n<li>后续习惯性把a.out作为可执行文件的默认输出名, 即使格式不是a.out   </li>\n<li>stabs 是一种调试数据格式, 用来存储程序信息供符号级/源代码级的调试器用, 因该信息存储在符号表的一个特殊条目中因此得名为刺 (条目 stabs)  该格式除了完成对a.out的调试信息支持, 还用于COFF ELF的变体中 .   </li>\n</ul>\n</li>\n<li><p>ELF 文件格式  </p>\n<ul>\n<li>Executable and Linking Format 可执行可链接的文件格式 </li>\n<li>原名 Extensible Linking Format  可扩展可链接的文件格式</li>\n<li>DWARF 标准化的调试数据格式 为ELF的补语  <ul>\n<li>该符号是一个历史遗留的名称, 没有正式含义, 定义为”标准化的调试数据格式”, 被广泛使用.   <ul>\n<li>DWARF使用DIE(调试信息条目)的数据结构来表示每个变量, 类型, 过程, 具有标签,属性(键值对).  </li>\n</ul>\n</li>\n<li>DIE可以嵌套形成树结构.  <ul>\n<li>DIE属性可以引用树中任何位置的另外一个DIE  <ul>\n<li>例如: 表示变量的DIE有一个DW_AT_type条目，该条目指向描述变量类型的DIE  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>COFF 文件格式    </p>\n<ul>\n<li>Common Object File Format  通用对象文件格式  类似ELF a.out  </li>\n<li>COFF文件的出现主要是因为a.out无法充分支持共享库, 包括外部格式标识, 显式地址链接.  </li>\n<li>COFF的设计过于局限和不完整, 导致实际的实现必然违反COFF标准, 目前仍然使用的较为广泛的是windows的PE版本 </li>\n<li>COFF对a.out的主要改进是在目标文件中引入了多个命名节  不同的对象文件可能具有不同数量和类型的节  </li>\n<li>文件的第一个字节将被加载的虚拟地址称为映像基地址 文件的其余部分不一定要装入一个连续的块中 而是要装入不同的部分中  </li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Format name</th>\n<th>Operating system</th>\n<th>Filename extension</th>\n<th>Explicit processor declarations</th>\n<th>Arbitrary sections</th>\n<th>Metadata[a]</th>\n<th>Digital signature</th>\n<th>String table</th>\n<th>Symbol table</th>\n<th>64-bit</th>\n<th>Fat binaries</th>\n<th>Can contain icon</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>格式名</td>\n<td>操作系统</td>\n<td>文件名扩展</td>\n<td>显式处理器声明</td>\n<td>任意节</td>\n<td>元数据[a]</td>\n<td>数字签名</td>\n<td>字符串表</td>\n<td>符号表</td>\n<td>64位</td>\n<td>fat格式文件支持</td>\n<td>包含图标</td>\n</tr>\n<tr>\n<td>a.out</td>\n<td>Unix-like</td>\n<td>none</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n<td>Yes[1]</td>\n<td>Yes[1]</td>\n<td>Extension</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>COFF</td>\n<td>Unix-like</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Extension</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>XCOFF</td>\n<td>IBM AIX, BeOS, “classic” Mac OS</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes[2]</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>ELF</td>\n<td>Unix-like, OpenVMS, BeOS from R4 onwards, Haiku</td>\n<td>none</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes[3]</td>\n<td>Yes</td>\n<td>Yes[4]</td>\n<td>Yes</td>\n<td>Extension[5]</td>\n<td>Extension[6]</td>\n</tr>\n<tr>\n<td>PE</td>\n<td>Windows, ReactOS, HX DOS Extender, BeOS (R3 only)</td>\n<td>.EXE</td>\n<td>Yes by file</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes[10]</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h5 id=\"其他词汇说明\"><a href=\"#其他词汇说明\" class=\"headerlink\" title=\"其他词汇说明\"></a>其他词汇说明</h5><ul>\n<li><p>ELF header 文件头   </p>\n<ul>\n<li>ELF文件的组成描述</li>\n<li>结构<ul>\n<li>版本信息等    </li>\n<li>ELF文件类型<ul>\n<li>ET_REL 可重定位文件 .o .a</li>\n<li>ET_DYN 可共享文件 .so  PIE版本的可执行文件   </li>\n<li>ET_EXEC 可执行文件   </li>\n<li>ET_CORE 核心转储  coredump</li>\n</ul>\n</li>\n<li>入口点地址  0x400510  </li>\n<li>ELF header大小  </li>\n<li>PROGRAM HEADERS大小和数量</li>\n<li>SECTION HEADERS大小和数量  </li>\n<li>Section header string table index 字符串表索引节头位置(.shstrtab) </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>section header SH 节头  </p>\n<ul>\n<li><p>.text section 里装载了可执行代码</p>\n</li>\n<li><p>.data section 里面装载了被初始化的数据</p>\n</li>\n<li><p>.bss section 里面装载了未被初始化或者初始化为0的数据  </p>\n<ul>\n<li>bss 不占据ELF文件的空间 因为没有内容只有空间大小和类型信息  </li>\n</ul>\n</li>\n<li><p>.commont 开发环境的时候使用的GCC版本信息   </p>\n</li>\n<li><p>.shstrtab 指的是section header string table 保存了各个section的名字   </p>\n</li>\n<li><p>.strtab 或者 .dynstr section 里面装载了字符串信息 字符串和符号的区别是 字符串是程序执行内容中, 符号是代码符号.  </p>\n</li>\n<li><p>.rodata 字符串常量  </p>\n</li>\n<li><p>.eh_frame 其内部存放了以DWARF格式保存的一些调试信息 格式与 .debug_frame 是很相似的（不完全相同）.  </p>\n</li>\n<li><p>.dynsym  动态库的符号表  </p>\n<ul>\n<li>动态加载需要的符号表(动态库)  </li>\n</ul>\n</li>\n<li><p>.symtab section 符号表(全量)   </p>\n<ul>\n<li>包括了.strtab里面定义的符号 每个符号对应的符号表是一个Elf64_Symbol结构体 除了包含.strtab外 符号表中还包含了一些section的符号表条目 </li>\n<li>Value 符号所在的section偏移, 比如代码段的相对偏移地址, 数据段的相对偏移地址    </li>\n<li>Size 大小,  如果是变量则是变量的size, 如果是函数则是指令的行数  </li>\n<li>Type 符号的类型 NOTYPE或者UND代表是外部符号, FUNC函数, OBJECT数据, SECTION 节 <ul>\n<li>如果是so/exe则还有bss data等字段    </li>\n</ul>\n</li>\n<li>Bind 绑定类型 LOCAL GLOBAL  </li>\n<li>vis  </li>\n<li>NDX</li>\n<li>NAME 符号名  </li>\n</ul>\n</li>\n<li><p>.rel 打头的 sections 里面装载了重定位条目   </p>\n<ul>\n<li>在最终二进制文件中 使用”符号的地址”在此目标文件中的”偏移量”处修补该值   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>* .rel.text RELOCATION RECORDS FOR  .text 包含了代码段中引用的函数和全局变量的重定位条目 包括调用当前编译单元的\n  * Offset 偏移地址 代码段中要修改掉的地址  \n  * Type 类型 不启用PIC的一般是PC32 启用后如下\n    * PLT32 函数符号 外部或者内部  \n    * GOT PC RELX 全局变量符号  包括外部和内部  \n  * VALUE 符号名和加数  \n\n\n\n* .rela.eh_frame RELOCATION RECORDS FOR [.eh_frame  eh_frame 的重定位信息    \n  * 在编译成object file的过程中, 该section提供了当前编译单元所定义的函数符号以及符号所在代码段的偏移位置.  \n  * OFFSET 当前函数在代码段中的开始位置  \n  * TYPE   PC32 本地实现  \n  * VALUE  符号表中的类型名以及符号的Value位置   \n\n\n\n* .rel.plt (动态库或者EXE)节的每个表项对应了所有外部过程调用符号的重定位信息  \n  * 主要是 JUMP_SLOT 类型的重定位项  \n    * 重定位只需将符号地址填入被修正的内存即可\n  * 比如定义了一个函数test, 所有call test的地方都存在这个位置  \n* .rel.dyn section (动态库或者EXE)的每个表项对应了除了外部过程调用的符号以外的所有重定位对象(一般是数据)  \n  * 主要是 GLOB_DAT 类型的重定位项\n    * 重定位只需将符号地址填入被修正的内存即可\n  * 比如extern来自so文件的全局静态变量  \n  * 或者开启pic后自己的全局静态变量  \n\n* 类型  \n  * GOT Global Offset Table  全局偏移表  \n  * PC  program counter relative displacement  程序计数的相对偏移/ IP指令的操作数修改   \n  * PLT procedure linkage table  过程链接表\n  * R_386_GOT32：该重定位类型计算从全局偏移表（global offset table）的基址到符号所在的全局偏移表表项的距离，并且通知链接编辑器建立全局偏移表。（G+A-P）\n  * R_386_PLT32：该重定位类型计算符号的过程链接表表项地址，并且通知链接编辑器构建过程链接表。（L+A-P）\n  * R_386_COPY：链接编辑器创建此重定位类型是用于动态链接的。它的r_offset成员对应一个可写segment中的位置。符号表索引指定了一个在当前目标文件和共享目标文件中都存在的符号。在执行期间，动态链接器拷贝与共享目标的符号相关的数据到偏移指定的位置。（none）\n  * R_386_GLOB_DAT：用于给指定符号的地址设置一个全局偏移表表项。该特殊重定位类型确定符号和全局偏移表项之间的对应关系。（S）\n  * R_386_JMP_SLOT：链接编辑器创建此重定位类型是用于动态链接的，它的偏移给出了过程链接表表项的位置。动态链接器通过修改过程链接表表项，把控制权传递给指定符号的地址，参见第二章“过程链接表”一节。（S）\n  * R_386_RELATIVE：链接编辑器创建此重定位类型是用于动态链接的，它的偏移成员给出了共享目标中的一个位置，这个位置包含了一个表示相对地址的值。动态链接器通过把共享目标被加载的虚拟地址与相对地址相加，计算出对应的虚拟地址。此重定位类型的重定位表项必须把符号表索引置为0。（B+A）\n  * R_386_GOTOFF：此类型的重定位计算符号值和全局偏移表地址的差值，并且通知链接编辑器构建全局偏移表。（S+A-GOT）\n  * R_386_GOTPC：此类型类似于R_386_PC32。只是它在计算中使用全局偏移表的地址。这种类型的重定位引用的通常是_GLOBAL_OFFSET_TABLE_DE类型的符号，并且通知链接编辑器构建全局偏移表。（GOT+A-P）****</code></pre><ul>\n<li>这些条目给链接的时候需要和其他可重定位文件或者库的对应的section合并时提供了必要的信息<br>R_386_32/R_386_PC32/ R_386_RELATIVE,这三种类型的重定位目标都可以位于.text(代码段).<br>这样如果linker解决 了重定位的问题,那么这个.text里面的数据已经经过了修改,那么这个.text就不可能在多 个GNU/Linux运行的进程之间共享,相对于shared library来说这样对整个系统的RAM很浪费.<br>但是相应地相对于shared library有一个优点,那就是因为启动快,因为基本上动态连接 器不需要reslove什么符号,而且代码中R_386_32/R_386_RELATIVE方式的重定位目标已经被 修改成了绝对地址,相对于需要运行时全部做间接调用的shared library来说少了很多个指令周期.   </li>\n</ul>\n<ul>\n<li>program header PH 程序头<ul>\n<li>segment信息</li>\n</ul>\n</li>\n<li>base address             基地址       </li>\n<li>dynamic linker           动态连接器   </li>\n<li>dynamic linking          动态连接     </li>\n<li>global offset table      全局偏移量表 </li>\n<li>hash table               哈希表       </li>\n<li>initialization function  初始化函数   </li>\n<li>link editor              连接编辑器   </li>\n<li>object file              目标文件     </li>\n<li>procedure linkage table  函数连接表   </li>\n<li>program header           程序头       </li>\n<li>program header table     程序头表     </li>\n<li>program interpreter      程序解析器   </li>\n<li>relocation               重定位       </li>\n<li>shared object            共享目标     </li>\n<li>section                  节           </li>\n<li>section header           节头         </li>\n<li>section header table     节头表       </li>\n<li>segment                  段           </li>\n<li>string table             字符串表     </li>\n<li>symbol table             符号表       </li>\n<li>termination function     终止函数</li>\n</ul>"},{"title":"linux多线程","date":"2019-11-03T16:00:00.000Z","author":"yawei.zhang","_content":"\n### ..1. 多线程    \n\n1. 老的LinuxThreads (管理线程机制) 设计中线程栈的位置在 HEAP之下 的高位 导致无法可信的设置heap大小  \n2.  新的NPTL解决了老的线程机制中的管理单点问题 信号问题 内存布局问题等 顺便实现了PTHREAD_PROCESS_SHARED \n3.  pthread_attr_setstackaddr可指定线程栈的地址(mmap)   \n4.  pthread的创建和销毁 \n    1.  创建   \n        1. 使用用户提供的stack创建线程并加入__stack_user \n        2. nptl 先尝试获取stack_cache中tid为0大小合适的空闲stack, 如果失败则从mmap分配新的stack, 然后加入stack_used  \n        3. tid list等信息存储在stack内存的高地址端的头部  \n    2.  start_thread执行完用户函数后会进行数据回收和清理(但无法销毁自身)   \n        1. 如果该线程非detach 则等待join  (没有join则会一直保留)  \n        2. 如果该线程被detach 则执行__free_tcb   \n            1. 如果是用户分配的stack 从stack_user链表中移除并清理tls 线程局部存储  \n            2. 如果是自动分配的stack 从stack_used链表中移除, 然后加入stack_cache中, 清理tls线程局部存储(此时tid不为0)   \n            3. 检查当前stack_cache的总大小, 超过阈值则遍历一次stack_cache并释放掉(tid为0)空闲的stack, 如果小于阈值则提前break该次遍历   \n    3. 内核在该线程结束后 会对该线程的tid清零(创建线程时CLONE_CHILD_CLEARTID参数会让内存清除某标记内存), 此后该资源可以安全销毁.        \n5.  brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   \n<!-- more --> \n\n\n\n### Linux 发行版所使用的线程模型、glibc 版本和内核版本    \n\ncat /proc/version                查看内核版本   \ngetconf GNU_LIBPTHREAD_VERSION   查看线程模型\n| 线程实现          | C 库     ---------            | 发行版                           | 内核   |\n|-------------------|-------------------------------|----------------------------------|--------|\n| LinuxThreads 0.7  | 0.71 (for libc5)  libc 5.x    | Red Hat 4.2                      |\n| LinuxThreads 0.7  | 0.71 (for glibc 2) glibc 2.0. | Red Hat 5.x                      |\n| LinuxThreads 0.8  | glibc 2.1.1                   | Red Hat 6.0                      |\n| LinuxThreads 0.8  | glibc 2.1.2                   | Red Hat 6.1 and 6.2              |\n| LinuxThreads 0.9  |                               | Red Hat 7.2                      | 2.4.7  |\n| LinuxThreads 0.9  | glibc 2.2.4                   | Red Hat 2.1 AS                   | 2.4.9  |\n| LinuxThreads 0.10 | glibc 2.2.93                  | Red Hat 8.0                      | 2.4.18 |\n| NPTL 0.6          | glibc 2.3                     | Red Hat 9.0                      | 2.4.20 |\n| NPTL 0.61         | glibc 2.3.2                   | Red Hat 3.0 EL                   | 2.4.21 |\n| NPTL 2.3.4        | glibc 2.3.4                   | Red Hat 4.0                      | 2.6.9  |\n| LinuxThreads 0.9  | glibc 2.2                     | SUSE Linux Enterprise Server 7.1 | 2.4.18 |\n| LinuxThreads 0.9  | glibc 2.2.5                   | SUSE Linux Enterprise Server 8   | 2.4.21 |\n| LinuxThreads 0.9  | glibc 2.2.5                   | United Linux                     | 2.4.21 |\n| NPTL 2.3.5        | glibc 2.3.3                   | SUSE Linux Enterprise Server 9   | 2.6.5  |","source":"_posts/2019-11-04-kernel-thread.md","raw":"---\ntitle: linux多线程\ndate: 2019-11-04\ncategories: develop \nauthor: yawei.zhang \n---\n\n### ..1. 多线程    \n\n1. 老的LinuxThreads (管理线程机制) 设计中线程栈的位置在 HEAP之下 的高位 导致无法可信的设置heap大小  \n2.  新的NPTL解决了老的线程机制中的管理单点问题 信号问题 内存布局问题等 顺便实现了PTHREAD_PROCESS_SHARED \n3.  pthread_attr_setstackaddr可指定线程栈的地址(mmap)   \n4.  pthread的创建和销毁 \n    1.  创建   \n        1. 使用用户提供的stack创建线程并加入__stack_user \n        2. nptl 先尝试获取stack_cache中tid为0大小合适的空闲stack, 如果失败则从mmap分配新的stack, 然后加入stack_used  \n        3. tid list等信息存储在stack内存的高地址端的头部  \n    2.  start_thread执行完用户函数后会进行数据回收和清理(但无法销毁自身)   \n        1. 如果该线程非detach 则等待join  (没有join则会一直保留)  \n        2. 如果该线程被detach 则执行__free_tcb   \n            1. 如果是用户分配的stack 从stack_user链表中移除并清理tls 线程局部存储  \n            2. 如果是自动分配的stack 从stack_used链表中移除, 然后加入stack_cache中, 清理tls线程局部存储(此时tid不为0)   \n            3. 检查当前stack_cache的总大小, 超过阈值则遍历一次stack_cache并释放掉(tid为0)空闲的stack, 如果小于阈值则提前break该次遍历   \n    3. 内核在该线程结束后 会对该线程的tid清零(创建线程时CLONE_CHILD_CLEARTID参数会让内存清除某标记内存), 此后该资源可以安全销毁.        \n5.  brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   \n<!-- more --> \n\n\n\n### Linux 发行版所使用的线程模型、glibc 版本和内核版本    \n\ncat /proc/version                查看内核版本   \ngetconf GNU_LIBPTHREAD_VERSION   查看线程模型\n| 线程实现          | C 库     ---------            | 发行版                           | 内核   |\n|-------------------|-------------------------------|----------------------------------|--------|\n| LinuxThreads 0.7  | 0.71 (for libc5)  libc 5.x    | Red Hat 4.2                      |\n| LinuxThreads 0.7  | 0.71 (for glibc 2) glibc 2.0. | Red Hat 5.x                      |\n| LinuxThreads 0.8  | glibc 2.1.1                   | Red Hat 6.0                      |\n| LinuxThreads 0.8  | glibc 2.1.2                   | Red Hat 6.1 and 6.2              |\n| LinuxThreads 0.9  |                               | Red Hat 7.2                      | 2.4.7  |\n| LinuxThreads 0.9  | glibc 2.2.4                   | Red Hat 2.1 AS                   | 2.4.9  |\n| LinuxThreads 0.10 | glibc 2.2.93                  | Red Hat 8.0                      | 2.4.18 |\n| NPTL 0.6          | glibc 2.3                     | Red Hat 9.0                      | 2.4.20 |\n| NPTL 0.61         | glibc 2.3.2                   | Red Hat 3.0 EL                   | 2.4.21 |\n| NPTL 2.3.4        | glibc 2.3.4                   | Red Hat 4.0                      | 2.6.9  |\n| LinuxThreads 0.9  | glibc 2.2                     | SUSE Linux Enterprise Server 7.1 | 2.4.18 |\n| LinuxThreads 0.9  | glibc 2.2.5                   | SUSE Linux Enterprise Server 8   | 2.4.21 |\n| LinuxThreads 0.9  | glibc 2.2.5                   | United Linux                     | 2.4.21 |\n| NPTL 2.3.5        | glibc 2.3.3                   | SUSE Linux Enterprise Server 9   | 2.6.5  |","slug":"2019-11-04-kernel-thread","published":1,"updated":"2019-12-27T09:26:39.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeiy000v7w5he4pgepkb","content":"<h3><span id=\"1-多线程\">..1. 多线程</span></h3><ol>\n<li>老的LinuxThreads (管理线程机制) 设计中线程栈的位置在 HEAP之下 的高位 导致无法可信的设置heap大小  </li>\n<li>新的NPTL解决了老的线程机制中的管理单点问题 信号问题 内存布局问题等 顺便实现了PTHREAD_PROCESS_SHARED </li>\n<li>pthread_attr_setstackaddr可指定线程栈的地址(mmap)   </li>\n<li>pthread的创建和销毁 <ol>\n<li>创建   <ol>\n<li>使用用户提供的stack创建线程并加入__stack_user </li>\n<li>nptl 先尝试获取stack_cache中tid为0大小合适的空闲stack, 如果失败则从mmap分配新的stack, 然后加入stack_used  </li>\n<li>tid list等信息存储在stack内存的高地址端的头部  </li>\n</ol>\n</li>\n<li>start_thread执行完用户函数后会进行数据回收和清理(但无法销毁自身)   <ol>\n<li>如果该线程非detach 则等待join  (没有join则会一直保留)  </li>\n<li>如果该线程被detach 则执行__free_tcb   <ol>\n<li>如果是用户分配的stack 从stack_user链表中移除并清理tls 线程局部存储  </li>\n<li>如果是自动分配的stack 从stack_used链表中移除, 然后加入stack_cache中, 清理tls线程局部存储(此时tid不为0)   </li>\n<li>检查当前stack_cache的总大小, 超过阈值则遍历一次stack_cache并释放掉(tid为0)空闲的stack, 如果小于阈值则提前break该次遍历   </li>\n</ol>\n</li>\n</ol>\n</li>\n<li>内核在该线程结束后 会对该线程的tid清零(创建线程时CLONE_CHILD_CLEARTID参数会让内存清除某标记内存), 此后该资源可以安全销毁.        </li>\n</ol>\n</li>\n<li>brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk   <a id=\"more\"></a> \n\n\n\n</li>\n</ol>\n<h3><span id=\"linux-发行版所使用的线程模型-glibc-版本和内核版本\">Linux 发行版所使用的线程模型、glibc 版本和内核版本</span></h3><p>cat /proc/version                查看内核版本<br>getconf GNU_LIBPTHREAD_VERSION   查看线程模型<br>| 线程实现          | C 库     ———            | 发行版                           | 内核   |<br>|——————-|——————————-|———————————-|——–|<br>| LinuxThreads 0.7  | 0.71 (for libc5)  libc 5.x    | Red Hat 4.2                      |<br>| LinuxThreads 0.7  | 0.71 (for glibc 2) glibc 2.0. | Red Hat 5.x                      |<br>| LinuxThreads 0.8  | glibc 2.1.1                   | Red Hat 6.0                      |<br>| LinuxThreads 0.8  | glibc 2.1.2                   | Red Hat 6.1 and 6.2              |<br>| LinuxThreads 0.9  |                               | Red Hat 7.2                      | 2.4.7  |<br>| LinuxThreads 0.9  | glibc 2.2.4                   | Red Hat 2.1 AS                   | 2.4.9  |<br>| LinuxThreads 0.10 | glibc 2.2.93                  | Red Hat 8.0                      | 2.4.18 |<br>| NPTL 0.6          | glibc 2.3                     | Red Hat 9.0                      | 2.4.20 |<br>| NPTL 0.61         | glibc 2.3.2                   | Red Hat 3.0 EL                   | 2.4.21 |<br>| NPTL 2.3.4        | glibc 2.3.4                   | Red Hat 4.0                      | 2.6.9  |<br>| LinuxThreads 0.9  | glibc 2.2                     | SUSE Linux Enterprise Server 7.1 | 2.4.18 |<br>| LinuxThreads 0.9  | glibc 2.2.5                   | SUSE Linux Enterprise Server 8   | 2.4.21 |<br>| LinuxThreads 0.9  | glibc 2.2.5                   | United Linux                     | 2.4.21 |<br>| NPTL 2.3.5        | glibc 2.3.3                   | SUSE Linux Enterprise Server 9   | 2.6.5  |</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-多线程\"><a href=\"#1-多线程\" class=\"headerlink\" title=\"..1. 多线程\"></a>..1. 多线程</h3><ol>\n<li>老的LinuxThreads (管理线程机制) 设计中线程栈的位置在 HEAP之下 的高位 导致无法可信的设置heap大小  </li>\n<li>新的NPTL解决了老的线程机制中的管理单点问题 信号问题 内存布局问题等 顺便实现了PTHREAD_PROCESS_SHARED </li>\n<li>pthread_attr_setstackaddr可指定线程栈的地址(mmap)   </li>\n<li>pthread的创建和销毁 <ol>\n<li>创建   <ol>\n<li>使用用户提供的stack创建线程并加入__stack_user </li>\n<li>nptl 先尝试获取stack_cache中tid为0大小合适的空闲stack, 如果失败则从mmap分配新的stack, 然后加入stack_used  </li>\n<li>tid list等信息存储在stack内存的高地址端的头部  </li>\n</ol>\n</li>\n<li>start_thread执行完用户函数后会进行数据回收和清理(但无法销毁自身)   <ol>\n<li>如果该线程非detach 则等待join  (没有join则会一直保留)  </li>\n<li>如果该线程被detach 则执行__free_tcb   <ol>\n<li>如果是用户分配的stack 从stack_user链表中移除并清理tls 线程局部存储  </li>\n<li>如果是自动分配的stack 从stack_used链表中移除, 然后加入stack_cache中, 清理tls线程局部存储(此时tid不为0)   </li>\n<li>检查当前stack_cache的总大小, 超过阈值则遍历一次stack_cache并释放掉(tid为0)空闲的stack, 如果小于阈值则提前break该次遍历   </li>\n</ol>\n</li>\n</ol>\n</li>\n<li>内核在该线程结束后 会对该线程的tid清零(创建线程时CLONE_CHILD_CLEARTID参数会让内存清除某标记内存), 此后该资源可以安全销毁.        </li>\n</ol>\n</li>\n<li>brk和mmap的分配由glibc确定 默认规则是小于M_MMAP_THRESHOLD宏走brk  但是新系统的算法可能会让大于这个参数的临时分配也走brk","more":"</li>\n</ol>\n<h3 id=\"Linux-发行版所使用的线程模型、glibc-版本和内核版本\"><a href=\"#Linux-发行版所使用的线程模型、glibc-版本和内核版本\" class=\"headerlink\" title=\"Linux 发行版所使用的线程模型、glibc 版本和内核版本\"></a>Linux 发行版所使用的线程模型、glibc 版本和内核版本</h3><p>cat /proc/version                查看内核版本<br>getconf GNU_LIBPTHREAD_VERSION   查看线程模型<br>| 线程实现          | C 库     ———            | 发行版                           | 内核   |<br>|——————-|——————————-|———————————-|——–|<br>| LinuxThreads 0.7  | 0.71 (for libc5)  libc 5.x    | Red Hat 4.2                      |<br>| LinuxThreads 0.7  | 0.71 (for glibc 2) glibc 2.0. | Red Hat 5.x                      |<br>| LinuxThreads 0.8  | glibc 2.1.1                   | Red Hat 6.0                      |<br>| LinuxThreads 0.8  | glibc 2.1.2                   | Red Hat 6.1 and 6.2              |<br>| LinuxThreads 0.9  |                               | Red Hat 7.2                      | 2.4.7  |<br>| LinuxThreads 0.9  | glibc 2.2.4                   | Red Hat 2.1 AS                   | 2.4.9  |<br>| LinuxThreads 0.10 | glibc 2.2.93                  | Red Hat 8.0                      | 2.4.18 |<br>| NPTL 0.6          | glibc 2.3                     | Red Hat 9.0                      | 2.4.20 |<br>| NPTL 0.61         | glibc 2.3.2                   | Red Hat 3.0 EL                   | 2.4.21 |<br>| NPTL 2.3.4        | glibc 2.3.4                   | Red Hat 4.0                      | 2.6.9  |<br>| LinuxThreads 0.9  | glibc 2.2                     | SUSE Linux Enterprise Server 7.1 | 2.4.18 |<br>| LinuxThreads 0.9  | glibc 2.2.5                   | SUSE Linux Enterprise Server 8   | 2.4.21 |<br>| LinuxThreads 0.9  | glibc 2.2.5                   | United Linux                     | 2.4.21 |<br>| NPTL 2.3.5        | glibc 2.3.3                   | SUSE Linux Enterprise Server 9   | 2.6.5  |</p>"},{"title":"linux快速排查问题的命令","date":"2019-11-04T16:00:00.000Z","author":"yawei.zhang","_content":"### 全局分析和统计    \n* top命令   \n  * free 查看内存使用信息  \n  * vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  \n  * iostat -m -x [时间] [次数]   io读写详细信息\n\n* sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   \n  * sar -A 所有  \n  * sar -u CPU  \n  * sar -q 负载\n  * sar -r 内存\n  * CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看\n  * 内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看\n  * I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看\n\n* df 查看当前硬盘存储\n  * du -h  --max-depth=1 [./]   统计当前目录树下的文件大小  \n\n* IPC资源查询   \n  * ipcs -m 查看共享内存资源  \n  * ipcsrm -M [shmkey]  删除共享内存资源  \n  * ipcsrm -m [shmid]    删除shmid标识的共享内存资源  \n\n* ulimit -a   配置位置 /etc/security/limits.conf  \n  * coredump文件的大小\n  * 线程栈的大小  \n  * 单进程最大设备数\n    * 单进程最大设备数的硬性限制在/proc/sys/fs/nr_open 中配置  \n    * 系统配置的最大设备数可查看/proc/sys/fs/file-max 中配置  \n    * 系统配置的最大设备数修改/etc/sysctl.conf |  fs.file-max = 1000000\n\n* 全局线程总数 \n  * 查看位置 /proc/sys/kernel/threads-max  \n  \n* 单个进程最大线程数 PTHREAD_THREADS_MAX  新的NPTL实现中不存在该限制   \n  * 查看位置 /usr/include/bits/local_lim.h \n  * 查看位置 /usr/include/x86_64-linux-gnu/bits/local_lim.h\n  \n* whereis   查看命令所在位置  \n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* ulimit -s 栈大小  \n\n<!-- more --> \n### 进程分析和统计   \n\n* pstack [pid]  查看进程栈  \n\n* gstack [pid]  同pstack 可打印出每个线程的堆栈    \n\n* gcore [pid1 pid2 ...]  dump core而不杀死进程   \n\n* strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   \n  \n* strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    \n\n\n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* 内存布局的实际地址和实际大小等查询  内存泄露可快速判定\n  * cat /proc/pid/maps \n  * pmap\n\n### 系统   \nuname -a  系统版本  \ncat /proc/version  内核版本  \ngetconf GNU_LIBPTHREAD_VERSION   查看线程模型  \n\n### 调试\n\n* readelf  \n  * 可重定位的对象文件(Relocatable file) .o文件   \n  * 可执行的对象文件(Executable file)  \n  * 可被共享的对象文件(Shared object file)  \n  * readelf -a  [elf_file] 查看所有信息  \n  * readelf -h  [elf_file] 查看概要信息\n  * readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  \n  \n* objdump  和readelf类似 但是可以反汇编elf文件  \n  * objdump -S [file]  反汇编所有目标代码  \n  \n* size [file] 查看程序被映射到内存中映像的大小信息  \n\n* gdb  \n  * gdb -tui 可以显示文本界面 text ui   \n  * layout regs 进入汇编调试模式  \n  * disassemble /rm  显示汇编指令的同时显示对应代码\n  * set disassemble-next-line on 自动反汇编后面要执行的代码  \n  * 添加peda插件 直接显示汇编了   \n  * ```  \n    git clone https://github.com/longld/peda.git ~/peda\n    echo \"source ~/peda/peda.py\" >> ~/.gdbinit\n    ```\n  * x /nfu [mem addr]   显示指定内存的值, 内存长度(单位)由u决定\n    * n项  显示数量  \n      * 要往下显示多少个 [fu] 即 n * (fu)   0代表一个都不显示 \n    * f项  显示方式  \n      * x 按十六进制格式显示变量 \n      * d 按十进制格式显示变量  \n      * u 按十进制格式显示无符号整型  \n      * o 按八进制格式显示变量 \n      * t 按二进制格式显示变量 \n      * a 按十六进制格式显示变量 \n      * i 指令地址格式\n      * c 按字符格式显示变量 \n      * f 按浮点数格式显示变量  \n    * u项 单位大小   \n      * b表示单字节 \n      * h表示双字节 \n      * w表示四字节 \n      * g表示八字节  \n    * 示例   x/1xg  0x8888   \n      * 以十六进制显示地址0x8888位置存储的8字节内容(比如long long类型的数字)\n  \n### 其他手册/详细手册   \n\n###### ldd   查看程序运行时库  \n显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 \n\n\n###### strace  \n```\n-c 统计每一系统调用的所执行的时间,次数和出错的次数等. \n-d 输出strace关于标准错误的调试信息. \n-f 跟踪由fork调用所产生的子进程. \n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. \n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. \n-h 输出简要的帮助信息. \n-i 输出系统调用的入口指针. \n-q 禁止输出关于脱离的消息. \n-r 打印出相对时间关于,,每一个系统调用. \n-t 在输出中的每一行前加上时间信息. \n-tt 在输出中的每一行前加上时间信息,微秒级. \n-ttt 微秒级输出,以秒了表示时间. \n-T 显示每一调用所耗的时间. \n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. \n-V 输出strace的版本信息. \n-x 以十六进制形式输出非标准字符串 \n-xx 所有字符串以十六进制形式输出. \n-a column \n设置返回值的输出位置.默认 为40. \n-e expr \n指定一个表达式,用来控制如何跟踪.格式如下: \n[qualifier=][!]value1[,value2]... \nqualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: \n-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. \n注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. \n-e trace=set \n只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. \n-e trace=file \n只跟踪有关文件操作的系统调用. \n-e trace=process \n只跟踪有关进程控制的系统调用. \n-e trace=network \n跟踪与网络有关的所有系统调用. \n-e strace=signal \n跟踪所有与系统信号有关的 系统调用 \n-e trace=ipc \n跟踪所有与进程通讯有关的系统调用 \n-e abbrev=set \n设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. \n-e raw=set \n将指 定的系统调用的参数以十六进制显示. \n-e signal=set \n指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. \n-e read=set \n输出从指定文件中读出 的数据.例如: \n-e read=3,5 \n-e write=set \n输出写入到指定文件中的数据. \n-o filename \n将strace的输出写入文件filename \n-p pid \n跟踪指定的进程pid. \n-s strsize \n指定输出的字符串的最大长度.默认为32.文件名一直全部输出. \n-u username \n以username 的UID和GID执行被跟踪的命令\n```\n\n\n###### vmstat  \n```\nProcs（进程）:\n  r: 运行队列中进程数量\n  b: 等待IO的进程数量\nMemory（内存）:\n  swpd: 使用虚拟内存大小\n  free: 可用内存大小\n  buff: 用作缓冲的内存大小\n  cache: 用作缓存的内存大小\nSwap:\n  si: 每秒从交换区写到内存的大小\n  so: 每秒写入交换区的内存大小\n  IO：（现在的Linux版本块的大小为1024bytes）\n  bi: 每秒读取的块数\n  bo: 每秒写入的块数\nsystem：\n  in: 每秒中断数，包括时钟中断\n  cs: 每秒上下文切换数\n  CPU（以百分比表示）\n  us: 用户进程执行时间(user time)\n  sy: 系统进程执行时间(system time)\n  id: 空闲时间(包括IO等待时间)\n  wa: 等待IO时间\n```\n\n\n###### sar   \n```\n-A 汇总所有的报告\n-a 报告文件读写使用情况\n-B 报告附加的缓存的使用情况\n-b 报告缓存的使用情况\n-c 报告系统调用的使用情况\n-d 报告磁盘的使用情况\n-g 报告串口的使用情况\n-h 报告关于buffer使用的统计数据\n-m 报告IPC消息队列和信号量的使用情况\n-n 报告命名cache的使用情况\n-p 报告调页活动的使用情况\n-q 报告运行队列和交换队列的平均长度\n-R 报告进程的活动情况\n-r 报告没有使用的内存页面和硬盘块\n-u 报告CPU的利用率\n-v 报告进程、i节点、文件和锁表状态\n-w 报告系统交换活动状况\n-y 报告TTY设备活动状况\n```\n\n\n###### /proc/$pid/maps   虚拟内存地址  \n```\naddress           perms offset  dev   inode   pathname\n08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm\n```    \n对应内核的vm_area_struct项  \n* 地址 address [vm_start-vm_end]: 进程地址空间中区域的开始和结束地址  \n  \n* 权限 permissions [vm_flags]：虚拟内存的权限，\n  * [r=读] [w=写] [x=执行]  [s/p=共享/私有]     \n  * 禁用显示 - \n  * mprotect设置权限   \n  \n* 偏移量 offset [vm_pgoff]：映射开始的偏移量  \n  * 对于有名映射, 比如从文件使用mmap的映射, 表示此段虚拟内存起始地址在文件中以页为单位的偏移 .  \n    * 缺页异常时会根据这个找到文件对应地址的数据并加载上来  \n  * 对匿名映射 它等于0或者vm_start/PAGE_SIZE   \n  \n* 设备 device：映像文件的主设备号和次设备号\n  * 对匿名映射来说 因为没有文件在磁盘上 所以没有设备号 始终为00:00 \n  * 对有名映射来说 是映射的文件所在设备的设备号   \n* 节点 inode：映像文件的节点号\n  * 对有名映射来说 是映射的文件的节点号\n  * 对匿名映射来说 因为没有文件在磁盘上 所以没有节点号 始终为00:00  \n* 路径 pathname: 映像文件的路径  \n  * 对有名来说 是映射的文件名\n  * 对匿名映射来说 是此段虚拟内存在进程中的角色 \n    * [stack]表示在进程中作为栈使用 \n    * [heap]表示堆\n    * [vdso]表示虚拟动态共享对象 它被系统调用用于切换到内核模式   \n    *  其余情况则无显示\n\n###### pmap 虚拟内存地址  类似 /proc/$pid/maps   \n显示的数据更干净一些  还能显示出比如共享内存的shmid和起始位置 和大小    \n\n\n###### gstack  脚本  拷贝自centos  \n```\n#!/bin/sh\n\nif test $# -ne 1; then\n    echo \"Usage: `basename $0 .sh` <process-id>\" 1>&2\n    exit 1\nfi\n\nif test ! -r /proc/$1; then\n    echo \"Process $1 not found.\" 1>&2\n    exit 1\nfi\n\n# GDB doesn't allow \"thread apply all bt\" when the process isn't\n# threaded; need to peek at the process to determine if that or the\n# simpler \"bt\" should be used.\n\nbacktrace=\"bt\"\nif test -d /proc/$1/task ; then\n    # Newer kernel; has a task/ directory.\n    if test `/bin/ls /proc/$1/task | /usr/bin/wc -l` -gt 1 2>/dev/null ; then\n        backtrace=\"thread apply all bt\"\n    fi\nelif test -f /proc/$1/maps ; then\n    # Older kernel; go by it loading libpthread.\n    if /bin/grep -e libpthread /proc/$1/maps > /dev/null 2>&1 ; then\n        backtrace=\"thread apply all bt\"\n    fi\nfi\n\nGDB=${GDB:-/usr/bin/gdb}\n\nif $GDB -nx --quiet --batch --readnever > /dev/null 2>&1; then\n    readnever=--readnever\nelse\n    readnever=\nfi\n\n# Run GDB, strip out unwanted noise.\n$GDB --quiet $readnever -nx /proc/$1/exe $1 <<EOF 2>&1 | \nset width 0\nset height 0\nset pagination no\n$backtrace\nEOF\n/bin/sed -n \\\n    -e 's/^\\((gdb) \\)*//' \\\n    -e '/^#/p' \\\n    -e '/^Thread/p'\n```\n","source":"_posts/2019-11-05-fast-check-linux.md","raw":"---\ntitle: linux快速排查问题的命令  \ndate: 2019-11-05\ncategories: develop \nauthor: yawei.zhang \n---\n### 全局分析和统计    \n* top命令   \n  * free 查看内存使用信息  \n  * vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  \n  * iostat -m -x [时间] [次数]   io读写详细信息\n\n* sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   \n  * sar -A 所有  \n  * sar -u CPU  \n  * sar -q 负载\n  * sar -r 内存\n  * CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看\n  * 内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看\n  * I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看\n\n* df 查看当前硬盘存储\n  * du -h  --max-depth=1 [./]   统计当前目录树下的文件大小  \n\n* IPC资源查询   \n  * ipcs -m 查看共享内存资源  \n  * ipcsrm -M [shmkey]  删除共享内存资源  \n  * ipcsrm -m [shmid]    删除shmid标识的共享内存资源  \n\n* ulimit -a   配置位置 /etc/security/limits.conf  \n  * coredump文件的大小\n  * 线程栈的大小  \n  * 单进程最大设备数\n    * 单进程最大设备数的硬性限制在/proc/sys/fs/nr_open 中配置  \n    * 系统配置的最大设备数可查看/proc/sys/fs/file-max 中配置  \n    * 系统配置的最大设备数修改/etc/sysctl.conf |  fs.file-max = 1000000\n\n* 全局线程总数 \n  * 查看位置 /proc/sys/kernel/threads-max  \n  \n* 单个进程最大线程数 PTHREAD_THREADS_MAX  新的NPTL实现中不存在该限制   \n  * 查看位置 /usr/include/bits/local_lim.h \n  * 查看位置 /usr/include/x86_64-linux-gnu/bits/local_lim.h\n  \n* whereis   查看命令所在位置  \n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* ulimit -s 栈大小  \n\n<!-- more --> \n### 进程分析和统计   \n\n* pstack [pid]  查看进程栈  \n\n* gstack [pid]  同pstack 可打印出每个线程的堆栈    \n\n* gcore [pid1 pid2 ...]  dump core而不杀死进程   \n\n* strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   \n  \n* strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    \n\n\n\n* lsof [文件/路径]  查看占用该文件/该目录下文件的进程  \n\n* lsof -i  查看当前活动的网络连接 包括TCP / UDP\n\n* lsof -p [pid] 查看当前进程所有打开的文件/设备\n\n* 内存布局的实际地址和实际大小等查询  内存泄露可快速判定\n  * cat /proc/pid/maps \n  * pmap\n\n### 系统   \nuname -a  系统版本  \ncat /proc/version  内核版本  \ngetconf GNU_LIBPTHREAD_VERSION   查看线程模型  \n\n### 调试\n\n* readelf  \n  * 可重定位的对象文件(Relocatable file) .o文件   \n  * 可执行的对象文件(Executable file)  \n  * 可被共享的对象文件(Shared object file)  \n  * readelf -a  [elf_file] 查看所有信息  \n  * readelf -h  [elf_file] 查看概要信息\n  * readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  \n  \n* objdump  和readelf类似 但是可以反汇编elf文件  \n  * objdump -S [file]  反汇编所有目标代码  \n  \n* size [file] 查看程序被映射到内存中映像的大小信息  \n\n* gdb  \n  * gdb -tui 可以显示文本界面 text ui   \n  * layout regs 进入汇编调试模式  \n  * disassemble /rm  显示汇编指令的同时显示对应代码\n  * set disassemble-next-line on 自动反汇编后面要执行的代码  \n  * 添加peda插件 直接显示汇编了   \n  * ```  \n    git clone https://github.com/longld/peda.git ~/peda\n    echo \"source ~/peda/peda.py\" >> ~/.gdbinit\n    ```\n  * x /nfu [mem addr]   显示指定内存的值, 内存长度(单位)由u决定\n    * n项  显示数量  \n      * 要往下显示多少个 [fu] 即 n * (fu)   0代表一个都不显示 \n    * f项  显示方式  \n      * x 按十六进制格式显示变量 \n      * d 按十进制格式显示变量  \n      * u 按十进制格式显示无符号整型  \n      * o 按八进制格式显示变量 \n      * t 按二进制格式显示变量 \n      * a 按十六进制格式显示变量 \n      * i 指令地址格式\n      * c 按字符格式显示变量 \n      * f 按浮点数格式显示变量  \n    * u项 单位大小   \n      * b表示单字节 \n      * h表示双字节 \n      * w表示四字节 \n      * g表示八字节  \n    * 示例   x/1xg  0x8888   \n      * 以十六进制显示地址0x8888位置存储的8字节内容(比如long long类型的数字)\n  \n### 其他手册/详细手册   \n\n###### ldd   查看程序运行时库  \n显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 \n\n\n###### strace  \n```\n-c 统计每一系统调用的所执行的时间,次数和出错的次数等. \n-d 输出strace关于标准错误的调试信息. \n-f 跟踪由fork调用所产生的子进程. \n-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. \n-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. \n-h 输出简要的帮助信息. \n-i 输出系统调用的入口指针. \n-q 禁止输出关于脱离的消息. \n-r 打印出相对时间关于,,每一个系统调用. \n-t 在输出中的每一行前加上时间信息. \n-tt 在输出中的每一行前加上时间信息,微秒级. \n-ttt 微秒级输出,以秒了表示时间. \n-T 显示每一调用所耗的时间. \n-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. \n-V 输出strace的版本信息. \n-x 以十六进制形式输出非标准字符串 \n-xx 所有字符串以十六进制形式输出. \n-a column \n设置返回值的输出位置.默认 为40. \n-e expr \n指定一个表达式,用来控制如何跟踪.格式如下: \n[qualifier=][!]value1[,value2]... \nqualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如: \n-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none. \n注意有些shell使用!来执行历史记录里的命令,所以要使用\\\\. \n-e trace=set \n只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all. \n-e trace=file \n只跟踪有关文件操作的系统调用. \n-e trace=process \n只跟踪有关进程控制的系统调用. \n-e trace=network \n跟踪与网络有关的所有系统调用. \n-e strace=signal \n跟踪所有与系统信号有关的 系统调用 \n-e trace=ipc \n跟踪所有与进程通讯有关的系统调用 \n-e abbrev=set \n设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all. \n-e raw=set \n将指 定的系统调用的参数以十六进制显示. \n-e signal=set \n指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号. \n-e read=set \n输出从指定文件中读出 的数据.例如: \n-e read=3,5 \n-e write=set \n输出写入到指定文件中的数据. \n-o filename \n将strace的输出写入文件filename \n-p pid \n跟踪指定的进程pid. \n-s strsize \n指定输出的字符串的最大长度.默认为32.文件名一直全部输出. \n-u username \n以username 的UID和GID执行被跟踪的命令\n```\n\n\n###### vmstat  \n```\nProcs（进程）:\n  r: 运行队列中进程数量\n  b: 等待IO的进程数量\nMemory（内存）:\n  swpd: 使用虚拟内存大小\n  free: 可用内存大小\n  buff: 用作缓冲的内存大小\n  cache: 用作缓存的内存大小\nSwap:\n  si: 每秒从交换区写到内存的大小\n  so: 每秒写入交换区的内存大小\n  IO：（现在的Linux版本块的大小为1024bytes）\n  bi: 每秒读取的块数\n  bo: 每秒写入的块数\nsystem：\n  in: 每秒中断数，包括时钟中断\n  cs: 每秒上下文切换数\n  CPU（以百分比表示）\n  us: 用户进程执行时间(user time)\n  sy: 系统进程执行时间(system time)\n  id: 空闲时间(包括IO等待时间)\n  wa: 等待IO时间\n```\n\n\n###### sar   \n```\n-A 汇总所有的报告\n-a 报告文件读写使用情况\n-B 报告附加的缓存的使用情况\n-b 报告缓存的使用情况\n-c 报告系统调用的使用情况\n-d 报告磁盘的使用情况\n-g 报告串口的使用情况\n-h 报告关于buffer使用的统计数据\n-m 报告IPC消息队列和信号量的使用情况\n-n 报告命名cache的使用情况\n-p 报告调页活动的使用情况\n-q 报告运行队列和交换队列的平均长度\n-R 报告进程的活动情况\n-r 报告没有使用的内存页面和硬盘块\n-u 报告CPU的利用率\n-v 报告进程、i节点、文件和锁表状态\n-w 报告系统交换活动状况\n-y 报告TTY设备活动状况\n```\n\n\n###### /proc/$pid/maps   虚拟内存地址  \n```\naddress           perms offset  dev   inode   pathname\n08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm\n```    \n对应内核的vm_area_struct项  \n* 地址 address [vm_start-vm_end]: 进程地址空间中区域的开始和结束地址  \n  \n* 权限 permissions [vm_flags]：虚拟内存的权限，\n  * [r=读] [w=写] [x=执行]  [s/p=共享/私有]     \n  * 禁用显示 - \n  * mprotect设置权限   \n  \n* 偏移量 offset [vm_pgoff]：映射开始的偏移量  \n  * 对于有名映射, 比如从文件使用mmap的映射, 表示此段虚拟内存起始地址在文件中以页为单位的偏移 .  \n    * 缺页异常时会根据这个找到文件对应地址的数据并加载上来  \n  * 对匿名映射 它等于0或者vm_start/PAGE_SIZE   \n  \n* 设备 device：映像文件的主设备号和次设备号\n  * 对匿名映射来说 因为没有文件在磁盘上 所以没有设备号 始终为00:00 \n  * 对有名映射来说 是映射的文件所在设备的设备号   \n* 节点 inode：映像文件的节点号\n  * 对有名映射来说 是映射的文件的节点号\n  * 对匿名映射来说 因为没有文件在磁盘上 所以没有节点号 始终为00:00  \n* 路径 pathname: 映像文件的路径  \n  * 对有名来说 是映射的文件名\n  * 对匿名映射来说 是此段虚拟内存在进程中的角色 \n    * [stack]表示在进程中作为栈使用 \n    * [heap]表示堆\n    * [vdso]表示虚拟动态共享对象 它被系统调用用于切换到内核模式   \n    *  其余情况则无显示\n\n###### pmap 虚拟内存地址  类似 /proc/$pid/maps   \n显示的数据更干净一些  还能显示出比如共享内存的shmid和起始位置 和大小    \n\n\n###### gstack  脚本  拷贝自centos  \n```\n#!/bin/sh\n\nif test $# -ne 1; then\n    echo \"Usage: `basename $0 .sh` <process-id>\" 1>&2\n    exit 1\nfi\n\nif test ! -r /proc/$1; then\n    echo \"Process $1 not found.\" 1>&2\n    exit 1\nfi\n\n# GDB doesn't allow \"thread apply all bt\" when the process isn't\n# threaded; need to peek at the process to determine if that or the\n# simpler \"bt\" should be used.\n\nbacktrace=\"bt\"\nif test -d /proc/$1/task ; then\n    # Newer kernel; has a task/ directory.\n    if test `/bin/ls /proc/$1/task | /usr/bin/wc -l` -gt 1 2>/dev/null ; then\n        backtrace=\"thread apply all bt\"\n    fi\nelif test -f /proc/$1/maps ; then\n    # Older kernel; go by it loading libpthread.\n    if /bin/grep -e libpthread /proc/$1/maps > /dev/null 2>&1 ; then\n        backtrace=\"thread apply all bt\"\n    fi\nfi\n\nGDB=${GDB:-/usr/bin/gdb}\n\nif $GDB -nx --quiet --batch --readnever > /dev/null 2>&1; then\n    readnever=--readnever\nelse\n    readnever=\nfi\n\n# Run GDB, strip out unwanted noise.\n$GDB --quiet $readnever -nx /proc/$1/exe $1 <<EOF 2>&1 | \nset width 0\nset height 0\nset pagination no\n$backtrace\nEOF\n/bin/sed -n \\\n    -e 's/^\\((gdb) \\)*//' \\\n    -e '/^#/p' \\\n    -e '/^Thread/p'\n```\n","slug":"2019-11-05-fast-check-linux","published":1,"updated":"2020-03-09T03:25:56.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeiz000x7w5hegbrci8i","content":"<h3><span id=\"全局分析和统计\">全局分析和统计</span></h3><ul>\n<li><p>top命令   </p>\n<ul>\n<li>free 查看内存使用信息  </li>\n<li>vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  </li>\n<li>iostat -m -x [时间] [次数]   io读写详细信息</li>\n</ul>\n</li>\n<li><p>sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   </p>\n<ul>\n<li>sar -A 所有  </li>\n<li>sar -u CPU  </li>\n<li>sar -q 负载</li>\n<li>sar -r 内存</li>\n<li>CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</li>\n<li>内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</li>\n<li>I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</li>\n</ul>\n</li>\n<li><p>df 查看当前硬盘存储</p>\n<ul>\n<li>du -h  –max-depth=1 [./]   统计当前目录树下的文件大小  </li>\n</ul>\n</li>\n<li><p>IPC资源查询   </p>\n<ul>\n<li>ipcs -m 查看共享内存资源  </li>\n<li>ipcsrm -M [shmkey]  删除共享内存资源  </li>\n<li>ipcsrm -m [shmid]    删除shmid标识的共享内存资源  </li>\n</ul>\n</li>\n<li><p>ulimit -a   配置位置 /etc/security/limits.conf  </p>\n<ul>\n<li>coredump文件的大小</li>\n<li>线程栈的大小  </li>\n<li>单进程最大设备数<ul>\n<li>单进程最大设备数的硬性限制在/proc/sys/fs/nr_open 中配置  </li>\n<li>系统配置的最大设备数可查看/proc/sys/fs/file-max 中配置  </li>\n<li>系统配置的最大设备数修改/etc/sysctl.conf |  fs.file-max = 1000000</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>全局线程总数 </p>\n<ul>\n<li>查看位置 /proc/sys/kernel/threads-max  </li>\n</ul>\n</li>\n<li><p>单个进程最大线程数 PTHREAD_THREADS_MAX  新的NPTL实现中不存在该限制   </p>\n<ul>\n<li>查看位置 /usr/include/bits/local_lim.h </li>\n<li>查看位置 /usr/include/x86_64-linux-gnu/bits/local_lim.h</li>\n</ul>\n</li>\n<li><p>whereis   查看命令所在位置  </p>\n</li>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>ulimit -s 栈大小  </p>\n</li>\n</ul>\n<a id=\"more\"></a> \n<h3><span id=\"进程分析和统计\">进程分析和统计</span></h3><ul>\n<li><p>pstack [pid]  查看进程栈  </p>\n</li>\n<li><p>gstack [pid]  同pstack 可打印出每个线程的堆栈    </p>\n</li>\n<li><p>gcore [pid1 pid2 …]  dump core而不杀死进程   </p>\n</li>\n<li><p>strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   </p>\n</li>\n<li><p>strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    </p>\n</li>\n</ul>\n<ul>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>内存布局的实际地址和实际大小等查询  内存泄露可快速判定</p>\n<ul>\n<li>cat /proc/pid/maps </li>\n<li>pmap</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"系统\">系统</span></h3><p>uname -a  系统版本<br>cat /proc/version  内核版本<br>getconf GNU_LIBPTHREAD_VERSION   查看线程模型  </p>\n<h3><span id=\"调试\">调试</span></h3><ul>\n<li><p>readelf  </p>\n<ul>\n<li>可重定位的对象文件(Relocatable file) .o文件   </li>\n<li>可执行的对象文件(Executable file)  </li>\n<li>可被共享的对象文件(Shared object file)  </li>\n<li>readelf -a  [elf_file] 查看所有信息  </li>\n<li>readelf -h  [elf_file] 查看概要信息</li>\n<li>readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  </li>\n</ul>\n</li>\n<li><p>objdump  和readelf类似 但是可以反汇编elf文件  </p>\n<ul>\n<li>objdump -S [file]  反汇编所有目标代码  </li>\n</ul>\n</li>\n<li><p>size [file] 查看程序被映射到内存中映像的大小信息  </p>\n</li>\n<li><p>gdb  </p>\n<ul>\n<li>gdb -tui 可以显示文本界面 text ui   </li>\n<li>layout regs 进入汇编调试模式  </li>\n<li>disassemble /rm  显示汇编指令的同时显示对应代码</li>\n<li>set disassemble-next-line on 自动反汇编后面要执行的代码  </li>\n<li>添加peda插件 直接显示汇编了   </li>\n<li>```<br>git clone <a href=\"https://github.com/longld/peda.git\" target=\"_blank\" rel=\"noopener\">https://github.com/longld/peda.git</a> ~/peda<br>echo “source ~/peda/peda.py” &gt;&gt; ~/.gdbinit<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  * x &#x2F;nfu [mem addr]   显示指定内存的值, 内存长度(单位)由u决定</span><br><span class=\"line\">    * n项  显示数量  </span><br><span class=\"line\">      * 要往下显示多少个 [fu] 即 n * (fu)   0代表一个都不显示 </span><br><span class=\"line\">    * f项  显示方式  </span><br><span class=\"line\">      * x 按十六进制格式显示变量 </span><br><span class=\"line\">      * d 按十进制格式显示变量  </span><br><span class=\"line\">      * u 按十进制格式显示无符号整型  </span><br><span class=\"line\">      * o 按八进制格式显示变量 </span><br><span class=\"line\">      * t 按二进制格式显示变量 </span><br><span class=\"line\">      * a 按十六进制格式显示变量 </span><br><span class=\"line\">      * i 指令地址格式</span><br><span class=\"line\">      * c 按字符格式显示变量 </span><br><span class=\"line\">      * f 按浮点数格式显示变量  </span><br><span class=\"line\">    * u项 单位大小   </span><br><span class=\"line\">      * b表示单字节 </span><br><span class=\"line\">      * h表示双字节 </span><br><span class=\"line\">      * w表示四字节 </span><br><span class=\"line\">      * g表示八字节  </span><br><span class=\"line\">    * 示例   x&#x2F;1xg  0x8888   </span><br><span class=\"line\">      * 以十六进制显示地址0x8888位置存储的8字节内容(比如long long类型的数字)</span><br><span class=\"line\">  </span><br><span class=\"line\">### 其他手册&#x2F;详细手册   </span><br><span class=\"line\"></span><br><span class=\"line\">###### ldd   查看程序运行时库  </span><br><span class=\"line\">显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### strace</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>-c 统计每一系统调用的所执行的时间,次数和出错的次数等.<br>-d 输出strace关于标准错误的调试信息.<br>-f 跟踪由fork调用所产生的子进程.<br>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.<br>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.<br>-h 输出简要的帮助信息.<br>-i 输出系统调用的入口指针.<br>-q 禁止输出关于脱离的消息.<br>-r 打印出相对时间关于,,每一个系统调用.<br>-t 在输出中的每一行前加上时间信息.<br>-tt 在输出中的每一行前加上时间信息,微秒级.<br>-ttt 微秒级输出,以秒了表示时间.<br>-T 显示每一调用所耗的时间.<br>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.<br>-V 输出strace的版本信息.<br>-x 以十六进制形式输出非标准字符串<br>-xx 所有字符串以十六进制形式输出.<br>-a column<br>设置返回值的输出位置.默认 为40.<br>-e expr<br>指定一个表达式,用来控制如何跟踪.格式如下:<br>[qualifier=][!]value1[,value2]…<br>qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如:<br>-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none.<br>注意有些shell使用!来执行历史记录里的命令,所以要使用\\.<br>-e trace=set<br>只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.<br>-e trace=file<br>只跟踪有关文件操作的系统调用.<br>-e trace=process<br>只跟踪有关进程控制的系统调用.<br>-e trace=network<br>跟踪与网络有关的所有系统调用.<br>-e strace=signal<br>跟踪所有与系统信号有关的 系统调用<br>-e trace=ipc<br>跟踪所有与进程通讯有关的系统调用<br>-e abbrev=set<br>设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all.<br>-e raw=set<br>将指 定的系统调用的参数以十六进制显示.<br>-e signal=set<br>指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号.<br>-e read=set<br>输出从指定文件中读出 的数据.例如:<br>-e read=3,5<br>-e write=set<br>输出写入到指定文件中的数据.<br>-o filename<br>将strace的输出写入文件filename<br>-p pid<br>跟踪指定的进程pid.<br>-s strsize<br>指定输出的字符串的最大长度.默认为32.文件名一直全部输出.<br>-u username<br>以username 的UID和GID执行被跟踪的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### vmstat</span><br></pre></td></tr></table></figure>\n<p>Procs（进程）:<br>  r: 运行队列中进程数量<br>  b: 等待IO的进程数量<br>Memory（内存）:<br>  swpd: 使用虚拟内存大小<br>  free: 可用内存大小<br>  buff: 用作缓冲的内存大小<br>  cache: 用作缓存的内存大小<br>Swap:<br>  si: 每秒从交换区写到内存的大小<br>  so: 每秒写入交换区的内存大小<br>  IO：（现在的Linux版本块的大小为1024bytes）<br>  bi: 每秒读取的块数<br>  bo: 每秒写入的块数<br>system：<br>  in: 每秒中断数，包括时钟中断<br>  cs: 每秒上下文切换数<br>  CPU（以百分比表示）<br>  us: 用户进程执行时间(user time)<br>  sy: 系统进程执行时间(system time)<br>  id: 空闲时间(包括IO等待时间)<br>  wa: 等待IO时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### sar</span><br></pre></td></tr></table></figure>\n<p>-A 汇总所有的报告<br>-a 报告文件读写使用情况<br>-B 报告附加的缓存的使用情况<br>-b 报告缓存的使用情况<br>-c 报告系统调用的使用情况<br>-d 报告磁盘的使用情况<br>-g 报告串口的使用情况<br>-h 报告关于buffer使用的统计数据<br>-m 报告IPC消息队列和信号量的使用情况<br>-n 报告命名cache的使用情况<br>-p 报告调页活动的使用情况<br>-q 报告运行队列和交换队列的平均长度<br>-R 报告进程的活动情况<br>-r 报告没有使用的内存页面和硬盘块<br>-u 报告CPU的利用率<br>-v 报告进程、i节点、文件和锁表状态<br>-w 报告系统交换活动状况<br>-y 报告TTY设备活动状况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### &#x2F;proc&#x2F;$pid&#x2F;maps   虚拟内存地址</span><br></pre></td></tr></table></figure>\n<p>address           perms offset  dev   inode   pathname<br>08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应内核的vm_area_struct项  </span><br><span class=\"line\">* 地址 address [vm_start-vm_end]: 进程地址空间中区域的开始和结束地址  </span><br><span class=\"line\">  </span><br><span class=\"line\">* 权限 permissions [vm_flags]：虚拟内存的权限，</span><br><span class=\"line\">  * [r&#x3D;读] [w&#x3D;写] [x&#x3D;执行]  [s&#x2F;p&#x3D;共享&#x2F;私有]     </span><br><span class=\"line\">  * 禁用显示 - </span><br><span class=\"line\">  * mprotect设置权限   </span><br><span class=\"line\">  </span><br><span class=\"line\">* 偏移量 offset [vm_pgoff]：映射开始的偏移量  </span><br><span class=\"line\">  * 对于有名映射, 比如从文件使用mmap的映射, 表示此段虚拟内存起始地址在文件中以页为单位的偏移 .  </span><br><span class=\"line\">    * 缺页异常时会根据这个找到文件对应地址的数据并加载上来  </span><br><span class=\"line\">  * 对匿名映射 它等于0或者vm_start&#x2F;PAGE_SIZE   </span><br><span class=\"line\">  </span><br><span class=\"line\">* 设备 device：映像文件的主设备号和次设备号</span><br><span class=\"line\">  * 对匿名映射来说 因为没有文件在磁盘上 所以没有设备号 始终为00:00 </span><br><span class=\"line\">  * 对有名映射来说 是映射的文件所在设备的设备号   </span><br><span class=\"line\">* 节点 inode：映像文件的节点号</span><br><span class=\"line\">  * 对有名映射来说 是映射的文件的节点号</span><br><span class=\"line\">  * 对匿名映射来说 因为没有文件在磁盘上 所以没有节点号 始终为00:00  </span><br><span class=\"line\">* 路径 pathname: 映像文件的路径  </span><br><span class=\"line\">  * 对有名来说 是映射的文件名</span><br><span class=\"line\">  * 对匿名映射来说 是此段虚拟内存在进程中的角色 </span><br><span class=\"line\">    * [stack]表示在进程中作为栈使用 </span><br><span class=\"line\">    * [heap]表示堆</span><br><span class=\"line\">    * [vdso]表示虚拟动态共享对象 它被系统调用用于切换到内核模式   </span><br><span class=\"line\">    *  其余情况则无显示</span><br><span class=\"line\"></span><br><span class=\"line\">###### pmap 虚拟内存地址  类似 &#x2F;proc&#x2F;$pid&#x2F;maps   </span><br><span class=\"line\">显示的数据更干净一些  还能显示出比如共享内存的shmid和起始位置 和大小    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### gstack  脚本  拷贝自centos</span><br></pre></td></tr></table></figure>\n<p>#!/bin/sh</p>\n<p>if test $# -ne 1; then<br>    echo “Usage: <code>basename $0 .sh</code> <process-id>“ 1&gt;&amp;2<br>    exit 1<br>fi</process-id></p>\n<p>if test ! -r /proc/$1; then<br>    echo “Process $1 not found.” 1&gt;&amp;2<br>    exit 1<br>fi</p>\n<h1><span id=\"gdb-doesnt-allow-thread-apply-all-bt-when-the-process-isnt\">GDB doesn’t allow “thread apply all bt” when the process isn’t</span></h1><h1><span id=\"threaded-need-to-peek-at-the-process-to-determine-if-that-or-the\">threaded; need to peek at the process to determine if that or the</span></h1><h1><span id=\"simpler-bt-should-be-used\">simpler “bt” should be used.</span></h1><p>backtrace=”bt”<br>if test -d /proc/$1/task ; then<br>    # Newer kernel; has a task/ directory.<br>    if test <code>/bin/ls /proc/$1/task | /usr/bin/wc -l</code> -gt 1 2&gt;/dev/null ; then<br>        backtrace=”thread apply all bt”<br>    fi<br>elif test -f /proc/$1/maps ; then<br>    # Older kernel; go by it loading libpthread.<br>    if /bin/grep -e libpthread /proc/$1/maps &gt; /dev/null 2&gt;&amp;1 ; then<br>        backtrace=”thread apply all bt”<br>    fi<br>fi</p>\n<p>GDB=${GDB:-/usr/bin/gdb}</p>\n<p>if $GDB -nx –quiet –batch –readnever &gt; /dev/null 2&gt;&1; then<br>    readnever=–readnever<br>else<br>    readnever=<br>fi</p>\n<h1><span id=\"run-gdb-strip-out-unwanted-noise\">Run GDB, strip out unwanted noise.</span></h1><p>$GDB –quiet $readnever -nx /proc/$1/exe $1 &lt;&lt;EOF 2&gt;&amp;1 |<br>set width 0<br>set height 0<br>set pagination no<br>$backtrace<br>EOF<br>/bin/sed -n <br>    -e ‘s/^((gdb) )*//‘ <br>    -e ‘/^#/p’ <br>    -e ‘/^Thread/p’</p>\n<pre><code></code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"全局分析和统计\"><a href=\"#全局分析和统计\" class=\"headerlink\" title=\"全局分析和统计\"></a>全局分析和统计</h3><ul>\n<li><p>top命令   </p>\n<ul>\n<li>free 查看内存使用信息  </li>\n<li>vmstate [delay时间]  按照delay时间打印内存使用 io读写 CPU用量等信息  </li>\n<li>iostat -m -x [时间] [次数]   io读写详细信息</li>\n</ul>\n</li>\n<li><p>sar 系统活动情况报告 追溯统计数据 从最近的0点0分开始显示数据   </p>\n<ul>\n<li>sar -A 所有  </li>\n<li>sar -u CPU  </li>\n<li>sar -q 负载</li>\n<li>sar -r 内存</li>\n<li>CPU存在瓶颈，可用 sar -u 和 sar -q 等来查看</li>\n<li>内存存在瓶颈，可用sar -B、sar -r 和 sar -W 等来查看</li>\n<li>I/O存在瓶颈，可用 sar -b、sar -u 和 sar -d 等来查看</li>\n</ul>\n</li>\n<li><p>df 查看当前硬盘存储</p>\n<ul>\n<li>du -h  –max-depth=1 [./]   统计当前目录树下的文件大小  </li>\n</ul>\n</li>\n<li><p>IPC资源查询   </p>\n<ul>\n<li>ipcs -m 查看共享内存资源  </li>\n<li>ipcsrm -M [shmkey]  删除共享内存资源  </li>\n<li>ipcsrm -m [shmid]    删除shmid标识的共享内存资源  </li>\n</ul>\n</li>\n<li><p>ulimit -a   配置位置 /etc/security/limits.conf  </p>\n<ul>\n<li>coredump文件的大小</li>\n<li>线程栈的大小  </li>\n<li>单进程最大设备数<ul>\n<li>单进程最大设备数的硬性限制在/proc/sys/fs/nr_open 中配置  </li>\n<li>系统配置的最大设备数可查看/proc/sys/fs/file-max 中配置  </li>\n<li>系统配置的最大设备数修改/etc/sysctl.conf |  fs.file-max = 1000000</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>全局线程总数 </p>\n<ul>\n<li>查看位置 /proc/sys/kernel/threads-max  </li>\n</ul>\n</li>\n<li><p>单个进程最大线程数 PTHREAD_THREADS_MAX  新的NPTL实现中不存在该限制   </p>\n<ul>\n<li>查看位置 /usr/include/bits/local_lim.h </li>\n<li>查看位置 /usr/include/x86_64-linux-gnu/bits/local_lim.h</li>\n</ul>\n</li>\n<li><p>whereis   查看命令所在位置  </p>\n</li>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>ulimit -s 栈大小  </p>\n</li>\n</ul>","more":"<h3 id=\"进程分析和统计\"><a href=\"#进程分析和统计\" class=\"headerlink\" title=\"进程分析和统计\"></a>进程分析和统计</h3><ul>\n<li><p>pstack [pid]  查看进程栈  </p>\n</li>\n<li><p>gstack [pid]  同pstack 可打印出每个线程的堆栈    </p>\n</li>\n<li><p>gcore [pid1 pid2 …]  dump core而不杀死进程   </p>\n</li>\n<li><p>strace -T -r -c -p [pid] 查看或统计系统调用  -c统计.   </p>\n</li>\n<li><p>strace [exe_file]  调试运行程序  统计或查看该程序所有系统调用    </p>\n</li>\n</ul>\n<ul>\n<li><p>lsof [文件/路径]  查看占用该文件/该目录下文件的进程  </p>\n</li>\n<li><p>lsof -i  查看当前活动的网络连接 包括TCP / UDP</p>\n</li>\n<li><p>lsof -p [pid] 查看当前进程所有打开的文件/设备</p>\n</li>\n<li><p>内存布局的实际地址和实际大小等查询  内存泄露可快速判定</p>\n<ul>\n<li>cat /proc/pid/maps </li>\n<li>pmap</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a>系统</h3><p>uname -a  系统版本<br>cat /proc/version  内核版本<br>getconf GNU_LIBPTHREAD_VERSION   查看线程模型  </p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><ul>\n<li><p>readelf  </p>\n<ul>\n<li>可重定位的对象文件(Relocatable file) .o文件   </li>\n<li>可执行的对象文件(Executable file)  </li>\n<li>可被共享的对象文件(Shared object file)  </li>\n<li>readelf -a  [elf_file] 查看所有信息  </li>\n<li>readelf -h  [elf_file] 查看概要信息</li>\n<li>readelf -S  [elf_file] 查看所有段信息(比如-g编译会有debug段)  </li>\n</ul>\n</li>\n<li><p>objdump  和readelf类似 但是可以反汇编elf文件  </p>\n<ul>\n<li>objdump -S [file]  反汇编所有目标代码  </li>\n</ul>\n</li>\n<li><p>size [file] 查看程序被映射到内存中映像的大小信息  </p>\n</li>\n<li><p>gdb  </p>\n<ul>\n<li>gdb -tui 可以显示文本界面 text ui   </li>\n<li>layout regs 进入汇编调试模式  </li>\n<li>disassemble /rm  显示汇编指令的同时显示对应代码</li>\n<li>set disassemble-next-line on 自动反汇编后面要执行的代码  </li>\n<li>添加peda插件 直接显示汇编了   </li>\n<li>```<br>git clone <a href=\"https://github.com/longld/peda.git\" target=\"_blank\" rel=\"noopener\">https://github.com/longld/peda.git</a> ~/peda<br>echo “source ~/peda/peda.py” &gt;&gt; ~/.gdbinit<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  * x &#x2F;nfu [mem addr]   显示指定内存的值, 内存长度(单位)由u决定</span><br><span class=\"line\">    * n项  显示数量  </span><br><span class=\"line\">      * 要往下显示多少个 [fu] 即 n * (fu)   0代表一个都不显示 </span><br><span class=\"line\">    * f项  显示方式  </span><br><span class=\"line\">      * x 按十六进制格式显示变量 </span><br><span class=\"line\">      * d 按十进制格式显示变量  </span><br><span class=\"line\">      * u 按十进制格式显示无符号整型  </span><br><span class=\"line\">      * o 按八进制格式显示变量 </span><br><span class=\"line\">      * t 按二进制格式显示变量 </span><br><span class=\"line\">      * a 按十六进制格式显示变量 </span><br><span class=\"line\">      * i 指令地址格式</span><br><span class=\"line\">      * c 按字符格式显示变量 </span><br><span class=\"line\">      * f 按浮点数格式显示变量  </span><br><span class=\"line\">    * u项 单位大小   </span><br><span class=\"line\">      * b表示单字节 </span><br><span class=\"line\">      * h表示双字节 </span><br><span class=\"line\">      * w表示四字节 </span><br><span class=\"line\">      * g表示八字节  </span><br><span class=\"line\">    * 示例   x&#x2F;1xg  0x8888   </span><br><span class=\"line\">      * 以十六进制显示地址0x8888位置存储的8字节内容(比如long long类型的数字)</span><br><span class=\"line\">  </span><br><span class=\"line\">### 其他手册&#x2F;详细手册   </span><br><span class=\"line\"></span><br><span class=\"line\">###### ldd   查看程序运行时库  </span><br><span class=\"line\">显示 依赖的库名,  实际记载到的库, 库加载后的开始地址 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### strace</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>-c 统计每一系统调用的所执行的时间,次数和出错的次数等.<br>-d 输出strace关于标准错误的调试信息.<br>-f 跟踪由fork调用所产生的子进程.<br>-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号.<br>-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪.<br>-h 输出简要的帮助信息.<br>-i 输出系统调用的入口指针.<br>-q 禁止输出关于脱离的消息.<br>-r 打印出相对时间关于,,每一个系统调用.<br>-t 在输出中的每一行前加上时间信息.<br>-tt 在输出中的每一行前加上时间信息,微秒级.<br>-ttt 微秒级输出,以秒了表示时间.<br>-T 显示每一调用所耗的时间.<br>-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出.<br>-V 输出strace的版本信息.<br>-x 以十六进制形式输出非标准字符串<br>-xx 所有字符串以十六进制形式输出.<br>-a column<br>设置返回值的输出位置.默认 为40.<br>-e expr<br>指定一个表达式,用来控制如何跟踪.格式如下:<br>[qualifier=][!]value1[,value2]…<br>qualifier只能是 trace,abbrev,verbose,raw,signal,read,write其中之一.value是用来限定的符号或数字.默认的 qualifier是 trace.感叹号是否定符号.例如:<br>-eopen等价于 -e trace=open,表示只跟踪open调用.而-etrace!=open表示跟踪除了open以外的其他调用.有两个特殊的符号 all 和 none.<br>注意有些shell使用!来执行历史记录里的命令,所以要使用\\.<br>-e trace=set<br>只跟踪指定的系统 调用.例如:-e trace=open,close,rean,write表示只跟踪这四个系统调用.默认的为set=all.<br>-e trace=file<br>只跟踪有关文件操作的系统调用.<br>-e trace=process<br>只跟踪有关进程控制的系统调用.<br>-e trace=network<br>跟踪与网络有关的所有系统调用.<br>-e strace=signal<br>跟踪所有与系统信号有关的 系统调用<br>-e trace=ipc<br>跟踪所有与进程通讯有关的系统调用<br>-e abbrev=set<br>设定 strace输出的系统调用的结果集.-v 等与 abbrev=none.默认为abbrev=all.<br>-e raw=set<br>将指 定的系统调用的参数以十六进制显示.<br>-e signal=set<br>指定跟踪的系统信号.默认为all.如 signal=!SIGIO(或者signal=!io),表示不跟踪SIGIO信号.<br>-e read=set<br>输出从指定文件中读出 的数据.例如:<br>-e read=3,5<br>-e write=set<br>输出写入到指定文件中的数据.<br>-o filename<br>将strace的输出写入文件filename<br>-p pid<br>跟踪指定的进程pid.<br>-s strsize<br>指定输出的字符串的最大长度.默认为32.文件名一直全部输出.<br>-u username<br>以username 的UID和GID执行被跟踪的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### vmstat</span><br></pre></td></tr></table></figure>\n<p>Procs（进程）:<br>  r: 运行队列中进程数量<br>  b: 等待IO的进程数量<br>Memory（内存）:<br>  swpd: 使用虚拟内存大小<br>  free: 可用内存大小<br>  buff: 用作缓冲的内存大小<br>  cache: 用作缓存的内存大小<br>Swap:<br>  si: 每秒从交换区写到内存的大小<br>  so: 每秒写入交换区的内存大小<br>  IO：（现在的Linux版本块的大小为1024bytes）<br>  bi: 每秒读取的块数<br>  bo: 每秒写入的块数<br>system：<br>  in: 每秒中断数，包括时钟中断<br>  cs: 每秒上下文切换数<br>  CPU（以百分比表示）<br>  us: 用户进程执行时间(user time)<br>  sy: 系统进程执行时间(system time)<br>  id: 空闲时间(包括IO等待时间)<br>  wa: 等待IO时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### sar</span><br></pre></td></tr></table></figure>\n<p>-A 汇总所有的报告<br>-a 报告文件读写使用情况<br>-B 报告附加的缓存的使用情况<br>-b 报告缓存的使用情况<br>-c 报告系统调用的使用情况<br>-d 报告磁盘的使用情况<br>-g 报告串口的使用情况<br>-h 报告关于buffer使用的统计数据<br>-m 报告IPC消息队列和信号量的使用情况<br>-n 报告命名cache的使用情况<br>-p 报告调页活动的使用情况<br>-q 报告运行队列和交换队列的平均长度<br>-R 报告进程的活动情况<br>-r 报告没有使用的内存页面和硬盘块<br>-u 报告CPU的利用率<br>-v 报告进程、i节点、文件和锁表状态<br>-w 报告系统交换活动状况<br>-y 报告TTY设备活动状况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### &#x2F;proc&#x2F;$pid&#x2F;maps   虚拟内存地址</span><br></pre></td></tr></table></figure>\n<p>address           perms offset  dev   inode   pathname<br>08048000-08056000 r-xp 00000000 03:0c 64593   /usr/sbin/gpm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应内核的vm_area_struct项  </span><br><span class=\"line\">* 地址 address [vm_start-vm_end]: 进程地址空间中区域的开始和结束地址  </span><br><span class=\"line\">  </span><br><span class=\"line\">* 权限 permissions [vm_flags]：虚拟内存的权限，</span><br><span class=\"line\">  * [r&#x3D;读] [w&#x3D;写] [x&#x3D;执行]  [s&#x2F;p&#x3D;共享&#x2F;私有]     </span><br><span class=\"line\">  * 禁用显示 - </span><br><span class=\"line\">  * mprotect设置权限   </span><br><span class=\"line\">  </span><br><span class=\"line\">* 偏移量 offset [vm_pgoff]：映射开始的偏移量  </span><br><span class=\"line\">  * 对于有名映射, 比如从文件使用mmap的映射, 表示此段虚拟内存起始地址在文件中以页为单位的偏移 .  </span><br><span class=\"line\">    * 缺页异常时会根据这个找到文件对应地址的数据并加载上来  </span><br><span class=\"line\">  * 对匿名映射 它等于0或者vm_start&#x2F;PAGE_SIZE   </span><br><span class=\"line\">  </span><br><span class=\"line\">* 设备 device：映像文件的主设备号和次设备号</span><br><span class=\"line\">  * 对匿名映射来说 因为没有文件在磁盘上 所以没有设备号 始终为00:00 </span><br><span class=\"line\">  * 对有名映射来说 是映射的文件所在设备的设备号   </span><br><span class=\"line\">* 节点 inode：映像文件的节点号</span><br><span class=\"line\">  * 对有名映射来说 是映射的文件的节点号</span><br><span class=\"line\">  * 对匿名映射来说 因为没有文件在磁盘上 所以没有节点号 始终为00:00  </span><br><span class=\"line\">* 路径 pathname: 映像文件的路径  </span><br><span class=\"line\">  * 对有名来说 是映射的文件名</span><br><span class=\"line\">  * 对匿名映射来说 是此段虚拟内存在进程中的角色 </span><br><span class=\"line\">    * [stack]表示在进程中作为栈使用 </span><br><span class=\"line\">    * [heap]表示堆</span><br><span class=\"line\">    * [vdso]表示虚拟动态共享对象 它被系统调用用于切换到内核模式   </span><br><span class=\"line\">    *  其余情况则无显示</span><br><span class=\"line\"></span><br><span class=\"line\">###### pmap 虚拟内存地址  类似 &#x2F;proc&#x2F;$pid&#x2F;maps   </span><br><span class=\"line\">显示的数据更干净一些  还能显示出比如共享内存的shmid和起始位置 和大小    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###### gstack  脚本  拷贝自centos</span><br></pre></td></tr></table></figure>\n<p>#!/bin/sh</p>\n<p>if test $# -ne 1; then<br>    echo “Usage: <code>basename $0 .sh</code> <process-id>“ 1&gt;&amp;2<br>    exit 1<br>fi</p>\n<p>if test ! -r /proc/$1; then<br>    echo “Process $1 not found.” 1&gt;&amp;2<br>    exit 1<br>fi</p>\n<h1 id=\"GDB-doesn’t-allow-“thread-apply-all-bt”-when-the-process-isn’t\"><a href=\"#GDB-doesn’t-allow-“thread-apply-all-bt”-when-the-process-isn’t\" class=\"headerlink\" title=\"GDB doesn’t allow “thread apply all bt” when the process isn’t\"></a>GDB doesn’t allow “thread apply all bt” when the process isn’t</h1><h1 id=\"threaded-need-to-peek-at-the-process-to-determine-if-that-or-the\"><a href=\"#threaded-need-to-peek-at-the-process-to-determine-if-that-or-the\" class=\"headerlink\" title=\"threaded; need to peek at the process to determine if that or the\"></a>threaded; need to peek at the process to determine if that or the</h1><h1 id=\"simpler-“bt”-should-be-used\"><a href=\"#simpler-“bt”-should-be-used\" class=\"headerlink\" title=\"simpler “bt” should be used.\"></a>simpler “bt” should be used.</h1><p>backtrace=”bt”<br>if test -d /proc/$1/task ; then<br>    # Newer kernel; has a task/ directory.<br>    if test <code>/bin/ls /proc/$1/task | /usr/bin/wc -l</code> -gt 1 2&gt;/dev/null ; then<br>        backtrace=”thread apply all bt”<br>    fi<br>elif test -f /proc/$1/maps ; then<br>    # Older kernel; go by it loading libpthread.<br>    if /bin/grep -e libpthread /proc/$1/maps &gt; /dev/null 2&gt;&amp;1 ; then<br>        backtrace=”thread apply all bt”<br>    fi<br>fi</p>\n<p>GDB=${GDB:-/usr/bin/gdb}</p>\n<p>if $GDB -nx –quiet –batch –readnever &gt; /dev/null 2&gt;&1; then<br>    readnever=–readnever<br>else<br>    readnever=<br>fi</p>\n<h1 id=\"Run-GDB-strip-out-unwanted-noise\"><a href=\"#Run-GDB-strip-out-unwanted-noise\" class=\"headerlink\" title=\"Run GDB, strip out unwanted noise.\"></a>Run GDB, strip out unwanted noise.</h1><p>$GDB –quiet $readnever -nx /proc/$1/exe $1 &lt;&lt;EOF 2&gt;&amp;1 |<br>set width 0<br>set height 0<br>set pagination no<br>$backtrace<br>EOF<br>/bin/sed -n <br>    -e ‘s/^((gdb) )*//‘ <br>    -e ‘/^#/p’ <br>    -e ‘/^Thread/p’</p>\n<pre><code></code></pre>"},{"title":"ELF的hash算法","date":"2019-11-22T16:00:00.000Z","author":"yawei.zhang","_content":"\n### ..1. 目录  \n\n---  \n\n<!-- TOC -->\n\n- [..1. 目录](#1-目录)\n- [ELF HASH](#elf-hash)\n\t\t\t- [使用elf hash获取符号所在的偏移地址](#使用elf-hash获取符号所在的偏移地址)\n\t\t\t- [结论](#结论)\n- [ELF HASH源码](#elf-hash源码)\n\n<!-- /TOC -->\n\n### ELF HASH\nELF的哈希表提供了对符号表的访问 \n组织结构如下:     \n\n| labels\n|-----  \n| nbucket\n| nchain\n| bucket[0]\n| …\n| bucket[nbucket-1]\n| chain[0]\n| …\n| chain[nchain-1]\n\n###### 说明\n\n* bucket和chain的数量是相等的  \n* 每个符号值对应一个字符串  \n* 基本查找流程 \n  * 使用elf_hash得到hash值   \n  * 对hash值取模计算存放的符号值的桶  \n  * 如果该桶内没有数据则结束\n  * 如果桶内内有数据不匹配   \n    * 以该符号值为下标的 chain 中存在下一个符号值 \n    * 重复该步骤直到找到和目标字符串匹配   \n  * 找到符号值对应的字符串以及符号加载时的偏移信息和符号地址信息   \n\n###### 结论  \n* chain 的数量必然大于符号的数量  \n* 不考虑性能, 桶的数量可以小于符号的数量 也可以同时小于chain的数量   \n* 遇到冲突后从 chain 表中查找以出现冲突的符号值为下标位置的chain, 如果该chain无内容则从符号表中查找匹配的符号的值填充该chain  \n  * 如果有内容并且符号值依然冲突, 则用该冲突的符号值为索引继续查找下一个 \n  * 最差情况则相当于直接遍历符号表   \n\n\n<!-- more -->\n\n### ELF HASH源码   \nlinux 2.4.0 -> irqueue.c  \n[linux main](https://www.unix.com/man-page/osx/3ELF/elf_hash/)  \n```\n/*\n *    This function hash the input string ''name'' using the ELF hash\n *    function for strings.\n */\nstatic unsigned int hash(char* name)\n{\n    unsigned int h = 0;\n    unsigned int g;\n\n    while(*name) {\n        h = (h<<4) + *name++;\n        if ((g = (h & 0xf0000000)))\n            h ^=g>>24;\n        h &=~g;\n    }\n    return h;\n}\n```\n\n\n[vDSO/parse_vdso.c](https://elixir.bootlin.com/linux/v3.16/source/Documentation/vDSO/parse_vdso.c#L222)   \n使用elf hash获取符号所在的偏移地址   \n```\nvoid *vdso_sym(const char *version, const char *name)\n{\n\tunsigned long ver_hash;\n\tif (!vdso_info.valid)\n\t\treturn 0;\n\n\tver_hash = elf_hash(version);\n\tELF(Word) chain = vdso_info.bucket[elf_hash(name) % vdso_info.nbucket];\n\n\tfor (; chain != STN_UNDEF; chain = vdso_info.chain[chain]) {\n\t\tELF(Sym) *sym = &vdso_info.symtab[chain];\n\n\t\t/* Check for a defined global or weak function w/ right name. */\n\t\tif (ELF64_ST_TYPE(sym->st_info) != STT_FUNC)\n\t\t\tcontinue;\n\t\tif (ELF64_ST_BIND(sym->st_info) != STB_GLOBAL &&\n\t\t    ELF64_ST_BIND(sym->st_info) != STB_WEAK)\n\t\t\tcontinue;\n\t\tif (sym->st_shndx == SHN_UNDEF)\n\t\t\tcontinue;\n\t\tif (strcmp(name, vdso_info.symstrings + sym->st_name))\n\t\t\tcontinue;\n\n\t\t/* Check symbol version. */\n\t\tif (vdso_info.versym\n\t\t    && !vdso_match_version(vdso_info.versym[chain],\n\t\t\t\t\t   version, ver_hash))\n\t\t\tcontinue;\n\n\t\treturn (void *)(vdso_info.load_offset + sym->st_value);\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n","source":"_posts/2019-11-23-elf-hash.md","raw":"---\ntitle: ELF的hash算法    \ndate: 2019-11-23\ncategories: develop \nauthor: yawei.zhang \n---\n\n### ..1. 目录  \n\n---  \n\n<!-- TOC -->\n\n- [..1. 目录](#1-目录)\n- [ELF HASH](#elf-hash)\n\t\t\t- [使用elf hash获取符号所在的偏移地址](#使用elf-hash获取符号所在的偏移地址)\n\t\t\t- [结论](#结论)\n- [ELF HASH源码](#elf-hash源码)\n\n<!-- /TOC -->\n\n### ELF HASH\nELF的哈希表提供了对符号表的访问 \n组织结构如下:     \n\n| labels\n|-----  \n| nbucket\n| nchain\n| bucket[0]\n| …\n| bucket[nbucket-1]\n| chain[0]\n| …\n| chain[nchain-1]\n\n###### 说明\n\n* bucket和chain的数量是相等的  \n* 每个符号值对应一个字符串  \n* 基本查找流程 \n  * 使用elf_hash得到hash值   \n  * 对hash值取模计算存放的符号值的桶  \n  * 如果该桶内没有数据则结束\n  * 如果桶内内有数据不匹配   \n    * 以该符号值为下标的 chain 中存在下一个符号值 \n    * 重复该步骤直到找到和目标字符串匹配   \n  * 找到符号值对应的字符串以及符号加载时的偏移信息和符号地址信息   \n\n###### 结论  \n* chain 的数量必然大于符号的数量  \n* 不考虑性能, 桶的数量可以小于符号的数量 也可以同时小于chain的数量   \n* 遇到冲突后从 chain 表中查找以出现冲突的符号值为下标位置的chain, 如果该chain无内容则从符号表中查找匹配的符号的值填充该chain  \n  * 如果有内容并且符号值依然冲突, 则用该冲突的符号值为索引继续查找下一个 \n  * 最差情况则相当于直接遍历符号表   \n\n\n<!-- more -->\n\n### ELF HASH源码   \nlinux 2.4.0 -> irqueue.c  \n[linux main](https://www.unix.com/man-page/osx/3ELF/elf_hash/)  \n```\n/*\n *    This function hash the input string ''name'' using the ELF hash\n *    function for strings.\n */\nstatic unsigned int hash(char* name)\n{\n    unsigned int h = 0;\n    unsigned int g;\n\n    while(*name) {\n        h = (h<<4) + *name++;\n        if ((g = (h & 0xf0000000)))\n            h ^=g>>24;\n        h &=~g;\n    }\n    return h;\n}\n```\n\n\n[vDSO/parse_vdso.c](https://elixir.bootlin.com/linux/v3.16/source/Documentation/vDSO/parse_vdso.c#L222)   \n使用elf hash获取符号所在的偏移地址   \n```\nvoid *vdso_sym(const char *version, const char *name)\n{\n\tunsigned long ver_hash;\n\tif (!vdso_info.valid)\n\t\treturn 0;\n\n\tver_hash = elf_hash(version);\n\tELF(Word) chain = vdso_info.bucket[elf_hash(name) % vdso_info.nbucket];\n\n\tfor (; chain != STN_UNDEF; chain = vdso_info.chain[chain]) {\n\t\tELF(Sym) *sym = &vdso_info.symtab[chain];\n\n\t\t/* Check for a defined global or weak function w/ right name. */\n\t\tif (ELF64_ST_TYPE(sym->st_info) != STT_FUNC)\n\t\t\tcontinue;\n\t\tif (ELF64_ST_BIND(sym->st_info) != STB_GLOBAL &&\n\t\t    ELF64_ST_BIND(sym->st_info) != STB_WEAK)\n\t\t\tcontinue;\n\t\tif (sym->st_shndx == SHN_UNDEF)\n\t\t\tcontinue;\n\t\tif (strcmp(name, vdso_info.symstrings + sym->st_name))\n\t\t\tcontinue;\n\n\t\t/* Check symbol version. */\n\t\tif (vdso_info.versym\n\t\t    && !vdso_match_version(vdso_info.versym[chain],\n\t\t\t\t\t   version, ver_hash))\n\t\t\tcontinue;\n\n\t\treturn (void *)(vdso_info.load_offset + sym->st_value);\n\t}\n\n\treturn 0;\n}\n```\n\n\n\n\n\n","slug":"2019-11-23-elf-hash","published":1,"updated":"2019-11-25T08:49:18.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej1000z7w5hegyvgjf3","content":"<h3><span id=\"1-目录\">..1. 目录</span></h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#1-目录\">..1. 目录</a></li>\n<li><a href=\"#elf-hash\">ELF HASH</a><pre><code>- [使用elf hash获取符号所在的偏移地址](#使用elf-hash获取符号所在的偏移地址)\n- [结论](#结论)</code></pre></li>\n<li><a href=\"#elf-hash源码\">ELF HASH源码</a></li>\n</ul>\n<!-- /TOC -->\n\n<h3><span id=\"elf-hash\">ELF HASH</span></h3><p>ELF的哈希表提供了对符号表的访问<br>组织结构如下:     </p>\n<table>\n<thead>\n<tr>\n<th>labels</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nbucket</td>\n</tr>\n<tr>\n<td>nchain</td>\n</tr>\n<tr>\n<td>bucket[0]</td>\n</tr>\n<tr>\n<td>…</td>\n</tr>\n<tr>\n<td>bucket[nbucket-1]</td>\n</tr>\n<tr>\n<td>chain[0]</td>\n</tr>\n<tr>\n<td>…</td>\n</tr>\n<tr>\n<td>chain[nchain-1]</td>\n</tr>\n</tbody></table>\n<h6><span id=\"说明\">说明</span></h6><ul>\n<li>bucket和chain的数量是相等的  </li>\n<li>每个符号值对应一个字符串  </li>\n<li>基本查找流程 <ul>\n<li>使用elf_hash得到hash值   </li>\n<li>对hash值取模计算存放的符号值的桶  </li>\n<li>如果该桶内没有数据则结束</li>\n<li>如果桶内内有数据不匹配   <ul>\n<li>以该符号值为下标的 chain 中存在下一个符号值 </li>\n<li>重复该步骤直到找到和目标字符串匹配   </li>\n</ul>\n</li>\n<li>找到符号值对应的字符串以及符号加载时的偏移信息和符号地址信息   </li>\n</ul>\n</li>\n</ul>\n<h6><span id=\"结论\">结论</span></h6><ul>\n<li>chain 的数量必然大于符号的数量  </li>\n<li>不考虑性能, 桶的数量可以小于符号的数量 也可以同时小于chain的数量   </li>\n<li>遇到冲突后从 chain 表中查找以出现冲突的符号值为下标位置的chain, 如果该chain无内容则从符号表中查找匹配的符号的值填充该chain  <ul>\n<li>如果有内容并且符号值依然冲突, 则用该冲突的符号值为索引继续查找下一个 </li>\n<li>最差情况则相当于直接遍历符号表   </li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3><span id=\"elf-hash源码\">ELF HASH源码</span></h3><p>linux 2.4.0 -&gt; irqueue.c<br><a href=\"https://www.unix.com/man-page/osx/3ELF/elf_hash/\" target=\"_blank\" rel=\"noopener\">linux main</a>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> *    This function hash the input string &#39;&#39;name&#39;&#39; using the ELF hash</span><br><span class=\"line\"> *    function for strings.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">static unsigned int hash(char* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned int h &#x3D; 0;</span><br><span class=\"line\">    unsigned int g;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(*name) &#123;</span><br><span class=\"line\">        h &#x3D; (h&lt;&lt;4) + *name++;</span><br><span class=\"line\">        if ((g &#x3D; (h &amp; 0xf0000000)))</span><br><span class=\"line\">            h ^&#x3D;g&gt;&gt;24;</span><br><span class=\"line\">        h &amp;&#x3D;~g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://elixir.bootlin.com/linux/v3.16/source/Documentation/vDSO/parse_vdso.c#L222\" target=\"_blank\" rel=\"noopener\">vDSO/parse_vdso.c</a><br>使用elf hash获取符号所在的偏移地址   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void *vdso_sym(const char *version, const char *name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tunsigned long ver_hash;</span><br><span class=\"line\">\tif (!vdso_info.valid)</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tver_hash &#x3D; elf_hash(version);</span><br><span class=\"line\">\tELF(Word) chain &#x3D; vdso_info.bucket[elf_hash(name) % vdso_info.nbucket];</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (; chain !&#x3D; STN_UNDEF; chain &#x3D; vdso_info.chain[chain]) &#123;</span><br><span class=\"line\">\t\tELF(Sym) *sym &#x3D; &amp;vdso_info.symtab[chain];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;* Check for a defined global or weak function w&#x2F; right name. *&#x2F;</span><br><span class=\"line\">\t\tif (ELF64_ST_TYPE(sym-&gt;st_info) !&#x3D; STT_FUNC)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (ELF64_ST_BIND(sym-&gt;st_info) !&#x3D; STB_GLOBAL &amp;&amp;</span><br><span class=\"line\">\t\t    ELF64_ST_BIND(sym-&gt;st_info) !&#x3D; STB_WEAK)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (sym-&gt;st_shndx &#x3D;&#x3D; SHN_UNDEF)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (strcmp(name, vdso_info.symstrings + sym-&gt;st_name))</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;* Check symbol version. *&#x2F;</span><br><span class=\"line\">\t\tif (vdso_info.versym</span><br><span class=\"line\">\t\t    &amp;&amp; !vdso_match_version(vdso_info.versym[chain],</span><br><span class=\"line\">\t\t\t\t\t   version, ver_hash))</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn (void *)(vdso_info.load_offset + sym-&gt;st_value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"1-目录\"><a href=\"#1-目录\" class=\"headerlink\" title=\"..1. 目录\"></a>..1. 目录</h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#1-目录\">..1. 目录</a></li>\n<li><a href=\"#elf-hash\">ELF HASH</a><pre><code>- [使用elf hash获取符号所在的偏移地址](#使用elf-hash获取符号所在的偏移地址)\n- [结论](#结论)</code></pre></li>\n<li><a href=\"#elf-hash源码\">ELF HASH源码</a></li>\n</ul>\n<!-- /TOC -->\n\n<h3 id=\"ELF-HASH\"><a href=\"#ELF-HASH\" class=\"headerlink\" title=\"ELF HASH\"></a>ELF HASH</h3><p>ELF的哈希表提供了对符号表的访问<br>组织结构如下:     </p>\n<table>\n<thead>\n<tr>\n<th>labels</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nbucket</td>\n</tr>\n<tr>\n<td>nchain</td>\n</tr>\n<tr>\n<td>bucket[0]</td>\n</tr>\n<tr>\n<td>…</td>\n</tr>\n<tr>\n<td>bucket[nbucket-1]</td>\n</tr>\n<tr>\n<td>chain[0]</td>\n</tr>\n<tr>\n<td>…</td>\n</tr>\n<tr>\n<td>chain[nchain-1]</td>\n</tr>\n</tbody></table>\n<h6 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h6><ul>\n<li>bucket和chain的数量是相等的  </li>\n<li>每个符号值对应一个字符串  </li>\n<li>基本查找流程 <ul>\n<li>使用elf_hash得到hash值   </li>\n<li>对hash值取模计算存放的符号值的桶  </li>\n<li>如果该桶内没有数据则结束</li>\n<li>如果桶内内有数据不匹配   <ul>\n<li>以该符号值为下标的 chain 中存在下一个符号值 </li>\n<li>重复该步骤直到找到和目标字符串匹配   </li>\n</ul>\n</li>\n<li>找到符号值对应的字符串以及符号加载时的偏移信息和符号地址信息   </li>\n</ul>\n</li>\n</ul>\n<h6 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h6><ul>\n<li>chain 的数量必然大于符号的数量  </li>\n<li>不考虑性能, 桶的数量可以小于符号的数量 也可以同时小于chain的数量   </li>\n<li>遇到冲突后从 chain 表中查找以出现冲突的符号值为下标位置的chain, 如果该chain无内容则从符号表中查找匹配的符号的值填充该chain  <ul>\n<li>如果有内容并且符号值依然冲突, 则用该冲突的符号值为索引继续查找下一个 </li>\n<li>最差情况则相当于直接遍历符号表   </li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"ELF-HASH源码\"><a href=\"#ELF-HASH源码\" class=\"headerlink\" title=\"ELF HASH源码\"></a>ELF HASH源码</h3><p>linux 2.4.0 -&gt; irqueue.c<br><a href=\"https://www.unix.com/man-page/osx/3ELF/elf_hash/\" target=\"_blank\" rel=\"noopener\">linux main</a>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> *    This function hash the input string &#39;&#39;name&#39;&#39; using the ELF hash</span><br><span class=\"line\"> *    function for strings.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">static unsigned int hash(char* name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned int h &#x3D; 0;</span><br><span class=\"line\">    unsigned int g;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(*name) &#123;</span><br><span class=\"line\">        h &#x3D; (h&lt;&lt;4) + *name++;</span><br><span class=\"line\">        if ((g &#x3D; (h &amp; 0xf0000000)))</span><br><span class=\"line\">            h ^&#x3D;g&gt;&gt;24;</span><br><span class=\"line\">        h &amp;&#x3D;~g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><a href=\"https://elixir.bootlin.com/linux/v3.16/source/Documentation/vDSO/parse_vdso.c#L222\" target=\"_blank\" rel=\"noopener\">vDSO/parse_vdso.c</a><br>使用elf hash获取符号所在的偏移地址   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void *vdso_sym(const char *version, const char *name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tunsigned long ver_hash;</span><br><span class=\"line\">\tif (!vdso_info.valid)</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\tver_hash &#x3D; elf_hash(version);</span><br><span class=\"line\">\tELF(Word) chain &#x3D; vdso_info.bucket[elf_hash(name) % vdso_info.nbucket];</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (; chain !&#x3D; STN_UNDEF; chain &#x3D; vdso_info.chain[chain]) &#123;</span><br><span class=\"line\">\t\tELF(Sym) *sym &#x3D; &amp;vdso_info.symtab[chain];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;* Check for a defined global or weak function w&#x2F; right name. *&#x2F;</span><br><span class=\"line\">\t\tif (ELF64_ST_TYPE(sym-&gt;st_info) !&#x3D; STT_FUNC)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (ELF64_ST_BIND(sym-&gt;st_info) !&#x3D; STB_GLOBAL &amp;&amp;</span><br><span class=\"line\">\t\t    ELF64_ST_BIND(sym-&gt;st_info) !&#x3D; STB_WEAK)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (sym-&gt;st_shndx &#x3D;&#x3D; SHN_UNDEF)</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\tif (strcmp(name, vdso_info.symstrings + sym-&gt;st_name))</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;* Check symbol version. *&#x2F;</span><br><span class=\"line\">\t\tif (vdso_info.versym</span><br><span class=\"line\">\t\t    &amp;&amp; !vdso_match_version(vdso_info.versym[chain],</span><br><span class=\"line\">\t\t\t\t\t   version, ver_hash))</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn (void *)(vdso_info.load_offset + sym-&gt;st_value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"位置无关代码生成(重定位)选项和说明 GCC","date":"2019-11-27T16:00:00.000Z","author":"yawei.zhang","_content":"\n### 目录  \n- [目录](#目录)\n- [选项说明](#选项说明)\n\n\n### 选项说明      \n\n\n* -rdynamic  \n  * 该选项指示链接器添加所有的符号到动态符号表, 不仅仅是用到的部分  \n  * 在INTEL X64 linux gcc-6 未测试出该选项有否的异同 (也可认为是默认存在)   \n    * 无论是否用过都会添加  \n\n* -fpic    (position-independent code)  编译选项和链接选项  \n  * 用于生成PIC 位置无关代码 的共享库, 在链接到EXE时如果GOT表超过某些特定机器指定的最大值时会返回错误, 这时需要使用-fPIC进行重新编译和链接   \n* -fPIC 编译选项和链接选项  \n  * 和-fpic一样, 但是回避掉了GOT大小的限制问题  \n  * 在编译和链接时都需要指定    \n\n\n> -fpic与-fpie的差别很细微,当使用-fpie时编译器知道当前的编译会生成一个PIC模式的 main executable(也就是有main入口的可执行文件),这样对于内部定义的global符号,就不 要考虑全局符号介入(global symbol interpose)的问题,对于这样的globals直接产生 PC-relative方式的代码而不需要通过GOT/PLT. –Ian Lance Taylor  \n\n\n* -fPIE  编译选项 \n  * 编译位置无关代码, 和PIC相同, 但是PIE假定了编译出的目标文件用于链接成可执行文件  \n  * 主要是访问外部符号时是否使用PLT/GOT  \n  * 实际可用-fPIC代替(不假定目标文件的最终链接目的)   \n  * -fpie 和-fpic一样  \n\n* -pie  链接器选项\n  * 用于生成 位置无关可执行文件 的可执行文件  \n  * 生成的可执行文件的ELF类型不是EXEC而是和共享库一样DYN\n  * 需要-fPIE配合使用 否则会出现访问外部符号时候无法正确找到的错误  \n    * 这个问题等同用PIC链接非PIC编译的库\n\n* 其他备注  \n\n  * -no-pie  新版本g++比如6版本 默认启用pie 如不需要则要显式去除  \n    * 部分编译器支持  \n\n  * -fno-plt  \n    * 部分编译器支持  \n\n  * -fno-jump-tables\n    * 部分编译器支持  \n  \n  * 动态库查找路径\n    * 链接时如果要使用-l 则需要先-L指定目录  \n    * 运行时如果不在系统指定目录的库需要设置LD_LIBRARY_PATH或者配置文件\n      * 例如 简单设置export LD_LIBRARY_PATH=\"./\" 路径    \n  \n  * --static 组织在链接时使用动态库\n\n  * --shared 生成动态库\n\n  * --static-libgcc 链接静态libgcc库\n\n  * --shared-libgcc 链接动态libgcc库\n\n  * -static和-shared可以同时存在 这样会创建共享库 但该共享库引用的其他库会静态地链接到该共享库中  \n    * -Wl,--whole-archive 告诉链接器对其后面出现的静态库包含的函数和变量打包到动态库  \n    * -Wl,--no-whole-archive 关掉特性  \n      * 举例  -Wl,--whole-archive -la -lb -lc -Wl,--no-whole-archive\n\n  * dlopen动态load共享库\n","source":"_posts/2019-11-28-pie-pic-linker-option.md","raw":"---\ntitle: 位置无关代码生成(重定位)选项和说明 GCC     \ndate: 2019-11-28\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 目录  \n- [目录](#目录)\n- [选项说明](#选项说明)\n\n\n### 选项说明      \n\n\n* -rdynamic  \n  * 该选项指示链接器添加所有的符号到动态符号表, 不仅仅是用到的部分  \n  * 在INTEL X64 linux gcc-6 未测试出该选项有否的异同 (也可认为是默认存在)   \n    * 无论是否用过都会添加  \n\n* -fpic    (position-independent code)  编译选项和链接选项  \n  * 用于生成PIC 位置无关代码 的共享库, 在链接到EXE时如果GOT表超过某些特定机器指定的最大值时会返回错误, 这时需要使用-fPIC进行重新编译和链接   \n* -fPIC 编译选项和链接选项  \n  * 和-fpic一样, 但是回避掉了GOT大小的限制问题  \n  * 在编译和链接时都需要指定    \n\n\n> -fpic与-fpie的差别很细微,当使用-fpie时编译器知道当前的编译会生成一个PIC模式的 main executable(也就是有main入口的可执行文件),这样对于内部定义的global符号,就不 要考虑全局符号介入(global symbol interpose)的问题,对于这样的globals直接产生 PC-relative方式的代码而不需要通过GOT/PLT. –Ian Lance Taylor  \n\n\n* -fPIE  编译选项 \n  * 编译位置无关代码, 和PIC相同, 但是PIE假定了编译出的目标文件用于链接成可执行文件  \n  * 主要是访问外部符号时是否使用PLT/GOT  \n  * 实际可用-fPIC代替(不假定目标文件的最终链接目的)   \n  * -fpie 和-fpic一样  \n\n* -pie  链接器选项\n  * 用于生成 位置无关可执行文件 的可执行文件  \n  * 生成的可执行文件的ELF类型不是EXEC而是和共享库一样DYN\n  * 需要-fPIE配合使用 否则会出现访问外部符号时候无法正确找到的错误  \n    * 这个问题等同用PIC链接非PIC编译的库\n\n* 其他备注  \n\n  * -no-pie  新版本g++比如6版本 默认启用pie 如不需要则要显式去除  \n    * 部分编译器支持  \n\n  * -fno-plt  \n    * 部分编译器支持  \n\n  * -fno-jump-tables\n    * 部分编译器支持  \n  \n  * 动态库查找路径\n    * 链接时如果要使用-l 则需要先-L指定目录  \n    * 运行时如果不在系统指定目录的库需要设置LD_LIBRARY_PATH或者配置文件\n      * 例如 简单设置export LD_LIBRARY_PATH=\"./\" 路径    \n  \n  * --static 组织在链接时使用动态库\n\n  * --shared 生成动态库\n\n  * --static-libgcc 链接静态libgcc库\n\n  * --shared-libgcc 链接动态libgcc库\n\n  * -static和-shared可以同时存在 这样会创建共享库 但该共享库引用的其他库会静态地链接到该共享库中  \n    * -Wl,--whole-archive 告诉链接器对其后面出现的静态库包含的函数和变量打包到动态库  \n    * -Wl,--no-whole-archive 关掉特性  \n      * 举例  -Wl,--whole-archive -la -lb -lc -Wl,--no-whole-archive\n\n  * dlopen动态load共享库\n","slug":"2019-11-28-pie-pic-linker-option","published":1,"updated":"2019-12-18T02:47:47.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej200117w5hgsjhegjo","content":"<h3><span id=\"目录\">目录</span></h3><ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#选项说明\">选项说明</a></li>\n</ul>\n<h3><span id=\"选项说明\">选项说明</span></h3><ul>\n<li><p>-rdynamic  </p>\n<ul>\n<li>该选项指示链接器添加所有的符号到动态符号表, 不仅仅是用到的部分  </li>\n<li>在INTEL X64 linux gcc-6 未测试出该选项有否的异同 (也可认为是默认存在)   <ul>\n<li>无论是否用过都会添加  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>-fpic    (position-independent code)  编译选项和链接选项  </p>\n<ul>\n<li>用于生成PIC 位置无关代码 的共享库, 在链接到EXE时如果GOT表超过某些特定机器指定的最大值时会返回错误, 这时需要使用-fPIC进行重新编译和链接   </li>\n</ul>\n</li>\n<li><p>-fPIC 编译选项和链接选项  </p>\n<ul>\n<li>和-fpic一样, 但是回避掉了GOT大小的限制问题  </li>\n<li>在编译和链接时都需要指定    </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>-fpic与-fpie的差别很细微,当使用-fpie时编译器知道当前的编译会生成一个PIC模式的 main executable(也就是有main入口的可执行文件),这样对于内部定义的global符号,就不 要考虑全局符号介入(global symbol interpose)的问题,对于这样的globals直接产生 PC-relative方式的代码而不需要通过GOT/PLT. –Ian Lance Taylor  </p>\n</blockquote>\n<ul>\n<li><p>-fPIE  编译选项 </p>\n<ul>\n<li>编译位置无关代码, 和PIC相同, 但是PIE假定了编译出的目标文件用于链接成可执行文件  </li>\n<li>主要是访问外部符号时是否使用PLT/GOT  </li>\n<li>实际可用-fPIC代替(不假定目标文件的最终链接目的)   </li>\n<li>-fpie 和-fpic一样  </li>\n</ul>\n</li>\n<li><p>-pie  链接器选项</p>\n<ul>\n<li>用于生成 位置无关可执行文件 的可执行文件  </li>\n<li>生成的可执行文件的ELF类型不是EXEC而是和共享库一样DYN</li>\n<li>需要-fPIE配合使用 否则会出现访问外部符号时候无法正确找到的错误  <ul>\n<li>这个问题等同用PIC链接非PIC编译的库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>其他备注  </p>\n<ul>\n<li><p>-no-pie  新版本g++比如6版本 默认启用pie 如不需要则要显式去除  </p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>-fno-plt  </p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>-fno-jump-tables</p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>动态库查找路径</p>\n<ul>\n<li>链接时如果要使用-l 则需要先-L指定目录  </li>\n<li>运行时如果不在系统指定目录的库需要设置LD_LIBRARY_PATH或者配置文件<ul>\n<li>例如 简单设置export LD_LIBRARY_PATH=”./“ 路径    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>–static 组织在链接时使用动态库</p>\n</li>\n<li><p>–shared 生成动态库</p>\n</li>\n<li><p>–static-libgcc 链接静态libgcc库</p>\n</li>\n<li><p>–shared-libgcc 链接动态libgcc库</p>\n</li>\n<li><p>-static和-shared可以同时存在 这样会创建共享库 但该共享库引用的其他库会静态地链接到该共享库中  </p>\n<ul>\n<li>-Wl,–whole-archive 告诉链接器对其后面出现的静态库包含的函数和变量打包到动态库  </li>\n<li>-Wl,–no-whole-archive 关掉特性  <ul>\n<li>举例  -Wl,–whole-archive -la -lb -lc -Wl,–no-whole-archive</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>dlopen动态load共享库</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#选项说明\">选项说明</a></li>\n</ul>\n<h3 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h3><ul>\n<li><p>-rdynamic  </p>\n<ul>\n<li>该选项指示链接器添加所有的符号到动态符号表, 不仅仅是用到的部分  </li>\n<li>在INTEL X64 linux gcc-6 未测试出该选项有否的异同 (也可认为是默认存在)   <ul>\n<li>无论是否用过都会添加  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>-fpic    (position-independent code)  编译选项和链接选项  </p>\n<ul>\n<li>用于生成PIC 位置无关代码 的共享库, 在链接到EXE时如果GOT表超过某些特定机器指定的最大值时会返回错误, 这时需要使用-fPIC进行重新编译和链接   </li>\n</ul>\n</li>\n<li><p>-fPIC 编译选项和链接选项  </p>\n<ul>\n<li>和-fpic一样, 但是回避掉了GOT大小的限制问题  </li>\n<li>在编译和链接时都需要指定    </li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>-fpic与-fpie的差别很细微,当使用-fpie时编译器知道当前的编译会生成一个PIC模式的 main executable(也就是有main入口的可执行文件),这样对于内部定义的global符号,就不 要考虑全局符号介入(global symbol interpose)的问题,对于这样的globals直接产生 PC-relative方式的代码而不需要通过GOT/PLT. –Ian Lance Taylor  </p>\n</blockquote>\n<ul>\n<li><p>-fPIE  编译选项 </p>\n<ul>\n<li>编译位置无关代码, 和PIC相同, 但是PIE假定了编译出的目标文件用于链接成可执行文件  </li>\n<li>主要是访问外部符号时是否使用PLT/GOT  </li>\n<li>实际可用-fPIC代替(不假定目标文件的最终链接目的)   </li>\n<li>-fpie 和-fpic一样  </li>\n</ul>\n</li>\n<li><p>-pie  链接器选项</p>\n<ul>\n<li>用于生成 位置无关可执行文件 的可执行文件  </li>\n<li>生成的可执行文件的ELF类型不是EXEC而是和共享库一样DYN</li>\n<li>需要-fPIE配合使用 否则会出现访问外部符号时候无法正确找到的错误  <ul>\n<li>这个问题等同用PIC链接非PIC编译的库</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>其他备注  </p>\n<ul>\n<li><p>-no-pie  新版本g++比如6版本 默认启用pie 如不需要则要显式去除  </p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>-fno-plt  </p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>-fno-jump-tables</p>\n<ul>\n<li>部分编译器支持  </li>\n</ul>\n</li>\n<li><p>动态库查找路径</p>\n<ul>\n<li>链接时如果要使用-l 则需要先-L指定目录  </li>\n<li>运行时如果不在系统指定目录的库需要设置LD_LIBRARY_PATH或者配置文件<ul>\n<li>例如 简单设置export LD_LIBRARY_PATH=”./“ 路径    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>–static 组织在链接时使用动态库</p>\n</li>\n<li><p>–shared 生成动态库</p>\n</li>\n<li><p>–static-libgcc 链接静态libgcc库</p>\n</li>\n<li><p>–shared-libgcc 链接动态libgcc库</p>\n</li>\n<li><p>-static和-shared可以同时存在 这样会创建共享库 但该共享库引用的其他库会静态地链接到该共享库中  </p>\n<ul>\n<li>-Wl,–whole-archive 告诉链接器对其后面出现的静态库包含的函数和变量打包到动态库  </li>\n<li>-Wl,–no-whole-archive 关掉特性  <ul>\n<li>举例  -Wl,–whole-archive -la -lb -lc -Wl,–no-whole-archive</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>dlopen动态load共享库</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"AS-A 和 HAS-A 概念","date":"2019-11-28T16:00:00.000Z","author":"yawei.zhang","_content":"\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [词的关系概括](#词的关系概括)\n    - [polysemy 词汇蕴含规则](#polysemy-词汇蕴含规则)\n        - [linear polysemy 线性多义](#linear-polysemy-线性多义)\n        - [non-linear polysemy 非线性多义](#non-linear-polysemy-非线性多义)\n        - [一词多义](#一词多义)\n    - [hyperonym–hyponym 上下义关系](#hyperonymhyponym-上下义关系)\n    - [autonymy 反义关系](#autonymy-反义关系)\n    - [synonymy 同义关系](#synonymy-同义关系)\n- [语义聚合关系](#语义聚合关系)\n    - [上下义词](#上下义词)\n    - [总分词](#总分词)\n    - [类义词(狭义)](#类义词狭义)\n- [面向对象中的关系](#面向对象中的关系)\n    - [类型和实例关系](#类型和实例关系)\n    - [hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系](#hyperonymhyponym-supertypesubtype-上下义关系-超类子类关系--is-a-关系-继承泛化关系)\n    - [holonym–meronym  整体部分关系 HAS-A 关系](#holonymmeronym--整体部分关系-has-a-关系)\n- [集合关系](#集合关系)\n\n<!-- /TOC -->\n### 词的关系概括  \n#### polysemy 词汇蕴含规则     \n##### linear polysemy 线性多义\n* autohyponymy, where the basic sense leads to a specialised sense  基本意义->特殊意义  \n* automeronymy, where the basic sense leads to a subpart sense 基本意义->部分意义  整体->局部  \n* autohyperonymy or autosuperordination, where the basic sense leads to a wider sense   基本意义->宽泛意义  下位->上位意义  \n* autoholonymy, where the basic sense leads to a larger sense  基本意义->更多意义 \n##### non-linear polysemy 非线性多义  \n* metonymy  转喻 借喻    \n* metaphor 隐喻  \n##### 一词多义    \n* 原始意义与衍生意义(派生)   \n* 普通意义与特殊意义  \n* 抽象意义与具体意义  \n* 字面意义与比喻意义  \n#### hyperonym–hyponym 上下义关系  \n#### autonymy 反义关系  \n#### synonymy 同义关系 \n\n\n### 语义聚合关系\n#### 上下义词  \n上下义关系代表了概念上的蕴含关系, 或者说在类型层级上, 下位类一定带有上位类的所有属性.  可以用 IS A 来表达.  \n\n例如 上义词 水果  下义词 香蕉.  香蕉 IS A 水果  但是不能反过来说 水果 IS A  香蕉   \n\n上下义关系也可以进入 'A包含B'的格式,  比如说香蕉包含水果的属性  \n\n#### 总分词 \n整体部分关系   用HAS A来表达  \n\n例如 门  和  门套/门板    可以进入'A包含B'的格式 但是不能用  'B是A'的格式   \n\n#### 类义词(狭义) \n多元关系中的同级词语  例如门下的 门套和门板的关系  \n\n\n\n\n### 面向对象中的关系   \n#### 类型和实例关系   \n* Type–token distinction  例如一个语句中  rose is a rose 中有三个type 4个token   \n  * type == classes  \n  * object == instances ==token  \n* type of    \n  * (实例)的类型     \n* instance of   \n  * (类型) 的实例  \n\n#### hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系     \n* 子类包含所有超类的属性/方法 可以用 \"子类 IS A 父类\" 来进行判定和使用   \n* 所有可以对超类适用的规范同样也可以适用于其子类   \n  * 李氏替换原则\n    * Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.  \n    * 使用基类对象指针或引用的函数必须能够在不了解衍生类的条件下使用衍生类的对象   \n    * 李氏替换原则中 避免重写父类的非抽象方法, 而多态的实现是通过重写抽象方法实现.   \n    * 面向对象中的抽象方法是定义方法的声明规范而不约束其实现因此扔可 概括为上句 \" 所有可以对超类适用的规范同样也可以适用于其子类\"   \n\n#### holonym–meronym  整体部分关系 HAS-A 关系  \n\n*  aggregation 聚合关系  不存在所属权  HAS-A 关系  \n   *  部分可以脱离/超出整体的生命周期独立存在 比如家庭成员和家庭  玩家和工会  \n  \n*  composition 组成关系  存在所属权  PART-OF| HAS-A 关系 \n   * 部分不可以脱离整体的生命周期管理 比如四肢和人体  \n   * 对于编程来讲, 我们实例化玩家对象, 实例化背包对象, 玩家下线需要连带清理背包对象.   \n  \n*  containment 包含关系   member-of | contains-a | part-of|HAS-A 关系  \n   *  对成员的访问必须经过整体  成员为内涵状态  \n   *  对于C++来说 privete:下的数据成员必须使用该类的接口访问  \n   *  例如玩家对象和玩家的等级属性  \n\n\n\n\n### 集合关系\n从更抽象的角度来说\nIS-A的关系判定为  A 是不是 B的特化 (specialization)\n从集合关系来讲则为 A ⊃ B   A是不是B的真超集   \n\n\nHAS-A的关系判定为 B 是不是 A的组成部分\n从集合关系来讲则为 B ⊂ A         B 是不是A的的真子集   \n\n\nALIAS-A (没有这个术语) 的关系则是 A = B 即 别名.   \n\n\n从集合角度来讲, 如果B是A的特化, 那么A同时也是B的构成,  即:\n* B ⊃ A(IS-A) 可以推导出 A ⊂ B (HAS-A)  \n* 但是IS-A限定了 A ⊂ B(HAS-A) 不可以推导出B ⊃ A (IS-A)     (IS-A限定特化后具有相同的拓扑结构)\n\n因此\n\n这IS-A这种关系 是 HAS-A 的特化.  即  IS-A  ⊃ HAS-A \n\n换成具体到OO语言里,  继承是一种特殊的聚合方式.\n聚合更具有一般化的性质 更松散  \n\n因此 IS-A  is a  HAS-A  通过IS-A到HAS-A的转化可获得更好的一般性(泛化)  泛化转关联本身也是一种泛化\n\n","source":"_posts/2019-12-06-is-a-and-has-a.md","raw":"---\ntitle: AS-A 和 HAS-A 概念  \ndate: 2019-11-29\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [词的关系概括](#词的关系概括)\n    - [polysemy 词汇蕴含规则](#polysemy-词汇蕴含规则)\n        - [linear polysemy 线性多义](#linear-polysemy-线性多义)\n        - [non-linear polysemy 非线性多义](#non-linear-polysemy-非线性多义)\n        - [一词多义](#一词多义)\n    - [hyperonym–hyponym 上下义关系](#hyperonymhyponym-上下义关系)\n    - [autonymy 反义关系](#autonymy-反义关系)\n    - [synonymy 同义关系](#synonymy-同义关系)\n- [语义聚合关系](#语义聚合关系)\n    - [上下义词](#上下义词)\n    - [总分词](#总分词)\n    - [类义词(狭义)](#类义词狭义)\n- [面向对象中的关系](#面向对象中的关系)\n    - [类型和实例关系](#类型和实例关系)\n    - [hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系](#hyperonymhyponym-supertypesubtype-上下义关系-超类子类关系--is-a-关系-继承泛化关系)\n    - [holonym–meronym  整体部分关系 HAS-A 关系](#holonymmeronym--整体部分关系-has-a-关系)\n- [集合关系](#集合关系)\n\n<!-- /TOC -->\n### 词的关系概括  \n#### polysemy 词汇蕴含规则     \n##### linear polysemy 线性多义\n* autohyponymy, where the basic sense leads to a specialised sense  基本意义->特殊意义  \n* automeronymy, where the basic sense leads to a subpart sense 基本意义->部分意义  整体->局部  \n* autohyperonymy or autosuperordination, where the basic sense leads to a wider sense   基本意义->宽泛意义  下位->上位意义  \n* autoholonymy, where the basic sense leads to a larger sense  基本意义->更多意义 \n##### non-linear polysemy 非线性多义  \n* metonymy  转喻 借喻    \n* metaphor 隐喻  \n##### 一词多义    \n* 原始意义与衍生意义(派生)   \n* 普通意义与特殊意义  \n* 抽象意义与具体意义  \n* 字面意义与比喻意义  \n#### hyperonym–hyponym 上下义关系  \n#### autonymy 反义关系  \n#### synonymy 同义关系 \n\n\n### 语义聚合关系\n#### 上下义词  \n上下义关系代表了概念上的蕴含关系, 或者说在类型层级上, 下位类一定带有上位类的所有属性.  可以用 IS A 来表达.  \n\n例如 上义词 水果  下义词 香蕉.  香蕉 IS A 水果  但是不能反过来说 水果 IS A  香蕉   \n\n上下义关系也可以进入 'A包含B'的格式,  比如说香蕉包含水果的属性  \n\n#### 总分词 \n整体部分关系   用HAS A来表达  \n\n例如 门  和  门套/门板    可以进入'A包含B'的格式 但是不能用  'B是A'的格式   \n\n#### 类义词(狭义) \n多元关系中的同级词语  例如门下的 门套和门板的关系  \n\n\n\n\n### 面向对象中的关系   \n#### 类型和实例关系   \n* Type–token distinction  例如一个语句中  rose is a rose 中有三个type 4个token   \n  * type == classes  \n  * object == instances ==token  \n* type of    \n  * (实例)的类型     \n* instance of   \n  * (类型) 的实例  \n\n#### hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系     \n* 子类包含所有超类的属性/方法 可以用 \"子类 IS A 父类\" 来进行判定和使用   \n* 所有可以对超类适用的规范同样也可以适用于其子类   \n  * 李氏替换原则\n    * Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.  \n    * 使用基类对象指针或引用的函数必须能够在不了解衍生类的条件下使用衍生类的对象   \n    * 李氏替换原则中 避免重写父类的非抽象方法, 而多态的实现是通过重写抽象方法实现.   \n    * 面向对象中的抽象方法是定义方法的声明规范而不约束其实现因此扔可 概括为上句 \" 所有可以对超类适用的规范同样也可以适用于其子类\"   \n\n#### holonym–meronym  整体部分关系 HAS-A 关系  \n\n*  aggregation 聚合关系  不存在所属权  HAS-A 关系  \n   *  部分可以脱离/超出整体的生命周期独立存在 比如家庭成员和家庭  玩家和工会  \n  \n*  composition 组成关系  存在所属权  PART-OF| HAS-A 关系 \n   * 部分不可以脱离整体的生命周期管理 比如四肢和人体  \n   * 对于编程来讲, 我们实例化玩家对象, 实例化背包对象, 玩家下线需要连带清理背包对象.   \n  \n*  containment 包含关系   member-of | contains-a | part-of|HAS-A 关系  \n   *  对成员的访问必须经过整体  成员为内涵状态  \n   *  对于C++来说 privete:下的数据成员必须使用该类的接口访问  \n   *  例如玩家对象和玩家的等级属性  \n\n\n\n\n### 集合关系\n从更抽象的角度来说\nIS-A的关系判定为  A 是不是 B的特化 (specialization)\n从集合关系来讲则为 A ⊃ B   A是不是B的真超集   \n\n\nHAS-A的关系判定为 B 是不是 A的组成部分\n从集合关系来讲则为 B ⊂ A         B 是不是A的的真子集   \n\n\nALIAS-A (没有这个术语) 的关系则是 A = B 即 别名.   \n\n\n从集合角度来讲, 如果B是A的特化, 那么A同时也是B的构成,  即:\n* B ⊃ A(IS-A) 可以推导出 A ⊂ B (HAS-A)  \n* 但是IS-A限定了 A ⊂ B(HAS-A) 不可以推导出B ⊃ A (IS-A)     (IS-A限定特化后具有相同的拓扑结构)\n\n因此\n\n这IS-A这种关系 是 HAS-A 的特化.  即  IS-A  ⊃ HAS-A \n\n换成具体到OO语言里,  继承是一种特殊的聚合方式.\n聚合更具有一般化的性质 更松散  \n\n因此 IS-A  is a  HAS-A  通过IS-A到HAS-A的转化可获得更好的一般性(泛化)  泛化转关联本身也是一种泛化\n\n","slug":"2019-12-06-is-a-and-has-a","published":1,"updated":"2019-12-10T07:09:03.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej300137w5hhaz20dnd","content":"<h3><span id=\"目录\">目录</span></h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#词的关系概括\">词的关系概括</a><ul>\n<li><a href=\"#polysemy-词汇蕴含规则\">polysemy 词汇蕴含规则</a><ul>\n<li><a href=\"#linear-polysemy-线性多义\">linear polysemy 线性多义</a></li>\n<li><a href=\"#non-linear-polysemy-非线性多义\">non-linear polysemy 非线性多义</a></li>\n<li><a href=\"#一词多义\">一词多义</a></li>\n</ul>\n</li>\n<li><a href=\"#hyperonymhyponym-上下义关系\">hyperonym–hyponym 上下义关系</a></li>\n<li><a href=\"#autonymy-反义关系\">autonymy 反义关系</a></li>\n<li><a href=\"#synonymy-同义关系\">synonymy 同义关系</a></li>\n</ul>\n</li>\n<li><a href=\"#语义聚合关系\">语义聚合关系</a><ul>\n<li><a href=\"#上下义词\">上下义词</a></li>\n<li><a href=\"#总分词\">总分词</a></li>\n<li><a href=\"#类义词狭义\">类义词(狭义)</a></li>\n</ul>\n</li>\n<li><a href=\"#面向对象中的关系\">面向对象中的关系</a><ul>\n<li><a href=\"#类型和实例关系\">类型和实例关系</a></li>\n<li><a href=\"#hyperonymhyponym-supertypesubtype-上下义关系-超类子类关系--is-a-关系-继承泛化关系\">hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系</a></li>\n<li><a href=\"#holonymmeronym--整体部分关系-has-a-关系\">holonym–meronym  整体部分关系 HAS-A 关系</a></li>\n</ul>\n</li>\n<li><a href=\"#集合关系\">集合关系</a></li>\n</ul>\n<!-- /TOC -->\n<h3><span id=\"词的关系概括\">词的关系概括</span></h3><h4><span id=\"polysemy-词汇蕴含规则\">polysemy 词汇蕴含规则</span></h4><h5><span id=\"linear-polysemy-线性多义\">linear polysemy 线性多义</span></h5><ul>\n<li>autohyponymy, where the basic sense leads to a specialised sense  基本意义-&gt;特殊意义  </li>\n<li>automeronymy, where the basic sense leads to a subpart sense 基本意义-&gt;部分意义  整体-&gt;局部  </li>\n<li>autohyperonymy or autosuperordination, where the basic sense leads to a wider sense   基本意义-&gt;宽泛意义  下位-&gt;上位意义  </li>\n<li>autoholonymy, where the basic sense leads to a larger sense  基本意义-&gt;更多意义 <h5><span id=\"non-linear-polysemy-非线性多义\">non-linear polysemy 非线性多义</span></h5></li>\n<li>metonymy  转喻 借喻    </li>\n<li>metaphor 隐喻  <h5><span id=\"一词多义\">一词多义</span></h5></li>\n<li>原始意义与衍生意义(派生)   </li>\n<li>普通意义与特殊意义  </li>\n<li>抽象意义与具体意义  </li>\n<li>字面意义与比喻意义  <h4><span id=\"hyperonymhyponym-上下义关系\">hyperonym–hyponym 上下义关系</span></h4><h4><span id=\"autonymy-反义关系\">autonymy 反义关系</span></h4><h4><span id=\"synonymy-同义关系\">synonymy 同义关系</span></h4></li>\n</ul>\n<h3><span id=\"语义聚合关系\">语义聚合关系</span></h3><h4><span id=\"上下义词\">上下义词</span></h4><p>上下义关系代表了概念上的蕴含关系, 或者说在类型层级上, 下位类一定带有上位类的所有属性.  可以用 IS A 来表达.  </p>\n<p>例如 上义词 水果  下义词 香蕉.  香蕉 IS A 水果  但是不能反过来说 水果 IS A  香蕉   </p>\n<p>上下义关系也可以进入 ‘A包含B’的格式,  比如说香蕉包含水果的属性  </p>\n<h4><span id=\"总分词\">总分词</span></h4><p>整体部分关系   用HAS A来表达  </p>\n<p>例如 门  和  门套/门板    可以进入’A包含B’的格式 但是不能用  ‘B是A’的格式   </p>\n<h4><span id=\"类义词狭义\">类义词(狭义)</span></h4><p>多元关系中的同级词语  例如门下的 门套和门板的关系  </p>\n<h3><span id=\"面向对象中的关系\">面向对象中的关系</span></h3><h4><span id=\"类型和实例关系\">类型和实例关系</span></h4><ul>\n<li>Type–token distinction  例如一个语句中  rose is a rose 中有三个type 4个token   <ul>\n<li>type == classes  </li>\n<li>object == instances ==token  </li>\n</ul>\n</li>\n<li>type of    <ul>\n<li>(实例)的类型     </li>\n</ul>\n</li>\n<li>instance of   <ul>\n<li>(类型) 的实例  </li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"hyperonymhyponym-supertypesubtype-上下义关系-超类子类关系-is-a-关系-继承泛化关系\">hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系</span></h4><ul>\n<li>子类包含所有超类的属性/方法 可以用 “子类 IS A 父类” 来进行判定和使用   </li>\n<li>所有可以对超类适用的规范同样也可以适用于其子类   <ul>\n<li>李氏替换原则<ul>\n<li>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.  </li>\n<li>使用基类对象指针或引用的函数必须能够在不了解衍生类的条件下使用衍生类的对象   </li>\n<li>李氏替换原则中 避免重写父类的非抽象方法, 而多态的实现是通过重写抽象方法实现.   </li>\n<li>面向对象中的抽象方法是定义方法的声明规范而不约束其实现因此扔可 概括为上句 “ 所有可以对超类适用的规范同样也可以适用于其子类”   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"holonymmeronym-整体部分关系-has-a-关系\">holonym–meronym  整体部分关系 HAS-A 关系</span></h4><ul>\n<li><p>aggregation 聚合关系  不存在所属权  HAS-A 关系  </p>\n<ul>\n<li>部分可以脱离/超出整体的生命周期独立存在 比如家庭成员和家庭  玩家和工会  </li>\n</ul>\n</li>\n<li><p>composition 组成关系  存在所属权  PART-OF| HAS-A 关系 </p>\n<ul>\n<li>部分不可以脱离整体的生命周期管理 比如四肢和人体  </li>\n<li>对于编程来讲, 我们实例化玩家对象, 实例化背包对象, 玩家下线需要连带清理背包对象.   </li>\n</ul>\n</li>\n<li><p>containment 包含关系   member-of | contains-a | part-of|HAS-A 关系  </p>\n<ul>\n<li>对成员的访问必须经过整体  成员为内涵状态  </li>\n<li>对于C++来说 privete:下的数据成员必须使用该类的接口访问  </li>\n<li>例如玩家对象和玩家的等级属性  </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"集合关系\">集合关系</span></h3><p>从更抽象的角度来说<br>IS-A的关系判定为  A 是不是 B的特化 (specialization)<br>从集合关系来讲则为 A ⊃ B   A是不是B的真超集   </p>\n<p>HAS-A的关系判定为 B 是不是 A的组成部分<br>从集合关系来讲则为 B ⊂ A         B 是不是A的的真子集   </p>\n<p>ALIAS-A (没有这个术语) 的关系则是 A = B 即 别名.   </p>\n<p>从集合角度来讲, 如果B是A的特化, 那么A同时也是B的构成,  即:</p>\n<ul>\n<li>B ⊃ A(IS-A) 可以推导出 A ⊂ B (HAS-A)  </li>\n<li>但是IS-A限定了 A ⊂ B(HAS-A) 不可以推导出B ⊃ A (IS-A)     (IS-A限定特化后具有相同的拓扑结构)</li>\n</ul>\n<p>因此</p>\n<p>这IS-A这种关系 是 HAS-A 的特化.  即  IS-A  ⊃ HAS-A </p>\n<p>换成具体到OO语言里,  继承是一种特殊的聚合方式.<br>聚合更具有一般化的性质 更松散  </p>\n<p>因此 IS-A  is a  HAS-A  通过IS-A到HAS-A的转化可获得更好的一般性(泛化)  泛化转关联本身也是一种泛化</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#词的关系概括\">词的关系概括</a><ul>\n<li><a href=\"#polysemy-词汇蕴含规则\">polysemy 词汇蕴含规则</a><ul>\n<li><a href=\"#linear-polysemy-线性多义\">linear polysemy 线性多义</a></li>\n<li><a href=\"#non-linear-polysemy-非线性多义\">non-linear polysemy 非线性多义</a></li>\n<li><a href=\"#一词多义\">一词多义</a></li>\n</ul>\n</li>\n<li><a href=\"#hyperonymhyponym-上下义关系\">hyperonym–hyponym 上下义关系</a></li>\n<li><a href=\"#autonymy-反义关系\">autonymy 反义关系</a></li>\n<li><a href=\"#synonymy-同义关系\">synonymy 同义关系</a></li>\n</ul>\n</li>\n<li><a href=\"#语义聚合关系\">语义聚合关系</a><ul>\n<li><a href=\"#上下义词\">上下义词</a></li>\n<li><a href=\"#总分词\">总分词</a></li>\n<li><a href=\"#类义词狭义\">类义词(狭义)</a></li>\n</ul>\n</li>\n<li><a href=\"#面向对象中的关系\">面向对象中的关系</a><ul>\n<li><a href=\"#类型和实例关系\">类型和实例关系</a></li>\n<li><a href=\"#hyperonymhyponym-supertypesubtype-上下义关系-超类子类关系--is-a-关系-继承泛化关系\">hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系</a></li>\n<li><a href=\"#holonymmeronym--整体部分关系-has-a-关系\">holonym–meronym  整体部分关系 HAS-A 关系</a></li>\n</ul>\n</li>\n<li><a href=\"#集合关系\">集合关系</a></li>\n</ul>\n<!-- /TOC -->\n<h3 id=\"词的关系概括\"><a href=\"#词的关系概括\" class=\"headerlink\" title=\"词的关系概括\"></a>词的关系概括</h3><h4 id=\"polysemy-词汇蕴含规则\"><a href=\"#polysemy-词汇蕴含规则\" class=\"headerlink\" title=\"polysemy 词汇蕴含规则\"></a>polysemy 词汇蕴含规则</h4><h5 id=\"linear-polysemy-线性多义\"><a href=\"#linear-polysemy-线性多义\" class=\"headerlink\" title=\"linear polysemy 线性多义\"></a>linear polysemy 线性多义</h5><ul>\n<li>autohyponymy, where the basic sense leads to a specialised sense  基本意义-&gt;特殊意义  </li>\n<li>automeronymy, where the basic sense leads to a subpart sense 基本意义-&gt;部分意义  整体-&gt;局部  </li>\n<li>autohyperonymy or autosuperordination, where the basic sense leads to a wider sense   基本意义-&gt;宽泛意义  下位-&gt;上位意义  </li>\n<li>autoholonymy, where the basic sense leads to a larger sense  基本意义-&gt;更多意义 <h5 id=\"non-linear-polysemy-非线性多义\"><a href=\"#non-linear-polysemy-非线性多义\" class=\"headerlink\" title=\"non-linear polysemy 非线性多义\"></a>non-linear polysemy 非线性多义</h5></li>\n<li>metonymy  转喻 借喻    </li>\n<li>metaphor 隐喻  <h5 id=\"一词多义\"><a href=\"#一词多义\" class=\"headerlink\" title=\"一词多义\"></a>一词多义</h5></li>\n<li>原始意义与衍生意义(派生)   </li>\n<li>普通意义与特殊意义  </li>\n<li>抽象意义与具体意义  </li>\n<li>字面意义与比喻意义  <h4 id=\"hyperonym–hyponym-上下义关系\"><a href=\"#hyperonym–hyponym-上下义关系\" class=\"headerlink\" title=\"hyperonym–hyponym 上下义关系\"></a>hyperonym–hyponym 上下义关系</h4><h4 id=\"autonymy-反义关系\"><a href=\"#autonymy-反义关系\" class=\"headerlink\" title=\"autonymy 反义关系\"></a>autonymy 反义关系</h4><h4 id=\"synonymy-同义关系\"><a href=\"#synonymy-同义关系\" class=\"headerlink\" title=\"synonymy 同义关系\"></a>synonymy 同义关系</h4></li>\n</ul>\n<h3 id=\"语义聚合关系\"><a href=\"#语义聚合关系\" class=\"headerlink\" title=\"语义聚合关系\"></a>语义聚合关系</h3><h4 id=\"上下义词\"><a href=\"#上下义词\" class=\"headerlink\" title=\"上下义词\"></a>上下义词</h4><p>上下义关系代表了概念上的蕴含关系, 或者说在类型层级上, 下位类一定带有上位类的所有属性.  可以用 IS A 来表达.  </p>\n<p>例如 上义词 水果  下义词 香蕉.  香蕉 IS A 水果  但是不能反过来说 水果 IS A  香蕉   </p>\n<p>上下义关系也可以进入 ‘A包含B’的格式,  比如说香蕉包含水果的属性  </p>\n<h4 id=\"总分词\"><a href=\"#总分词\" class=\"headerlink\" title=\"总分词\"></a>总分词</h4><p>整体部分关系   用HAS A来表达  </p>\n<p>例如 门  和  门套/门板    可以进入’A包含B’的格式 但是不能用  ‘B是A’的格式   </p>\n<h4 id=\"类义词-狭义\"><a href=\"#类义词-狭义\" class=\"headerlink\" title=\"类义词(狭义)\"></a>类义词(狭义)</h4><p>多元关系中的同级词语  例如门下的 门套和门板的关系  </p>\n<h3 id=\"面向对象中的关系\"><a href=\"#面向对象中的关系\" class=\"headerlink\" title=\"面向对象中的关系\"></a>面向对象中的关系</h3><h4 id=\"类型和实例关系\"><a href=\"#类型和实例关系\" class=\"headerlink\" title=\"类型和实例关系\"></a>类型和实例关系</h4><ul>\n<li>Type–token distinction  例如一个语句中  rose is a rose 中有三个type 4个token   <ul>\n<li>type == classes  </li>\n<li>object == instances ==token  </li>\n</ul>\n</li>\n<li>type of    <ul>\n<li>(实例)的类型     </li>\n</ul>\n</li>\n<li>instance of   <ul>\n<li>(类型) 的实例  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"hyperonym–hyponym-supertype–subtype-上下义关系-超类子类关系-IS-A-关系-继承-泛化关系\"><a href=\"#hyperonym–hyponym-supertype–subtype-上下义关系-超类子类关系-IS-A-关系-继承-泛化关系\" class=\"headerlink\" title=\"hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系\"></a>hyperonym–hyponym (supertype–subtype) 上下义关系, 超类子类关系  IS-A 关系 继承/泛化关系</h4><ul>\n<li>子类包含所有超类的属性/方法 可以用 “子类 IS A 父类” 来进行判定和使用   </li>\n<li>所有可以对超类适用的规范同样也可以适用于其子类   <ul>\n<li>李氏替换原则<ul>\n<li>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.  </li>\n<li>使用基类对象指针或引用的函数必须能够在不了解衍生类的条件下使用衍生类的对象   </li>\n<li>李氏替换原则中 避免重写父类的非抽象方法, 而多态的实现是通过重写抽象方法实现.   </li>\n<li>面向对象中的抽象方法是定义方法的声明规范而不约束其实现因此扔可 概括为上句 “ 所有可以对超类适用的规范同样也可以适用于其子类”   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"holonym–meronym-整体部分关系-HAS-A-关系\"><a href=\"#holonym–meronym-整体部分关系-HAS-A-关系\" class=\"headerlink\" title=\"holonym–meronym  整体部分关系 HAS-A 关系\"></a>holonym–meronym  整体部分关系 HAS-A 关系</h4><ul>\n<li><p>aggregation 聚合关系  不存在所属权  HAS-A 关系  </p>\n<ul>\n<li>部分可以脱离/超出整体的生命周期独立存在 比如家庭成员和家庭  玩家和工会  </li>\n</ul>\n</li>\n<li><p>composition 组成关系  存在所属权  PART-OF| HAS-A 关系 </p>\n<ul>\n<li>部分不可以脱离整体的生命周期管理 比如四肢和人体  </li>\n<li>对于编程来讲, 我们实例化玩家对象, 实例化背包对象, 玩家下线需要连带清理背包对象.   </li>\n</ul>\n</li>\n<li><p>containment 包含关系   member-of | contains-a | part-of|HAS-A 关系  </p>\n<ul>\n<li>对成员的访问必须经过整体  成员为内涵状态  </li>\n<li>对于C++来说 privete:下的数据成员必须使用该类的接口访问  </li>\n<li>例如玩家对象和玩家的等级属性  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"集合关系\"><a href=\"#集合关系\" class=\"headerlink\" title=\"集合关系\"></a>集合关系</h3><p>从更抽象的角度来说<br>IS-A的关系判定为  A 是不是 B的特化 (specialization)<br>从集合关系来讲则为 A ⊃ B   A是不是B的真超集   </p>\n<p>HAS-A的关系判定为 B 是不是 A的组成部分<br>从集合关系来讲则为 B ⊂ A         B 是不是A的的真子集   </p>\n<p>ALIAS-A (没有这个术语) 的关系则是 A = B 即 别名.   </p>\n<p>从集合角度来讲, 如果B是A的特化, 那么A同时也是B的构成,  即:</p>\n<ul>\n<li>B ⊃ A(IS-A) 可以推导出 A ⊂ B (HAS-A)  </li>\n<li>但是IS-A限定了 A ⊂ B(HAS-A) 不可以推导出B ⊃ A (IS-A)     (IS-A限定特化后具有相同的拓扑结构)</li>\n</ul>\n<p>因此</p>\n<p>这IS-A这种关系 是 HAS-A 的特化.  即  IS-A  ⊃ HAS-A </p>\n<p>换成具体到OO语言里,  继承是一种特殊的聚合方式.<br>聚合更具有一般化的性质 更松散  </p>\n<p>因此 IS-A  is a  HAS-A  通过IS-A到HAS-A的转化可获得更好的一般性(泛化)  泛化转关联本身也是一种泛化</p>\n"},{"title":"汇编语法/寻址/寄存器/代码模型(GNU assembler)","date":"2019-12-10T16:00:00.000Z","author":"yawei.zhang","_content":"\n### 0.0.1. 目录  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [基础语法格式](#基础语法格式)\n- [常见寄存器以及作用](#常见寄存器以及作用)\n    - [通用寄存器](#通用寄存器)\n        - [寄存器使用惯例 原文](#寄存器使用惯例-原文)\n        - [中文对照](#中文对照)\n    - [专用寄存器](#专用寄存器)\n        - [标志寄存器 RFLAGS](#标志寄存器-rflags)\n        - [程序计数器(PC)(Relative Instruction-Pointer)(IP)](#程序计数器pcrelative-instruction-pointerip)\n        - [指令寄存器](#指令寄存器)\n- [汇编语法](#汇编语法)\n    - [汇编指令](#汇编指令)\n    - [操作数格式与寻址](#操作数格式与寻址)\n        - [内存操作数](#内存操作数)\n        - [寻址模式](#寻址模式)\n        - [large code mode:](#large-code-mode)\n        - [共享库中对g_static_so_data的访问](#共享库中对g_static_so_data的访问)\n        - [small code mode:](#small-code-mode)\n        - [备注说明](#备注说明)\n        - [RELRO  Relocation Read Only](#relro--relocation-read-only)\n- [调用惯例Calling Conventions](#调用惯例calling-conventions)\n        - [参数压栈顺序](#参数压栈顺序)\n            - [Caller Save和Callee Save](#caller-save和callee-save)\n- [工具](#工具)\n    - [PEDA插件](#peda插件)\n\n<!-- /TOC -->\n\n\n\n\n### 0.0.2. 基础语法格式\n\nGAS汇编的格式阅读起来很自然 如下   \n  \n```\n[操作符]    [源]      [目标]   \nmovl        $0,      -4(%rbp)  \n```\n\n\n但是INTEL格式更贴近C语言的书写风格   \n   \n```\n[操作符]   [目标]    [源]  \nmov        esi,     DWORD PTR [rbp-0x4]\n```\n  \n很像C语言的代码   \n   \n``` assembly\nint esi = *(rbp-0x4);\n```\n\n> 本文基于X86-64架构体系整理了GAS风格的汇编语法, 如无特殊说明后续内容皆以环境为准.    \n\n\"@\"符号表示“将符号左边的变量钳制在符号右边的地址   \n\n<!-- more -->   \n\n### 0.0.3. 常见寄存器以及作用   \n16bit寄存器一般没有前缀  例如ax   bx   ds   \n32bit寄存器前缀一般为e   例如eax  ebx  eds   \n64bit寄存器前缀一般为r   例如rax  rbx  rds\n\n#### 0.0.3.1. 通用寄存器   \n\nX86-64体系下有16个通用寄存器 分别为:\n```\nrax    rbx    rcx    rdx    rdi    rsi    rbp    rsp    r8 – r15\n```\n兼容32位模式, 对应为: \n```\neax    ebx    ecx    edx    edi    esi    ebp    esp    e8d – e15d\n```\n\n在所有CPU的架构体系中, 每个寄存器通常都是有其建议的使用用途的, X86-64架构下其用途如下:  \n\n##### 0.0.3.1.1. 寄存器使用惯例 原文  \n[X86-64 Registers](https://cons.mit.edu/sp17/x86-64-architecture-guide.html)\n\n| Register | Purpose                                | Saved across calls |\n| -------- | -------------------------------------- | ------------------ |\n| %rax     | temp register; return value            | No                 |\n| %rbx     | callee-saved                           | Yes                |\n| %rcx     | used to pass 4th argument to functions | No                 |\n| %rdx     | used to pass 3rd argument to functions | No                 |\n| %rsp     | stack pointer                          | Yes                |\n| %rbp     | callee-saved; base pointer             | Yes                |\n| %rsi     | used to pass 2nd argument to functions | No                 |\n| %rdi     | used to pass 1st argument to functions | No                 |\n| %r8      | used to pass 5th argument to functions | No                 |\n| %r9      | used to pass 6th argument to functions | No                 |\n| %r10-r11 | temporary                              | No                 |\n| %r12-r15 | callee-saved registers                 | Yes                |\n\n##### 0.0.3.1.2. 中文对照  \n| 寄存器   | 推荐用途                                   | 跨调用过程保存 |\n| -------- | ------------------------------------------ | -------------- |\n| %rax     | 保存函数/计算的返回值                      | No             |\n| %rbx     | callee-saved 基址 (比如找GOT表会临时用下)  | Yes            |\n| %rcx     | 函数的第4个参数                            | No             |\n| %rdx     | 函数的第3个参数                            | 乘法余数       | No |\n| %rsp     | 指向当前栈顶的指针(栈顶)                   | Yes            |\n| %rbp     | callee-saved; 指向当前栈帧的起始位置(栈基) | Yes            |\n| %rsi     | 函数的第2个参数                            | 字符串源串     | No |\n| %rdi     | 函数的第1个参数                            | 字符串目标串   | No |\n| %r8      | 函数的第5个参数                            | No             |\n| %r9      | 函数的第6个参数                            | No             |\n| %r10-r11 | temporary                                  | No             |\n| %r12-r15 | callee-saved registers                     | Yes            |\n\n#### 0.0.3.2. 专用寄存器  \n标志寄存器和程序计数器可能为同一个寄存器实现  \n\n##### 0.0.3.2.1. 标志寄存器 RFLAGS  \n\nNV UP EI PL NZ NA PO NC表示标志寄存器的值  \n\n| 位编号                           | 1     | 0     |\n| -------------------------------- | ----- | ----- |\n| 溢出标志OF(Over flow flag)       | OV(1) | NV(0) |\n| 方向标志DF(Direction flag)       | DN(1) | UP(0) |\n| 中断标志IF(Interrupt flag)       | EI(1) | DI(0) |\n| 符号标志SF(Sign flag)            | NG(1) | PL(0) |\n| 零标志ZF(Zero flag)              | ZR(1) | NZ(0) |\n| 辅助标志AF(Auxiliary carry flag) | AC(1) | NA(0) |\n| 奇偶标志PF(Parity flag)          | PE(1) | PO(0) |\n| 进位标志CF(Carry flag)           | CY(1) | NC(0) |\n| TF(TrapFlag)                     |       |       |\n\n##### 0.0.3.2.2. 程序计数器(PC)(Relative Instruction-Pointer)(IP)  \n保存下一行要执行的指令位置  \nIntel的实现叫RIP  \n> The 64-bit instruction pointer RIP points to the next instruction to be executed, and supports a 64-bit flat memory model.  \n> 64位指令指针 RIP 指向预期要执行的下一行指令(位置), 并且支持64位平坦内存模型  \n> RIP-relative addressing: this is new for x64 and allows accessing data tables and such in the code relative to the current instruction pointer, making position independent code easier to implement.  \n> PIC提供了相对于当前指令位置访问数据表这样新的支持, 从而让PIC更容易实现   \n\n例如PLC表在RIP下的应用  \n```\n0000000000000570 <foo@plt>:\n 570:    ff 25 a2 0a 20 00        jmpq   *0x200aa2(%rip)        # 201018 <_GLOBAL_OFFSET_TABLE_+0x18>\n 576:    68 00 00 00 00           pushq  $0x0\n 57b:    e9 e0 ff ff ff           jmpq   560 <_init+0x20>\n```\n\n在没有RIP的情况下需要通过函数调用来实现PLC  会消耗较多的性能     \nwindows则直接采用了'重定位基址'的方式实现非PLC的装载.  \n\n##### 0.0.3.2.3. 指令寄存器  \n当前正在执行的指令, 简单CPU会预读 但复杂的CPU有流水线/指令级并行计算等    \n \n\n\n\n### 0.0.4. 汇编语法   \n#### 0.0.4.1. 汇编指令   \n \n| 操作码                     | 描述                                                                                       |\n| -------------------------- | ------------------------------------------------------------------------------------------ |\n| 复制值                     | _                                                                                          |\n| mov src, dest              | 将值从 寄存器,立即值或存储器地址 复制到 寄存器或存储器地址, 不可以同时为内存地址           |\n| movabs                     | 支持8字节的操作数                                                                          |\n| lea src, dest              | move会取值 lea只取地址    dest只能是寄存器                                                 |\n| 栈操作                     |                                                                                            |\n| enter $x, $0               | 设置堆栈框架 相当于 push ebp      和 mov esp, ebp 然后把当前的esp减去x字节的大小(局部变量) |\n| leave                      | 恢复堆栈框架 相当于 move ebp, esp 和 pop ebp                                               |\n| push src                   | 将src压栈,  rsp-1并把src的内容存储到新位置. src可以是立即数 寄存器 内存地址                |\n| pop dest                   | 出栈并保存到dest 可以是 寄存器 内存地址                                                    |\n| 控制流                     |                                                                                            |\n| call label                 | 无条件跳转到目标(直接跳转)并将返回地址(当前PC/IP +1)压入堆栈                               |\n| call *operand              | 无条件跳转到目标(间接跳转)并将返回地址(当前PC/IP +1)压入堆栈                               |\n| ret                        | 将返回地址弹出堆栈 然后无条件跳转到该地址                                                  |\n| jmp label                  | 无条件跳转到目标(直接跳转)                                                                 |\n| jmp *operand               | 无条件跳转到目标(间接跳转)                                                                 |\n| jg, jge, jl, jle, jne, ... | >, >=, <, <=, !=, ...                                                                      |\n| 算术与逻辑                 |                                                                                            |\n| inc dest                   | dest+=1                                                                                    |\n| dec dest                   | dest-=1                                                                                    |\n| neg dest                   | dest取负                                                                                   |\n| not dest                   | dest取反                                                                                   |\n| add src, dest              | dest加上src                                                                                |\n| sub src, dest              | dest减去src                                                                                |\n| imul src, dest             | dest 乘以src                                                                               |\n| idiv divisor               | rdx:rax除以divisor, 将商存在rax 余数存储在rdx                                              |\n| shr cl, reg                | reg右移cl位                                                                                |\n| shl cl, reg                | reg左移cl位                                                                                |\n| ror src, dest              | dest逐src 位向左或向右旋转。                                                               |\n| cmp src, dest              | 执行sub操作但只设置标志寄存器而不存储结果                                                  |\n| test src, dest             | 执行and操作只设置标志寄存器而不存储结果,其中是否为0的判断一般类似 ```test rax,rax```       |\n| and src, dest              | 执行按位的与操作并保存到dest                                                               |\n| xor src, dest              | 执行按位的异或操作并保存到dest                                                             |\n\n#### 0.0.4.2. 操作数格式与寻址   \n\nM[xx]表示在存储器中xx地址的值   \nR[xx]表示寄存器xx的值   \n这种表示方法将寄存器 内存都看出一个大数组的形式    \n\n| 格式         | 操作数值             | 名称              | 样例(GAS = C语言)               |\n| ------------ | -------------------- | ----------------- | ------------------------------- |\n| %reg         |                      |                   | 寄存器名字前都加 %              |\n| $Imm         | Imm                  | 立即数寻址        | $1 = 1                          |\n| Ea           | R[Ea]                | 寄存器寻址        | %eax = eax                      |\n| Imm          | M[Imm]               | 绝对寻址          | 0x104 = *0x104                  |\n| (Ea)         | M[R[Ea]]             | 间接寻址          | (%eax)= *eax                    |\n| Imm(Ea)      | M[Imm+R[Ea]]         | (基址+偏移量)寻址 | 4(%eax) = *(4+eax)              |\n| (Ea,Eb)      | M[R[Ea]+R[Eb]]       | 变址              | (%eax,%ebx) = *(eax+ebx)        |\n| Imm(Ea,Eb)   | M[Imm+R[Ea]+R[Eb]]   | 寻址              | 9(%eax,%ebx)= *(9+eax+ebx)      |\n| (,Ea,s)      | M[R[Ea]*s]           | 伸缩化变址寻址    | (,%eax,4)= *(eax*4)             |\n| Imm(,Ea,s)   | M[Imm+R[Ea]*s]       | 伸缩化变址寻址    | 0xfc(,%eax,4)= *(0xfc+eax*4)    |\n| (Ea,Eb,s)    | M(R[Ea]+R[Eb]*s)     | 伸缩化变址寻址    | (%eax,%ebx,4) = *(eax+ebx*4)    |\n| Imm(Ea,Eb,s) | M(Imm+R[Ea]+R[Eb]*s) | 伸缩化变址寻址    | 8(%eax,%ebx,4) = *(8+eax+ebx*4) |\n\n##### 0.0.4.2.1. 内存操作数  \n\n操作数语法:    \n```\nsegment:displacement(base register, index register, scale factor)\n```\n等效intel语法   \n```\nsegment:[base register + displacement + index register * scale factor]\n```\n> 如果segment未指定，则几乎总是假定为ds，除非base register为esp或ebp；否则为。在这种情况下，假定地址是相对于ss  \n  \n> If segment is not specified, as almost always, it is assumed to be ds, unless base register is esp or ebp; in this case, the address is assumed to be relative to ss  \n快速参考  \n\n| 指令                   | 含义                                             |\n| ---------------------- | ------------------------------------------------ |\n| movq %rax, %rbx        | rbx = rax                                        |\n| movq $123, %rax        | rax = 123                                        |\n| movq %rsi, -16（%rbp） | mem [rbp-16] = rsi                               |\n| subq $10, %rbp         | rbp = rbp -10                                    |\n| cmpl %eax %ebx         | 比较然后设置标志。如果eax == ebx, 则设置零标志。 |\n| leal (%ebx),  %eax     | movl %ebx,  %eax                                 |\n\n\n\n##### 0.0.4.2.2. 寻址模式    \n\n> References to both code and data on x64 are done with instruction-relative (RIP-relative in x64 parlance) addressing modes. The offset from RIP in these instructions is limited to 32 bits.     \n> X64体系下的寻址是建立在相对寻址(RIP-RELATIVE)之上的, RIP的偏移大小最大为32bits  \n\n\n[x64 code mode](https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models)    \n\n> Default operand size in 64-bit mode is still 32-bit and 64-bit immediates are allowed only with mov instruction.  \n> movabs is just AT&T syntax for a mov with a 64-bit immediate operand.    \n> 只有mov操作可以填写8字节的立即数  movabs是AT&T语法中mov的(别名)    \n\n| 指令 | 同义名   | 跳转条件 | 描述     |\n| ---- | -------- | -------- | -------- |\n| jmp  | Label    | 1        | 直接跳转 |\n| jmp  | *Operand | 1        | 间接跳转 |\n\n\n绝对寻址/直接寻址(Absolute or direct):  \n\n```\njump    address   \n```\n\n> (有效PC地址=address)  \n> Effective PC address = address  \n\n\n相对寻址(PC-relative):  \n```\njump    offset    \n```\n\n> (有效PC地址=rip+offset = 下一个指令的地址 + offset)  \n> Effective PC address = next instruction address + offset, offset may be negative  \n\n快速分析:\n```\n00000000000007e0 <.plt>:\n 7e0:   ff 35 22 08 20 00       pushq  0x200822(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 7e6:   ff 25 24 08 20 00       jmpq   *0x200824(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 7ec:   0f 1f 40 00             nopl   0x0(%rax)\n0000000000000810 <_Z12so_func_baseii@plt>:\n 810:   ff 25 12 08 20 00       jmpq   *0x200812(%rip)        # 201028 <_Z12so_func_baseii>\n 816:   68 02 00 00 00          pushq  $0x2\n 81b:   e9 c0 ff ff ff          jmpq   7e0 <.plt>  \n ```\n\n* ```jmpq   7e0```  跳转到 CS:7e0 这个位置  \n  > 实际上二进制的内容仍然是相对寻址(81b+5 + -40) ==  7e0  等同 jumpq * -0x40(%rip) 但省了一个字节的指令   \n\n* ```jmpq   *0x200812(%rip)```  跳转到 816 + 0x200812 这个位置 (rip是一个指针 需要解引用获得目标地址)   \n\n\n```\n a84:   74 20                   je     aa6 <__libc_csu_init+0x56>\n ```\n * 这里跳转指令则只用了两个字节  \n\n\n\n##### 0.0.4.2.3. large code mode:  \n\n> In the small code model all addresses (including GOT entries) are accessible via the IP-relative addressing provided by the AMD64 architecture. Hence there is no need for an explicit GOT pointer and therefore no function prologue for setting it up is necessary. In the medium and large code models a register has to be allocated to hold the address of the GOT in position-independent objects, because the AMD64 ISA does not support an immediate displacement larger than 32 bits.  \n> 在一个小型代码模型中, 所有的地址(包括GOT入口地址) 都是可以通过IP-RELATIVE访问到.  因此不需要显示声明额外的GOT指针 也不需要设置函数的开始语.  但在一个中型或者大型代码模型中, 必须分配一个寄存器去持有位置无关对象在GOT的地址  (AMD64不支持大于32位的立即跳转)  \n \n```\ng++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel=large \n```\n \n 举例一个通过.GOT表访问的全局变量代码如下:   \n ```\n a40:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # a40 <main+0xb>\n a47:   49 bb c0 05 20 00 00    movabs $0x2005c0,%r11\n a4e:   00 00 00 \n a51:   4c 01 db                add    %r11,%rbx\n a54:   89 7d dc                mov    %edi,-0x24(%rbp)\n a57:   48 89 75 d0             mov    %rsi,-0x30(%rbp)\n a5b:   c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)\n a62:   48 b8 d0 ff ff ff ff    movabs $0xffffffffffffffd0,%rax\n a69:   ff ff ff \n a6c:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n a70:   c7 00 e8 03 00 00       movl   $0x3e8,(%rax)\n ```\n\na4e为8字节的操作数剩余部分\n\na40行取得当前行的地址 \na51行通过偏移量获得.got表的end 地址 =  a40 + 0x2005c0 =   201000   =.plt.got   (.got表在本测试中大小是0x40)  \na6c行把RBX + 0xffffffffffffffd0 (= -0x30) 得到GOT表中存放全局变量的地址 ```  *(.plt.got -0x30) = got[g_static_so_data]  ```   \na70赋值立即数0x3e8 给全局变量 ```  g_static_so_data = *(got[g_static_so_data])  ```  \n\n\n节点偏移和大小如下    \n\n| [号] | 名称     | 类型     | 地址     | 偏移量 | 大小  | 全体大小 | 旗标 | 链接 | 信息 | 对齐 |\n| ---- | -------- | -------- | -------- | ------ | ----- | -------- | ---- | ---- | ---- | ---- |\n| [23] | .got     | PROGBITS | 00200fc0 | 000fc0 | 00040 | 0008     | WA   | 0    | 0    | 8    |\n| [24] | .got.plt | PROGBITS | 00201000 | 001000 | 00030 | 0008     | WA   | 0    | 0    | 8    |\n| [25] | .data    | PROGBITS | 00201030 | 001030 | 00014 | 0000     | WA   | 0    | 0    | 8    |\n| [26] | .bss     | NOBITS   | 00201044 | 001044 | 0000c | 0000     | WA   | 0    | 0    | 4    |\n\n程序声明如下:   \n```\nextern int g_static_so_bss;\nextern int g_static_so_data;\nextern int errno;\n```\n当前汇编访问的是:g_static_so_data   \n.dyn global data如下  \n```\n000000200fc0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_data + 0\n000000200fd8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_bss + 0\n000000200fe0  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000900000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000a00000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000b00000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n```\n\n##### 0.0.4.2.4. 共享库中对g_static_so_data的访问   \n如果代码模型为大型 则和可执行程序中的代码段一致 如果是small或者median 共享库仍然会对全局变量走GOT表  \n汇编如下:    \n```\n 894:   48 8b 05 45 07 20 00    mov    0x200745(%rip),%rax        # 200fe0 <g_static_so_bss@@Base-0x60>\n 89b:   48 8b 00                mov    (%rax),%rax\n 89e:   01 c2                   add    %eax,%edx\n```\n894: 取GOT中存储 g_static_so_bss 的项地址 并把内容(g_static_so_bss的地址)存放到%rax中    \n89b: 取 g_static_so_bss 的内容  \n89e: 加到%edx上  \n\n\n##### 0.0.4.2.5. small code mode:  \n```\ng++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel=small \n```\n\n假设了全局变量的存储位置在低端内存, 因此该全局变量直接定义在主程序的data段, 在so文件中仍然通过.got找到真实地址.    \n其类型R_X86_64_COPY  \n在主程序的汇编代码只有一行\n```\n 9f0:   c7 05 4e 06 20 00 e8    movl   $0x3e8,0x20064e(%rip)        # 201048 <g_static_so_data>\n```\n.dyn global\n```\n偏移量          信息           类型           符号值        符号名称 + 加数\n000000201048  001200000005 R_X86_64_COPY     0000000000201048 g_static_so_data + 0\n000000201050  001000000005 R_X86_64_COPY     0000000000201050 g_static_so_bss + 0\n```\n\n.dyn so \n```\n000000200fd8  001300000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0\n000000200fe0  001000000006 R_X86_64_GLOB_DAT 0000000000201040 g_static_so_bss + 0\n```\n\n.symver指令\n> g_static_so_data@@Base-0x58  的意思是: g_static_so_data的符号值-0x58 也就是g_static_so_data的偏移量  \n```\n0000000000201030 - 000000200fd8 = 0x58  \n```\n\n\n##### 0.0.4.2.6. 备注说明  \n共享库中 无论是large还是small, 都会走so的got表, 区别在于会不会使用movabs进行64位的偏移计算  \ngot表的位置可能紧接着.text并且设置为只读  \n[RELRO](https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html)   \n\n\n通过got表访问全局变量:  \n1. 通过RIP-R找到GOT表的位置.   相对于.text固定的偏移量 (large不假定大小)     \n2. 通过项索引偏移找到存储该变量地址的地址并解引用得到 变量地址  \n   1. (large不假定大小, medium会区分把<64k的数据链接到低内存中 多个数据段.ldata(largedata))  \n3. 解引用并使用  \n \n\n```\nmov  (%rbx,%rax,1),%rax  \n```\n这行代码可以优化为一个立即数偏移寻址  即\n```\nmov    0x200745(%rip),%rax  \n```\n\n当前代码段到GOT表的偏移\n\n但是在large模型中 \n\n通过rip寻址的指令中 偏移量不是64位的  因此需要先算一个小的偏移量 再通过支持64bit的 movabs(mov) 添加上一个64bit的偏移\n\n##### 0.0.4.2.7. RELRO  Relocation Read Only   \n重定位只读技术  \n动态链接器在处理完GOT表后将其设为只读以提高安全性.  \n\n本文测试环境中只读. (实际上这是一个可以成为较为古老的技术了)  \n> Linux version 4.9.0-4-amd64 (debian-kernel@lists.debian.org) \n> (gcc version 6.3.0 20170516 (Debian 6.3.0-18) )  \n> #1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23)   \n> .zsummer  \n\nGOT表为R  只读段.   \n.got.plt存储plt的got仍然是读写段 (惰性加载机制决定, 可以选择非惰性+ro来完成全只读化)  \n\n\n\n\n### 0.0.5. 调用惯例Calling Conventions \n计算机中Corotine分两种 Coroutine和Subroutine 前者对应协程 后者对应函数  \n\n* call a routine (trasfer control to procedure)  跳转到目标routine  \n* pass arguments  传递参数  \n  * fixed length\n  * variable length\n  * recursively  \n* return to the caller  返回调用者地址  \n  * putting results in a place where caller an find them  \n* manage register  管理寄存器 \n\n\n##### 0.0.5.0.8. 参数压栈顺序  \n标准的linux ABI调用约定中\n[System V Application Binary Interface—AMD64 Architecture Processor Supplement]()   \n\n\n###### 0.0.5.0.8.1. Caller Save和Callee Save   \n当产生函数调用时 子函数内通常也会使用到通用寄存器 那么这些寄存器中之前保存的调用者(父函数)的值就会被覆盖   \n为了避免数据覆盖而导致从子函数返回时寄存器中的数据不可恢复 CPU 体系结构中就规定了通用寄存器的保存方式   \n\n* Casller Save '调用者保存' 在发起一个调用前需要保存(子例程直接覆盖使用) \n  * 在进入子函数调用前, 调用者需要保存这些寄存器的值.   \n    * 一般做法是进入子函数调用前把这些寄存器压入栈中    \n* Callee Save '被调用者保存' (子例程使用前需要先保存)   \n  * 在进入子函数调用后, 在使用这些寄存器前, 被调用者会保存这些寄存器的内容,并在使用后恢复  \n  * 这种比较特殊也比较麻烦, 因为一旦接受这个设定, 那么所有subroutine都要进行合适的push并保证pop恢复.     \n  * \n\n* cross\n\n### 0.0.6. 工具   \n\n* objdump -S 查看汇编指令  \n* gdb  \n  * gdb 通过```  layout regs  ```打开寄存器显示, 通过```set disassemble-next-line on```打开汇编  \n  * gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可, peda默认显示是intex语法    \n  * disas反汇编命令,直接disas是反汇编当前函数\n    * disas /r (显示汇编指令对应十六进制值)   \n    * disas /m (如果有源码,显示对应行源码)   \n  * intel语法\n    * set disassembly-flavor intel\n    * set disassembly-flavor att\n  * gdb关闭ASLR：\n    * set disable-randomization on\n  * 开启ASLR：\n    * set disable-randomization off\n  * 查看ASLR状态：\n    * show disable-randomization\n  * 查看二进制  \n    * ```x /1ag addr```\n\n#### 0.0.6.1. PEDA插件  \npeda默认设置的是intel的语法风格\n```\ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n* aslr -- Show/set ASLR setting of GDB\n* checksec -- Check for various security options of binary\n* dumpargs -- Display arguments passed to a function when stopped at a call instruction\n* dumprop -- Dump all ROP gadgets in specific memory range\n* elfheader -- Get headers information from debugged ELF file\n* elfsymbol -- Get non-debugging symbol information from an ELF file\n* lookup -- Search for all addresses/references to addresses which belong to a memory range\n* patch -- Patch memory start at an address with string/hexstring/int\n* pattern -- Generate, search, or write a cyclic pattern to memory\n* procinfo -- Display various info from /proc/pid/\n* pshow -- Show various PEDA options and other settings\n* pset -- Set various PEDA options and other settings\n* readelf -- Get headers information from an ELF file\n* ropgadget -- Get common ROP gadgets of binary or library\n* ropsearch -- Search for ROP gadgets in memory\n* searchmem|find -- Search for a pattern in memory; support regex search\n* shellcode -- Generate or download common shellcodes.\n* skeleton -- Generate python exploit code template\n* vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n* xormem -- XOR a memory region with a key\n","source":"_posts/2019-12-11-asm-syntax.md","raw":"---\ntitle: 汇编语法/寻址/寄存器/代码模型(GNU assembler)    \ndate: 2019-12-11\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 0.0.1. 目录  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [基础语法格式](#基础语法格式)\n- [常见寄存器以及作用](#常见寄存器以及作用)\n    - [通用寄存器](#通用寄存器)\n        - [寄存器使用惯例 原文](#寄存器使用惯例-原文)\n        - [中文对照](#中文对照)\n    - [专用寄存器](#专用寄存器)\n        - [标志寄存器 RFLAGS](#标志寄存器-rflags)\n        - [程序计数器(PC)(Relative Instruction-Pointer)(IP)](#程序计数器pcrelative-instruction-pointerip)\n        - [指令寄存器](#指令寄存器)\n- [汇编语法](#汇编语法)\n    - [汇编指令](#汇编指令)\n    - [操作数格式与寻址](#操作数格式与寻址)\n        - [内存操作数](#内存操作数)\n        - [寻址模式](#寻址模式)\n        - [large code mode:](#large-code-mode)\n        - [共享库中对g_static_so_data的访问](#共享库中对g_static_so_data的访问)\n        - [small code mode:](#small-code-mode)\n        - [备注说明](#备注说明)\n        - [RELRO  Relocation Read Only](#relro--relocation-read-only)\n- [调用惯例Calling Conventions](#调用惯例calling-conventions)\n        - [参数压栈顺序](#参数压栈顺序)\n            - [Caller Save和Callee Save](#caller-save和callee-save)\n- [工具](#工具)\n    - [PEDA插件](#peda插件)\n\n<!-- /TOC -->\n\n\n\n\n### 0.0.2. 基础语法格式\n\nGAS汇编的格式阅读起来很自然 如下   \n  \n```\n[操作符]    [源]      [目标]   \nmovl        $0,      -4(%rbp)  \n```\n\n\n但是INTEL格式更贴近C语言的书写风格   \n   \n```\n[操作符]   [目标]    [源]  \nmov        esi,     DWORD PTR [rbp-0x4]\n```\n  \n很像C语言的代码   \n   \n``` assembly\nint esi = *(rbp-0x4);\n```\n\n> 本文基于X86-64架构体系整理了GAS风格的汇编语法, 如无特殊说明后续内容皆以环境为准.    \n\n\"@\"符号表示“将符号左边的变量钳制在符号右边的地址   \n\n<!-- more -->   \n\n### 0.0.3. 常见寄存器以及作用   \n16bit寄存器一般没有前缀  例如ax   bx   ds   \n32bit寄存器前缀一般为e   例如eax  ebx  eds   \n64bit寄存器前缀一般为r   例如rax  rbx  rds\n\n#### 0.0.3.1. 通用寄存器   \n\nX86-64体系下有16个通用寄存器 分别为:\n```\nrax    rbx    rcx    rdx    rdi    rsi    rbp    rsp    r8 – r15\n```\n兼容32位模式, 对应为: \n```\neax    ebx    ecx    edx    edi    esi    ebp    esp    e8d – e15d\n```\n\n在所有CPU的架构体系中, 每个寄存器通常都是有其建议的使用用途的, X86-64架构下其用途如下:  \n\n##### 0.0.3.1.1. 寄存器使用惯例 原文  \n[X86-64 Registers](https://cons.mit.edu/sp17/x86-64-architecture-guide.html)\n\n| Register | Purpose                                | Saved across calls |\n| -------- | -------------------------------------- | ------------------ |\n| %rax     | temp register; return value            | No                 |\n| %rbx     | callee-saved                           | Yes                |\n| %rcx     | used to pass 4th argument to functions | No                 |\n| %rdx     | used to pass 3rd argument to functions | No                 |\n| %rsp     | stack pointer                          | Yes                |\n| %rbp     | callee-saved; base pointer             | Yes                |\n| %rsi     | used to pass 2nd argument to functions | No                 |\n| %rdi     | used to pass 1st argument to functions | No                 |\n| %r8      | used to pass 5th argument to functions | No                 |\n| %r9      | used to pass 6th argument to functions | No                 |\n| %r10-r11 | temporary                              | No                 |\n| %r12-r15 | callee-saved registers                 | Yes                |\n\n##### 0.0.3.1.2. 中文对照  \n| 寄存器   | 推荐用途                                   | 跨调用过程保存 |\n| -------- | ------------------------------------------ | -------------- |\n| %rax     | 保存函数/计算的返回值                      | No             |\n| %rbx     | callee-saved 基址 (比如找GOT表会临时用下)  | Yes            |\n| %rcx     | 函数的第4个参数                            | No             |\n| %rdx     | 函数的第3个参数                            | 乘法余数       | No |\n| %rsp     | 指向当前栈顶的指针(栈顶)                   | Yes            |\n| %rbp     | callee-saved; 指向当前栈帧的起始位置(栈基) | Yes            |\n| %rsi     | 函数的第2个参数                            | 字符串源串     | No |\n| %rdi     | 函数的第1个参数                            | 字符串目标串   | No |\n| %r8      | 函数的第5个参数                            | No             |\n| %r9      | 函数的第6个参数                            | No             |\n| %r10-r11 | temporary                                  | No             |\n| %r12-r15 | callee-saved registers                     | Yes            |\n\n#### 0.0.3.2. 专用寄存器  \n标志寄存器和程序计数器可能为同一个寄存器实现  \n\n##### 0.0.3.2.1. 标志寄存器 RFLAGS  \n\nNV UP EI PL NZ NA PO NC表示标志寄存器的值  \n\n| 位编号                           | 1     | 0     |\n| -------------------------------- | ----- | ----- |\n| 溢出标志OF(Over flow flag)       | OV(1) | NV(0) |\n| 方向标志DF(Direction flag)       | DN(1) | UP(0) |\n| 中断标志IF(Interrupt flag)       | EI(1) | DI(0) |\n| 符号标志SF(Sign flag)            | NG(1) | PL(0) |\n| 零标志ZF(Zero flag)              | ZR(1) | NZ(0) |\n| 辅助标志AF(Auxiliary carry flag) | AC(1) | NA(0) |\n| 奇偶标志PF(Parity flag)          | PE(1) | PO(0) |\n| 进位标志CF(Carry flag)           | CY(1) | NC(0) |\n| TF(TrapFlag)                     |       |       |\n\n##### 0.0.3.2.2. 程序计数器(PC)(Relative Instruction-Pointer)(IP)  \n保存下一行要执行的指令位置  \nIntel的实现叫RIP  \n> The 64-bit instruction pointer RIP points to the next instruction to be executed, and supports a 64-bit flat memory model.  \n> 64位指令指针 RIP 指向预期要执行的下一行指令(位置), 并且支持64位平坦内存模型  \n> RIP-relative addressing: this is new for x64 and allows accessing data tables and such in the code relative to the current instruction pointer, making position independent code easier to implement.  \n> PIC提供了相对于当前指令位置访问数据表这样新的支持, 从而让PIC更容易实现   \n\n例如PLC表在RIP下的应用  \n```\n0000000000000570 <foo@plt>:\n 570:    ff 25 a2 0a 20 00        jmpq   *0x200aa2(%rip)        # 201018 <_GLOBAL_OFFSET_TABLE_+0x18>\n 576:    68 00 00 00 00           pushq  $0x0\n 57b:    e9 e0 ff ff ff           jmpq   560 <_init+0x20>\n```\n\n在没有RIP的情况下需要通过函数调用来实现PLC  会消耗较多的性能     \nwindows则直接采用了'重定位基址'的方式实现非PLC的装载.  \n\n##### 0.0.3.2.3. 指令寄存器  \n当前正在执行的指令, 简单CPU会预读 但复杂的CPU有流水线/指令级并行计算等    \n \n\n\n\n### 0.0.4. 汇编语法   \n#### 0.0.4.1. 汇编指令   \n \n| 操作码                     | 描述                                                                                       |\n| -------------------------- | ------------------------------------------------------------------------------------------ |\n| 复制值                     | _                                                                                          |\n| mov src, dest              | 将值从 寄存器,立即值或存储器地址 复制到 寄存器或存储器地址, 不可以同时为内存地址           |\n| movabs                     | 支持8字节的操作数                                                                          |\n| lea src, dest              | move会取值 lea只取地址    dest只能是寄存器                                                 |\n| 栈操作                     |                                                                                            |\n| enter $x, $0               | 设置堆栈框架 相当于 push ebp      和 mov esp, ebp 然后把当前的esp减去x字节的大小(局部变量) |\n| leave                      | 恢复堆栈框架 相当于 move ebp, esp 和 pop ebp                                               |\n| push src                   | 将src压栈,  rsp-1并把src的内容存储到新位置. src可以是立即数 寄存器 内存地址                |\n| pop dest                   | 出栈并保存到dest 可以是 寄存器 内存地址                                                    |\n| 控制流                     |                                                                                            |\n| call label                 | 无条件跳转到目标(直接跳转)并将返回地址(当前PC/IP +1)压入堆栈                               |\n| call *operand              | 无条件跳转到目标(间接跳转)并将返回地址(当前PC/IP +1)压入堆栈                               |\n| ret                        | 将返回地址弹出堆栈 然后无条件跳转到该地址                                                  |\n| jmp label                  | 无条件跳转到目标(直接跳转)                                                                 |\n| jmp *operand               | 无条件跳转到目标(间接跳转)                                                                 |\n| jg, jge, jl, jle, jne, ... | >, >=, <, <=, !=, ...                                                                      |\n| 算术与逻辑                 |                                                                                            |\n| inc dest                   | dest+=1                                                                                    |\n| dec dest                   | dest-=1                                                                                    |\n| neg dest                   | dest取负                                                                                   |\n| not dest                   | dest取反                                                                                   |\n| add src, dest              | dest加上src                                                                                |\n| sub src, dest              | dest减去src                                                                                |\n| imul src, dest             | dest 乘以src                                                                               |\n| idiv divisor               | rdx:rax除以divisor, 将商存在rax 余数存储在rdx                                              |\n| shr cl, reg                | reg右移cl位                                                                                |\n| shl cl, reg                | reg左移cl位                                                                                |\n| ror src, dest              | dest逐src 位向左或向右旋转。                                                               |\n| cmp src, dest              | 执行sub操作但只设置标志寄存器而不存储结果                                                  |\n| test src, dest             | 执行and操作只设置标志寄存器而不存储结果,其中是否为0的判断一般类似 ```test rax,rax```       |\n| and src, dest              | 执行按位的与操作并保存到dest                                                               |\n| xor src, dest              | 执行按位的异或操作并保存到dest                                                             |\n\n#### 0.0.4.2. 操作数格式与寻址   \n\nM[xx]表示在存储器中xx地址的值   \nR[xx]表示寄存器xx的值   \n这种表示方法将寄存器 内存都看出一个大数组的形式    \n\n| 格式         | 操作数值             | 名称              | 样例(GAS = C语言)               |\n| ------------ | -------------------- | ----------------- | ------------------------------- |\n| %reg         |                      |                   | 寄存器名字前都加 %              |\n| $Imm         | Imm                  | 立即数寻址        | $1 = 1                          |\n| Ea           | R[Ea]                | 寄存器寻址        | %eax = eax                      |\n| Imm          | M[Imm]               | 绝对寻址          | 0x104 = *0x104                  |\n| (Ea)         | M[R[Ea]]             | 间接寻址          | (%eax)= *eax                    |\n| Imm(Ea)      | M[Imm+R[Ea]]         | (基址+偏移量)寻址 | 4(%eax) = *(4+eax)              |\n| (Ea,Eb)      | M[R[Ea]+R[Eb]]       | 变址              | (%eax,%ebx) = *(eax+ebx)        |\n| Imm(Ea,Eb)   | M[Imm+R[Ea]+R[Eb]]   | 寻址              | 9(%eax,%ebx)= *(9+eax+ebx)      |\n| (,Ea,s)      | M[R[Ea]*s]           | 伸缩化变址寻址    | (,%eax,4)= *(eax*4)             |\n| Imm(,Ea,s)   | M[Imm+R[Ea]*s]       | 伸缩化变址寻址    | 0xfc(,%eax,4)= *(0xfc+eax*4)    |\n| (Ea,Eb,s)    | M(R[Ea]+R[Eb]*s)     | 伸缩化变址寻址    | (%eax,%ebx,4) = *(eax+ebx*4)    |\n| Imm(Ea,Eb,s) | M(Imm+R[Ea]+R[Eb]*s) | 伸缩化变址寻址    | 8(%eax,%ebx,4) = *(8+eax+ebx*4) |\n\n##### 0.0.4.2.1. 内存操作数  \n\n操作数语法:    \n```\nsegment:displacement(base register, index register, scale factor)\n```\n等效intel语法   \n```\nsegment:[base register + displacement + index register * scale factor]\n```\n> 如果segment未指定，则几乎总是假定为ds，除非base register为esp或ebp；否则为。在这种情况下，假定地址是相对于ss  \n  \n> If segment is not specified, as almost always, it is assumed to be ds, unless base register is esp or ebp; in this case, the address is assumed to be relative to ss  \n快速参考  \n\n| 指令                   | 含义                                             |\n| ---------------------- | ------------------------------------------------ |\n| movq %rax, %rbx        | rbx = rax                                        |\n| movq $123, %rax        | rax = 123                                        |\n| movq %rsi, -16（%rbp） | mem [rbp-16] = rsi                               |\n| subq $10, %rbp         | rbp = rbp -10                                    |\n| cmpl %eax %ebx         | 比较然后设置标志。如果eax == ebx, 则设置零标志。 |\n| leal (%ebx),  %eax     | movl %ebx,  %eax                                 |\n\n\n\n##### 0.0.4.2.2. 寻址模式    \n\n> References to both code and data on x64 are done with instruction-relative (RIP-relative in x64 parlance) addressing modes. The offset from RIP in these instructions is limited to 32 bits.     \n> X64体系下的寻址是建立在相对寻址(RIP-RELATIVE)之上的, RIP的偏移大小最大为32bits  \n\n\n[x64 code mode](https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models)    \n\n> Default operand size in 64-bit mode is still 32-bit and 64-bit immediates are allowed only with mov instruction.  \n> movabs is just AT&T syntax for a mov with a 64-bit immediate operand.    \n> 只有mov操作可以填写8字节的立即数  movabs是AT&T语法中mov的(别名)    \n\n| 指令 | 同义名   | 跳转条件 | 描述     |\n| ---- | -------- | -------- | -------- |\n| jmp  | Label    | 1        | 直接跳转 |\n| jmp  | *Operand | 1        | 间接跳转 |\n\n\n绝对寻址/直接寻址(Absolute or direct):  \n\n```\njump    address   \n```\n\n> (有效PC地址=address)  \n> Effective PC address = address  \n\n\n相对寻址(PC-relative):  \n```\njump    offset    \n```\n\n> (有效PC地址=rip+offset = 下一个指令的地址 + offset)  \n> Effective PC address = next instruction address + offset, offset may be negative  \n\n快速分析:\n```\n00000000000007e0 <.plt>:\n 7e0:   ff 35 22 08 20 00       pushq  0x200822(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 7e6:   ff 25 24 08 20 00       jmpq   *0x200824(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 7ec:   0f 1f 40 00             nopl   0x0(%rax)\n0000000000000810 <_Z12so_func_baseii@plt>:\n 810:   ff 25 12 08 20 00       jmpq   *0x200812(%rip)        # 201028 <_Z12so_func_baseii>\n 816:   68 02 00 00 00          pushq  $0x2\n 81b:   e9 c0 ff ff ff          jmpq   7e0 <.plt>  \n ```\n\n* ```jmpq   7e0```  跳转到 CS:7e0 这个位置  \n  > 实际上二进制的内容仍然是相对寻址(81b+5 + -40) ==  7e0  等同 jumpq * -0x40(%rip) 但省了一个字节的指令   \n\n* ```jmpq   *0x200812(%rip)```  跳转到 816 + 0x200812 这个位置 (rip是一个指针 需要解引用获得目标地址)   \n\n\n```\n a84:   74 20                   je     aa6 <__libc_csu_init+0x56>\n ```\n * 这里跳转指令则只用了两个字节  \n\n\n\n##### 0.0.4.2.3. large code mode:  \n\n> In the small code model all addresses (including GOT entries) are accessible via the IP-relative addressing provided by the AMD64 architecture. Hence there is no need for an explicit GOT pointer and therefore no function prologue for setting it up is necessary. In the medium and large code models a register has to be allocated to hold the address of the GOT in position-independent objects, because the AMD64 ISA does not support an immediate displacement larger than 32 bits.  \n> 在一个小型代码模型中, 所有的地址(包括GOT入口地址) 都是可以通过IP-RELATIVE访问到.  因此不需要显示声明额外的GOT指针 也不需要设置函数的开始语.  但在一个中型或者大型代码模型中, 必须分配一个寄存器去持有位置无关对象在GOT的地址  (AMD64不支持大于32位的立即跳转)  \n \n```\ng++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel=large \n```\n \n 举例一个通过.GOT表访问的全局变量代码如下:   \n ```\n a40:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # a40 <main+0xb>\n a47:   49 bb c0 05 20 00 00    movabs $0x2005c0,%r11\n a4e:   00 00 00 \n a51:   4c 01 db                add    %r11,%rbx\n a54:   89 7d dc                mov    %edi,-0x24(%rbp)\n a57:   48 89 75 d0             mov    %rsi,-0x30(%rbp)\n a5b:   c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)\n a62:   48 b8 d0 ff ff ff ff    movabs $0xffffffffffffffd0,%rax\n a69:   ff ff ff \n a6c:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n a70:   c7 00 e8 03 00 00       movl   $0x3e8,(%rax)\n ```\n\na4e为8字节的操作数剩余部分\n\na40行取得当前行的地址 \na51行通过偏移量获得.got表的end 地址 =  a40 + 0x2005c0 =   201000   =.plt.got   (.got表在本测试中大小是0x40)  \na6c行把RBX + 0xffffffffffffffd0 (= -0x30) 得到GOT表中存放全局变量的地址 ```  *(.plt.got -0x30) = got[g_static_so_data]  ```   \na70赋值立即数0x3e8 给全局变量 ```  g_static_so_data = *(got[g_static_so_data])  ```  \n\n\n节点偏移和大小如下    \n\n| [号] | 名称     | 类型     | 地址     | 偏移量 | 大小  | 全体大小 | 旗标 | 链接 | 信息 | 对齐 |\n| ---- | -------- | -------- | -------- | ------ | ----- | -------- | ---- | ---- | ---- | ---- |\n| [23] | .got     | PROGBITS | 00200fc0 | 000fc0 | 00040 | 0008     | WA   | 0    | 0    | 8    |\n| [24] | .got.plt | PROGBITS | 00201000 | 001000 | 00030 | 0008     | WA   | 0    | 0    | 8    |\n| [25] | .data    | PROGBITS | 00201030 | 001030 | 00014 | 0000     | WA   | 0    | 0    | 8    |\n| [26] | .bss     | NOBITS   | 00201044 | 001044 | 0000c | 0000     | WA   | 0    | 0    | 4    |\n\n程序声明如下:   \n```\nextern int g_static_so_bss;\nextern int g_static_so_data;\nextern int errno;\n```\n当前汇编访问的是:g_static_so_data   \n.dyn global data如下  \n```\n000000200fc0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_data + 0\n000000200fd8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_bss + 0\n000000200fe0  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000900000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000a00000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000b00000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n```\n\n##### 0.0.4.2.4. 共享库中对g_static_so_data的访问   \n如果代码模型为大型 则和可执行程序中的代码段一致 如果是small或者median 共享库仍然会对全局变量走GOT表  \n汇编如下:    \n```\n 894:   48 8b 05 45 07 20 00    mov    0x200745(%rip),%rax        # 200fe0 <g_static_so_bss@@Base-0x60>\n 89b:   48 8b 00                mov    (%rax),%rax\n 89e:   01 c2                   add    %eax,%edx\n```\n894: 取GOT中存储 g_static_so_bss 的项地址 并把内容(g_static_so_bss的地址)存放到%rax中    \n89b: 取 g_static_so_bss 的内容  \n89e: 加到%edx上  \n\n\n##### 0.0.4.2.5. small code mode:  \n```\ng++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel=small \n```\n\n假设了全局变量的存储位置在低端内存, 因此该全局变量直接定义在主程序的data段, 在so文件中仍然通过.got找到真实地址.    \n其类型R_X86_64_COPY  \n在主程序的汇编代码只有一行\n```\n 9f0:   c7 05 4e 06 20 00 e8    movl   $0x3e8,0x20064e(%rip)        # 201048 <g_static_so_data>\n```\n.dyn global\n```\n偏移量          信息           类型           符号值        符号名称 + 加数\n000000201048  001200000005 R_X86_64_COPY     0000000000201048 g_static_so_data + 0\n000000201050  001000000005 R_X86_64_COPY     0000000000201050 g_static_so_bss + 0\n```\n\n.dyn so \n```\n000000200fd8  001300000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0\n000000200fe0  001000000006 R_X86_64_GLOB_DAT 0000000000201040 g_static_so_bss + 0\n```\n\n.symver指令\n> g_static_so_data@@Base-0x58  的意思是: g_static_so_data的符号值-0x58 也就是g_static_so_data的偏移量  \n```\n0000000000201030 - 000000200fd8 = 0x58  \n```\n\n\n##### 0.0.4.2.6. 备注说明  \n共享库中 无论是large还是small, 都会走so的got表, 区别在于会不会使用movabs进行64位的偏移计算  \ngot表的位置可能紧接着.text并且设置为只读  \n[RELRO](https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html)   \n\n\n通过got表访问全局变量:  \n1. 通过RIP-R找到GOT表的位置.   相对于.text固定的偏移量 (large不假定大小)     \n2. 通过项索引偏移找到存储该变量地址的地址并解引用得到 变量地址  \n   1. (large不假定大小, medium会区分把<64k的数据链接到低内存中 多个数据段.ldata(largedata))  \n3. 解引用并使用  \n \n\n```\nmov  (%rbx,%rax,1),%rax  \n```\n这行代码可以优化为一个立即数偏移寻址  即\n```\nmov    0x200745(%rip),%rax  \n```\n\n当前代码段到GOT表的偏移\n\n但是在large模型中 \n\n通过rip寻址的指令中 偏移量不是64位的  因此需要先算一个小的偏移量 再通过支持64bit的 movabs(mov) 添加上一个64bit的偏移\n\n##### 0.0.4.2.7. RELRO  Relocation Read Only   \n重定位只读技术  \n动态链接器在处理完GOT表后将其设为只读以提高安全性.  \n\n本文测试环境中只读. (实际上这是一个可以成为较为古老的技术了)  \n> Linux version 4.9.0-4-amd64 (debian-kernel@lists.debian.org) \n> (gcc version 6.3.0 20170516 (Debian 6.3.0-18) )  \n> #1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23)   \n> .zsummer  \n\nGOT表为R  只读段.   \n.got.plt存储plt的got仍然是读写段 (惰性加载机制决定, 可以选择非惰性+ro来完成全只读化)  \n\n\n\n\n### 0.0.5. 调用惯例Calling Conventions \n计算机中Corotine分两种 Coroutine和Subroutine 前者对应协程 后者对应函数  \n\n* call a routine (trasfer control to procedure)  跳转到目标routine  \n* pass arguments  传递参数  \n  * fixed length\n  * variable length\n  * recursively  \n* return to the caller  返回调用者地址  \n  * putting results in a place where caller an find them  \n* manage register  管理寄存器 \n\n\n##### 0.0.5.0.8. 参数压栈顺序  \n标准的linux ABI调用约定中\n[System V Application Binary Interface—AMD64 Architecture Processor Supplement]()   \n\n\n###### 0.0.5.0.8.1. Caller Save和Callee Save   \n当产生函数调用时 子函数内通常也会使用到通用寄存器 那么这些寄存器中之前保存的调用者(父函数)的值就会被覆盖   \n为了避免数据覆盖而导致从子函数返回时寄存器中的数据不可恢复 CPU 体系结构中就规定了通用寄存器的保存方式   \n\n* Casller Save '调用者保存' 在发起一个调用前需要保存(子例程直接覆盖使用) \n  * 在进入子函数调用前, 调用者需要保存这些寄存器的值.   \n    * 一般做法是进入子函数调用前把这些寄存器压入栈中    \n* Callee Save '被调用者保存' (子例程使用前需要先保存)   \n  * 在进入子函数调用后, 在使用这些寄存器前, 被调用者会保存这些寄存器的内容,并在使用后恢复  \n  * 这种比较特殊也比较麻烦, 因为一旦接受这个设定, 那么所有subroutine都要进行合适的push并保证pop恢复.     \n  * \n\n* cross\n\n### 0.0.6. 工具   \n\n* objdump -S 查看汇编指令  \n* gdb  \n  * gdb 通过```  layout regs  ```打开寄存器显示, 通过```set disassemble-next-line on```打开汇编  \n  * gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可, peda默认显示是intex语法    \n  * disas反汇编命令,直接disas是反汇编当前函数\n    * disas /r (显示汇编指令对应十六进制值)   \n    * disas /m (如果有源码,显示对应行源码)   \n  * intel语法\n    * set disassembly-flavor intel\n    * set disassembly-flavor att\n  * gdb关闭ASLR：\n    * set disable-randomization on\n  * 开启ASLR：\n    * set disable-randomization off\n  * 查看ASLR状态：\n    * show disable-randomization\n  * 查看二进制  \n    * ```x /1ag addr```\n\n#### 0.0.6.1. PEDA插件  \npeda默认设置的是intel的语法风格\n```\ngit clone https://github.com/longld/peda.git ~/peda\necho \"source ~/peda/peda.py\" >> ~/.gdbinit\necho \"DONE! debug your program with gdb and enjoy\"\n```\n* aslr -- Show/set ASLR setting of GDB\n* checksec -- Check for various security options of binary\n* dumpargs -- Display arguments passed to a function when stopped at a call instruction\n* dumprop -- Dump all ROP gadgets in specific memory range\n* elfheader -- Get headers information from debugged ELF file\n* elfsymbol -- Get non-debugging symbol information from an ELF file\n* lookup -- Search for all addresses/references to addresses which belong to a memory range\n* patch -- Patch memory start at an address with string/hexstring/int\n* pattern -- Generate, search, or write a cyclic pattern to memory\n* procinfo -- Display various info from /proc/pid/\n* pshow -- Show various PEDA options and other settings\n* pset -- Set various PEDA options and other settings\n* readelf -- Get headers information from an ELF file\n* ropgadget -- Get common ROP gadgets of binary or library\n* ropsearch -- Search for ROP gadgets in memory\n* searchmem|find -- Search for a pattern in memory; support regex search\n* shellcode -- Generate or download common shellcodes.\n* skeleton -- Generate python exploit code template\n* vmmap -- Get virtual mapping address ranges of section(s) in debugged process\n* xormem -- XOR a memory region with a key\n","slug":"2019-12-11-asm-syntax","published":1,"updated":"2020-03-09T03:25:56.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej400157w5hchao35ou","content":"<h3><span id=\"001-目录\">0.0.1. 目录</span></h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#基础语法格式\">基础语法格式</a></li>\n<li><a href=\"#常见寄存器以及作用\">常见寄存器以及作用</a><ul>\n<li><a href=\"#通用寄存器\">通用寄存器</a><ul>\n<li><a href=\"#寄存器使用惯例-原文\">寄存器使用惯例 原文</a></li>\n<li><a href=\"#中文对照\">中文对照</a></li>\n</ul>\n</li>\n<li><a href=\"#专用寄存器\">专用寄存器</a><ul>\n<li><a href=\"#标志寄存器-rflags\">标志寄存器 RFLAGS</a></li>\n<li><a href=\"#程序计数器pcrelative-instruction-pointerip\">程序计数器(PC)(Relative Instruction-Pointer)(IP)</a></li>\n<li><a href=\"#指令寄存器\">指令寄存器</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#汇编语法\">汇编语法</a><ul>\n<li><a href=\"#汇编指令\">汇编指令</a></li>\n<li><a href=\"#操作数格式与寻址\">操作数格式与寻址</a><ul>\n<li><a href=\"#内存操作数\">内存操作数</a></li>\n<li><a href=\"#寻址模式\">寻址模式</a></li>\n<li><a href=\"#large-code-mode\">large code mode:</a></li>\n<li><a href=\"#共享库中对g_static_so_data的访问\">共享库中对g_static_so_data的访问</a></li>\n<li><a href=\"#small-code-mode\">small code mode:</a></li>\n<li><a href=\"#备注说明\">备注说明</a></li>\n<li><a href=\"#relro--relocation-read-only\">RELRO  Relocation Read Only</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#调用惯例calling-conventions\">调用惯例Calling Conventions</a><pre><code>- [参数压栈顺序](#参数压栈顺序)\n    - [Caller Save和Callee Save](#caller-save和callee-save)</code></pre></li>\n<li><a href=\"#工具\">工具</a><ul>\n<li><a href=\"#peda插件\">PEDA插件</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n\n\n<h3><span id=\"002-基础语法格式\">0.0.2. 基础语法格式</span></h3><p>GAS汇编的格式阅读起来很自然 如下   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[操作符]    [源]      [目标]   </span><br><span class=\"line\">movl        $0,      -4(%rbp)</span><br></pre></td></tr></table></figure>\n\n\n<p>但是INTEL格式更贴近C语言的书写风格   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[操作符]   [目标]    [源]  </span><br><span class=\"line\">mov        esi,     DWORD PTR [rbp-0x4]</span><br></pre></td></tr></table></figure>\n\n<p>很像C语言的代码   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int esi &#x3D; *(rbp-0x4);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>本文基于X86-64架构体系整理了GAS风格的汇编语法, 如无特殊说明后续内容皆以环境为准.    </p>\n</blockquote>\n<p>“@”符号表示“将符号左边的变量钳制在符号右边的地址   </p>\n<a id=\"more\"></a>   \n\n<h3><span id=\"003-常见寄存器以及作用\">0.0.3. 常见寄存器以及作用</span></h3><p>16bit寄存器一般没有前缀  例如ax   bx   ds<br>32bit寄存器前缀一般为e   例如eax  ebx  eds<br>64bit寄存器前缀一般为r   例如rax  rbx  rds</p>\n<h4><span id=\"0031-通用寄存器\">0.0.3.1. 通用寄存器</span></h4><p>X86-64体系下有16个通用寄存器 分别为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rax    rbx    rcx    rdx    rdi    rsi    rbp    rsp    r8 – r15</span><br></pre></td></tr></table></figure>\n<p>兼容32位模式, 对应为: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eax    ebx    ecx    edx    edi    esi    ebp    esp    e8d – e15d</span><br></pre></td></tr></table></figure>\n\n<p>在所有CPU的架构体系中, 每个寄存器通常都是有其建议的使用用途的, X86-64架构下其用途如下:  </p>\n<h5><span id=\"00311-寄存器使用惯例-原文\">0.0.3.1.1. 寄存器使用惯例 原文</span></h5><p><a href=\"https://cons.mit.edu/sp17/x86-64-architecture-guide.html\" target=\"_blank\" rel=\"noopener\">X86-64 Registers</a></p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Purpose</th>\n<th>Saved across calls</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%rax</td>\n<td>temp register; return value</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rbx</td>\n<td>callee-saved</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rcx</td>\n<td>used to pass 4th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdx</td>\n<td>used to pass 3rd argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rsp</td>\n<td>stack pointer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rbp</td>\n<td>callee-saved; base pointer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rsi</td>\n<td>used to pass 2nd argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdi</td>\n<td>used to pass 1st argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r8</td>\n<td>used to pass 5th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r9</td>\n<td>used to pass 6th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r10-r11</td>\n<td>temporary</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r12-r15</td>\n<td>callee-saved registers</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h5><span id=\"00312-中文对照\">0.0.3.1.2. 中文对照</span></h5><table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>推荐用途</th>\n<th>跨调用过程保存</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%rax</td>\n<td>保存函数/计算的返回值</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rbx</td>\n<td>callee-saved 基址 (比如找GOT表会临时用下)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rcx</td>\n<td>函数的第4个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdx</td>\n<td>函数的第3个参数</td>\n<td>乘法余数</td>\n</tr>\n<tr>\n<td>%rsp</td>\n<td>指向当前栈顶的指针(栈顶)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rbp</td>\n<td>callee-saved; 指向当前栈帧的起始位置(栈基)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rsi</td>\n<td>函数的第2个参数</td>\n<td>字符串源串</td>\n</tr>\n<tr>\n<td>%rdi</td>\n<td>函数的第1个参数</td>\n<td>字符串目标串</td>\n</tr>\n<tr>\n<td>%r8</td>\n<td>函数的第5个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r9</td>\n<td>函数的第6个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r10-r11</td>\n<td>temporary</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r12-r15</td>\n<td>callee-saved registers</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h4><span id=\"0032-专用寄存器\">0.0.3.2. 专用寄存器</span></h4><p>标志寄存器和程序计数器可能为同一个寄存器实现  </p>\n<h5><span id=\"00321-标志寄存器-rflags\">0.0.3.2.1. 标志寄存器 RFLAGS</span></h5><p>NV UP EI PL NZ NA PO NC表示标志寄存器的值  </p>\n<table>\n<thead>\n<tr>\n<th>位编号</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>溢出标志OF(Over flow flag)</td>\n<td>OV(1)</td>\n<td>NV(0)</td>\n</tr>\n<tr>\n<td>方向标志DF(Direction flag)</td>\n<td>DN(1)</td>\n<td>UP(0)</td>\n</tr>\n<tr>\n<td>中断标志IF(Interrupt flag)</td>\n<td>EI(1)</td>\n<td>DI(0)</td>\n</tr>\n<tr>\n<td>符号标志SF(Sign flag)</td>\n<td>NG(1)</td>\n<td>PL(0)</td>\n</tr>\n<tr>\n<td>零标志ZF(Zero flag)</td>\n<td>ZR(1)</td>\n<td>NZ(0)</td>\n</tr>\n<tr>\n<td>辅助标志AF(Auxiliary carry flag)</td>\n<td>AC(1)</td>\n<td>NA(0)</td>\n</tr>\n<tr>\n<td>奇偶标志PF(Parity flag)</td>\n<td>PE(1)</td>\n<td>PO(0)</td>\n</tr>\n<tr>\n<td>进位标志CF(Carry flag)</td>\n<td>CY(1)</td>\n<td>NC(0)</td>\n</tr>\n<tr>\n<td>TF(TrapFlag)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h5><span id=\"00322-程序计数器pcrelative-instruction-pointerip\">0.0.3.2.2. 程序计数器(PC)(Relative Instruction-Pointer)(IP)</span></h5><p>保存下一行要执行的指令位置<br>Intel的实现叫RIP  </p>\n<blockquote>\n<p>The 64-bit instruction pointer RIP points to the next instruction to be executed, and supports a 64-bit flat memory model.<br>64位指令指针 RIP 指向预期要执行的下一行指令(位置), 并且支持64位平坦内存模型<br>RIP-relative addressing: this is new for x64 and allows accessing data tables and such in the code relative to the current instruction pointer, making position independent code easier to implement.<br>PIC提供了相对于当前指令位置访问数据表这样新的支持, 从而让PIC更容易实现   </p>\n</blockquote>\n<p>例如PLC表在RIP下的应用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000000570 &lt;foo@plt&gt;:</span><br><span class=\"line\"> 570:    ff 25 a2 0a 20 00        jmpq   *0x200aa2(%rip)        # 201018 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;</span><br><span class=\"line\"> 576:    68 00 00 00 00           pushq  $0x0</span><br><span class=\"line\"> 57b:    e9 e0 ff ff ff           jmpq   560 &lt;_init+0x20&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在没有RIP的情况下需要通过函数调用来实现PLC  会消耗较多的性能<br>windows则直接采用了’重定位基址’的方式实现非PLC的装载.  </p>\n<h5><span id=\"00323-指令寄存器\">0.0.3.2.3. 指令寄存器</span></h5><p>当前正在执行的指令, 简单CPU会预读 但复杂的CPU有流水线/指令级并行计算等    </p>\n<h3><span id=\"004-汇编语法\">0.0.4. 汇编语法</span></h3><h4><span id=\"0041-汇编指令\">0.0.4.1. 汇编指令</span></h4><table>\n<thead>\n<tr>\n<th>操作码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>复制值</td>\n<td>_</td>\n</tr>\n<tr>\n<td>mov src, dest</td>\n<td>将值从 寄存器,立即值或存储器地址 复制到 寄存器或存储器地址, 不可以同时为内存地址</td>\n</tr>\n<tr>\n<td>movabs</td>\n<td>支持8字节的操作数</td>\n</tr>\n<tr>\n<td>lea src, dest</td>\n<td>move会取值 lea只取地址    dest只能是寄存器</td>\n</tr>\n<tr>\n<td>栈操作</td>\n<td></td>\n</tr>\n<tr>\n<td>enter $x, $0</td>\n<td>设置堆栈框架 相当于 push ebp      和 mov esp, ebp 然后把当前的esp减去x字节的大小(局部变量)</td>\n</tr>\n<tr>\n<td>leave</td>\n<td>恢复堆栈框架 相当于 move ebp, esp 和 pop ebp</td>\n</tr>\n<tr>\n<td>push src</td>\n<td>将src压栈,  rsp-1并把src的内容存储到新位置. src可以是立即数 寄存器 内存地址</td>\n</tr>\n<tr>\n<td>pop dest</td>\n<td>出栈并保存到dest 可以是 寄存器 内存地址</td>\n</tr>\n<tr>\n<td>控制流</td>\n<td></td>\n</tr>\n<tr>\n<td>call label</td>\n<td>无条件跳转到目标(直接跳转)并将返回地址(当前PC/IP +1)压入堆栈</td>\n</tr>\n<tr>\n<td>call *operand</td>\n<td>无条件跳转到目标(间接跳转)并将返回地址(当前PC/IP +1)压入堆栈</td>\n</tr>\n<tr>\n<td>ret</td>\n<td>将返回地址弹出堆栈 然后无条件跳转到该地址</td>\n</tr>\n<tr>\n<td>jmp label</td>\n<td>无条件跳转到目标(直接跳转)</td>\n</tr>\n<tr>\n<td>jmp *operand</td>\n<td>无条件跳转到目标(间接跳转)</td>\n</tr>\n<tr>\n<td>jg, jge, jl, jle, jne, …</td>\n<td>&gt;, &gt;=, &lt;, &lt;=, !=, …</td>\n</tr>\n<tr>\n<td>算术与逻辑</td>\n<td></td>\n</tr>\n<tr>\n<td>inc dest</td>\n<td>dest+=1</td>\n</tr>\n<tr>\n<td>dec dest</td>\n<td>dest-=1</td>\n</tr>\n<tr>\n<td>neg dest</td>\n<td>dest取负</td>\n</tr>\n<tr>\n<td>not dest</td>\n<td>dest取反</td>\n</tr>\n<tr>\n<td>add src, dest</td>\n<td>dest加上src</td>\n</tr>\n<tr>\n<td>sub src, dest</td>\n<td>dest减去src</td>\n</tr>\n<tr>\n<td>imul src, dest</td>\n<td>dest 乘以src</td>\n</tr>\n<tr>\n<td>idiv divisor</td>\n<td>rdx:rax除以divisor, 将商存在rax 余数存储在rdx</td>\n</tr>\n<tr>\n<td>shr cl, reg</td>\n<td>reg右移cl位</td>\n</tr>\n<tr>\n<td>shl cl, reg</td>\n<td>reg左移cl位</td>\n</tr>\n<tr>\n<td>ror src, dest</td>\n<td>dest逐src 位向左或向右旋转。</td>\n</tr>\n<tr>\n<td>cmp src, dest</td>\n<td>执行sub操作但只设置标志寄存器而不存储结果</td>\n</tr>\n<tr>\n<td>test src, dest</td>\n<td>执行and操作只设置标志寄存器而不存储结果,其中是否为0的判断一般类似 <code>test rax,rax</code></td>\n</tr>\n<tr>\n<td>and src, dest</td>\n<td>执行按位的与操作并保存到dest</td>\n</tr>\n<tr>\n<td>xor src, dest</td>\n<td>执行按位的异或操作并保存到dest</td>\n</tr>\n</tbody></table>\n<h4><span id=\"0042-操作数格式与寻址\">0.0.4.2. 操作数格式与寻址</span></h4><p>M[xx]表示在存储器中xx地址的值<br>R[xx]表示寄存器xx的值<br>这种表示方法将寄存器 内存都看出一个大数组的形式    </p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>操作数值</th>\n<th>名称</th>\n<th>样例(GAS = C语言)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%reg</td>\n<td></td>\n<td></td>\n<td>寄存器名字前都加 %</td>\n</tr>\n<tr>\n<td>$Imm</td>\n<td>Imm</td>\n<td>立即数寻址</td>\n<td>$1 = 1</td>\n</tr>\n<tr>\n<td>Ea</td>\n<td>R[Ea]</td>\n<td>寄存器寻址</td>\n<td>%eax = eax</td>\n</tr>\n<tr>\n<td>Imm</td>\n<td>M[Imm]</td>\n<td>绝对寻址</td>\n<td>0x104 = *0x104</td>\n</tr>\n<tr>\n<td>(Ea)</td>\n<td>M[R[Ea]]</td>\n<td>间接寻址</td>\n<td>(%eax)= *eax</td>\n</tr>\n<tr>\n<td>Imm(Ea)</td>\n<td>M[Imm+R[Ea]]</td>\n<td>(基址+偏移量)寻址</td>\n<td>4(%eax) = *(4+eax)</td>\n</tr>\n<tr>\n<td>(Ea,Eb)</td>\n<td>M[R[Ea]+R[Eb]]</td>\n<td>变址</td>\n<td>(%eax,%ebx) = *(eax+ebx)</td>\n</tr>\n<tr>\n<td>Imm(Ea,Eb)</td>\n<td>M[Imm+R[Ea]+R[Eb]]</td>\n<td>寻址</td>\n<td>9(%eax,%ebx)= *(9+eax+ebx)</td>\n</tr>\n<tr>\n<td>(,Ea,s)</td>\n<td>M[R[Ea]*s]</td>\n<td>伸缩化变址寻址</td>\n<td>(,%eax,4)= <em>(eax</em>4)</td>\n</tr>\n<tr>\n<td>Imm(,Ea,s)</td>\n<td>M[Imm+R[Ea]*s]</td>\n<td>伸缩化变址寻址</td>\n<td>0xfc(,%eax,4)= <em>(0xfc+eax</em>4)</td>\n</tr>\n<tr>\n<td>(Ea,Eb,s)</td>\n<td>M(R[Ea]+R[Eb]*s)</td>\n<td>伸缩化变址寻址</td>\n<td>(%eax,%ebx,4) = <em>(eax+ebx</em>4)</td>\n</tr>\n<tr>\n<td>Imm(Ea,Eb,s)</td>\n<td>M(Imm+R[Ea]+R[Eb]*s)</td>\n<td>伸缩化变址寻址</td>\n<td>8(%eax,%ebx,4) = <em>(8+eax+ebx</em>4)</td>\n</tr>\n</tbody></table>\n<h5><span id=\"00421-内存操作数\">0.0.4.2.1. 内存操作数</span></h5><p>操作数语法:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">segment:displacement(base register, index register, scale factor)</span><br></pre></td></tr></table></figure>\n<p>等效intel语法   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">segment:[base register + displacement + index register * scale factor]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果segment未指定，则几乎总是假定为ds，除非base register为esp或ebp；否则为。在这种情况下，假定地址是相对于ss  </p>\n</blockquote>\n<blockquote>\n<p>If segment is not specified, as almost always, it is assumed to be ds, unless base register is esp or ebp; in this case, the address is assumed to be relative to ss<br>快速参考  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movq %rax, %rbx</td>\n<td>rbx = rax</td>\n</tr>\n<tr>\n<td>movq $123, %rax</td>\n<td>rax = 123</td>\n</tr>\n<tr>\n<td>movq %rsi, -16（%rbp）</td>\n<td>mem [rbp-16] = rsi</td>\n</tr>\n<tr>\n<td>subq $10, %rbp</td>\n<td>rbp = rbp -10</td>\n</tr>\n<tr>\n<td>cmpl %eax %ebx</td>\n<td>比较然后设置标志。如果eax == ebx, 则设置零标志。</td>\n</tr>\n<tr>\n<td>leal (%ebx),  %eax</td>\n<td>movl %ebx,  %eax</td>\n</tr>\n</tbody></table>\n<h5><span id=\"00422-寻址模式\">0.0.4.2.2. 寻址模式</span></h5><blockquote>\n<p>References to both code and data on x64 are done with instruction-relative (RIP-relative in x64 parlance) addressing modes. The offset from RIP in these instructions is limited to 32 bits.<br>X64体系下的寻址是建立在相对寻址(RIP-RELATIVE)之上的, RIP的偏移大小最大为32bits  </p>\n</blockquote>\n<p><a href=\"https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models\" target=\"_blank\" rel=\"noopener\">x64 code mode</a>    </p>\n<blockquote>\n<p>Default operand size in 64-bit mode is still 32-bit and 64-bit immediates are allowed only with mov instruction.<br>movabs is just AT&amp;T syntax for a mov with a 64-bit immediate operand.<br>只有mov操作可以填写8字节的立即数  movabs是AT&amp;T语法中mov的(别名)    </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>同义名</th>\n<th>跳转条件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jmp</td>\n<td>Label</td>\n<td>1</td>\n<td>直接跳转</td>\n</tr>\n<tr>\n<td>jmp</td>\n<td>*Operand</td>\n<td>1</td>\n<td>间接跳转</td>\n</tr>\n</tbody></table>\n<p>绝对寻址/直接寻址(Absolute or direct):  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jump    address</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>(有效PC地址=address)<br>Effective PC address = address  </p>\n</blockquote>\n<p>相对寻址(PC-relative):  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jump    offset</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>(有效PC地址=rip+offset = 下一个指令的地址 + offset)<br>Effective PC address = next instruction address + offset, offset may be negative  </p>\n</blockquote>\n<p>快速分析:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000000000007e0 &lt;.plt&gt;:</span><br><span class=\"line\"> 7e0:   ff 35 22 08 20 00       pushq  0x200822(%rip)        # 201008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class=\"line\"> 7e6:   ff 25 24 08 20 00       jmpq   *0x200824(%rip)        # 201010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class=\"line\"> 7ec:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class=\"line\">0000000000000810 &lt;_Z12so_func_baseii@plt&gt;:</span><br><span class=\"line\"> 810:   ff 25 12 08 20 00       jmpq   *0x200812(%rip)        # 201028 &lt;_Z12so_func_baseii&gt;</span><br><span class=\"line\"> 816:   68 02 00 00 00          pushq  $0x2</span><br><span class=\"line\"> 81b:   e9 c0 ff ff ff          jmpq   7e0 &lt;.plt&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>jmpq   7e0</code>  跳转到 CS:7e0 这个位置  </p>\n<blockquote>\n<p>实际上二进制的内容仍然是相对寻址(81b+5 + -40) ==  7e0  等同 jumpq * -0x40(%rip) 但省了一个字节的指令   </p>\n</blockquote>\n</li>\n<li><p><code>jmpq   *0x200812(%rip)</code>  跳转到 816 + 0x200812 这个位置 (rip是一个指针 需要解引用获得目标地址)   </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a84:   74 20                   je     aa6 &lt;__libc_csu_init+0x56&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里跳转指令则只用了两个字节  </li>\n</ul>\n<h5><span id=\"00423-large-code-mode\">0.0.4.2.3. large code mode:</span></h5><blockquote>\n<p>In the small code model all addresses (including GOT entries) are accessible via the IP-relative addressing provided by the AMD64 architecture. Hence there is no need for an explicit GOT pointer and therefore no function prologue for setting it up is necessary. In the medium and large code models a register has to be allocated to hold the address of the GOT in position-independent objects, because the AMD64 ISA does not support an immediate displacement larger than 32 bits.<br>在一个小型代码模型中, 所有的地址(包括GOT入口地址) 都是可以通过IP-RELATIVE访问到.  因此不需要显示声明额外的GOT指针 也不需要设置函数的开始语.  但在一个中型或者大型代码模型中, 必须分配一个寄存器去持有位置无关对象在GOT的地址  (AMD64不支持大于32位的立即跳转)  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel&#x3D;large</span><br></pre></td></tr></table></figure>\n\n<p> 举例一个通过.GOT表访问的全局变量代码如下:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a40:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # a40 &lt;main+0xb&gt;</span><br><span class=\"line\">a47:   49 bb c0 05 20 00 00    movabs $0x2005c0,%r11</span><br><span class=\"line\">a4e:   00 00 00 </span><br><span class=\"line\">a51:   4c 01 db                add    %r11,%rbx</span><br><span class=\"line\">a54:   89 7d dc                mov    %edi,-0x24(%rbp)</span><br><span class=\"line\">a57:   48 89 75 d0             mov    %rsi,-0x30(%rbp)</span><br><span class=\"line\">a5b:   c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)</span><br><span class=\"line\">a62:   48 b8 d0 ff ff ff ff    movabs $0xffffffffffffffd0,%rax</span><br><span class=\"line\">a69:   ff ff ff </span><br><span class=\"line\">a6c:   48 8b 04 03             mov    (%rbx,%rax,1),%rax</span><br><span class=\"line\">a70:   c7 00 e8 03 00 00       movl   $0x3e8,(%rax)</span><br></pre></td></tr></table></figure></p>\n<p>a4e为8字节的操作数剩余部分</p>\n<p>a40行取得当前行的地址<br>a51行通过偏移量获得.got表的end 地址 =  a40 + 0x2005c0 =   201000   =.plt.got   (.got表在本测试中大小是0x40)<br>a6c行把RBX + 0xffffffffffffffd0 (= -0x30) 得到GOT表中存放全局变量的地址 <code>*(.plt.got -0x30) = got[g_static_so_data]</code><br>a70赋值立即数0x3e8 给全局变量 <code>g_static_so_data = *(got[g_static_so_data])</code>  </p>\n<p>节点偏移和大小如下    </p>\n<table>\n<thead>\n<tr>\n<th>[号]</th>\n<th>名称</th>\n<th>类型</th>\n<th>地址</th>\n<th>偏移量</th>\n<th>大小</th>\n<th>全体大小</th>\n<th>旗标</th>\n<th>链接</th>\n<th>信息</th>\n<th>对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[23]</td>\n<td>.got</td>\n<td>PROGBITS</td>\n<td>00200fc0</td>\n<td>000fc0</td>\n<td>00040</td>\n<td>0008</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[24]</td>\n<td>.got.plt</td>\n<td>PROGBITS</td>\n<td>00201000</td>\n<td>001000</td>\n<td>00030</td>\n<td>0008</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[25]</td>\n<td>.data</td>\n<td>PROGBITS</td>\n<td>00201030</td>\n<td>001030</td>\n<td>00014</td>\n<td>0000</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[26]</td>\n<td>.bss</td>\n<td>NOBITS</td>\n<td>00201044</td>\n<td>001044</td>\n<td>0000c</td>\n<td>0000</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>程序声明如下:   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int g_static_so_bss;</span><br><span class=\"line\">extern int g_static_so_data;</span><br><span class=\"line\">extern int errno;</span><br></pre></td></tr></table></figure>\n<p>当前汇编访问的是:g_static_so_data<br>.dyn global data如下  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000200fc0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span><br><span class=\"line\">000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0</span><br><span class=\"line\">000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000200fd8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000200fe0  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0</span><br><span class=\"line\">000000200fe8  000900000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0</span><br><span class=\"line\">000000200ff0  000a00000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span><br><span class=\"line\">000000200ff8  000b00000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"00424-共享库中对g_static_so_data的访问\">0.0.4.2.4. 共享库中对g_static_so_data的访问</span></h5><p>如果代码模型为大型 则和可执行程序中的代码段一致 如果是small或者median 共享库仍然会对全局变量走GOT表<br>汇编如下:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">894:   48 8b 05 45 07 20 00    mov    0x200745(%rip),%rax        # 200fe0 &lt;g_static_so_bss@@Base-0x60&gt;</span><br><span class=\"line\">89b:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">89e:   01 c2                   add    %eax,%edx</span><br></pre></td></tr></table></figure>\n<p>894: 取GOT中存储 g_static_so_bss 的项地址 并把内容(g_static_so_bss的地址)存放到%rax中<br>89b: 取 g_static_so_bss 的内容<br>89e: 加到%edx上  </p>\n<h5><span id=\"00425-small-code-mode\">0.0.4.2.5. small code mode:</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel&#x3D;small</span><br></pre></td></tr></table></figure>\n\n<p>假设了全局变量的存储位置在低端内存, 因此该全局变量直接定义在主程序的data段, 在so文件中仍然通过.got找到真实地址.<br>其类型R_X86_64_COPY<br>在主程序的汇编代码只有一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9f0:   c7 05 4e 06 20 00 e8    movl   $0x3e8,0x20064e(%rip)        # 201048 &lt;g_static_so_data&gt;</span><br></pre></td></tr></table></figure>\n<p>.dyn global</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000201048  001200000005 R_X86_64_COPY     0000000000201048 g_static_so_data + 0</span><br><span class=\"line\">000000201050  001000000005 R_X86_64_COPY     0000000000201050 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>.dyn so </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000200fd8  001300000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0</span><br><span class=\"line\">000000200fe0  001000000006 R_X86_64_GLOB_DAT 0000000000201040 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>.symver指令</p>\n<blockquote>\n<p>g_static_so_data@@Base-0x58  的意思是: g_static_so_data的符号值-0x58 也就是g_static_so_data的偏移量  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000201030 - 000000200fd8 &#x3D; 0x58</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"00426-备注说明\">0.0.4.2.6. 备注说明</span></h5><p>共享库中 无论是large还是small, 都会走so的got表, 区别在于会不会使用movabs进行64位的偏移计算<br>got表的位置可能紧接着.text并且设置为只读<br><a href=\"https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html\" target=\"_blank\" rel=\"noopener\">RELRO</a>   </p>\n<p>通过got表访问全局变量:  </p>\n<ol>\n<li>通过RIP-R找到GOT表的位置.   相对于.text固定的偏移量 (large不假定大小)     </li>\n<li>通过项索引偏移找到存储该变量地址的地址并解引用得到 变量地址  <ol>\n<li>(large不假定大小, medium会区分把&lt;64k的数据链接到低内存中 多个数据段.ldata(largedata))  </li>\n</ol>\n</li>\n<li>解引用并使用  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov  (%rbx,%rax,1),%rax</span><br></pre></td></tr></table></figure>\n<p>这行代码可以优化为一个立即数偏移寻址  即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov    0x200745(%rip),%rax</span><br></pre></td></tr></table></figure>\n\n<p>当前代码段到GOT表的偏移</p>\n<p>但是在large模型中 </p>\n<p>通过rip寻址的指令中 偏移量不是64位的  因此需要先算一个小的偏移量 再通过支持64bit的 movabs(mov) 添加上一个64bit的偏移</p>\n<h5><span id=\"00427-relro-relocation-read-only\">0.0.4.2.7. RELRO  Relocation Read Only</span></h5><p>重定位只读技术<br>动态链接器在处理完GOT表后将其设为只读以提高安全性.  </p>\n<p>本文测试环境中只读. (实际上这是一个可以成为较为古老的技术了)  </p>\n<blockquote>\n<p>Linux version 4.9.0-4-amd64 (<a href=\"mailto:debian-kernel@lists.debian.org\">debian-kernel@lists.debian.org</a>)<br>(gcc version 6.3.0 20170516 (Debian 6.3.0-18) )<br>#1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23)<br>.zsummer  </p>\n</blockquote>\n<p>GOT表为R  只读段.<br>.got.plt存储plt的got仍然是读写段 (惰性加载机制决定, 可以选择非惰性+ro来完成全只读化)  </p>\n<h3><span id=\"005-调用惯例calling-conventions\">0.0.5. 调用惯例Calling Conventions</span></h3><p>计算机中Corotine分两种 Coroutine和Subroutine 前者对应协程 后者对应函数  </p>\n<ul>\n<li>call a routine (trasfer control to procedure)  跳转到目标routine  </li>\n<li>pass arguments  传递参数  <ul>\n<li>fixed length</li>\n<li>variable length</li>\n<li>recursively  </li>\n</ul>\n</li>\n<li>return to the caller  返回调用者地址  <ul>\n<li>putting results in a place where caller an find them  </li>\n</ul>\n</li>\n<li>manage register  管理寄存器 </li>\n</ul>\n<h5><span id=\"00508-参数压栈顺序\">0.0.5.0.8. 参数压栈顺序</span></h5><p>标准的linux ABI调用约定中<br><a href=\"\">System V Application Binary Interface—AMD64 Architecture Processor Supplement</a>   </p>\n<h6><span id=\"005081-caller-save和callee-save\">0.0.5.0.8.1. Caller Save和Callee Save</span></h6><p>当产生函数调用时 子函数内通常也会使用到通用寄存器 那么这些寄存器中之前保存的调用者(父函数)的值就会被覆盖<br>为了避免数据覆盖而导致从子函数返回时寄存器中的数据不可恢复 CPU 体系结构中就规定了通用寄存器的保存方式   </p>\n<ul>\n<li><p>Casller Save ‘调用者保存’ 在发起一个调用前需要保存(子例程直接覆盖使用) </p>\n<ul>\n<li>在进入子函数调用前, 调用者需要保存这些寄存器的值.   <ul>\n<li>一般做法是进入子函数调用前把这些寄存器压入栈中    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Callee Save ‘被调用者保存’ (子例程使用前需要先保存)   </p>\n<ul>\n<li>在进入子函数调用后, 在使用这些寄存器前, 被调用者会保存这些寄存器的内容,并在使用后恢复  </li>\n<li>这种比较特殊也比较麻烦, 因为一旦接受这个设定, 那么所有subroutine都要进行合适的push并保证pop恢复.     </li>\n<li></li>\n</ul>\n</li>\n<li><p>cross</p>\n</li>\n</ul>\n<h3><span id=\"006-工具\">0.0.6. 工具</span></h3><ul>\n<li>objdump -S 查看汇编指令  </li>\n<li>gdb  <ul>\n<li>gdb 通过<code>layout regs</code>打开寄存器显示, 通过<code>set disassemble-next-line on</code>打开汇编  </li>\n<li>gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可, peda默认显示是intex语法    </li>\n<li>disas反汇编命令,直接disas是反汇编当前函数<ul>\n<li>disas /r (显示汇编指令对应十六进制值)   </li>\n<li>disas /m (如果有源码,显示对应行源码)   </li>\n</ul>\n</li>\n<li>intel语法<ul>\n<li>set disassembly-flavor intel</li>\n<li>set disassembly-flavor att</li>\n</ul>\n</li>\n<li>gdb关闭ASLR：<ul>\n<li>set disable-randomization on</li>\n</ul>\n</li>\n<li>开启ASLR：<ul>\n<li>set disable-randomization off</li>\n</ul>\n</li>\n<li>查看ASLR状态：<ul>\n<li>show disable-randomization</li>\n</ul>\n</li>\n<li>查看二进制  <ul>\n<li><code>x /1ag addr</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"0061-peda插件\">0.0.6.1. PEDA插件</span></h4><p>peda默认设置的是intel的语法风格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;longld&#x2F;peda.git ~&#x2F;peda</span><br><span class=\"line\">echo &quot;source ~&#x2F;peda&#x2F;peda.py&quot; &gt;&gt; ~&#x2F;.gdbinit</span><br><span class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>aslr – Show/set ASLR setting of GDB</li>\n<li>checksec – Check for various security options of binary</li>\n<li>dumpargs – Display arguments passed to a function when stopped at a call instruction</li>\n<li>dumprop – Dump all ROP gadgets in specific memory range</li>\n<li>elfheader – Get headers information from debugged ELF file</li>\n<li>elfsymbol – Get non-debugging symbol information from an ELF file</li>\n<li>lookup – Search for all addresses/references to addresses which belong to a memory range</li>\n<li>patch – Patch memory start at an address with string/hexstring/int</li>\n<li>pattern – Generate, search, or write a cyclic pattern to memory</li>\n<li>procinfo – Display various info from /proc/pid/</li>\n<li>pshow – Show various PEDA options and other settings</li>\n<li>pset – Set various PEDA options and other settings</li>\n<li>readelf – Get headers information from an ELF file</li>\n<li>ropgadget – Get common ROP gadgets of binary or library</li>\n<li>ropsearch – Search for ROP gadgets in memory</li>\n<li>searchmem|find – Search for a pattern in memory; support regex search</li>\n<li>shellcode – Generate or download common shellcodes.</li>\n<li>skeleton – Generate python exploit code template</li>\n<li>vmmap – Get virtual mapping address ranges of section(s) in debugged process</li>\n<li>xormem – XOR a memory region with a key</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"0-0-1-目录\"><a href=\"#0-0-1-目录\" class=\"headerlink\" title=\"0.0.1. 目录\"></a>0.0.1. 目录</h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#基础语法格式\">基础语法格式</a></li>\n<li><a href=\"#常见寄存器以及作用\">常见寄存器以及作用</a><ul>\n<li><a href=\"#通用寄存器\">通用寄存器</a><ul>\n<li><a href=\"#寄存器使用惯例-原文\">寄存器使用惯例 原文</a></li>\n<li><a href=\"#中文对照\">中文对照</a></li>\n</ul>\n</li>\n<li><a href=\"#专用寄存器\">专用寄存器</a><ul>\n<li><a href=\"#标志寄存器-rflags\">标志寄存器 RFLAGS</a></li>\n<li><a href=\"#程序计数器pcrelative-instruction-pointerip\">程序计数器(PC)(Relative Instruction-Pointer)(IP)</a></li>\n<li><a href=\"#指令寄存器\">指令寄存器</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#汇编语法\">汇编语法</a><ul>\n<li><a href=\"#汇编指令\">汇编指令</a></li>\n<li><a href=\"#操作数格式与寻址\">操作数格式与寻址</a><ul>\n<li><a href=\"#内存操作数\">内存操作数</a></li>\n<li><a href=\"#寻址模式\">寻址模式</a></li>\n<li><a href=\"#large-code-mode\">large code mode:</a></li>\n<li><a href=\"#共享库中对g_static_so_data的访问\">共享库中对g_static_so_data的访问</a></li>\n<li><a href=\"#small-code-mode\">small code mode:</a></li>\n<li><a href=\"#备注说明\">备注说明</a></li>\n<li><a href=\"#relro--relocation-read-only\">RELRO  Relocation Read Only</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#调用惯例calling-conventions\">调用惯例Calling Conventions</a><pre><code>- [参数压栈顺序](#参数压栈顺序)\n    - [Caller Save和Callee Save](#caller-save和callee-save)</code></pre></li>\n<li><a href=\"#工具\">工具</a><ul>\n<li><a href=\"#peda插件\">PEDA插件</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n\n\n<h3 id=\"0-0-2-基础语法格式\"><a href=\"#0-0-2-基础语法格式\" class=\"headerlink\" title=\"0.0.2. 基础语法格式\"></a>0.0.2. 基础语法格式</h3><p>GAS汇编的格式阅读起来很自然 如下   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[操作符]    [源]      [目标]   </span><br><span class=\"line\">movl        $0,      -4(%rbp)</span><br></pre></td></tr></table></figure>\n\n\n<p>但是INTEL格式更贴近C语言的书写风格   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[操作符]   [目标]    [源]  </span><br><span class=\"line\">mov        esi,     DWORD PTR [rbp-0x4]</span><br></pre></td></tr></table></figure>\n\n<p>很像C语言的代码   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int esi &#x3D; *(rbp-0x4);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>本文基于X86-64架构体系整理了GAS风格的汇编语法, 如无特殊说明后续内容皆以环境为准.    </p>\n</blockquote>\n<p>“@”符号表示“将符号左边的变量钳制在符号右边的地址   </p>","more":"<h3 id=\"0-0-3-常见寄存器以及作用\"><a href=\"#0-0-3-常见寄存器以及作用\" class=\"headerlink\" title=\"0.0.3. 常见寄存器以及作用\"></a>0.0.3. 常见寄存器以及作用</h3><p>16bit寄存器一般没有前缀  例如ax   bx   ds<br>32bit寄存器前缀一般为e   例如eax  ebx  eds<br>64bit寄存器前缀一般为r   例如rax  rbx  rds</p>\n<h4 id=\"0-0-3-1-通用寄存器\"><a href=\"#0-0-3-1-通用寄存器\" class=\"headerlink\" title=\"0.0.3.1. 通用寄存器\"></a>0.0.3.1. 通用寄存器</h4><p>X86-64体系下有16个通用寄存器 分别为:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rax    rbx    rcx    rdx    rdi    rsi    rbp    rsp    r8 – r15</span><br></pre></td></tr></table></figure>\n<p>兼容32位模式, 对应为: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eax    ebx    ecx    edx    edi    esi    ebp    esp    e8d – e15d</span><br></pre></td></tr></table></figure>\n\n<p>在所有CPU的架构体系中, 每个寄存器通常都是有其建议的使用用途的, X86-64架构下其用途如下:  </p>\n<h5 id=\"0-0-3-1-1-寄存器使用惯例-原文\"><a href=\"#0-0-3-1-1-寄存器使用惯例-原文\" class=\"headerlink\" title=\"0.0.3.1.1. 寄存器使用惯例 原文\"></a>0.0.3.1.1. 寄存器使用惯例 原文</h5><p><a href=\"https://cons.mit.edu/sp17/x86-64-architecture-guide.html\" target=\"_blank\" rel=\"noopener\">X86-64 Registers</a></p>\n<table>\n<thead>\n<tr>\n<th>Register</th>\n<th>Purpose</th>\n<th>Saved across calls</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%rax</td>\n<td>temp register; return value</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rbx</td>\n<td>callee-saved</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rcx</td>\n<td>used to pass 4th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdx</td>\n<td>used to pass 3rd argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rsp</td>\n<td>stack pointer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rbp</td>\n<td>callee-saved; base pointer</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rsi</td>\n<td>used to pass 2nd argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdi</td>\n<td>used to pass 1st argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r8</td>\n<td>used to pass 5th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r9</td>\n<td>used to pass 6th argument to functions</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r10-r11</td>\n<td>temporary</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r12-r15</td>\n<td>callee-saved registers</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h5 id=\"0-0-3-1-2-中文对照\"><a href=\"#0-0-3-1-2-中文对照\" class=\"headerlink\" title=\"0.0.3.1.2. 中文对照\"></a>0.0.3.1.2. 中文对照</h5><table>\n<thead>\n<tr>\n<th>寄存器</th>\n<th>推荐用途</th>\n<th>跨调用过程保存</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%rax</td>\n<td>保存函数/计算的返回值</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rbx</td>\n<td>callee-saved 基址 (比如找GOT表会临时用下)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rcx</td>\n<td>函数的第4个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%rdx</td>\n<td>函数的第3个参数</td>\n<td>乘法余数</td>\n</tr>\n<tr>\n<td>%rsp</td>\n<td>指向当前栈顶的指针(栈顶)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rbp</td>\n<td>callee-saved; 指向当前栈帧的起始位置(栈基)</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>%rsi</td>\n<td>函数的第2个参数</td>\n<td>字符串源串</td>\n</tr>\n<tr>\n<td>%rdi</td>\n<td>函数的第1个参数</td>\n<td>字符串目标串</td>\n</tr>\n<tr>\n<td>%r8</td>\n<td>函数的第5个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r9</td>\n<td>函数的第6个参数</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r10-r11</td>\n<td>temporary</td>\n<td>No</td>\n</tr>\n<tr>\n<td>%r12-r15</td>\n<td>callee-saved registers</td>\n<td>Yes</td>\n</tr>\n</tbody></table>\n<h4 id=\"0-0-3-2-专用寄存器\"><a href=\"#0-0-3-2-专用寄存器\" class=\"headerlink\" title=\"0.0.3.2. 专用寄存器\"></a>0.0.3.2. 专用寄存器</h4><p>标志寄存器和程序计数器可能为同一个寄存器实现  </p>\n<h5 id=\"0-0-3-2-1-标志寄存器-RFLAGS\"><a href=\"#0-0-3-2-1-标志寄存器-RFLAGS\" class=\"headerlink\" title=\"0.0.3.2.1. 标志寄存器 RFLAGS\"></a>0.0.3.2.1. 标志寄存器 RFLAGS</h5><p>NV UP EI PL NZ NA PO NC表示标志寄存器的值  </p>\n<table>\n<thead>\n<tr>\n<th>位编号</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>溢出标志OF(Over flow flag)</td>\n<td>OV(1)</td>\n<td>NV(0)</td>\n</tr>\n<tr>\n<td>方向标志DF(Direction flag)</td>\n<td>DN(1)</td>\n<td>UP(0)</td>\n</tr>\n<tr>\n<td>中断标志IF(Interrupt flag)</td>\n<td>EI(1)</td>\n<td>DI(0)</td>\n</tr>\n<tr>\n<td>符号标志SF(Sign flag)</td>\n<td>NG(1)</td>\n<td>PL(0)</td>\n</tr>\n<tr>\n<td>零标志ZF(Zero flag)</td>\n<td>ZR(1)</td>\n<td>NZ(0)</td>\n</tr>\n<tr>\n<td>辅助标志AF(Auxiliary carry flag)</td>\n<td>AC(1)</td>\n<td>NA(0)</td>\n</tr>\n<tr>\n<td>奇偶标志PF(Parity flag)</td>\n<td>PE(1)</td>\n<td>PO(0)</td>\n</tr>\n<tr>\n<td>进位标志CF(Carry flag)</td>\n<td>CY(1)</td>\n<td>NC(0)</td>\n</tr>\n<tr>\n<td>TF(TrapFlag)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h5 id=\"0-0-3-2-2-程序计数器-PC-Relative-Instruction-Pointer-IP\"><a href=\"#0-0-3-2-2-程序计数器-PC-Relative-Instruction-Pointer-IP\" class=\"headerlink\" title=\"0.0.3.2.2. 程序计数器(PC)(Relative Instruction-Pointer)(IP)\"></a>0.0.3.2.2. 程序计数器(PC)(Relative Instruction-Pointer)(IP)</h5><p>保存下一行要执行的指令位置<br>Intel的实现叫RIP  </p>\n<blockquote>\n<p>The 64-bit instruction pointer RIP points to the next instruction to be executed, and supports a 64-bit flat memory model.<br>64位指令指针 RIP 指向预期要执行的下一行指令(位置), 并且支持64位平坦内存模型<br>RIP-relative addressing: this is new for x64 and allows accessing data tables and such in the code relative to the current instruction pointer, making position independent code easier to implement.<br>PIC提供了相对于当前指令位置访问数据表这样新的支持, 从而让PIC更容易实现   </p>\n</blockquote>\n<p>例如PLC表在RIP下的应用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000000570 &lt;foo@plt&gt;:</span><br><span class=\"line\"> 570:    ff 25 a2 0a 20 00        jmpq   *0x200aa2(%rip)        # 201018 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;</span><br><span class=\"line\"> 576:    68 00 00 00 00           pushq  $0x0</span><br><span class=\"line\"> 57b:    e9 e0 ff ff ff           jmpq   560 &lt;_init+0x20&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在没有RIP的情况下需要通过函数调用来实现PLC  会消耗较多的性能<br>windows则直接采用了’重定位基址’的方式实现非PLC的装载.  </p>\n<h5 id=\"0-0-3-2-3-指令寄存器\"><a href=\"#0-0-3-2-3-指令寄存器\" class=\"headerlink\" title=\"0.0.3.2.3. 指令寄存器\"></a>0.0.3.2.3. 指令寄存器</h5><p>当前正在执行的指令, 简单CPU会预读 但复杂的CPU有流水线/指令级并行计算等    </p>\n<h3 id=\"0-0-4-汇编语法\"><a href=\"#0-0-4-汇编语法\" class=\"headerlink\" title=\"0.0.4. 汇编语法\"></a>0.0.4. 汇编语法</h3><h4 id=\"0-0-4-1-汇编指令\"><a href=\"#0-0-4-1-汇编指令\" class=\"headerlink\" title=\"0.0.4.1. 汇编指令\"></a>0.0.4.1. 汇编指令</h4><table>\n<thead>\n<tr>\n<th>操作码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>复制值</td>\n<td>_</td>\n</tr>\n<tr>\n<td>mov src, dest</td>\n<td>将值从 寄存器,立即值或存储器地址 复制到 寄存器或存储器地址, 不可以同时为内存地址</td>\n</tr>\n<tr>\n<td>movabs</td>\n<td>支持8字节的操作数</td>\n</tr>\n<tr>\n<td>lea src, dest</td>\n<td>move会取值 lea只取地址    dest只能是寄存器</td>\n</tr>\n<tr>\n<td>栈操作</td>\n<td></td>\n</tr>\n<tr>\n<td>enter $x, $0</td>\n<td>设置堆栈框架 相当于 push ebp      和 mov esp, ebp 然后把当前的esp减去x字节的大小(局部变量)</td>\n</tr>\n<tr>\n<td>leave</td>\n<td>恢复堆栈框架 相当于 move ebp, esp 和 pop ebp</td>\n</tr>\n<tr>\n<td>push src</td>\n<td>将src压栈,  rsp-1并把src的内容存储到新位置. src可以是立即数 寄存器 内存地址</td>\n</tr>\n<tr>\n<td>pop dest</td>\n<td>出栈并保存到dest 可以是 寄存器 内存地址</td>\n</tr>\n<tr>\n<td>控制流</td>\n<td></td>\n</tr>\n<tr>\n<td>call label</td>\n<td>无条件跳转到目标(直接跳转)并将返回地址(当前PC/IP +1)压入堆栈</td>\n</tr>\n<tr>\n<td>call *operand</td>\n<td>无条件跳转到目标(间接跳转)并将返回地址(当前PC/IP +1)压入堆栈</td>\n</tr>\n<tr>\n<td>ret</td>\n<td>将返回地址弹出堆栈 然后无条件跳转到该地址</td>\n</tr>\n<tr>\n<td>jmp label</td>\n<td>无条件跳转到目标(直接跳转)</td>\n</tr>\n<tr>\n<td>jmp *operand</td>\n<td>无条件跳转到目标(间接跳转)</td>\n</tr>\n<tr>\n<td>jg, jge, jl, jle, jne, …</td>\n<td>&gt;, &gt;=, &lt;, &lt;=, !=, …</td>\n</tr>\n<tr>\n<td>算术与逻辑</td>\n<td></td>\n</tr>\n<tr>\n<td>inc dest</td>\n<td>dest+=1</td>\n</tr>\n<tr>\n<td>dec dest</td>\n<td>dest-=1</td>\n</tr>\n<tr>\n<td>neg dest</td>\n<td>dest取负</td>\n</tr>\n<tr>\n<td>not dest</td>\n<td>dest取反</td>\n</tr>\n<tr>\n<td>add src, dest</td>\n<td>dest加上src</td>\n</tr>\n<tr>\n<td>sub src, dest</td>\n<td>dest减去src</td>\n</tr>\n<tr>\n<td>imul src, dest</td>\n<td>dest 乘以src</td>\n</tr>\n<tr>\n<td>idiv divisor</td>\n<td>rdx:rax除以divisor, 将商存在rax 余数存储在rdx</td>\n</tr>\n<tr>\n<td>shr cl, reg</td>\n<td>reg右移cl位</td>\n</tr>\n<tr>\n<td>shl cl, reg</td>\n<td>reg左移cl位</td>\n</tr>\n<tr>\n<td>ror src, dest</td>\n<td>dest逐src 位向左或向右旋转。</td>\n</tr>\n<tr>\n<td>cmp src, dest</td>\n<td>执行sub操作但只设置标志寄存器而不存储结果</td>\n</tr>\n<tr>\n<td>test src, dest</td>\n<td>执行and操作只设置标志寄存器而不存储结果,其中是否为0的判断一般类似 <code>test rax,rax</code></td>\n</tr>\n<tr>\n<td>and src, dest</td>\n<td>执行按位的与操作并保存到dest</td>\n</tr>\n<tr>\n<td>xor src, dest</td>\n<td>执行按位的异或操作并保存到dest</td>\n</tr>\n</tbody></table>\n<h4 id=\"0-0-4-2-操作数格式与寻址\"><a href=\"#0-0-4-2-操作数格式与寻址\" class=\"headerlink\" title=\"0.0.4.2. 操作数格式与寻址\"></a>0.0.4.2. 操作数格式与寻址</h4><p>M[xx]表示在存储器中xx地址的值<br>R[xx]表示寄存器xx的值<br>这种表示方法将寄存器 内存都看出一个大数组的形式    </p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>操作数值</th>\n<th>名称</th>\n<th>样例(GAS = C语言)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%reg</td>\n<td></td>\n<td></td>\n<td>寄存器名字前都加 %</td>\n</tr>\n<tr>\n<td>$Imm</td>\n<td>Imm</td>\n<td>立即数寻址</td>\n<td>$1 = 1</td>\n</tr>\n<tr>\n<td>Ea</td>\n<td>R[Ea]</td>\n<td>寄存器寻址</td>\n<td>%eax = eax</td>\n</tr>\n<tr>\n<td>Imm</td>\n<td>M[Imm]</td>\n<td>绝对寻址</td>\n<td>0x104 = *0x104</td>\n</tr>\n<tr>\n<td>(Ea)</td>\n<td>M[R[Ea]]</td>\n<td>间接寻址</td>\n<td>(%eax)= *eax</td>\n</tr>\n<tr>\n<td>Imm(Ea)</td>\n<td>M[Imm+R[Ea]]</td>\n<td>(基址+偏移量)寻址</td>\n<td>4(%eax) = *(4+eax)</td>\n</tr>\n<tr>\n<td>(Ea,Eb)</td>\n<td>M[R[Ea]+R[Eb]]</td>\n<td>变址</td>\n<td>(%eax,%ebx) = *(eax+ebx)</td>\n</tr>\n<tr>\n<td>Imm(Ea,Eb)</td>\n<td>M[Imm+R[Ea]+R[Eb]]</td>\n<td>寻址</td>\n<td>9(%eax,%ebx)= *(9+eax+ebx)</td>\n</tr>\n<tr>\n<td>(,Ea,s)</td>\n<td>M[R[Ea]*s]</td>\n<td>伸缩化变址寻址</td>\n<td>(,%eax,4)= <em>(eax</em>4)</td>\n</tr>\n<tr>\n<td>Imm(,Ea,s)</td>\n<td>M[Imm+R[Ea]*s]</td>\n<td>伸缩化变址寻址</td>\n<td>0xfc(,%eax,4)= <em>(0xfc+eax</em>4)</td>\n</tr>\n<tr>\n<td>(Ea,Eb,s)</td>\n<td>M(R[Ea]+R[Eb]*s)</td>\n<td>伸缩化变址寻址</td>\n<td>(%eax,%ebx,4) = <em>(eax+ebx</em>4)</td>\n</tr>\n<tr>\n<td>Imm(Ea,Eb,s)</td>\n<td>M(Imm+R[Ea]+R[Eb]*s)</td>\n<td>伸缩化变址寻址</td>\n<td>8(%eax,%ebx,4) = <em>(8+eax+ebx</em>4)</td>\n</tr>\n</tbody></table>\n<h5 id=\"0-0-4-2-1-内存操作数\"><a href=\"#0-0-4-2-1-内存操作数\" class=\"headerlink\" title=\"0.0.4.2.1. 内存操作数\"></a>0.0.4.2.1. 内存操作数</h5><p>操作数语法:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">segment:displacement(base register, index register, scale factor)</span><br></pre></td></tr></table></figure>\n<p>等效intel语法   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">segment:[base register + displacement + index register * scale factor]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果segment未指定，则几乎总是假定为ds，除非base register为esp或ebp；否则为。在这种情况下，假定地址是相对于ss  </p>\n</blockquote>\n<blockquote>\n<p>If segment is not specified, as almost always, it is assumed to be ds, unless base register is esp or ebp; in this case, the address is assumed to be relative to ss<br>快速参考  </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movq %rax, %rbx</td>\n<td>rbx = rax</td>\n</tr>\n<tr>\n<td>movq $123, %rax</td>\n<td>rax = 123</td>\n</tr>\n<tr>\n<td>movq %rsi, -16（%rbp）</td>\n<td>mem [rbp-16] = rsi</td>\n</tr>\n<tr>\n<td>subq $10, %rbp</td>\n<td>rbp = rbp -10</td>\n</tr>\n<tr>\n<td>cmpl %eax %ebx</td>\n<td>比较然后设置标志。如果eax == ebx, 则设置零标志。</td>\n</tr>\n<tr>\n<td>leal (%ebx),  %eax</td>\n<td>movl %ebx,  %eax</td>\n</tr>\n</tbody></table>\n<h5 id=\"0-0-4-2-2-寻址模式\"><a href=\"#0-0-4-2-2-寻址模式\" class=\"headerlink\" title=\"0.0.4.2.2. 寻址模式\"></a>0.0.4.2.2. 寻址模式</h5><blockquote>\n<p>References to both code and data on x64 are done with instruction-relative (RIP-relative in x64 parlance) addressing modes. The offset from RIP in these instructions is limited to 32 bits.<br>X64体系下的寻址是建立在相对寻址(RIP-RELATIVE)之上的, RIP的偏移大小最大为32bits  </p>\n</blockquote>\n<p><a href=\"https://eli.thegreenplace.net/2012/01/03/understanding-the-x64-code-models\" target=\"_blank\" rel=\"noopener\">x64 code mode</a>    </p>\n<blockquote>\n<p>Default operand size in 64-bit mode is still 32-bit and 64-bit immediates are allowed only with mov instruction.<br>movabs is just AT&amp;T syntax for a mov with a 64-bit immediate operand.<br>只有mov操作可以填写8字节的立即数  movabs是AT&amp;T语法中mov的(别名)    </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>同义名</th>\n<th>跳转条件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>jmp</td>\n<td>Label</td>\n<td>1</td>\n<td>直接跳转</td>\n</tr>\n<tr>\n<td>jmp</td>\n<td>*Operand</td>\n<td>1</td>\n<td>间接跳转</td>\n</tr>\n</tbody></table>\n<p>绝对寻址/直接寻址(Absolute or direct):  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jump    address</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>(有效PC地址=address)<br>Effective PC address = address  </p>\n</blockquote>\n<p>相对寻址(PC-relative):  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jump    offset</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>(有效PC地址=rip+offset = 下一个指令的地址 + offset)<br>Effective PC address = next instruction address + offset, offset may be negative  </p>\n</blockquote>\n<p>快速分析:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000000000007e0 &lt;.plt&gt;:</span><br><span class=\"line\"> 7e0:   ff 35 22 08 20 00       pushq  0x200822(%rip)        # 201008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class=\"line\"> 7e6:   ff 25 24 08 20 00       jmpq   *0x200824(%rip)        # 201010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class=\"line\"> 7ec:   0f 1f 40 00             nopl   0x0(%rax)</span><br><span class=\"line\">0000000000000810 &lt;_Z12so_func_baseii@plt&gt;:</span><br><span class=\"line\"> 810:   ff 25 12 08 20 00       jmpq   *0x200812(%rip)        # 201028 &lt;_Z12so_func_baseii&gt;</span><br><span class=\"line\"> 816:   68 02 00 00 00          pushq  $0x2</span><br><span class=\"line\"> 81b:   e9 c0 ff ff ff          jmpq   7e0 &lt;.plt&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>jmpq   7e0</code>  跳转到 CS:7e0 这个位置  </p>\n<blockquote>\n<p>实际上二进制的内容仍然是相对寻址(81b+5 + -40) ==  7e0  等同 jumpq * -0x40(%rip) 但省了一个字节的指令   </p>\n</blockquote>\n</li>\n<li><p><code>jmpq   *0x200812(%rip)</code>  跳转到 816 + 0x200812 这个位置 (rip是一个指针 需要解引用获得目标地址)   </p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a84:   74 20                   je     aa6 &lt;__libc_csu_init+0x56&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这里跳转指令则只用了两个字节  </li>\n</ul>\n<h5 id=\"0-0-4-2-3-large-code-mode\"><a href=\"#0-0-4-2-3-large-code-mode\" class=\"headerlink\" title=\"0.0.4.2.3. large code mode:\"></a>0.0.4.2.3. large code mode:</h5><blockquote>\n<p>In the small code model all addresses (including GOT entries) are accessible via the IP-relative addressing provided by the AMD64 architecture. Hence there is no need for an explicit GOT pointer and therefore no function prologue for setting it up is necessary. In the medium and large code models a register has to be allocated to hold the address of the GOT in position-independent objects, because the AMD64 ISA does not support an immediate displacement larger than 32 bits.<br>在一个小型代码模型中, 所有的地址(包括GOT入口地址) 都是可以通过IP-RELATIVE访问到.  因此不需要显示声明额外的GOT指针 也不需要设置函数的开始语.  但在一个中型或者大型代码模型中, 必须分配一个寄存器去持有位置无关对象在GOT的地址  (AMD64不支持大于32位的立即跳转)  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel&#x3D;large</span><br></pre></td></tr></table></figure>\n\n<p> 举例一个通过.GOT表访问的全局变量代码如下:<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a40:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # a40 &lt;main+0xb&gt;</span><br><span class=\"line\">a47:   49 bb c0 05 20 00 00    movabs $0x2005c0,%r11</span><br><span class=\"line\">a4e:   00 00 00 </span><br><span class=\"line\">a51:   4c 01 db                add    %r11,%rbx</span><br><span class=\"line\">a54:   89 7d dc                mov    %edi,-0x24(%rbp)</span><br><span class=\"line\">a57:   48 89 75 d0             mov    %rsi,-0x30(%rbp)</span><br><span class=\"line\">a5b:   c7 45 ec 00 00 00 00    movl   $0x0,-0x14(%rbp)</span><br><span class=\"line\">a62:   48 b8 d0 ff ff ff ff    movabs $0xffffffffffffffd0,%rax</span><br><span class=\"line\">a69:   ff ff ff </span><br><span class=\"line\">a6c:   48 8b 04 03             mov    (%rbx,%rax,1),%rax</span><br><span class=\"line\">a70:   c7 00 e8 03 00 00       movl   $0x3e8,(%rax)</span><br></pre></td></tr></table></figure></p>\n<p>a4e为8字节的操作数剩余部分</p>\n<p>a40行取得当前行的地址<br>a51行通过偏移量获得.got表的end 地址 =  a40 + 0x2005c0 =   201000   =.plt.got   (.got表在本测试中大小是0x40)<br>a6c行把RBX + 0xffffffffffffffd0 (= -0x30) 得到GOT表中存放全局变量的地址 <code>*(.plt.got -0x30) = got[g_static_so_data]</code><br>a70赋值立即数0x3e8 给全局变量 <code>g_static_so_data = *(got[g_static_so_data])</code>  </p>\n<p>节点偏移和大小如下    </p>\n<table>\n<thead>\n<tr>\n<th>[号]</th>\n<th>名称</th>\n<th>类型</th>\n<th>地址</th>\n<th>偏移量</th>\n<th>大小</th>\n<th>全体大小</th>\n<th>旗标</th>\n<th>链接</th>\n<th>信息</th>\n<th>对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[23]</td>\n<td>.got</td>\n<td>PROGBITS</td>\n<td>00200fc0</td>\n<td>000fc0</td>\n<td>00040</td>\n<td>0008</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[24]</td>\n<td>.got.plt</td>\n<td>PROGBITS</td>\n<td>00201000</td>\n<td>001000</td>\n<td>00030</td>\n<td>0008</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[25]</td>\n<td>.data</td>\n<td>PROGBITS</td>\n<td>00201030</td>\n<td>001030</td>\n<td>00014</td>\n<td>0000</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>8</td>\n</tr>\n<tr>\n<td>[26]</td>\n<td>.bss</td>\n<td>NOBITS</td>\n<td>00201044</td>\n<td>001044</td>\n<td>0000c</td>\n<td>0000</td>\n<td>WA</td>\n<td>0</td>\n<td>0</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<p>程序声明如下:   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int g_static_so_bss;</span><br><span class=\"line\">extern int g_static_so_data;</span><br><span class=\"line\">extern int errno;</span><br></pre></td></tr></table></figure>\n<p>当前汇编访问的是:g_static_so_data<br>.dyn global data如下  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000200fc0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0</span><br><span class=\"line\">000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0</span><br><span class=\"line\">000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000200fd8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000200fe0  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0</span><br><span class=\"line\">000000200fe8  000900000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0</span><br><span class=\"line\">000000200ff0  000a00000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0</span><br><span class=\"line\">000000200ff8  000b00000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"0-0-4-2-4-共享库中对g-static-so-data的访问\"><a href=\"#0-0-4-2-4-共享库中对g-static-so-data的访问\" class=\"headerlink\" title=\"0.0.4.2.4. 共享库中对g_static_so_data的访问\"></a>0.0.4.2.4. 共享库中对g_static_so_data的访问</h5><p>如果代码模型为大型 则和可执行程序中的代码段一致 如果是small或者median 共享库仍然会对全局变量走GOT表<br>汇编如下:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">894:   48 8b 05 45 07 20 00    mov    0x200745(%rip),%rax        # 200fe0 &lt;g_static_so_bss@@Base-0x60&gt;</span><br><span class=\"line\">89b:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">89e:   01 c2                   add    %eax,%edx</span><br></pre></td></tr></table></figure>\n<p>894: 取GOT中存储 g_static_so_bss 的项地址 并把内容(g_static_so_bss的地址)存放到%rax中<br>89b: 取 g_static_so_bss 的内容<br>89e: 加到%edx上  </p>\n<h5 id=\"0-0-4-2-5-small-code-mode\"><a href=\"#0-0-4-2-5-small-code-mode\" class=\"headerlink\" title=\"0.0.4.2.5. small code mode:\"></a>0.0.4.2.5. small code mode:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -O0 so.so main.cpp lib.cpp -pie -fPIE  -mcmodel&#x3D;small</span><br></pre></td></tr></table></figure>\n\n<p>假设了全局变量的存储位置在低端内存, 因此该全局变量直接定义在主程序的data段, 在so文件中仍然通过.got找到真实地址.<br>其类型R_X86_64_COPY<br>在主程序的汇编代码只有一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9f0:   c7 05 4e 06 20 00 e8    movl   $0x3e8,0x20064e(%rip)        # 201048 &lt;g_static_so_data&gt;</span><br></pre></td></tr></table></figure>\n<p>.dyn global</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000201048  001200000005 R_X86_64_COPY     0000000000201048 g_static_so_data + 0</span><br><span class=\"line\">000000201050  001000000005 R_X86_64_COPY     0000000000201050 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>.dyn so </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000200fd8  001300000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0</span><br><span class=\"line\">000000200fe0  001000000006 R_X86_64_GLOB_DAT 0000000000201040 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>.symver指令</p>\n<blockquote>\n<p>g_static_so_data@@Base-0x58  的意思是: g_static_so_data的符号值-0x58 也就是g_static_so_data的偏移量  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000201030 - 000000200fd8 &#x3D; 0x58</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"0-0-4-2-6-备注说明\"><a href=\"#0-0-4-2-6-备注说明\" class=\"headerlink\" title=\"0.0.4.2.6. 备注说明\"></a>0.0.4.2.6. 备注说明</h5><p>共享库中 无论是large还是small, 都会走so的got表, 区别在于会不会使用movabs进行64位的偏移计算<br>got表的位置可能紧接着.text并且设置为只读<br><a href=\"https://systemoverlord.com/2017/03/19/got-and-plt-for-pwning.html\" target=\"_blank\" rel=\"noopener\">RELRO</a>   </p>\n<p>通过got表访问全局变量:  </p>\n<ol>\n<li>通过RIP-R找到GOT表的位置.   相对于.text固定的偏移量 (large不假定大小)     </li>\n<li>通过项索引偏移找到存储该变量地址的地址并解引用得到 变量地址  <ol>\n<li>(large不假定大小, medium会区分把&lt;64k的数据链接到低内存中 多个数据段.ldata(largedata))  </li>\n</ol>\n</li>\n<li>解引用并使用  </li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov  (%rbx,%rax,1),%rax</span><br></pre></td></tr></table></figure>\n<p>这行代码可以优化为一个立即数偏移寻址  即</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov    0x200745(%rip),%rax</span><br></pre></td></tr></table></figure>\n\n<p>当前代码段到GOT表的偏移</p>\n<p>但是在large模型中 </p>\n<p>通过rip寻址的指令中 偏移量不是64位的  因此需要先算一个小的偏移量 再通过支持64bit的 movabs(mov) 添加上一个64bit的偏移</p>\n<h5 id=\"0-0-4-2-7-RELRO-Relocation-Read-Only\"><a href=\"#0-0-4-2-7-RELRO-Relocation-Read-Only\" class=\"headerlink\" title=\"0.0.4.2.7. RELRO  Relocation Read Only\"></a>0.0.4.2.7. RELRO  Relocation Read Only</h5><p>重定位只读技术<br>动态链接器在处理完GOT表后将其设为只读以提高安全性.  </p>\n<p>本文测试环境中只读. (实际上这是一个可以成为较为古老的技术了)  </p>\n<blockquote>\n<p>Linux version 4.9.0-4-amd64 (<a href=\"mailto:debian-kernel@lists.debian.org\">debian-kernel@lists.debian.org</a>)<br>(gcc version 6.3.0 20170516 (Debian 6.3.0-18) )<br>#1 SMP Debian 4.9.65-3+deb9u1 (2017-12-23)<br>.zsummer  </p>\n</blockquote>\n<p>GOT表为R  只读段.<br>.got.plt存储plt的got仍然是读写段 (惰性加载机制决定, 可以选择非惰性+ro来完成全只读化)  </p>\n<h3 id=\"0-0-5-调用惯例Calling-Conventions\"><a href=\"#0-0-5-调用惯例Calling-Conventions\" class=\"headerlink\" title=\"0.0.5. 调用惯例Calling Conventions\"></a>0.0.5. 调用惯例Calling Conventions</h3><p>计算机中Corotine分两种 Coroutine和Subroutine 前者对应协程 后者对应函数  </p>\n<ul>\n<li>call a routine (trasfer control to procedure)  跳转到目标routine  </li>\n<li>pass arguments  传递参数  <ul>\n<li>fixed length</li>\n<li>variable length</li>\n<li>recursively  </li>\n</ul>\n</li>\n<li>return to the caller  返回调用者地址  <ul>\n<li>putting results in a place where caller an find them  </li>\n</ul>\n</li>\n<li>manage register  管理寄存器 </li>\n</ul>\n<h5 id=\"0-0-5-0-8-参数压栈顺序\"><a href=\"#0-0-5-0-8-参数压栈顺序\" class=\"headerlink\" title=\"0.0.5.0.8. 参数压栈顺序\"></a>0.0.5.0.8. 参数压栈顺序</h5><p>标准的linux ABI调用约定中<br><a href=\"\">System V Application Binary Interface—AMD64 Architecture Processor Supplement</a>   </p>\n<h6 id=\"0-0-5-0-8-1-Caller-Save和Callee-Save\"><a href=\"#0-0-5-0-8-1-Caller-Save和Callee-Save\" class=\"headerlink\" title=\"0.0.5.0.8.1. Caller Save和Callee Save\"></a>0.0.5.0.8.1. Caller Save和Callee Save</h6><p>当产生函数调用时 子函数内通常也会使用到通用寄存器 那么这些寄存器中之前保存的调用者(父函数)的值就会被覆盖<br>为了避免数据覆盖而导致从子函数返回时寄存器中的数据不可恢复 CPU 体系结构中就规定了通用寄存器的保存方式   </p>\n<ul>\n<li><p>Casller Save ‘调用者保存’ 在发起一个调用前需要保存(子例程直接覆盖使用) </p>\n<ul>\n<li>在进入子函数调用前, 调用者需要保存这些寄存器的值.   <ul>\n<li>一般做法是进入子函数调用前把这些寄存器压入栈中    </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Callee Save ‘被调用者保存’ (子例程使用前需要先保存)   </p>\n<ul>\n<li>在进入子函数调用后, 在使用这些寄存器前, 被调用者会保存这些寄存器的内容,并在使用后恢复  </li>\n<li>这种比较特殊也比较麻烦, 因为一旦接受这个设定, 那么所有subroutine都要进行合适的push并保证pop恢复.     </li>\n<li></li>\n</ul>\n</li>\n<li><p>cross</p>\n</li>\n</ul>\n<h3 id=\"0-0-6-工具\"><a href=\"#0-0-6-工具\" class=\"headerlink\" title=\"0.0.6. 工具\"></a>0.0.6. 工具</h3><ul>\n<li>objdump -S 查看汇编指令  </li>\n<li>gdb  <ul>\n<li>gdb 通过<code>layout regs</code>打开寄存器显示, 通过<code>set disassemble-next-line on</code>打开汇编  </li>\n<li>gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可, peda默认显示是intex语法    </li>\n<li>disas反汇编命令,直接disas是反汇编当前函数<ul>\n<li>disas /r (显示汇编指令对应十六进制值)   </li>\n<li>disas /m (如果有源码,显示对应行源码)   </li>\n</ul>\n</li>\n<li>intel语法<ul>\n<li>set disassembly-flavor intel</li>\n<li>set disassembly-flavor att</li>\n</ul>\n</li>\n<li>gdb关闭ASLR：<ul>\n<li>set disable-randomization on</li>\n</ul>\n</li>\n<li>开启ASLR：<ul>\n<li>set disable-randomization off</li>\n</ul>\n</li>\n<li>查看ASLR状态：<ul>\n<li>show disable-randomization</li>\n</ul>\n</li>\n<li>查看二进制  <ul>\n<li><code>x /1ag addr</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"0-0-6-1-PEDA插件\"><a href=\"#0-0-6-1-PEDA插件\" class=\"headerlink\" title=\"0.0.6.1. PEDA插件\"></a>0.0.6.1. PEDA插件</h4><p>peda默认设置的是intel的语法风格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;longld&#x2F;peda.git ~&#x2F;peda</span><br><span class=\"line\">echo &quot;source ~&#x2F;peda&#x2F;peda.py&quot; &gt;&gt; ~&#x2F;.gdbinit</span><br><span class=\"line\">echo &quot;DONE! debug your program with gdb and enjoy&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>aslr – Show/set ASLR setting of GDB</li>\n<li>checksec – Check for various security options of binary</li>\n<li>dumpargs – Display arguments passed to a function when stopped at a call instruction</li>\n<li>dumprop – Dump all ROP gadgets in specific memory range</li>\n<li>elfheader – Get headers information from debugged ELF file</li>\n<li>elfsymbol – Get non-debugging symbol information from an ELF file</li>\n<li>lookup – Search for all addresses/references to addresses which belong to a memory range</li>\n<li>patch – Patch memory start at an address with string/hexstring/int</li>\n<li>pattern – Generate, search, or write a cyclic pattern to memory</li>\n<li>procinfo – Display various info from /proc/pid/</li>\n<li>pshow – Show various PEDA options and other settings</li>\n<li>pset – Set various PEDA options and other settings</li>\n<li>readelf – Get headers information from an ELF file</li>\n<li>ropgadget – Get common ROP gadgets of binary or library</li>\n<li>ropsearch – Search for ROP gadgets in memory</li>\n<li>searchmem|find – Search for a pattern in memory; support regex search</li>\n<li>shellcode – Generate or download common shellcodes.</li>\n<li>skeleton – Generate python exploit code template</li>\n<li>vmmap – Get virtual mapping address ranges of section(s) in debugged process</li>\n<li>xormem – XOR a memory region with a key</li>\n</ul>"},{"title":"ELF装载和动态链接过程","date":"2019-12-16T16:00:00.000Z","author":"yawei.zhang","_content":"\n### ..1. 目录  \n\n<!-- TOC -->\n\n- [目录](#目录)\n    - [动态链接过程](#动态链接过程)\n        - [基础宏定义](#基础宏定义)\n        - [重定位定义](#重定位定义)\n        - [符号表定义](#符号表定义)\n        - [动态段定义](#动态段定义)\n        - [rscopeelem 定义](#rscopeelem-定义)\n        - [linkmap](#linkmap)\n        - [dlfixup 函数定义和分析](#dlfixup-函数定义和分析)\n        - [符号版本](#符号版本)\n        - [强弱符号](#强弱符号)\n        - [强弱引用](#强弱引用)\n        - [符号的作用域](#符号的作用域)\n- [动态库装载过程](#动态库装载过程)\n    - [ELF的辅助向量 AUXV](#elf的辅助向量-auxv)\n    - [ELF的装载有三种方法](#elf的装载有三种方法)\n\n<!-- /TOC -->\n\n<!-- more -->\n\n#### ..1.1. 动态链接过程   \n\n##### ..1.1.1. 基础宏定义   \n```C++\n//宏访问link_map成员并计算地址   \n# define D_PTR(map, i) ((map)->i->d_un.d_ptr + (map)->l_addr)\n#else\n# define D_PTR(map, i) (map)->i->d_un.d_ptr\n#endif\n\n/* Result of the lookup functions and how to retrieve the base address.  */\n//lookup系列函数的返回值\ntypedef struct link_map *lookup_t;\n#define LOOKUP_VALUE(map) map\n#define LOOKUP_VALUE_ADDRESS(map) ((map) ? (map)->l_addr : 0)\n```\n\n\n##### ..1.1.2. 重定位定义  \n```C++\n// Elf64_Rela\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\ntypedef int64_t  Elf64_Sxword;\n \ntypedef struct\n{\n  Elf64_Addr        r_offset;                /* Address */\n  Elf64_Xword        r_info;                 /* Relocation type and symbol index */\n  Elf64_Sxword        r_addend;              /* Addend */\n} Elf64_Rela;\n```\n\n##### ..1.1.3. 符号表定义   \n```C++\n/Elf64_Sym\ntypedef uint32_t Elf64_Word;\ntypedef uint16_t Elf64_Section;\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\n \ntypedef struct\n{\n  Elf64_Word        st_name;                /* Symbol name (string tbl index), 4 bytes */\n  unsigned char        st_info;             /* Symbol type and binding, 1 byte */\n  unsigned char st_other;                   /* Symbol visibility, 1 byte */\n  Elf64_Section        st_shndx;            /* Section index, 2 bytes */\n  Elf64_Addr        st_value;               /* Symbol value, 8 bytes */\n  Elf64_Xword        st_size;               /* Symbol size, 8 bytes */\n} Elf64_Sym;\n```\n\n##### ..1.1.4. 动态段定义  \n```C++\ntypedef struct {\n  elf32_sword  d_tag\n  union{\n  elf32_word  d_val\n  elf32_addr  d_ptr\n  }d_un;\n  }elf32_dyn;  \n  \nd_tag控制d_un的含义\nDT_HASH符号散列表地址\nDT_STRTAB字符串表的地址\nDT_SYMTAB符号表地址\nDT_RELA相对地址重定位表的地址\nDT_STRSZ字符串表的字节大小\nDT_INIT初始化函数的地址\nDT_FINI终止函数的地址\nDT_SONAME共享目标文件名的字符串表\n接近量DT_JMPREL仅用于plt的重定位定位地址\n```\n  \n##### ..1.1.5. r_scope_elem 定义  \n```C++\n/* Structure to describe a single list of scope elements.  The lookup\n   functions get passed an array of pointers to such structures.  */\n   //描述一个特定范围的单链表结构 lookup函数往往需要传递一个保存这种结构的数组作为参数  \nstruct r_scope_elem\n{\n  /* Array of maps for the scope.  */\n  //用于描述范围的maps数组\n  struct link_map **r_list;\n  /* 这个范围的入口点个数  */\n  unsigned int r_nlist;\n};\n```\n\n\n##### ..1.1.6. link_map   \n\n```C++\n//link_map用于描述可加载共享目标文件的结构 l_next,l_prev是一个链接了已加载的所有共享目标文件的单链表结构   \n//这个单链表结构一般被用于动态链接器   \n\nstruct link_map\n  {\n    /* These first few members are part of the protocol with the debugger.\n       This is the same format used in SVR4.  */\n      //共享文件加载基地址\n    ElfW(Addr) l_addr;\t\t/* Base address shared object is loaded at.  */\n      //绝对文件名\n    char *l_name;\t\t/* Absolute file name object was found in.  */\n      //动态段加载地址\n    ElfW(Dyn) *l_ld;\t\t/* Dynamic section of the shared object.  */\n      //加载项鍊表\n    struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */\n\n    /* All following members are internal to the dynamic linker.\n       They may change without notice.  */\n      //其他成员是对于动态链接器内部的 可能随时改变不受提醒\n\n    /* This is an element which is only ever different from a pointer to\n       the very same copy of this type for ld.so when it is used in more\n       than one namespace.  */\n    struct link_map *l_real;\n\n    /* Number of the namespace this link map belongs to.  */\n      //这link map属于的命名空间个数\n     \n    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM\n\t\t      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];\n     //这个数组用于快速访问动态段的信息 在lookup系列函数中会频繁使用\n     //它的有关定义还包含了一系列用于访问信息的功能宏。\n     \n     /* Array of DT_NEEDED dependencies and their dependencies, in\n       dependency order for symbol lookup (with and without\n       duplicates).  There is no entry before the dependencies have\n       been loaded.  */\n     //依赖项及其依赖项的数组 按符号查找的依赖项顺序排列(有和没有重复)。\n     //在加载依赖项之前没有条目。\n    struct r_scope_elem l_searchlist;\n    \n    /* Dependent object that first caused this object to be loaded.  */\n    //第一次唤起当前模块被加载的模块\n    struct link_map *l_loader;\n    /* This is an array defining the lookup scope for this link map.\n       There are initially at most three different scope lists.  */\n      //这个数组定义了当前模块用于lookup函数搜索的范围 最初最多有三个不同范围的列表\n    struct r_scope_elem **l_scope;\n    \n    ......\n    \n};\n```\n\n\n\n\n\n\n\n##### ..1.1.7. ```_dl_fixup``` 函数定义和分析   \nlibc/elf/dl-runtime.c  \n```C++\n__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (\n   /* GKM FIXME: Fix trampoline to pass bounds so we can do\n      without the `__unbounded' qualifier.  */\n     struct link_map *__unbounded l, ElfW(Word) reloc_offset)\n{\n  const ElfW(Sym) *const symtab\n    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);\n  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);\n\n  const PLTREL *const reloc\n    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);\n  const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];\n  void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);\n  lookup_t result;\n  DL_FIXUP_VALUE_TYPE value;\n\n  /* Sanity check that we're really looking at a PLT relocation.  */\n  assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);\n\n   /* Look up the target symbol.  If the normal lookup rules are not\n      used don't look in the global scope.  */\n  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)\n    {\n      const struct r_found_version *version = NULL;\n\n      if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)\n      {\n        const ElfW(Half) *vernum =\n          (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);\n        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;\n        version = &l->l_versions[ndx];\n        if (version->hash == 0)\n          version = NULL;\n      }\n\n      /* We need to keep the scope around so do some locking.  This is\n       not necessary for objects which cannot be unloaded or when\n       we are not using any threads (yet).  */\n      int flags = DL_LOOKUP_ADD_DEPENDENCY;\n      if (!RTLD_SINGLE_THREAD_P)\n      {\n        THREAD_GSCOPE_SET_FLAG ();\n        flags |= DL_LOOKUP_GSCOPE_LOCK;\n      }\n\n      result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,\n                            version, ELF_RTYPE_CLASS_PLT, flags, NULL);\n\n      /* We are done with the global scope.  */\n      if (!RTLD_SINGLE_THREAD_P)\n      THREAD_GSCOPE_RESET_FLAG ();\n\n      /* Currently result contains the base load address (or link map)\n       of the object that defines sym.  Now add in the symbol\n       offset.  */\n      value = DL_FIXUP_MAKE_VALUE (result,\n                           sym ? (LOOKUP_VALUE_ADDRESS (result)\n                                + sym->st_value) : 0);\n    }\n  else\n    {\n      /* We already found the symbol.  The module (and therefore its load\n       address) is also known.  */\n      value = DL_FIXUP_MAKE_VALUE (l, l->l_addr + sym->st_value);\n      result = l;\n    }\n\n  /* And now perhaps the relocation addend.  */\n  value = elf_machine_plt_value (l, reloc, value);\n\n  /* Finally, fix up the plt itself.  */\n  if (__builtin_expect (GLRO(dl_bind_not), 0))\n    return value;\n\n  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);\n}\n```\n\n\n```_dl_fixup```函数首先通过宏D_PTR从link_map结构中获得符号表symtab 字符串表strtab   \n\nreloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   \nreloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  \n\nst_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  \n最后调用elf_machine_fixup_plt函数进行修正    \n\n\n\nfixup plt  回写.got.plt的项   \n```\nstatic inline Elf64_Addr\nelf_machine_fixup_plt (struct link_map *map, lookup_t t,\n               const Elf64_Rela *reloc,\n               Elf64_Addr *reloc_addr, Elf64_Addr value)\n{\n  return *reloc_addr = value;\n}\n```\n\n\n\n其他情况 会进入if语句   \n首先获得符号的version信息 然后调用 ```_dl_lookup_symbol_x``` 函数从已装载的共享库中查找最终的符号地址 \n\n\n\nelf/dl-lookup.c  \n```C++\n/* Search loaded objects' symbol tables for a definition of the symbol\n   UNDEF_NAME, perhaps with a requested version for the symbol.\n   We must never have calls to the audit functions inside this function\n   or in any function which gets called.  If this would happen the audit\n   code might create a thread which can throw off all the scope locking.  */\nlookup_t\n_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,\n                     const ElfW(Sym) **ref,\n                     struct r_scope_elem *symbol_scope[],\n                     const struct r_found_version *version,\n                     int type_class, int flags, struct link_map *skip_map)\n{\n  size_t n = scope->r_nlist;\n  __asm volatile (\"\" : \"+r\" (n), \"+m\" (scope->r_list));\n  struct link_map **list = scope->r_list;\n\n  do\n    {\n      Elf_Symndx symidx;\n      int num_versions = 0;\n      const ElfW(Sym) *versioned_sym = NULL;\n      const struct link_map *map = list[i]->l_real;\n\n      ...\n\n      const ElfW(Sym) *symtab = (const void *) D_PTR (map, l_info[DT_SYMTAB]);\n      const char *strtab = (const void *) D_PTR (map, l_info[DT_STRTAB]);\n\n      const ElfW(Sym) *sym;\n      const ElfW(Addr) *bitmask = map->l_gnu_bitmask;\n      if (__builtin_expect (bitmask != NULL, 1))\n    {\n      ElfW(Addr) bitmask_word\n        = bitmask[(new_hash / __ELF_NATIVE_CLASS)\n              & map->l_gnu_bitmask_idxbits];\n\n      unsigned int hashbit1 = new_hash & (__ELF_NATIVE_CLASS - 1);\n      unsigned int hashbit2 = ((new_hash >> map->l_gnu_shift)\n                   & (__ELF_NATIVE_CLASS - 1));\n\n      if (__builtin_expect ((bitmask_word >> hashbit1)\n                & (bitmask_word >> hashbit2) & 1, 0))\n        {\n          Elf32_Word bucket = map->l_gnu_buckets[new_hash\n                             % map->l_nbuckets];\n          if (bucket != 0)\n            {\n              const Elf32_Word *hasharr = &map->l_gnu_chain_zero[bucket];\n\n              do\n                if (((*hasharr ^ new_hash) >> 1) == 0)\n                  {\n                    symidx = hasharr - map->l_gnu_chain_zero;\n                    sym = check_match (&symtab[symidx]);\n                    if (sym != NULL)\n                      goto found_it;\n                  }\n              while ((*hasharr++ & 1u) == 0);\n            }\n        }\n      symidx = SHN_UNDEF;\n    }\n      else\n    {\n      if (*old_hash == 0xffffffff)\n        *old_hash = _dl_elf_hash (undef_name);\n      for (symidx = map->l_buckets[*old_hash % map->l_nbuckets];\n           symidx != STN_UNDEF;\n           symidx = map->l_chain[symidx])\n        {\n          sym = check_match (&symtab[symidx]);\n          if (sym != NULL)\n            goto found_it;\n        }\n    }\n\n      sym = num_versions == 1 ? versioned_sym : NULL;\n      if (sym != NULL)\n    {\n    found_it:\n      switch (__builtin_expect (ELFW(ST_BIND) (sym->st_info), STB_GLOBAL))\n        {\n        case STB_WEAK:\n          if (__builtin_expect (GLRO(dl_dynamic_weak), 0))\n        {\n          if (! result->s)\n            {\n              result->s = sym;\n              result->m = (struct link_map *) map;\n            }\n          break;\n        }\n\n        case STB_GLOBAL:\n        success:\n          result->s = sym;\n          result->m = (struct link_map *) map;\n          return 1;\n\n        case STB_GNU_UNIQUE:\n          ...\n\n        default:\n          break;\n        }\n    }\n    }\n  while (++i < n);\n\n  return 0;\n}\n\n```\n首先获得该scope下的link_map个数r_nlist和数组r_list 然后进行遍历   \n省略的部分是检查当前link_map是否有符合查找的条件  没有就继续遍历   \n再往下取出当前link_map的符号表symtab和字符串表strtab   \n接下来的if和else条件语句部分都是通过哈希值找到符号表中对应符号列表的索引  \n   如果找到 就通过check_match函数比对符号表中的函数名symtab[symidx]和待查找的函数名undef_name是否相等 如果相等 就找到了该符号并跳转到found_it语句  否则返回null    \n\n找到了该符号后对符号类型进行判断  \n如果找到的是弱符号STB_WEAK 则保存第一次找到的结果 然后继续循环查找 \n   如果后面没有找到可以覆盖该结果的符号 则返回的就是该第一次保存的结果。\n   如果找到的是全局符号STB_GLOBAL 则直接返回该结果。\n\n如果找到的符号是其他类型的符号 则继续循环查找\n最后 如果什么都没找到 则返回0   \n\n/elf/dl-lookup.c::check_match\n```C++\n      const ElfW(Sym) *__attribute_noinline__\n      check_match (const ElfW(Sym) *sym)\n      {\n        ...\n\n        if (sym != ref && strcmp (strtab + sym->st_name, undef_name))\n          return NULL;\n\n        const ElfW(Half) *verstab = map->l_versyms;\n        if (version != NULL)\n          {\n\n            ElfW(Half) ndx = verstab[symidx] & 0x7fff;\n            if (  (map->l_versions[ndx].hash != version->hash \n                          || strcmp (map->l_versions[ndx].name, version->name)  ) \n                 && (version->hidden || map->l_versions[ndx].hash || (verstab[symidx] & 0x8000)))\n              return NULL;\n          }\n        else\n          {\n            ...\n          }\n\n        return sym;\n      }\n```\n\n这里主要有一个版本检查    \n\n##### ..1.1.8. 符号版本   \n由于符号版本不是C语言的标准用法 所以它使用了汇编器的一个特殊指示 也就是.symver 指示  \n而GCC中通过内嵌汇编完成  如下:  \n```asm\n__asm__(\".symver original_foo,foo@\");  \n__asm__(\".symver old_foo,foo@VERS_1.1\");  \n__asm__(\".symver old_foo1,foo@VERS_1.2\");  \n__asm__(\".symver new_foo,foo@@VERS_2.0\");\n```\n\n这个例子中定义了foo的四个版本   \n其中的symver的第一个参数为源代码中真正定义的实现 而之后的foo则为对外公开的版本 也就是可以有不同版本的符号  \n其中@@则表示这个是一个默认版本(简单来说 如果一个可执行文件链接的时候foo还没有任何版本控制 但是在运行时foo已经引入了多个版本 则此时的可执行文件可以选择这个@@表示的默认版本符号  \n这里的old_foo就是foo的VERS_1.1版本 如果在so中定义了old_foo 那么这个old_foo就是这个foo的VERS_1.1版本的实现  \n  如果没有定义 可以通过old_foo来引用这个特殊版本的foo符号的定义   \n\n\n##### ..1.1.9. 强弱符号   \n针对强弱符号的概念 链接器就会按照如下规则处理与选择被多次定义的全局符号  \n\n* 规则1: 不允许强符号被多次定义（即不同的目标文件中不能有同名的强符号）  \n  * 如果有多个强符号定义 则链接器报符号重复定义错误   \n* 规则2: 如果一个符号在某个目标文件中是强符号  在其他文件中都是弱符号 那么选择强符号   \n* 规则3: 如果一个符号在所有目标文件中都是弱符号 那么选择其中占用空间最大的一个 \n  * 比如目标文件A定义全局变量global为int型 占4个字节\n  * 目标文件B定义global为doulbe型 占8个字节 \n  * 那么目标文件A和B链接后 符号global占8个字节（尽量不要使用多个不同类型的弱符号,否则容易导致很难发现的程序错误）  \n\n##### ..1.1.10. 强弱引用   \n我们所看到的对外部目标文件的符号引用在目标文件被最终链接成可执行文件时  它们必须要被正确决议  \n如果没有找到该符号的定义 链接器就会报符号未定义错误 这种被称为强引用（Strong Reference）  \n与之相对应还有一种弱引用（Weak Reference）   \n在处理弱引用时 如果该符号有定义  则链接器将该符号的引用决议  如果该符号未被定义  则链接器对于该引用不报错  \n链接器处理强引用和弱引用的过程几乎一样  只是对于未定义的弱引用  链接器不认为它是一个错误  \n一般对于未定义的弱引用  链接器默认其为0  或者是一个特殊的值  以便于程序代码能够识别  \n\n##### ..1.1.11. 符号的作用域   \nC++中non-member function template模板的代码是具有不同于普通的函数定义的  \nC++标准里对于在global scope声明对象的链接描述:  \n> [ISO/IEE 14882:2011]A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared const. Objects declared const and not explicitly declared extern have internal linkage.\n\n例如声明int max(int,int)是具有外部链接的符号    \n\n\nC++中非成员函数模板(non-member function template)的链接不同于普通的函数   \n> [ISO/IEE 14882:2014]A template name has linkage (3.5). A non-member function template can have internal linkage; any other template name shall have external linkage. Specializations (explicit or implicit) of a template that has internal linkage are distinct from all specializations in other translation units.\n   \n即通过模板实现的max(const T&,const T&)是具有内部链接internal linkage的符号  \n所以在链接时对于max的调用查找只能够找到自己目标文件中的符号名(内部链接外部不可见) 不会和外部链接产生重定义冲突  \n\n\n### ..2. 动态库装载过程  \n\n\n#### ..2.1. ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\n\n#### ..2.2. ELF的装载有三种方法   \n| 函数        | 描述                                                                                                                                             |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| load_binary | 通过读存放在可执行文件中的信息为当前进程建立一个新的执行环境                                                                                     |\n| load_shlib  | 用于动态的把一个共享库捆绑到一个已经在运行的进程, 这是由uselib()系统调用激活的                                                                   |\n| core_dump   | 在名为core的文件中, 存放当前进程的执行上下文. 这个文件通常是在进程接收到一个缺省操作为”dump”的信号时被创建的, 其格式取决于被执行程序的可执行类型 |\n\n\n\n\n\n\n\n\n\n</font>  \n","source":"_posts/2019-12-17-elf-load.md","raw":"---\ntitle: ELF装载和动态链接过程\ndate: 2019-12-17\ncategories: develop\nauthor: yawei.zhang\n---\n\n### ..1. 目录  \n\n<!-- TOC -->\n\n- [目录](#目录)\n    - [动态链接过程](#动态链接过程)\n        - [基础宏定义](#基础宏定义)\n        - [重定位定义](#重定位定义)\n        - [符号表定义](#符号表定义)\n        - [动态段定义](#动态段定义)\n        - [rscopeelem 定义](#rscopeelem-定义)\n        - [linkmap](#linkmap)\n        - [dlfixup 函数定义和分析](#dlfixup-函数定义和分析)\n        - [符号版本](#符号版本)\n        - [强弱符号](#强弱符号)\n        - [强弱引用](#强弱引用)\n        - [符号的作用域](#符号的作用域)\n- [动态库装载过程](#动态库装载过程)\n    - [ELF的辅助向量 AUXV](#elf的辅助向量-auxv)\n    - [ELF的装载有三种方法](#elf的装载有三种方法)\n\n<!-- /TOC -->\n\n<!-- more -->\n\n#### ..1.1. 动态链接过程   \n\n##### ..1.1.1. 基础宏定义   \n```C++\n//宏访问link_map成员并计算地址   \n# define D_PTR(map, i) ((map)->i->d_un.d_ptr + (map)->l_addr)\n#else\n# define D_PTR(map, i) (map)->i->d_un.d_ptr\n#endif\n\n/* Result of the lookup functions and how to retrieve the base address.  */\n//lookup系列函数的返回值\ntypedef struct link_map *lookup_t;\n#define LOOKUP_VALUE(map) map\n#define LOOKUP_VALUE_ADDRESS(map) ((map) ? (map)->l_addr : 0)\n```\n\n\n##### ..1.1.2. 重定位定义  \n```C++\n// Elf64_Rela\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\ntypedef int64_t  Elf64_Sxword;\n \ntypedef struct\n{\n  Elf64_Addr        r_offset;                /* Address */\n  Elf64_Xword        r_info;                 /* Relocation type and symbol index */\n  Elf64_Sxword        r_addend;              /* Addend */\n} Elf64_Rela;\n```\n\n##### ..1.1.3. 符号表定义   \n```C++\n/Elf64_Sym\ntypedef uint32_t Elf64_Word;\ntypedef uint16_t Elf64_Section;\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\n \ntypedef struct\n{\n  Elf64_Word        st_name;                /* Symbol name (string tbl index), 4 bytes */\n  unsigned char        st_info;             /* Symbol type and binding, 1 byte */\n  unsigned char st_other;                   /* Symbol visibility, 1 byte */\n  Elf64_Section        st_shndx;            /* Section index, 2 bytes */\n  Elf64_Addr        st_value;               /* Symbol value, 8 bytes */\n  Elf64_Xword        st_size;               /* Symbol size, 8 bytes */\n} Elf64_Sym;\n```\n\n##### ..1.1.4. 动态段定义  \n```C++\ntypedef struct {\n  elf32_sword  d_tag\n  union{\n  elf32_word  d_val\n  elf32_addr  d_ptr\n  }d_un;\n  }elf32_dyn;  \n  \nd_tag控制d_un的含义\nDT_HASH符号散列表地址\nDT_STRTAB字符串表的地址\nDT_SYMTAB符号表地址\nDT_RELA相对地址重定位表的地址\nDT_STRSZ字符串表的字节大小\nDT_INIT初始化函数的地址\nDT_FINI终止函数的地址\nDT_SONAME共享目标文件名的字符串表\n接近量DT_JMPREL仅用于plt的重定位定位地址\n```\n  \n##### ..1.1.5. r_scope_elem 定义  \n```C++\n/* Structure to describe a single list of scope elements.  The lookup\n   functions get passed an array of pointers to such structures.  */\n   //描述一个特定范围的单链表结构 lookup函数往往需要传递一个保存这种结构的数组作为参数  \nstruct r_scope_elem\n{\n  /* Array of maps for the scope.  */\n  //用于描述范围的maps数组\n  struct link_map **r_list;\n  /* 这个范围的入口点个数  */\n  unsigned int r_nlist;\n};\n```\n\n\n##### ..1.1.6. link_map   \n\n```C++\n//link_map用于描述可加载共享目标文件的结构 l_next,l_prev是一个链接了已加载的所有共享目标文件的单链表结构   \n//这个单链表结构一般被用于动态链接器   \n\nstruct link_map\n  {\n    /* These first few members are part of the protocol with the debugger.\n       This is the same format used in SVR4.  */\n      //共享文件加载基地址\n    ElfW(Addr) l_addr;\t\t/* Base address shared object is loaded at.  */\n      //绝对文件名\n    char *l_name;\t\t/* Absolute file name object was found in.  */\n      //动态段加载地址\n    ElfW(Dyn) *l_ld;\t\t/* Dynamic section of the shared object.  */\n      //加载项鍊表\n    struct link_map *l_next, *l_prev; /* Chain of loaded objects.  */\n\n    /* All following members are internal to the dynamic linker.\n       They may change without notice.  */\n      //其他成员是对于动态链接器内部的 可能随时改变不受提醒\n\n    /* This is an element which is only ever different from a pointer to\n       the very same copy of this type for ld.so when it is used in more\n       than one namespace.  */\n    struct link_map *l_real;\n\n    /* Number of the namespace this link map belongs to.  */\n      //这link map属于的命名空间个数\n     \n    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM\n\t\t      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];\n     //这个数组用于快速访问动态段的信息 在lookup系列函数中会频繁使用\n     //它的有关定义还包含了一系列用于访问信息的功能宏。\n     \n     /* Array of DT_NEEDED dependencies and their dependencies, in\n       dependency order for symbol lookup (with and without\n       duplicates).  There is no entry before the dependencies have\n       been loaded.  */\n     //依赖项及其依赖项的数组 按符号查找的依赖项顺序排列(有和没有重复)。\n     //在加载依赖项之前没有条目。\n    struct r_scope_elem l_searchlist;\n    \n    /* Dependent object that first caused this object to be loaded.  */\n    //第一次唤起当前模块被加载的模块\n    struct link_map *l_loader;\n    /* This is an array defining the lookup scope for this link map.\n       There are initially at most three different scope lists.  */\n      //这个数组定义了当前模块用于lookup函数搜索的范围 最初最多有三个不同范围的列表\n    struct r_scope_elem **l_scope;\n    \n    ......\n    \n};\n```\n\n\n\n\n\n\n\n##### ..1.1.7. ```_dl_fixup``` 函数定义和分析   \nlibc/elf/dl-runtime.c  \n```C++\n__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (\n   /* GKM FIXME: Fix trampoline to pass bounds so we can do\n      without the `__unbounded' qualifier.  */\n     struct link_map *__unbounded l, ElfW(Word) reloc_offset)\n{\n  const ElfW(Sym) *const symtab\n    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);\n  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);\n\n  const PLTREL *const reloc\n    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);\n  const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];\n  void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);\n  lookup_t result;\n  DL_FIXUP_VALUE_TYPE value;\n\n  /* Sanity check that we're really looking at a PLT relocation.  */\n  assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);\n\n   /* Look up the target symbol.  If the normal lookup rules are not\n      used don't look in the global scope.  */\n  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)\n    {\n      const struct r_found_version *version = NULL;\n\n      if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)\n      {\n        const ElfW(Half) *vernum =\n          (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);\n        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;\n        version = &l->l_versions[ndx];\n        if (version->hash == 0)\n          version = NULL;\n      }\n\n      /* We need to keep the scope around so do some locking.  This is\n       not necessary for objects which cannot be unloaded or when\n       we are not using any threads (yet).  */\n      int flags = DL_LOOKUP_ADD_DEPENDENCY;\n      if (!RTLD_SINGLE_THREAD_P)\n      {\n        THREAD_GSCOPE_SET_FLAG ();\n        flags |= DL_LOOKUP_GSCOPE_LOCK;\n      }\n\n      result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,\n                            version, ELF_RTYPE_CLASS_PLT, flags, NULL);\n\n      /* We are done with the global scope.  */\n      if (!RTLD_SINGLE_THREAD_P)\n      THREAD_GSCOPE_RESET_FLAG ();\n\n      /* Currently result contains the base load address (or link map)\n       of the object that defines sym.  Now add in the symbol\n       offset.  */\n      value = DL_FIXUP_MAKE_VALUE (result,\n                           sym ? (LOOKUP_VALUE_ADDRESS (result)\n                                + sym->st_value) : 0);\n    }\n  else\n    {\n      /* We already found the symbol.  The module (and therefore its load\n       address) is also known.  */\n      value = DL_FIXUP_MAKE_VALUE (l, l->l_addr + sym->st_value);\n      result = l;\n    }\n\n  /* And now perhaps the relocation addend.  */\n  value = elf_machine_plt_value (l, reloc, value);\n\n  /* Finally, fix up the plt itself.  */\n  if (__builtin_expect (GLRO(dl_bind_not), 0))\n    return value;\n\n  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);\n}\n```\n\n\n```_dl_fixup```函数首先通过宏D_PTR从link_map结构中获得符号表symtab 字符串表strtab   \n\nreloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   \nreloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  \n\nst_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  \n最后调用elf_machine_fixup_plt函数进行修正    \n\n\n\nfixup plt  回写.got.plt的项   \n```\nstatic inline Elf64_Addr\nelf_machine_fixup_plt (struct link_map *map, lookup_t t,\n               const Elf64_Rela *reloc,\n               Elf64_Addr *reloc_addr, Elf64_Addr value)\n{\n  return *reloc_addr = value;\n}\n```\n\n\n\n其他情况 会进入if语句   \n首先获得符号的version信息 然后调用 ```_dl_lookup_symbol_x``` 函数从已装载的共享库中查找最终的符号地址 \n\n\n\nelf/dl-lookup.c  \n```C++\n/* Search loaded objects' symbol tables for a definition of the symbol\n   UNDEF_NAME, perhaps with a requested version for the symbol.\n   We must never have calls to the audit functions inside this function\n   or in any function which gets called.  If this would happen the audit\n   code might create a thread which can throw off all the scope locking.  */\nlookup_t\n_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,\n                     const ElfW(Sym) **ref,\n                     struct r_scope_elem *symbol_scope[],\n                     const struct r_found_version *version,\n                     int type_class, int flags, struct link_map *skip_map)\n{\n  size_t n = scope->r_nlist;\n  __asm volatile (\"\" : \"+r\" (n), \"+m\" (scope->r_list));\n  struct link_map **list = scope->r_list;\n\n  do\n    {\n      Elf_Symndx symidx;\n      int num_versions = 0;\n      const ElfW(Sym) *versioned_sym = NULL;\n      const struct link_map *map = list[i]->l_real;\n\n      ...\n\n      const ElfW(Sym) *symtab = (const void *) D_PTR (map, l_info[DT_SYMTAB]);\n      const char *strtab = (const void *) D_PTR (map, l_info[DT_STRTAB]);\n\n      const ElfW(Sym) *sym;\n      const ElfW(Addr) *bitmask = map->l_gnu_bitmask;\n      if (__builtin_expect (bitmask != NULL, 1))\n    {\n      ElfW(Addr) bitmask_word\n        = bitmask[(new_hash / __ELF_NATIVE_CLASS)\n              & map->l_gnu_bitmask_idxbits];\n\n      unsigned int hashbit1 = new_hash & (__ELF_NATIVE_CLASS - 1);\n      unsigned int hashbit2 = ((new_hash >> map->l_gnu_shift)\n                   & (__ELF_NATIVE_CLASS - 1));\n\n      if (__builtin_expect ((bitmask_word >> hashbit1)\n                & (bitmask_word >> hashbit2) & 1, 0))\n        {\n          Elf32_Word bucket = map->l_gnu_buckets[new_hash\n                             % map->l_nbuckets];\n          if (bucket != 0)\n            {\n              const Elf32_Word *hasharr = &map->l_gnu_chain_zero[bucket];\n\n              do\n                if (((*hasharr ^ new_hash) >> 1) == 0)\n                  {\n                    symidx = hasharr - map->l_gnu_chain_zero;\n                    sym = check_match (&symtab[symidx]);\n                    if (sym != NULL)\n                      goto found_it;\n                  }\n              while ((*hasharr++ & 1u) == 0);\n            }\n        }\n      symidx = SHN_UNDEF;\n    }\n      else\n    {\n      if (*old_hash == 0xffffffff)\n        *old_hash = _dl_elf_hash (undef_name);\n      for (symidx = map->l_buckets[*old_hash % map->l_nbuckets];\n           symidx != STN_UNDEF;\n           symidx = map->l_chain[symidx])\n        {\n          sym = check_match (&symtab[symidx]);\n          if (sym != NULL)\n            goto found_it;\n        }\n    }\n\n      sym = num_versions == 1 ? versioned_sym : NULL;\n      if (sym != NULL)\n    {\n    found_it:\n      switch (__builtin_expect (ELFW(ST_BIND) (sym->st_info), STB_GLOBAL))\n        {\n        case STB_WEAK:\n          if (__builtin_expect (GLRO(dl_dynamic_weak), 0))\n        {\n          if (! result->s)\n            {\n              result->s = sym;\n              result->m = (struct link_map *) map;\n            }\n          break;\n        }\n\n        case STB_GLOBAL:\n        success:\n          result->s = sym;\n          result->m = (struct link_map *) map;\n          return 1;\n\n        case STB_GNU_UNIQUE:\n          ...\n\n        default:\n          break;\n        }\n    }\n    }\n  while (++i < n);\n\n  return 0;\n}\n\n```\n首先获得该scope下的link_map个数r_nlist和数组r_list 然后进行遍历   \n省略的部分是检查当前link_map是否有符合查找的条件  没有就继续遍历   \n再往下取出当前link_map的符号表symtab和字符串表strtab   \n接下来的if和else条件语句部分都是通过哈希值找到符号表中对应符号列表的索引  \n   如果找到 就通过check_match函数比对符号表中的函数名symtab[symidx]和待查找的函数名undef_name是否相等 如果相等 就找到了该符号并跳转到found_it语句  否则返回null    \n\n找到了该符号后对符号类型进行判断  \n如果找到的是弱符号STB_WEAK 则保存第一次找到的结果 然后继续循环查找 \n   如果后面没有找到可以覆盖该结果的符号 则返回的就是该第一次保存的结果。\n   如果找到的是全局符号STB_GLOBAL 则直接返回该结果。\n\n如果找到的符号是其他类型的符号 则继续循环查找\n最后 如果什么都没找到 则返回0   \n\n/elf/dl-lookup.c::check_match\n```C++\n      const ElfW(Sym) *__attribute_noinline__\n      check_match (const ElfW(Sym) *sym)\n      {\n        ...\n\n        if (sym != ref && strcmp (strtab + sym->st_name, undef_name))\n          return NULL;\n\n        const ElfW(Half) *verstab = map->l_versyms;\n        if (version != NULL)\n          {\n\n            ElfW(Half) ndx = verstab[symidx] & 0x7fff;\n            if (  (map->l_versions[ndx].hash != version->hash \n                          || strcmp (map->l_versions[ndx].name, version->name)  ) \n                 && (version->hidden || map->l_versions[ndx].hash || (verstab[symidx] & 0x8000)))\n              return NULL;\n          }\n        else\n          {\n            ...\n          }\n\n        return sym;\n      }\n```\n\n这里主要有一个版本检查    \n\n##### ..1.1.8. 符号版本   \n由于符号版本不是C语言的标准用法 所以它使用了汇编器的一个特殊指示 也就是.symver 指示  \n而GCC中通过内嵌汇编完成  如下:  \n```asm\n__asm__(\".symver original_foo,foo@\");  \n__asm__(\".symver old_foo,foo@VERS_1.1\");  \n__asm__(\".symver old_foo1,foo@VERS_1.2\");  \n__asm__(\".symver new_foo,foo@@VERS_2.0\");\n```\n\n这个例子中定义了foo的四个版本   \n其中的symver的第一个参数为源代码中真正定义的实现 而之后的foo则为对外公开的版本 也就是可以有不同版本的符号  \n其中@@则表示这个是一个默认版本(简单来说 如果一个可执行文件链接的时候foo还没有任何版本控制 但是在运行时foo已经引入了多个版本 则此时的可执行文件可以选择这个@@表示的默认版本符号  \n这里的old_foo就是foo的VERS_1.1版本 如果在so中定义了old_foo 那么这个old_foo就是这个foo的VERS_1.1版本的实现  \n  如果没有定义 可以通过old_foo来引用这个特殊版本的foo符号的定义   \n\n\n##### ..1.1.9. 强弱符号   \n针对强弱符号的概念 链接器就会按照如下规则处理与选择被多次定义的全局符号  \n\n* 规则1: 不允许强符号被多次定义（即不同的目标文件中不能有同名的强符号）  \n  * 如果有多个强符号定义 则链接器报符号重复定义错误   \n* 规则2: 如果一个符号在某个目标文件中是强符号  在其他文件中都是弱符号 那么选择强符号   \n* 规则3: 如果一个符号在所有目标文件中都是弱符号 那么选择其中占用空间最大的一个 \n  * 比如目标文件A定义全局变量global为int型 占4个字节\n  * 目标文件B定义global为doulbe型 占8个字节 \n  * 那么目标文件A和B链接后 符号global占8个字节（尽量不要使用多个不同类型的弱符号,否则容易导致很难发现的程序错误）  \n\n##### ..1.1.10. 强弱引用   \n我们所看到的对外部目标文件的符号引用在目标文件被最终链接成可执行文件时  它们必须要被正确决议  \n如果没有找到该符号的定义 链接器就会报符号未定义错误 这种被称为强引用（Strong Reference）  \n与之相对应还有一种弱引用（Weak Reference）   \n在处理弱引用时 如果该符号有定义  则链接器将该符号的引用决议  如果该符号未被定义  则链接器对于该引用不报错  \n链接器处理强引用和弱引用的过程几乎一样  只是对于未定义的弱引用  链接器不认为它是一个错误  \n一般对于未定义的弱引用  链接器默认其为0  或者是一个特殊的值  以便于程序代码能够识别  \n\n##### ..1.1.11. 符号的作用域   \nC++中non-member function template模板的代码是具有不同于普通的函数定义的  \nC++标准里对于在global scope声明对象的链接描述:  \n> [ISO/IEE 14882:2011]A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared const. Objects declared const and not explicitly declared extern have internal linkage.\n\n例如声明int max(int,int)是具有外部链接的符号    \n\n\nC++中非成员函数模板(non-member function template)的链接不同于普通的函数   \n> [ISO/IEE 14882:2014]A template name has linkage (3.5). A non-member function template can have internal linkage; any other template name shall have external linkage. Specializations (explicit or implicit) of a template that has internal linkage are distinct from all specializations in other translation units.\n   \n即通过模板实现的max(const T&,const T&)是具有内部链接internal linkage的符号  \n所以在链接时对于max的调用查找只能够找到自己目标文件中的符号名(内部链接外部不可见) 不会和外部链接产生重定义冲突  \n\n\n### ..2. 动态库装载过程  \n\n\n#### ..2.1. ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\n\n#### ..2.2. ELF的装载有三种方法   \n| 函数        | 描述                                                                                                                                             |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n| load_binary | 通过读存放在可执行文件中的信息为当前进程建立一个新的执行环境                                                                                     |\n| load_shlib  | 用于动态的把一个共享库捆绑到一个已经在运行的进程, 这是由uselib()系统调用激活的                                                                   |\n| core_dump   | 在名为core的文件中, 存放当前进程的执行上下文. 这个文件通常是在进程接收到一个缺省操作为”dump”的信号时被创建的, 其格式取决于被执行程序的可执行类型 |\n\n\n\n\n\n\n\n\n\n</font>  \n","slug":"2019-12-17-elf-load","published":1,"updated":"2020-03-09T03:25:56.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej600177w5h9vh1af31","content":"<h3><span id=\"1-目录\">..1. 目录</span></h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a><ul>\n<li><a href=\"#动态链接过程\">动态链接过程</a><ul>\n<li><a href=\"#基础宏定义\">基础宏定义</a></li>\n<li><a href=\"#重定位定义\">重定位定义</a></li>\n<li><a href=\"#符号表定义\">符号表定义</a></li>\n<li><a href=\"#动态段定义\">动态段定义</a></li>\n<li><a href=\"#rscopeelem-定义\">rscopeelem 定义</a></li>\n<li><a href=\"#linkmap\">linkmap</a></li>\n<li><a href=\"#dlfixup-函数定义和分析\">dlfixup 函数定义和分析</a></li>\n<li><a href=\"#符号版本\">符号版本</a></li>\n<li><a href=\"#强弱符号\">强弱符号</a></li>\n<li><a href=\"#强弱引用\">强弱引用</a></li>\n<li><a href=\"#符号的作用域\">符号的作用域</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#动态库装载过程\">动态库装载过程</a><ul>\n<li><a href=\"#elf的辅助向量-auxv\">ELF的辅助向量 AUXV</a></li>\n<li><a href=\"#elf的装载有三种方法\">ELF的装载有三种方法</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<a id=\"more\"></a>\n\n<h4><span id=\"11-动态链接过程\">..1.1. 动态链接过程</span></h4><h5><span id=\"111-基础宏定义\">..1.1.1. 基础宏定义</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//宏访问link_map成员并计算地址   </span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr + (map)-&gt;l_addr)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_PTR(map, i) (map)-&gt;i-&gt;d_un.d_ptr</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Result of the lookup functions and how to retrieve the base address.  */</span></span><br><span class=\"line\"><span class=\"comment\">//lookup系列函数的返回值</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">lookup_t</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOOKUP_VALUE(map) map</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOOKUP_VALUE_ADDRESS(map) ((map) ? (map)-&gt;l_addr : 0)</span></span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"112-重定位定义\">..1.1.2. 重定位定义</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Elf64_Rela</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int64_t</span>  Elf64_Sxword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Addr        r_offset;                <span class=\"comment\">/* Address */</span></span><br><span class=\"line\">  Elf64_Xword        r_info;                 <span class=\"comment\">/* Relocation type and symbol index */</span></span><br><span class=\"line\">  Elf64_Sxword        r_addend;              <span class=\"comment\">/* Addend */</span></span><br><span class=\"line\">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"113-符号表定义\">..1.1.3. 符号表定义</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Elf64_Sym</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint32_t</span> Elf64_Word;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint16_t</span> Elf64_Section;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Word        st_name;                <span class=\"comment\">/* Symbol name (string tbl index), 4 bytes */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>        st_info;             <span class=\"comment\">/* Symbol type and binding, 1 byte */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> st_other;                   <span class=\"comment\">/* Symbol visibility, 1 byte */</span></span><br><span class=\"line\">  Elf64_Section        st_shndx;            <span class=\"comment\">/* Section index, 2 bytes */</span></span><br><span class=\"line\">  Elf64_Addr        st_value;               <span class=\"comment\">/* Symbol value, 8 bytes */</span></span><br><span class=\"line\">  Elf64_Xword        st_size;               <span class=\"comment\">/* Symbol size, 8 bytes */</span></span><br><span class=\"line\">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"114-动态段定义\">..1.1.4. 动态段定义</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  elf32_sword  d_tag</span><br><span class=\"line\">  <span class=\"keyword\">union</span>&#123;</span><br><span class=\"line\">  elf32_word  d_val</span><br><span class=\"line\">  elf32_addr  d_ptr</span><br><span class=\"line\">  &#125;d_un;</span><br><span class=\"line\">  &#125;elf32_dyn;  </span><br><span class=\"line\">  </span><br><span class=\"line\">d_tag控制d_un的含义</span><br><span class=\"line\">DT_HASH符号散列表地址</span><br><span class=\"line\">DT_STRTAB字符串表的地址</span><br><span class=\"line\">DT_SYMTAB符号表地址</span><br><span class=\"line\">DT_RELA相对地址重定位表的地址</span><br><span class=\"line\">DT_STRSZ字符串表的字节大小</span><br><span class=\"line\">DT_INIT初始化函数的地址</span><br><span class=\"line\">DT_FINI终止函数的地址</span><br><span class=\"line\">DT_SONAME共享目标文件名的字符串表</span><br><span class=\"line\">接近量DT_JMPREL仅用于plt的重定位定位地址</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"115-r_scope_elem-定义\">..1.1.5. r_scope_elem 定义</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Structure to describe a single list of scope elements.  The lookup</span></span><br><span class=\"line\"><span class=\"comment\">   functions get passed an array of pointers to such structures.  */</span></span><br><span class=\"line\">   <span class=\"comment\">//描述一个特定范围的单链表结构 lookup函数往往需要传递一个保存这种结构的数组作为参数  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* Array of maps for the scope.  */</span></span><br><span class=\"line\">  <span class=\"comment\">//用于描述范围的maps数组</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> **<span class=\"title\">r_list</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">/* 这个范围的入口点个数  */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> r_nlist;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"116-link_map\">..1.1.6. link_map</span></h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//link_map用于描述可加载共享目标文件的结构 l_next,l_prev是一个链接了已加载的所有共享目标文件的单链表结构   </span></span><br><span class=\"line\"><span class=\"comment\">//这个单链表结构一般被用于动态链接器   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* These first few members are part of the protocol with the debugger.</span></span><br><span class=\"line\"><span class=\"comment\">       This is the same format used in SVR4.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//共享文件加载基地址</span></span><br><span class=\"line\">    ElfW(Addr) l_addr;\t\t<span class=\"comment\">/* Base address shared object is loaded at.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//绝对文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *l_name;\t\t<span class=\"comment\">/* Absolute file name object was found in.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//动态段加载地址</span></span><br><span class=\"line\">    ElfW(Dyn) *l_ld;\t\t<span class=\"comment\">/* Dynamic section of the shared object.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//加载项鍊表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_next</span>, *<span class=\"title\">l_prev</span>;</span> <span class=\"comment\">/* Chain of loaded objects.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* All following members are internal to the dynamic linker.</span></span><br><span class=\"line\"><span class=\"comment\">       They may change without notice.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//其他成员是对于动态链接器内部的 可能随时改变不受提醒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This is an element which is only ever different from a pointer to</span></span><br><span class=\"line\"><span class=\"comment\">       the very same copy of this type for ld.so when it is used in more</span></span><br><span class=\"line\"><span class=\"comment\">       than one namespace.  */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_real</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Number of the namespace this link map belongs to.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//这link map属于的命名空间个数</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class=\"line\">\t\t      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class=\"line\">     <span class=\"comment\">//这个数组用于快速访问动态段的信息 在lookup系列函数中会频繁使用</span></span><br><span class=\"line\">     <span class=\"comment\">//它的有关定义还包含了一系列用于访问信息的功能宏。</span></span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/* Array of DT_NEEDED dependencies and their dependencies, in</span></span><br><span class=\"line\"><span class=\"comment\">       dependency order for symbol lookup (with and without</span></span><br><span class=\"line\"><span class=\"comment\">       duplicates).  There is no entry before the dependencies have</span></span><br><span class=\"line\"><span class=\"comment\">       been loaded.  */</span></span><br><span class=\"line\">     <span class=\"comment\">//依赖项及其依赖项的数组 按符号查找的依赖项顺序排列(有和没有重复)。</span></span><br><span class=\"line\">     <span class=\"comment\">//在加载依赖项之前没有条目。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span> <span class=\"title\">l_searchlist</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* Dependent object that first caused this object to be loaded.  */</span></span><br><span class=\"line\">    <span class=\"comment\">//第一次唤起当前模块被加载的模块</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_loader</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/* This is an array defining the lookup scope for this link map.</span></span><br><span class=\"line\"><span class=\"comment\">       There are initially at most three different scope lists.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//这个数组定义了当前模块用于lookup函数搜索的范围 最初最多有三个不同范围的列表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span> **<span class=\"title\">l_scope</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h5><span id=\"117-_dl_fixup-函数定义和分析\">..1.1.7. <code>_dl_fixup</code> 函数定义和分析</span></h5><p>libc/elf/dl-runtime.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (</span><br><span class=\"line\">   <span class=\"comment\">/* GKM <span class=\"doctag\">FIXME:</span> Fix trampoline to pass bounds so we can do</span></span><br><span class=\"line\"><span class=\"comment\">      without the `__unbounded' qualifier.  */</span></span><br><span class=\"line\">     struct link_map *__unbounded l, ElfW(Word) reloc_offset)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *<span class=\"keyword\">const</span> symtab</span></span><br><span class=\"line\"><span class=\"function\">    </span>= (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *strtab = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> PLTREL *<span class=\"keyword\">const</span> reloc</span><br><span class=\"line\">    = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> rel_addr = (<span class=\"keyword\">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class=\"line\">  <span class=\"keyword\">lookup_t</span> result;</span><br><span class=\"line\">  DL_FIXUP_VALUE_TYPE value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class=\"line\">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class=\"line\"><span class=\"comment\">      used don't look in the global scope.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class=\"number\">0</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_found_version</span> *<span class=\"title\">version</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *vernum </span>=</span><br><span class=\"line\">          (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class=\"line\">        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">        version = &amp;l-&gt;l_versions[ndx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (version-&gt;hash == <span class=\"number\">0</span>)</span><br><span class=\"line\">          version = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class=\"line\"><span class=\"comment\">       not necessary for objects which cannot be unloaded or when</span></span><br><span class=\"line\"><span class=\"comment\">       we are not using any threads (yet).  */</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        THREAD_GSCOPE_SET_FLAG ();</span><br><span class=\"line\">        flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class=\"line\">                            version, ELF_RTYPE_CLASS_PLT, flags, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We are done with the global scope.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      THREAD_GSCOPE_RESET_FLAG ();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Currently result contains the base load address (or link map)</span></span><br><span class=\"line\"><span class=\"comment\">       of the object that defines sym.  Now add in the symbol</span></span><br><span class=\"line\"><span class=\"comment\">       offset.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class=\"line\">                           sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class=\"line\">                                + sym-&gt;st_value) : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class=\"line\"><span class=\"comment\">       address) is also known.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class=\"line\">      result = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* And now perhaps the relocation addend.  */</span></span><br><span class=\"line\">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Finally, fix up the plt itself.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (GLRO(dl_bind_not), <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><figcaption><span>字符串表strtab   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">reloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   </span><br><span class=\"line\">reloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  </span><br><span class=\"line\"></span><br><span class=\"line\">st_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  </span><br><span class=\"line\">最后调用elf_machine_fixup_plt函数进行修正    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixup plt  回写.got.plt的项</span><br></pre></td></tr></table></figure>\n<p>static inline Elf64_Addr<br>elf_machine_fixup_plt (struct link_map *map, lookup_t t,<br>               const Elf64_Rela *reloc,<br>               Elf64_Addr *reloc_addr, Elf64_Addr value)<br>{<br>  return *reloc_addr = value;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">其他情况 会进入if语句   </span><br><span class=\"line\">首先获得符号的version信息 然后调用 &#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96; 函数从已装载的共享库中查找最终的符号地址 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">elf&#x2F;dl-lookup.c  </span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">&#x2F;* Search loaded objects&#39; symbol tables for a definition of the symbol</span><br><span class=\"line\">   UNDEF_NAME, perhaps with a requested version for the symbol.</span><br><span class=\"line\">   We must never have calls to the audit functions inside this function</span><br><span class=\"line\">   or in any function which gets called.  If this would happen the audit</span><br><span class=\"line\">   code might create a thread which can throw off all the scope locking.  *&#x2F;</span><br><span class=\"line\">lookup_t</span><br><span class=\"line\">_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,</span><br><span class=\"line\">                     const ElfW(Sym) **ref,</span><br><span class=\"line\">                     struct r_scope_elem *symbol_scope[],</span><br><span class=\"line\">                     const struct r_found_version *version,</span><br><span class=\"line\">                     int type_class, int flags, struct link_map *skip_map)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  size_t n &#x3D; scope-&gt;r_nlist;</span><br><span class=\"line\">  __asm volatile (&quot;&quot; : &quot;+r&quot; (n), &quot;+m&quot; (scope-&gt;r_list));</span><br><span class=\"line\">  struct link_map **list &#x3D; scope-&gt;r_list;</span><br><span class=\"line\"></span><br><span class=\"line\">  do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Elf_Symndx symidx;</span><br><span class=\"line\">      int num_versions &#x3D; 0;</span><br><span class=\"line\">      const ElfW(Sym) *versioned_sym &#x3D; NULL;</span><br><span class=\"line\">      const struct link_map *map &#x3D; list[i]-&gt;l_real;</span><br><span class=\"line\"></span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\">      const ElfW(Sym) *symtab &#x3D; (const void *) D_PTR (map, l_info[DT_SYMTAB]);</span><br><span class=\"line\">      const char *strtab &#x3D; (const void *) D_PTR (map, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">      const ElfW(Sym) *sym;</span><br><span class=\"line\">      const ElfW(Addr) *bitmask &#x3D; map-&gt;l_gnu_bitmask;</span><br><span class=\"line\">      if (__builtin_expect (bitmask !&#x3D; NULL, 1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ElfW(Addr) bitmask_word</span><br><span class=\"line\">        &#x3D; bitmask[(new_hash &#x2F; __ELF_NATIVE_CLASS)</span><br><span class=\"line\">              &amp; map-&gt;l_gnu_bitmask_idxbits];</span><br><span class=\"line\"></span><br><span class=\"line\">      unsigned int hashbit1 &#x3D; new_hash &amp; (__ELF_NATIVE_CLASS - 1);</span><br><span class=\"line\">      unsigned int hashbit2 &#x3D; ((new_hash &gt;&gt; map-&gt;l_gnu_shift)</span><br><span class=\"line\">                   &amp; (__ELF_NATIVE_CLASS - 1));</span><br><span class=\"line\"></span><br><span class=\"line\">      if (__builtin_expect ((bitmask_word &gt;&gt; hashbit1)</span><br><span class=\"line\">                &amp; (bitmask_word &gt;&gt; hashbit2) &amp; 1, 0))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          Elf32_Word bucket &#x3D; map-&gt;l_gnu_buckets[new_hash</span><br><span class=\"line\">                             % map-&gt;l_nbuckets];</span><br><span class=\"line\">          if (bucket !&#x3D; 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              const Elf32_Word *hasharr &#x3D; &amp;map-&gt;l_gnu_chain_zero[bucket];</span><br><span class=\"line\"></span><br><span class=\"line\">              do</span><br><span class=\"line\">                if (((*hasharr ^ new_hash) &gt;&gt; 1) &#x3D;&#x3D; 0)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    symidx &#x3D; hasharr - map-&gt;l_gnu_chain_zero;</span><br><span class=\"line\">                    sym &#x3D; check_match (&amp;symtab[symidx]);</span><br><span class=\"line\">                    if (sym !&#x3D; NULL)</span><br><span class=\"line\">                      goto found_it;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              while ((*hasharr++ &amp; 1u) &#x3D;&#x3D; 0);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      symidx &#x3D; SHN_UNDEF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      if (*old_hash &#x3D;&#x3D; 0xffffffff)</span><br><span class=\"line\">        *old_hash &#x3D; _dl_elf_hash (undef_name);</span><br><span class=\"line\">      for (symidx &#x3D; map-&gt;l_buckets[*old_hash % map-&gt;l_nbuckets];</span><br><span class=\"line\">           symidx !&#x3D; STN_UNDEF;</span><br><span class=\"line\">           symidx &#x3D; map-&gt;l_chain[symidx])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          sym &#x3D; check_match (&amp;symtab[symidx]);</span><br><span class=\"line\">          if (sym !&#x3D; NULL)</span><br><span class=\"line\">            goto found_it;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      sym &#x3D; num_versions &#x3D;&#x3D; 1 ? versioned_sym : NULL;</span><br><span class=\"line\">      if (sym !&#x3D; NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    found_it:</span><br><span class=\"line\">      switch (__builtin_expect (ELFW(ST_BIND) (sym-&gt;st_info), STB_GLOBAL))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        case STB_WEAK:</span><br><span class=\"line\">          if (__builtin_expect (GLRO(dl_dynamic_weak), 0))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          if (! result-&gt;s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              result-&gt;s &#x3D; sym;</span><br><span class=\"line\">              result-&gt;m &#x3D; (struct link_map *) map;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case STB_GLOBAL:</span><br><span class=\"line\">        success:</span><br><span class=\"line\">          result-&gt;s &#x3D; sym;</span><br><span class=\"line\">          result-&gt;m &#x3D; (struct link_map *) map;</span><br><span class=\"line\">          return 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        case STB_GNU_UNIQUE:</span><br><span class=\"line\">          ...</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  while (++i &lt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先获得该scope下的link_map个数r_nlist和数组r_list 然后进行遍历<br>省略的部分是检查当前link_map是否有符合查找的条件  没有就继续遍历<br>再往下取出当前link_map的符号表symtab和字符串表strtab<br>接下来的if和else条件语句部分都是通过哈希值找到符号表中对应符号列表的索引<br>   如果找到 就通过check_match函数比对符号表中的函数名symtab[symidx]和待查找的函数名undef_name是否相等 如果相等 就找到了该符号并跳转到found_it语句  否则返回null    </p>\n<p>找到了该符号后对符号类型进行判断<br>如果找到的是弱符号STB_WEAK 则保存第一次找到的结果 然后继续循环查找<br>   如果后面没有找到可以覆盖该结果的符号 则返回的就是该第一次保存的结果。<br>   如果找到的是全局符号STB_GLOBAL 则直接返回该结果。</p>\n<p>如果找到的符号是其他类型的符号 则继续循环查找<br>最后 如果什么都没找到 则返回0   </p>\n<p>/elf/dl-lookup.c::check_match</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *__attribute_noinline__</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_match</span> <span class=\"params\">(<span class=\"keyword\">const</span> ElfW(Sym) *sym)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sym != ref &amp;&amp; <span class=\"built_in\">strcmp</span> (strtab + sym-&gt;st_name, undef_name))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *verstab </span>= <span class=\"built_in\">map</span>-&gt;l_versyms;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ElfW(Half) ndx = verstab[symidx] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (  (<span class=\"built_in\">map</span>-&gt;l_versions[ndx].hash != version-&gt;hash </span><br><span class=\"line\">                    || <span class=\"built_in\">strcmp</span> (<span class=\"built_in\">map</span>-&gt;l_versions[ndx].name, version-&gt;name)  ) </span><br><span class=\"line\">           &amp;&amp; (version-&gt;hidden || <span class=\"built_in\">map</span>-&gt;l_versions[ndx].hash || (verstab[symidx] &amp; <span class=\"number\">0x8000</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sym;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要有一个版本检查    </p>\n<h5><span id=\"118-符号版本\">..1.1.8. 符号版本</span></h5><p>由于符号版本不是C语言的标准用法 所以它使用了汇编器的一个特殊指示 也就是.symver 指示<br>而GCC中通过内嵌汇编完成  如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;.symver original_foo,foo@&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver old_foo,foo@VERS_1.1&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver old_foo1,foo@VERS_1.2&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver new_foo,foo@@VERS_2.0&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中定义了foo的四个版本<br>其中的symver的第一个参数为源代码中真正定义的实现 而之后的foo则为对外公开的版本 也就是可以有不同版本的符号<br>其中@@则表示这个是一个默认版本(简单来说 如果一个可执行文件链接的时候foo还没有任何版本控制 但是在运行时foo已经引入了多个版本 则此时的可执行文件可以选择这个@@表示的默认版本符号<br>这里的old_foo就是foo的VERS_1.1版本 如果在so中定义了old_foo 那么这个old_foo就是这个foo的VERS_1.1版本的实现<br>  如果没有定义 可以通过old_foo来引用这个特殊版本的foo符号的定义   </p>\n<h5><span id=\"119-强弱符号\">..1.1.9. 强弱符号</span></h5><p>针对强弱符号的概念 链接器就会按照如下规则处理与选择被多次定义的全局符号  </p>\n<ul>\n<li>规则1: 不允许强符号被多次定义（即不同的目标文件中不能有同名的强符号）  <ul>\n<li>如果有多个强符号定义 则链接器报符号重复定义错误   </li>\n</ul>\n</li>\n<li>规则2: 如果一个符号在某个目标文件中是强符号  在其他文件中都是弱符号 那么选择强符号   </li>\n<li>规则3: 如果一个符号在所有目标文件中都是弱符号 那么选择其中占用空间最大的一个 <ul>\n<li>比如目标文件A定义全局变量global为int型 占4个字节</li>\n<li>目标文件B定义global为doulbe型 占8个字节 </li>\n<li>那么目标文件A和B链接后 符号global占8个字节（尽量不要使用多个不同类型的弱符号,否则容易导致很难发现的程序错误）  </li>\n</ul>\n</li>\n</ul>\n<h5><span id=\"1110-强弱引用\">..1.1.10. 强弱引用</span></h5><p>我们所看到的对外部目标文件的符号引用在目标文件被最终链接成可执行文件时  它们必须要被正确决议<br>如果没有找到该符号的定义 链接器就会报符号未定义错误 这种被称为强引用（Strong Reference）<br>与之相对应还有一种弱引用（Weak Reference）<br>在处理弱引用时 如果该符号有定义  则链接器将该符号的引用决议  如果该符号未被定义  则链接器对于该引用不报错<br>链接器处理强引用和弱引用的过程几乎一样  只是对于未定义的弱引用  链接器不认为它是一个错误<br>一般对于未定义的弱引用  链接器默认其为0  或者是一个特殊的值  以便于程序代码能够识别  </p>\n<h5><span id=\"1111-符号的作用域\">..1.1.11. 符号的作用域</span></h5><p>C++中non-member function template模板的代码是具有不同于普通的函数定义的<br>C++标准里对于在global scope声明对象的链接描述:  </p>\n<blockquote>\n<p>[ISO/IEE 14882:2011]A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared const. Objects declared const and not explicitly declared extern have internal linkage.</p>\n</blockquote>\n<p>例如声明int max(int,int)是具有外部链接的符号    </p>\n<p>C++中非成员函数模板(non-member function template)的链接不同于普通的函数   </p>\n<blockquote>\n<p>[ISO/IEE 14882:2014]A template name has linkage (3.5). A non-member function template can have internal linkage; any other template name shall have external linkage. Specializations (explicit or implicit) of a template that has internal linkage are distinct from all specializations in other translation units.</p>\n</blockquote>\n<p>即通过模板实现的max(const T&amp;,const T&amp;)是具有内部链接internal linkage的符号<br>所以在链接时对于max的调用查找只能够找到自己目标文件中的符号名(内部链接外部不可见) 不会和外部链接产生重定义冲突  </p>\n<h3><span id=\"2-动态库装载过程\">..2. 动态库装载过程</span></h3><h4><span id=\"21-elf的辅助向量-auxv\">..2.1. ELF的辅助向量 AUXV</span></h4><p>main函数的第三个参数  char* envp[]    </p>\n<h4><span id=\"22-elf的装载有三种方法\">..2.2. ELF的装载有三种方法</span></h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>load_binary</td>\n<td>通过读存放在可执行文件中的信息为当前进程建立一个新的执行环境</td>\n</tr>\n<tr>\n<td>load_shlib</td>\n<td>用于动态的把一个共享库捆绑到一个已经在运行的进程, 这是由uselib()系统调用激活的</td>\n</tr>\n<tr>\n<td>core_dump</td>\n<td>在名为core的文件中, 存放当前进程的执行上下文. 这个文件通常是在进程接收到一个缺省操作为”dump”的信号时被创建的, 其格式取决于被执行程序的可执行类型</td>\n</tr>\n</tbody></table>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"1-目录\"><a href=\"#1-目录\" class=\"headerlink\" title=\"..1. 目录\"></a>..1. 目录</h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a><ul>\n<li><a href=\"#动态链接过程\">动态链接过程</a><ul>\n<li><a href=\"#基础宏定义\">基础宏定义</a></li>\n<li><a href=\"#重定位定义\">重定位定义</a></li>\n<li><a href=\"#符号表定义\">符号表定义</a></li>\n<li><a href=\"#动态段定义\">动态段定义</a></li>\n<li><a href=\"#rscopeelem-定义\">rscopeelem 定义</a></li>\n<li><a href=\"#linkmap\">linkmap</a></li>\n<li><a href=\"#dlfixup-函数定义和分析\">dlfixup 函数定义和分析</a></li>\n<li><a href=\"#符号版本\">符号版本</a></li>\n<li><a href=\"#强弱符号\">强弱符号</a></li>\n<li><a href=\"#强弱引用\">强弱引用</a></li>\n<li><a href=\"#符号的作用域\">符号的作用域</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#动态库装载过程\">动态库装载过程</a><ul>\n<li><a href=\"#elf的辅助向量-auxv\">ELF的辅助向量 AUXV</a></li>\n<li><a href=\"#elf的装载有三种方法\">ELF的装载有三种方法</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->","more":"<h4 id=\"1-1-动态链接过程\"><a href=\"#1-1-动态链接过程\" class=\"headerlink\" title=\"..1.1. 动态链接过程\"></a>..1.1. 动态链接过程</h4><h5 id=\"1-1-1-基础宏定义\"><a href=\"#1-1-1-基础宏定义\" class=\"headerlink\" title=\"..1.1.1. 基础宏定义\"></a>..1.1.1. 基础宏定义</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//宏访问link_map成员并计算地址   </span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_PTR(map, i) ((map)-&gt;i-&gt;d_un.d_ptr + (map)-&gt;l_addr)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"meta-keyword\">define</span> D_PTR(map, i) (map)-&gt;i-&gt;d_un.d_ptr</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Result of the lookup functions and how to retrieve the base address.  */</span></span><br><span class=\"line\"><span class=\"comment\">//lookup系列函数的返回值</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">lookup_t</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOOKUP_VALUE(map) map</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LOOKUP_VALUE_ADDRESS(map) ((map) ? (map)-&gt;l_addr : 0)</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"1-1-2-重定位定义\"><a href=\"#1-1-2-重定位定义\" class=\"headerlink\" title=\"..1.1.2. 重定位定义\"></a>..1.1.2. 重定位定义</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Elf64_Rela</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int64_t</span>  Elf64_Sxword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Addr        r_offset;                <span class=\"comment\">/* Address */</span></span><br><span class=\"line\">  Elf64_Xword        r_info;                 <span class=\"comment\">/* Relocation type and symbol index */</span></span><br><span class=\"line\">  Elf64_Sxword        r_addend;              <span class=\"comment\">/* Addend */</span></span><br><span class=\"line\">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-1-3-符号表定义\"><a href=\"#1-1-3-符号表定义\" class=\"headerlink\" title=\"..1.1.3. 符号表定义\"></a>..1.1.3. 符号表定义</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Elf64_Sym</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint32_t</span> Elf64_Word;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint16_t</span> Elf64_Section;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Word        st_name;                <span class=\"comment\">/* Symbol name (string tbl index), 4 bytes */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>        st_info;             <span class=\"comment\">/* Symbol type and binding, 1 byte */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> st_other;                   <span class=\"comment\">/* Symbol visibility, 1 byte */</span></span><br><span class=\"line\">  Elf64_Section        st_shndx;            <span class=\"comment\">/* Section index, 2 bytes */</span></span><br><span class=\"line\">  Elf64_Addr        st_value;               <span class=\"comment\">/* Symbol value, 8 bytes */</span></span><br><span class=\"line\">  Elf64_Xword        st_size;               <span class=\"comment\">/* Symbol size, 8 bytes */</span></span><br><span class=\"line\">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-1-4-动态段定义\"><a href=\"#1-1-4-动态段定义\" class=\"headerlink\" title=\"..1.1.4. 动态段定义\"></a>..1.1.4. 动态段定义</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">  elf32_sword  d_tag</span><br><span class=\"line\">  <span class=\"keyword\">union</span>&#123;</span><br><span class=\"line\">  elf32_word  d_val</span><br><span class=\"line\">  elf32_addr  d_ptr</span><br><span class=\"line\">  &#125;d_un;</span><br><span class=\"line\">  &#125;elf32_dyn;  </span><br><span class=\"line\">  </span><br><span class=\"line\">d_tag控制d_un的含义</span><br><span class=\"line\">DT_HASH符号散列表地址</span><br><span class=\"line\">DT_STRTAB字符串表的地址</span><br><span class=\"line\">DT_SYMTAB符号表地址</span><br><span class=\"line\">DT_RELA相对地址重定位表的地址</span><br><span class=\"line\">DT_STRSZ字符串表的字节大小</span><br><span class=\"line\">DT_INIT初始化函数的地址</span><br><span class=\"line\">DT_FINI终止函数的地址</span><br><span class=\"line\">DT_SONAME共享目标文件名的字符串表</span><br><span class=\"line\">接近量DT_JMPREL仅用于plt的重定位定位地址</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-1-5-r-scope-elem-定义\"><a href=\"#1-1-5-r-scope-elem-定义\" class=\"headerlink\" title=\"..1.1.5. r_scope_elem 定义\"></a>..1.1.5. r_scope_elem 定义</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Structure to describe a single list of scope elements.  The lookup</span></span><br><span class=\"line\"><span class=\"comment\">   functions get passed an array of pointers to such structures.  */</span></span><br><span class=\"line\">   <span class=\"comment\">//描述一个特定范围的单链表结构 lookup函数往往需要传递一个保存这种结构的数组作为参数  </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* Array of maps for the scope.  */</span></span><br><span class=\"line\">  <span class=\"comment\">//用于描述范围的maps数组</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> **<span class=\"title\">r_list</span>;</span></span><br><span class=\"line\">  <span class=\"comment\">/* 这个范围的入口点个数  */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> r_nlist;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"1-1-6-link-map\"><a href=\"#1-1-6-link-map\" class=\"headerlink\" title=\"..1.1.6. link_map\"></a>..1.1.6. link_map</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//link_map用于描述可加载共享目标文件的结构 l_next,l_prev是一个链接了已加载的所有共享目标文件的单链表结构   </span></span><br><span class=\"line\"><span class=\"comment\">//这个单链表结构一般被用于动态链接器   </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* These first few members are part of the protocol with the debugger.</span></span><br><span class=\"line\"><span class=\"comment\">       This is the same format used in SVR4.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//共享文件加载基地址</span></span><br><span class=\"line\">    ElfW(Addr) l_addr;\t\t<span class=\"comment\">/* Base address shared object is loaded at.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//绝对文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *l_name;\t\t<span class=\"comment\">/* Absolute file name object was found in.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//动态段加载地址</span></span><br><span class=\"line\">    ElfW(Dyn) *l_ld;\t\t<span class=\"comment\">/* Dynamic section of the shared object.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//加载项鍊表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_next</span>, *<span class=\"title\">l_prev</span>;</span> <span class=\"comment\">/* Chain of loaded objects.  */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* All following members are internal to the dynamic linker.</span></span><br><span class=\"line\"><span class=\"comment\">       They may change without notice.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//其他成员是对于动态链接器内部的 可能随时改变不受提醒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This is an element which is only ever different from a pointer to</span></span><br><span class=\"line\"><span class=\"comment\">       the very same copy of this type for ld.so when it is used in more</span></span><br><span class=\"line\"><span class=\"comment\">       than one namespace.  */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_real</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Number of the namespace this link map belongs to.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//这link map属于的命名空间个数</span></span><br><span class=\"line\">     </span><br><span class=\"line\">    ElfW(Dyn) *l_info[DT_NUM + DT_THISPROCNUM + DT_VERSIONTAGNUM</span><br><span class=\"line\">\t\t      + DT_EXTRANUM + DT_VALNUM + DT_ADDRNUM];</span><br><span class=\"line\">     <span class=\"comment\">//这个数组用于快速访问动态段的信息 在lookup系列函数中会频繁使用</span></span><br><span class=\"line\">     <span class=\"comment\">//它的有关定义还包含了一系列用于访问信息的功能宏。</span></span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"comment\">/* Array of DT_NEEDED dependencies and their dependencies, in</span></span><br><span class=\"line\"><span class=\"comment\">       dependency order for symbol lookup (with and without</span></span><br><span class=\"line\"><span class=\"comment\">       duplicates).  There is no entry before the dependencies have</span></span><br><span class=\"line\"><span class=\"comment\">       been loaded.  */</span></span><br><span class=\"line\">     <span class=\"comment\">//依赖项及其依赖项的数组 按符号查找的依赖项顺序排列(有和没有重复)。</span></span><br><span class=\"line\">     <span class=\"comment\">//在加载依赖项之前没有条目。</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span> <span class=\"title\">l_searchlist</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* Dependent object that first caused this object to be loaded.  */</span></span><br><span class=\"line\">    <span class=\"comment\">//第一次唤起当前模块被加载的模块</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">l_loader</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">/* This is an array defining the lookup scope for this link map.</span></span><br><span class=\"line\"><span class=\"comment\">       There are initially at most three different scope lists.  */</span></span><br><span class=\"line\">      <span class=\"comment\">//这个数组定义了当前模块用于lookup函数搜索的范围 最初最多有三个不同范围的列表</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_scope_elem</span> **<span class=\"title\">l_scope</span>;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h5 id=\"1-1-7-dl-fixup-函数定义和分析\"><a href=\"#1-1-7-dl-fixup-函数定义和分析\" class=\"headerlink\" title=\"..1.1.7. _dl_fixup 函数定义和分析\"></a>..1.1.7. <code>_dl_fixup</code> 函数定义和分析</h5><p>libc/elf/dl-runtime.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (</span><br><span class=\"line\">   <span class=\"comment\">/* GKM <span class=\"doctag\">FIXME:</span> Fix trampoline to pass bounds so we can do</span></span><br><span class=\"line\"><span class=\"comment\">      without the `__unbounded' qualifier.  */</span></span><br><span class=\"line\">     struct link_map *__unbounded l, ElfW(Word) reloc_offset)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *<span class=\"keyword\">const</span> symtab</span></span><br><span class=\"line\"><span class=\"function\">    </span>= (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *strtab = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> PLTREL *<span class=\"keyword\">const</span> reloc</span><br><span class=\"line\">    = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> rel_addr = (<span class=\"keyword\">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class=\"line\">  <span class=\"keyword\">lookup_t</span> result;</span><br><span class=\"line\">  DL_FIXUP_VALUE_TYPE value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class=\"line\">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class=\"line\"><span class=\"comment\">      used don't look in the global scope.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class=\"number\">0</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_found_version</span> *<span class=\"title\">version</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *vernum </span>=</span><br><span class=\"line\">          (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class=\"line\">        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">        version = &amp;l-&gt;l_versions[ndx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (version-&gt;hash == <span class=\"number\">0</span>)</span><br><span class=\"line\">          version = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class=\"line\"><span class=\"comment\">       not necessary for objects which cannot be unloaded or when</span></span><br><span class=\"line\"><span class=\"comment\">       we are not using any threads (yet).  */</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        THREAD_GSCOPE_SET_FLAG ();</span><br><span class=\"line\">        flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class=\"line\">                            version, ELF_RTYPE_CLASS_PLT, flags, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We are done with the global scope.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      THREAD_GSCOPE_RESET_FLAG ();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Currently result contains the base load address (or link map)</span></span><br><span class=\"line\"><span class=\"comment\">       of the object that defines sym.  Now add in the symbol</span></span><br><span class=\"line\"><span class=\"comment\">       offset.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class=\"line\">                           sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class=\"line\">                                + sym-&gt;st_value) : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class=\"line\"><span class=\"comment\">       address) is also known.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class=\"line\">      result = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* And now perhaps the relocation addend.  */</span></span><br><span class=\"line\">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Finally, fix up the plt itself.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (GLRO(dl_bind_not), <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plain\"><figcaption><span>字符串表strtab   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">reloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   </span><br><span class=\"line\">reloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  </span><br><span class=\"line\"></span><br><span class=\"line\">st_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  </span><br><span class=\"line\">最后调用elf_machine_fixup_plt函数进行修正    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixup plt  回写.got.plt的项</span><br></pre></td></tr></table></figure>\n<p>static inline Elf64_Addr<br>elf_machine_fixup_plt (struct link_map *map, lookup_t t,<br>               const Elf64_Rela *reloc,<br>               Elf64_Addr *reloc_addr, Elf64_Addr value)<br>{<br>  return *reloc_addr = value;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">其他情况 会进入if语句   </span><br><span class=\"line\">首先获得符号的version信息 然后调用 &#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96; 函数从已装载的共享库中查找最终的符号地址 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">elf&#x2F;dl-lookup.c  </span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">&#x2F;* Search loaded objects&#39; symbol tables for a definition of the symbol</span><br><span class=\"line\">   UNDEF_NAME, perhaps with a requested version for the symbol.</span><br><span class=\"line\">   We must never have calls to the audit functions inside this function</span><br><span class=\"line\">   or in any function which gets called.  If this would happen the audit</span><br><span class=\"line\">   code might create a thread which can throw off all the scope locking.  *&#x2F;</span><br><span class=\"line\">lookup_t</span><br><span class=\"line\">_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,</span><br><span class=\"line\">                     const ElfW(Sym) **ref,</span><br><span class=\"line\">                     struct r_scope_elem *symbol_scope[],</span><br><span class=\"line\">                     const struct r_found_version *version,</span><br><span class=\"line\">                     int type_class, int flags, struct link_map *skip_map)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  size_t n &#x3D; scope-&gt;r_nlist;</span><br><span class=\"line\">  __asm volatile (&quot;&quot; : &quot;+r&quot; (n), &quot;+m&quot; (scope-&gt;r_list));</span><br><span class=\"line\">  struct link_map **list &#x3D; scope-&gt;r_list;</span><br><span class=\"line\"></span><br><span class=\"line\">  do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Elf_Symndx symidx;</span><br><span class=\"line\">      int num_versions &#x3D; 0;</span><br><span class=\"line\">      const ElfW(Sym) *versioned_sym &#x3D; NULL;</span><br><span class=\"line\">      const struct link_map *map &#x3D; list[i]-&gt;l_real;</span><br><span class=\"line\"></span><br><span class=\"line\">      ...</span><br><span class=\"line\"></span><br><span class=\"line\">      const ElfW(Sym) *symtab &#x3D; (const void *) D_PTR (map, l_info[DT_SYMTAB]);</span><br><span class=\"line\">      const char *strtab &#x3D; (const void *) D_PTR (map, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">      const ElfW(Sym) *sym;</span><br><span class=\"line\">      const ElfW(Addr) *bitmask &#x3D; map-&gt;l_gnu_bitmask;</span><br><span class=\"line\">      if (__builtin_expect (bitmask !&#x3D; NULL, 1))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ElfW(Addr) bitmask_word</span><br><span class=\"line\">        &#x3D; bitmask[(new_hash &#x2F; __ELF_NATIVE_CLASS)</span><br><span class=\"line\">              &amp; map-&gt;l_gnu_bitmask_idxbits];</span><br><span class=\"line\"></span><br><span class=\"line\">      unsigned int hashbit1 &#x3D; new_hash &amp; (__ELF_NATIVE_CLASS - 1);</span><br><span class=\"line\">      unsigned int hashbit2 &#x3D; ((new_hash &gt;&gt; map-&gt;l_gnu_shift)</span><br><span class=\"line\">                   &amp; (__ELF_NATIVE_CLASS - 1));</span><br><span class=\"line\"></span><br><span class=\"line\">      if (__builtin_expect ((bitmask_word &gt;&gt; hashbit1)</span><br><span class=\"line\">                &amp; (bitmask_word &gt;&gt; hashbit2) &amp; 1, 0))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          Elf32_Word bucket &#x3D; map-&gt;l_gnu_buckets[new_hash</span><br><span class=\"line\">                             % map-&gt;l_nbuckets];</span><br><span class=\"line\">          if (bucket !&#x3D; 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              const Elf32_Word *hasharr &#x3D; &amp;map-&gt;l_gnu_chain_zero[bucket];</span><br><span class=\"line\"></span><br><span class=\"line\">              do</span><br><span class=\"line\">                if (((*hasharr ^ new_hash) &gt;&gt; 1) &#x3D;&#x3D; 0)</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    symidx &#x3D; hasharr - map-&gt;l_gnu_chain_zero;</span><br><span class=\"line\">                    sym &#x3D; check_match (&amp;symtab[symidx]);</span><br><span class=\"line\">                    if (sym !&#x3D; NULL)</span><br><span class=\"line\">                      goto found_it;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              while ((*hasharr++ &amp; 1u) &#x3D;&#x3D; 0);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      symidx &#x3D; SHN_UNDEF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      if (*old_hash &#x3D;&#x3D; 0xffffffff)</span><br><span class=\"line\">        *old_hash &#x3D; _dl_elf_hash (undef_name);</span><br><span class=\"line\">      for (symidx &#x3D; map-&gt;l_buckets[*old_hash % map-&gt;l_nbuckets];</span><br><span class=\"line\">           symidx !&#x3D; STN_UNDEF;</span><br><span class=\"line\">           symidx &#x3D; map-&gt;l_chain[symidx])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          sym &#x3D; check_match (&amp;symtab[symidx]);</span><br><span class=\"line\">          if (sym !&#x3D; NULL)</span><br><span class=\"line\">            goto found_it;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      sym &#x3D; num_versions &#x3D;&#x3D; 1 ? versioned_sym : NULL;</span><br><span class=\"line\">      if (sym !&#x3D; NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    found_it:</span><br><span class=\"line\">      switch (__builtin_expect (ELFW(ST_BIND) (sym-&gt;st_info), STB_GLOBAL))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        case STB_WEAK:</span><br><span class=\"line\">          if (__builtin_expect (GLRO(dl_dynamic_weak), 0))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          if (! result-&gt;s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              result-&gt;s &#x3D; sym;</span><br><span class=\"line\">              result-&gt;m &#x3D; (struct link_map *) map;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case STB_GLOBAL:</span><br><span class=\"line\">        success:</span><br><span class=\"line\">          result-&gt;s &#x3D; sym;</span><br><span class=\"line\">          result-&gt;m &#x3D; (struct link_map *) map;</span><br><span class=\"line\">          return 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        case STB_GNU_UNIQUE:</span><br><span class=\"line\">          ...</span><br><span class=\"line\"></span><br><span class=\"line\">        default:</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  while (++i &lt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先获得该scope下的link_map个数r_nlist和数组r_list 然后进行遍历<br>省略的部分是检查当前link_map是否有符合查找的条件  没有就继续遍历<br>再往下取出当前link_map的符号表symtab和字符串表strtab<br>接下来的if和else条件语句部分都是通过哈希值找到符号表中对应符号列表的索引<br>   如果找到 就通过check_match函数比对符号表中的函数名symtab[symidx]和待查找的函数名undef_name是否相等 如果相等 就找到了该符号并跳转到found_it语句  否则返回null    </p>\n<p>找到了该符号后对符号类型进行判断<br>如果找到的是弱符号STB_WEAK 则保存第一次找到的结果 然后继续循环查找<br>   如果后面没有找到可以覆盖该结果的符号 则返回的就是该第一次保存的结果。<br>   如果找到的是全局符号STB_GLOBAL 则直接返回该结果。</p>\n<p>如果找到的符号是其他类型的符号 则继续循环查找<br>最后 如果什么都没找到 则返回0   </p>\n<p>/elf/dl-lookup.c::check_match</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *__attribute_noinline__</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">check_match</span> <span class=\"params\">(<span class=\"keyword\">const</span> ElfW(Sym) *sym)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (sym != ref &amp;&amp; <span class=\"built_in\">strcmp</span> (strtab + sym-&gt;st_name, undef_name))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *verstab </span>= <span class=\"built_in\">map</span>-&gt;l_versyms;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (version != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      ElfW(Half) ndx = verstab[symidx] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (  (<span class=\"built_in\">map</span>-&gt;l_versions[ndx].hash != version-&gt;hash </span><br><span class=\"line\">                    || <span class=\"built_in\">strcmp</span> (<span class=\"built_in\">map</span>-&gt;l_versions[ndx].name, version-&gt;name)  ) </span><br><span class=\"line\">           &amp;&amp; (version-&gt;hidden || <span class=\"built_in\">map</span>-&gt;l_versions[ndx].hash || (verstab[symidx] &amp; <span class=\"number\">0x8000</span>)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sym;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要有一个版本检查    </p>\n<h5 id=\"1-1-8-符号版本\"><a href=\"#1-1-8-符号版本\" class=\"headerlink\" title=\"..1.1.8. 符号版本\"></a>..1.1.8. 符号版本</h5><p>由于符号版本不是C语言的标准用法 所以它使用了汇编器的一个特殊指示 也就是.symver 指示<br>而GCC中通过内嵌汇编完成  如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__(&quot;.symver original_foo,foo@&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver old_foo,foo@VERS_1.1&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver old_foo1,foo@VERS_1.2&quot;);  </span><br><span class=\"line\">__asm__(&quot;.symver new_foo,foo@@VERS_2.0&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这个例子中定义了foo的四个版本<br>其中的symver的第一个参数为源代码中真正定义的实现 而之后的foo则为对外公开的版本 也就是可以有不同版本的符号<br>其中@@则表示这个是一个默认版本(简单来说 如果一个可执行文件链接的时候foo还没有任何版本控制 但是在运行时foo已经引入了多个版本 则此时的可执行文件可以选择这个@@表示的默认版本符号<br>这里的old_foo就是foo的VERS_1.1版本 如果在so中定义了old_foo 那么这个old_foo就是这个foo的VERS_1.1版本的实现<br>  如果没有定义 可以通过old_foo来引用这个特殊版本的foo符号的定义   </p>\n<h5 id=\"1-1-9-强弱符号\"><a href=\"#1-1-9-强弱符号\" class=\"headerlink\" title=\"..1.1.9. 强弱符号\"></a>..1.1.9. 强弱符号</h5><p>针对强弱符号的概念 链接器就会按照如下规则处理与选择被多次定义的全局符号  </p>\n<ul>\n<li>规则1: 不允许强符号被多次定义（即不同的目标文件中不能有同名的强符号）  <ul>\n<li>如果有多个强符号定义 则链接器报符号重复定义错误   </li>\n</ul>\n</li>\n<li>规则2: 如果一个符号在某个目标文件中是强符号  在其他文件中都是弱符号 那么选择强符号   </li>\n<li>规则3: 如果一个符号在所有目标文件中都是弱符号 那么选择其中占用空间最大的一个 <ul>\n<li>比如目标文件A定义全局变量global为int型 占4个字节</li>\n<li>目标文件B定义global为doulbe型 占8个字节 </li>\n<li>那么目标文件A和B链接后 符号global占8个字节（尽量不要使用多个不同类型的弱符号,否则容易导致很难发现的程序错误）  </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-1-10-强弱引用\"><a href=\"#1-1-10-强弱引用\" class=\"headerlink\" title=\"..1.1.10. 强弱引用\"></a>..1.1.10. 强弱引用</h5><p>我们所看到的对外部目标文件的符号引用在目标文件被最终链接成可执行文件时  它们必须要被正确决议<br>如果没有找到该符号的定义 链接器就会报符号未定义错误 这种被称为强引用（Strong Reference）<br>与之相对应还有一种弱引用（Weak Reference）<br>在处理弱引用时 如果该符号有定义  则链接器将该符号的引用决议  如果该符号未被定义  则链接器对于该引用不报错<br>链接器处理强引用和弱引用的过程几乎一样  只是对于未定义的弱引用  链接器不认为它是一个错误<br>一般对于未定义的弱引用  链接器默认其为0  或者是一个特殊的值  以便于程序代码能够识别  </p>\n<h5 id=\"1-1-11-符号的作用域\"><a href=\"#1-1-11-符号的作用域\" class=\"headerlink\" title=\"..1.1.11. 符号的作用域\"></a>..1.1.11. 符号的作用域</h5><p>C++中non-member function template模板的代码是具有不同于普通的函数定义的<br>C++标准里对于在global scope声明对象的链接描述:  </p>\n<blockquote>\n<p>[ISO/IEE 14882:2011]A name declared in a namespace scope without a storage-class-specifier has external linkage unless it has internal linkage because of a previous declaration and provided it is not declared const. Objects declared const and not explicitly declared extern have internal linkage.</p>\n</blockquote>\n<p>例如声明int max(int,int)是具有外部链接的符号    </p>\n<p>C++中非成员函数模板(non-member function template)的链接不同于普通的函数   </p>\n<blockquote>\n<p>[ISO/IEE 14882:2014]A template name has linkage (3.5). A non-member function template can have internal linkage; any other template name shall have external linkage. Specializations (explicit or implicit) of a template that has internal linkage are distinct from all specializations in other translation units.</p>\n</blockquote>\n<p>即通过模板实现的max(const T&amp;,const T&amp;)是具有内部链接internal linkage的符号<br>所以在链接时对于max的调用查找只能够找到自己目标文件中的符号名(内部链接外部不可见) 不会和外部链接产生重定义冲突  </p>\n<h3 id=\"2-动态库装载过程\"><a href=\"#2-动态库装载过程\" class=\"headerlink\" title=\"..2. 动态库装载过程\"></a>..2. 动态库装载过程</h3><h4 id=\"2-1-ELF的辅助向量-AUXV\"><a href=\"#2-1-ELF的辅助向量-AUXV\" class=\"headerlink\" title=\"..2.1. ELF的辅助向量 AUXV\"></a>..2.1. ELF的辅助向量 AUXV</h4><p>main函数的第三个参数  char* envp[]    </p>\n<h4 id=\"2-2-ELF的装载有三种方法\"><a href=\"#2-2-ELF的装载有三种方法\" class=\"headerlink\" title=\"..2.2. ELF的装载有三种方法\"></a>..2.2. ELF的装载有三种方法</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>load_binary</td>\n<td>通过读存放在可执行文件中的信息为当前进程建立一个新的执行环境</td>\n</tr>\n<tr>\n<td>load_shlib</td>\n<td>用于动态的把一个共享库捆绑到一个已经在运行的进程, 这是由uselib()系统调用激活的</td>\n</tr>\n<tr>\n<td>core_dump</td>\n<td>在名为core的文件中, 存放当前进程的执行上下文. 这个文件通常是在进程接收到一个缺省操作为”dump”的信号时被创建的, 其格式取决于被执行程序的可执行类型</td>\n</tr>\n</tbody></table>\n</font>"},{"title":"基于共享内存的对象池管理方案","date":"2020-02-06T16:00:00.000Z","author":"yawei.zhang","_content":"\n### ..1. 目录  \n\n\n### 通用的对象池方案\n该方案本质上一个简单分离存储的内存分配方案:  \n分配器维护多个空闲链表, 每个空闲链表包含大小相等的空闲块 每个块的大小为这个大小类中最大元素的大小, 不分割不合并.    \n\n\n![buddy_system](/images/objpools.png)  \n\n#### 数据结构定义  \n```\n对象池管理器\n  [对象A条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象B条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象C条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象D条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n```\n\n单个条目指向的起始地址结构:\n```\nflag|flag|flag : ...  FENCE SIZE: NODE SIZE :   FENCE SIZE: NODE SIZE :   ...  \n```\n条目指向的地址会首先保存flag标志标明该对象是否在使用中, 用于请求和释放时候的判定标志\nNODE SIZE会进行8字节对齐, FENCE SIZE也选择8字节 这样整个对象池的地址都是保证8字节对齐的   \nFENCE写入特殊固定的魔法数值 用于溢出检测   \n分配出去的对象 NODE SIZE的起始地址即为对象的地址\n空闲的对象, 其NODE SIZE的第一个U32保存的是下一个空闲内存 \n```\n: NODE SIZE: 对应下面结构\n: FREE IDX, NODE SIZE- FENCE SIZE: \n```\n<!-- more -->\n#### 初始化\n我们首先通过静态代码定义好对应每种对象的条目ID, 并记录(注册)该条目的条目信息,  这时可以得到对象池管理器占用的大小, 以及每个对象池的总长, 以保证共享内存在分配的时候分配足够的内存完成初始化.   \n在对象池管理器的内存之后 开始逐个条目初始化对象池\n首先对FLAG标志段的内存清零, 即所有flag都是空闲  \n然后从FLAG后开始进行空闲对象池的初始化 \n1. 设置FENCE数值 例如0XBEAFBEAFBEAFBEAF  \n2. 设置FREE IDX 指向下一个对象的IDX . 即obj[0].free_idx =1;  obj[1].free_idx =2; 依次初始化.  最后一个对象的空闲指针指向一个特殊值(-1)表示没有下一个  \n3. 设置对象池管理器中该条目的空闲对象下标ID(空闲链表的HEAD)为第一个对象0  \n\n#### 分配   \n检查空闲链表是否为空(指向-1), 如果不是则把第一个对象摘除(设置head为该空闲对象的的next free idx), 并重新设置该对象前后的FENCE, 以及该对象所在的FLAG标志位使用中   \n性能是O(1) \n\n#### 回收  \n通过该对象的条目信息找到对象池的起始地址, 计算对象所在的IDX\n检查FLAG标记是否是使用中\n检查FENCE是否被覆盖(溢出)\n\n加入空闲链表: 空闲HEAD指向该对象, 该对象的空闲索引指向原HEAD.\n设置FLAG标记  \n\n性能是O(1)\n\n#### 虚函数表的重建  \n对于内存池管理器中存在包含有虚函数的对象池, 遍历已分配的对象, 并设置该对象起始内存的第一个8字节为真正的虚函数表的地址.\nTIPS:\n  只允许单继承, 多继承情况下虚函数表的指针位置和个数难以确定(没有相应的语言标准 跟随编译器实现)  \n  空闲索引ID如果扩增为8字节并且在分配出去的内存保留, 则可以减少resume时的遍历个数,  即和已分配个数一致 而不是遍历条目中的所有对象.  会牺牲一点内存   \n\n### 协助使用的容器类\n\n#### KV容器   \n* 基于定长内存实现一个HASH MAP,  实现一个有公共溢出区的的HASH map\n  * 桶的数量固定, 溢出区留够充分的空间,  (一般hash的load_factor负载因子大约在0.75\\~0.85, 但因为这个实现没有扩展能力需要远超过这个因子大小)   \n    * 双倍容器大小的桶数量\n    * 容器大小往后的桶按照空闲对象池的处理方式做成单向的空闲链表  \n    * 桶包含前后指针, 遇到冲突时从空闲池中获取一个新桶\n    * 释放时候从桶的双向链表中摘除并交换给空闲链表  \n\n#### 数组容器\n* 容器的最大大小是固定的, 但动态调整当前已使用大小.  \n  * 类似vector reserve足够的大小时的情景, 比std:array更易用   \n\n\n### 与动态内存分配器方案简单对比:   \n\n| 对比内容     | 定长内存(对象)池分配方案                                                                             | 动态内存分配器方案                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 内存利用率   | 低, 不同大小甚至不同类型的内存无法相互替换使用, 也不能通过合并来满足更大的内存分配请求               | 高, 一般都会进行切分与合并空闲块来减少内部碎片与外部碎片, 并且在合适的时候进行内存收缩                                                                                |\n| 分配性能     | 高, 稳定且很小的常数                                                                                 | 高, 一般能达到接近常数, 最坏情况LGN                                                                                                                                   |\n| 适应场景     | 固定的使用场景, 类型大小固定, 上限确定并且有限, 通常能达到接近上限而不会超过上限的水平               | 几乎任意场景, 例如STL容器, LUA脚本虚拟机, protobuff                                                                                                                   |\n| 峰值使用预估 | 好评估, 从选用该方案前的业务侧就能确定上限, 在代码编译期或者系统运行前读到配置后就一次性计算好总大小 | 无法简单使用对象池的领域往往业务侧就只能给出宽松的上限, 通过这些宽松的上限直接计算出的总内存量一般在实际运行时只具备参考意义,  需要结合生产环境的实际测试进行综合评估 |\n| 实现复杂度   | 低, 简单分离存储模型                                                                                 | 高, 分离适配模型                                                                                                                                                      |\n| 调试难度     | 低, 内存地址和类型固定映射, 并且方便扩充管理信息                                                     | 高, 内存地址和类型无关                                                                                                                                                |\n\n\n\n\n\n\n","source":"_posts/2020-02-03-shared-memory-resume-overview.md","raw":"---\ntitle: 基于共享内存的对象池管理方案 \ndate: 2020-02-07\ncategories: develop \nauthor: yawei.zhang \n---\n\n### ..1. 目录  \n\n\n### 通用的对象池方案\n该方案本质上一个简单分离存储的内存分配方案:  \n分配器维护多个空闲链表, 每个空闲链表包含大小相等的空闲块 每个块的大小为这个大小类中最大元素的大小, 不分割不合并.    \n\n\n![buddy_system](/images/objpools.png)  \n\n#### 数据结构定义  \n```\n对象池管理器\n  [对象A条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象B条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象C条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n  [对象D条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   \n```\n\n单个条目指向的起始地址结构:\n```\nflag|flag|flag : ...  FENCE SIZE: NODE SIZE :   FENCE SIZE: NODE SIZE :   ...  \n```\n条目指向的地址会首先保存flag标志标明该对象是否在使用中, 用于请求和释放时候的判定标志\nNODE SIZE会进行8字节对齐, FENCE SIZE也选择8字节 这样整个对象池的地址都是保证8字节对齐的   \nFENCE写入特殊固定的魔法数值 用于溢出检测   \n分配出去的对象 NODE SIZE的起始地址即为对象的地址\n空闲的对象, 其NODE SIZE的第一个U32保存的是下一个空闲内存 \n```\n: NODE SIZE: 对应下面结构\n: FREE IDX, NODE SIZE- FENCE SIZE: \n```\n<!-- more -->\n#### 初始化\n我们首先通过静态代码定义好对应每种对象的条目ID, 并记录(注册)该条目的条目信息,  这时可以得到对象池管理器占用的大小, 以及每个对象池的总长, 以保证共享内存在分配的时候分配足够的内存完成初始化.   \n在对象池管理器的内存之后 开始逐个条目初始化对象池\n首先对FLAG标志段的内存清零, 即所有flag都是空闲  \n然后从FLAG后开始进行空闲对象池的初始化 \n1. 设置FENCE数值 例如0XBEAFBEAFBEAFBEAF  \n2. 设置FREE IDX 指向下一个对象的IDX . 即obj[0].free_idx =1;  obj[1].free_idx =2; 依次初始化.  最后一个对象的空闲指针指向一个特殊值(-1)表示没有下一个  \n3. 设置对象池管理器中该条目的空闲对象下标ID(空闲链表的HEAD)为第一个对象0  \n\n#### 分配   \n检查空闲链表是否为空(指向-1), 如果不是则把第一个对象摘除(设置head为该空闲对象的的next free idx), 并重新设置该对象前后的FENCE, 以及该对象所在的FLAG标志位使用中   \n性能是O(1) \n\n#### 回收  \n通过该对象的条目信息找到对象池的起始地址, 计算对象所在的IDX\n检查FLAG标记是否是使用中\n检查FENCE是否被覆盖(溢出)\n\n加入空闲链表: 空闲HEAD指向该对象, 该对象的空闲索引指向原HEAD.\n设置FLAG标记  \n\n性能是O(1)\n\n#### 虚函数表的重建  \n对于内存池管理器中存在包含有虚函数的对象池, 遍历已分配的对象, 并设置该对象起始内存的第一个8字节为真正的虚函数表的地址.\nTIPS:\n  只允许单继承, 多继承情况下虚函数表的指针位置和个数难以确定(没有相应的语言标准 跟随编译器实现)  \n  空闲索引ID如果扩增为8字节并且在分配出去的内存保留, 则可以减少resume时的遍历个数,  即和已分配个数一致 而不是遍历条目中的所有对象.  会牺牲一点内存   \n\n### 协助使用的容器类\n\n#### KV容器   \n* 基于定长内存实现一个HASH MAP,  实现一个有公共溢出区的的HASH map\n  * 桶的数量固定, 溢出区留够充分的空间,  (一般hash的load_factor负载因子大约在0.75\\~0.85, 但因为这个实现没有扩展能力需要远超过这个因子大小)   \n    * 双倍容器大小的桶数量\n    * 容器大小往后的桶按照空闲对象池的处理方式做成单向的空闲链表  \n    * 桶包含前后指针, 遇到冲突时从空闲池中获取一个新桶\n    * 释放时候从桶的双向链表中摘除并交换给空闲链表  \n\n#### 数组容器\n* 容器的最大大小是固定的, 但动态调整当前已使用大小.  \n  * 类似vector reserve足够的大小时的情景, 比std:array更易用   \n\n\n### 与动态内存分配器方案简单对比:   \n\n| 对比内容     | 定长内存(对象)池分配方案                                                                             | 动态内存分配器方案                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 内存利用率   | 低, 不同大小甚至不同类型的内存无法相互替换使用, 也不能通过合并来满足更大的内存分配请求               | 高, 一般都会进行切分与合并空闲块来减少内部碎片与外部碎片, 并且在合适的时候进行内存收缩                                                                                |\n| 分配性能     | 高, 稳定且很小的常数                                                                                 | 高, 一般能达到接近常数, 最坏情况LGN                                                                                                                                   |\n| 适应场景     | 固定的使用场景, 类型大小固定, 上限确定并且有限, 通常能达到接近上限而不会超过上限的水平               | 几乎任意场景, 例如STL容器, LUA脚本虚拟机, protobuff                                                                                                                   |\n| 峰值使用预估 | 好评估, 从选用该方案前的业务侧就能确定上限, 在代码编译期或者系统运行前读到配置后就一次性计算好总大小 | 无法简单使用对象池的领域往往业务侧就只能给出宽松的上限, 通过这些宽松的上限直接计算出的总内存量一般在实际运行时只具备参考意义,  需要结合生产环境的实际测试进行综合评估 |\n| 实现复杂度   | 低, 简单分离存储模型                                                                                 | 高, 分离适配模型                                                                                                                                                      |\n| 调试难度     | 低, 内存地址和类型固定映射, 并且方便扩充管理信息                                                     | 高, 内存地址和类型无关                                                                                                                                                |\n\n\n\n\n\n\n","slug":"2020-02-03-shared-memory-resume-overview","published":1,"updated":"2020-03-16T12:50:24.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej800197w5h4rp11ui2","content":"<h3><span id=\"1-目录\">..1. 目录</span></h3><h3><span id=\"通用的对象池方案\">通用的对象池方案</span></h3><p>该方案本质上一个简单分离存储的内存分配方案:<br>分配器维护多个空闲链表, 每个空闲链表包含大小相等的空闲块 每个块的大小为这个大小类中最大元素的大小, 不分割不合并.    </p>\n<p><img src=\"/images/objpools.png\" alt=\"buddy_system\">  </p>\n<h4><span id=\"数据结构定义\">数据结构定义</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象池管理器</span><br><span class=\"line\">  [对象A条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象B条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象C条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象D条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数</span><br></pre></td></tr></table></figure>\n\n<p>单个条目指向的起始地址结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag|flag|flag : ...  FENCE SIZE: NODE SIZE :   FENCE SIZE: NODE SIZE :   ...</span><br></pre></td></tr></table></figure>\n<p>条目指向的地址会首先保存flag标志标明该对象是否在使用中, 用于请求和释放时候的判定标志<br>NODE SIZE会进行8字节对齐, FENCE SIZE也选择8字节 这样整个对象池的地址都是保证8字节对齐的<br>FENCE写入特殊固定的魔法数值 用于溢出检测<br>分配出去的对象 NODE SIZE的起始地址即为对象的地址<br>空闲的对象, 其NODE SIZE的第一个U32保存的是下一个空闲内存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: NODE SIZE: 对应下面结构</span><br><span class=\"line\">: FREE IDX, NODE SIZE- FENCE SIZE:</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4><span id=\"初始化\">初始化</span></h4><p>我们首先通过静态代码定义好对应每种对象的条目ID, 并记录(注册)该条目的条目信息,  这时可以得到对象池管理器占用的大小, 以及每个对象池的总长, 以保证共享内存在分配的时候分配足够的内存完成初始化.<br>在对象池管理器的内存之后 开始逐个条目初始化对象池<br>首先对FLAG标志段的内存清零, 即所有flag都是空闲<br>然后从FLAG后开始进行空闲对象池的初始化 </p>\n<ol>\n<li>设置FENCE数值 例如0XBEAFBEAFBEAFBEAF  </li>\n<li>设置FREE IDX 指向下一个对象的IDX . 即obj[0].free_idx =1;  obj[1].free_idx =2; 依次初始化.  最后一个对象的空闲指针指向一个特殊值(-1)表示没有下一个  </li>\n<li>设置对象池管理器中该条目的空闲对象下标ID(空闲链表的HEAD)为第一个对象0  </li>\n</ol>\n<h4><span id=\"分配\">分配</span></h4><p>检查空闲链表是否为空(指向-1), 如果不是则把第一个对象摘除(设置head为该空闲对象的的next free idx), 并重新设置该对象前后的FENCE, 以及该对象所在的FLAG标志位使用中<br>性能是O(1) </p>\n<h4><span id=\"回收\">回收</span></h4><p>通过该对象的条目信息找到对象池的起始地址, 计算对象所在的IDX<br>检查FLAG标记是否是使用中<br>检查FENCE是否被覆盖(溢出)</p>\n<p>加入空闲链表: 空闲HEAD指向该对象, 该对象的空闲索引指向原HEAD.<br>设置FLAG标记  </p>\n<p>性能是O(1)</p>\n<h4><span id=\"虚函数表的重建\">虚函数表的重建</span></h4><p>对于内存池管理器中存在包含有虚函数的对象池, 遍历已分配的对象, 并设置该对象起始内存的第一个8字节为真正的虚函数表的地址.<br>TIPS:<br>  只允许单继承, 多继承情况下虚函数表的指针位置和个数难以确定(没有相应的语言标准 跟随编译器实现)<br>  空闲索引ID如果扩增为8字节并且在分配出去的内存保留, 则可以减少resume时的遍历个数,  即和已分配个数一致 而不是遍历条目中的所有对象.  会牺牲一点内存   </p>\n<h3><span id=\"协助使用的容器类\">协助使用的容器类</span></h3><h4><span id=\"kv容器\">KV容器</span></h4><ul>\n<li>基于定长内存实现一个HASH MAP,  实现一个有公共溢出区的的HASH map<ul>\n<li>桶的数量固定, 溢出区留够充分的空间,  (一般hash的load_factor负载因子大约在0.75~0.85, 但因为这个实现没有扩展能力需要远超过这个因子大小)   <ul>\n<li>双倍容器大小的桶数量</li>\n<li>容器大小往后的桶按照空闲对象池的处理方式做成单向的空闲链表  </li>\n<li>桶包含前后指针, 遇到冲突时从空闲池中获取一个新桶</li>\n<li>释放时候从桶的双向链表中摘除并交换给空闲链表  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"数组容器\">数组容器</span></h4><ul>\n<li>容器的最大大小是固定的, 但动态调整当前已使用大小.  <ul>\n<li>类似vector reserve足够的大小时的情景, 比std:array更易用   </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"与动态内存分配器方案简单对比\">与动态内存分配器方案简单对比:</span></h3><table>\n<thead>\n<tr>\n<th>对比内容</th>\n<th>定长内存(对象)池分配方案</th>\n<th>动态内存分配器方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存利用率</td>\n<td>低, 不同大小甚至不同类型的内存无法相互替换使用, 也不能通过合并来满足更大的内存分配请求</td>\n<td>高, 一般都会进行切分与合并空闲块来减少内部碎片与外部碎片, 并且在合适的时候进行内存收缩</td>\n</tr>\n<tr>\n<td>分配性能</td>\n<td>高, 稳定且很小的常数</td>\n<td>高, 一般能达到接近常数, 最坏情况LGN</td>\n</tr>\n<tr>\n<td>适应场景</td>\n<td>固定的使用场景, 类型大小固定, 上限确定并且有限, 通常能达到接近上限而不会超过上限的水平</td>\n<td>几乎任意场景, 例如STL容器, LUA脚本虚拟机, protobuff</td>\n</tr>\n<tr>\n<td>峰值使用预估</td>\n<td>好评估, 从选用该方案前的业务侧就能确定上限, 在代码编译期或者系统运行前读到配置后就一次性计算好总大小</td>\n<td>无法简单使用对象池的领域往往业务侧就只能给出宽松的上限, 通过这些宽松的上限直接计算出的总内存量一般在实际运行时只具备参考意义,  需要结合生产环境的实际测试进行综合评估</td>\n</tr>\n<tr>\n<td>实现复杂度</td>\n<td>低, 简单分离存储模型</td>\n<td>高, 分离适配模型</td>\n</tr>\n<tr>\n<td>调试难度</td>\n<td>低, 内存地址和类型固定映射, 并且方便扩充管理信息</td>\n<td>高, 内存地址和类型无关</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-目录\"><a href=\"#1-目录\" class=\"headerlink\" title=\"..1. 目录\"></a>..1. 目录</h3><h3 id=\"通用的对象池方案\"><a href=\"#通用的对象池方案\" class=\"headerlink\" title=\"通用的对象池方案\"></a>通用的对象池方案</h3><p>该方案本质上一个简单分离存储的内存分配方案:<br>分配器维护多个空闲链表, 每个空闲链表包含大小相等的空闲块 每个块的大小为这个大小类中最大元素的大小, 不分割不合并.    </p>\n<p><img src=\"/images/objpools.png\" alt=\"buddy_system\">  </p>\n<h4 id=\"数据结构定义\"><a href=\"#数据结构定义\" class=\"headerlink\" title=\"数据结构定义\"></a>数据结构定义</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对象池管理器</span><br><span class=\"line\">  [对象A条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象B条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象C条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数   </span><br><span class=\"line\">  [对象D条目IDX]: 对象是否包含虚函数(是否需要重建虚函数表):  对象类型(对应条目IDX): 对象大小: 对象个数: 该条目总长: 条目对应内存地址:  条目对应对象起始地址: 空闲对象下标ID : 已分配计数</span><br></pre></td></tr></table></figure>\n\n<p>单个条目指向的起始地址结构:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag|flag|flag : ...  FENCE SIZE: NODE SIZE :   FENCE SIZE: NODE SIZE :   ...</span><br></pre></td></tr></table></figure>\n<p>条目指向的地址会首先保存flag标志标明该对象是否在使用中, 用于请求和释放时候的判定标志<br>NODE SIZE会进行8字节对齐, FENCE SIZE也选择8字节 这样整个对象池的地址都是保证8字节对齐的<br>FENCE写入特殊固定的魔法数值 用于溢出检测<br>分配出去的对象 NODE SIZE的起始地址即为对象的地址<br>空闲的对象, 其NODE SIZE的第一个U32保存的是下一个空闲内存 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">: NODE SIZE: 对应下面结构</span><br><span class=\"line\">: FREE IDX, NODE SIZE- FENCE SIZE:</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>我们首先通过静态代码定义好对应每种对象的条目ID, 并记录(注册)该条目的条目信息,  这时可以得到对象池管理器占用的大小, 以及每个对象池的总长, 以保证共享内存在分配的时候分配足够的内存完成初始化.<br>在对象池管理器的内存之后 开始逐个条目初始化对象池<br>首先对FLAG标志段的内存清零, 即所有flag都是空闲<br>然后从FLAG后开始进行空闲对象池的初始化 </p>\n<ol>\n<li>设置FENCE数值 例如0XBEAFBEAFBEAFBEAF  </li>\n<li>设置FREE IDX 指向下一个对象的IDX . 即obj[0].free_idx =1;  obj[1].free_idx =2; 依次初始化.  最后一个对象的空闲指针指向一个特殊值(-1)表示没有下一个  </li>\n<li>设置对象池管理器中该条目的空闲对象下标ID(空闲链表的HEAD)为第一个对象0  </li>\n</ol>\n<h4 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h4><p>检查空闲链表是否为空(指向-1), 如果不是则把第一个对象摘除(设置head为该空闲对象的的next free idx), 并重新设置该对象前后的FENCE, 以及该对象所在的FLAG标志位使用中<br>性能是O(1) </p>\n<h4 id=\"回收\"><a href=\"#回收\" class=\"headerlink\" title=\"回收\"></a>回收</h4><p>通过该对象的条目信息找到对象池的起始地址, 计算对象所在的IDX<br>检查FLAG标记是否是使用中<br>检查FENCE是否被覆盖(溢出)</p>\n<p>加入空闲链表: 空闲HEAD指向该对象, 该对象的空闲索引指向原HEAD.<br>设置FLAG标记  </p>\n<p>性能是O(1)</p>\n<h4 id=\"虚函数表的重建\"><a href=\"#虚函数表的重建\" class=\"headerlink\" title=\"虚函数表的重建\"></a>虚函数表的重建</h4><p>对于内存池管理器中存在包含有虚函数的对象池, 遍历已分配的对象, 并设置该对象起始内存的第一个8字节为真正的虚函数表的地址.<br>TIPS:<br>  只允许单继承, 多继承情况下虚函数表的指针位置和个数难以确定(没有相应的语言标准 跟随编译器实现)<br>  空闲索引ID如果扩增为8字节并且在分配出去的内存保留, 则可以减少resume时的遍历个数,  即和已分配个数一致 而不是遍历条目中的所有对象.  会牺牲一点内存   </p>\n<h3 id=\"协助使用的容器类\"><a href=\"#协助使用的容器类\" class=\"headerlink\" title=\"协助使用的容器类\"></a>协助使用的容器类</h3><h4 id=\"KV容器\"><a href=\"#KV容器\" class=\"headerlink\" title=\"KV容器\"></a>KV容器</h4><ul>\n<li>基于定长内存实现一个HASH MAP,  实现一个有公共溢出区的的HASH map<ul>\n<li>桶的数量固定, 溢出区留够充分的空间,  (一般hash的load_factor负载因子大约在0.75~0.85, 但因为这个实现没有扩展能力需要远超过这个因子大小)   <ul>\n<li>双倍容器大小的桶数量</li>\n<li>容器大小往后的桶按照空闲对象池的处理方式做成单向的空闲链表  </li>\n<li>桶包含前后指针, 遇到冲突时从空闲池中获取一个新桶</li>\n<li>释放时候从桶的双向链表中摘除并交换给空闲链表  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数组容器\"><a href=\"#数组容器\" class=\"headerlink\" title=\"数组容器\"></a>数组容器</h4><ul>\n<li>容器的最大大小是固定的, 但动态调整当前已使用大小.  <ul>\n<li>类似vector reserve足够的大小时的情景, 比std:array更易用   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"与动态内存分配器方案简单对比\"><a href=\"#与动态内存分配器方案简单对比\" class=\"headerlink\" title=\"与动态内存分配器方案简单对比:\"></a>与动态内存分配器方案简单对比:</h3><table>\n<thead>\n<tr>\n<th>对比内容</th>\n<th>定长内存(对象)池分配方案</th>\n<th>动态内存分配器方案</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存利用率</td>\n<td>低, 不同大小甚至不同类型的内存无法相互替换使用, 也不能通过合并来满足更大的内存分配请求</td>\n<td>高, 一般都会进行切分与合并空闲块来减少内部碎片与外部碎片, 并且在合适的时候进行内存收缩</td>\n</tr>\n<tr>\n<td>分配性能</td>\n<td>高, 稳定且很小的常数</td>\n<td>高, 一般能达到接近常数, 最坏情况LGN</td>\n</tr>\n<tr>\n<td>适应场景</td>\n<td>固定的使用场景, 类型大小固定, 上限确定并且有限, 通常能达到接近上限而不会超过上限的水平</td>\n<td>几乎任意场景, 例如STL容器, LUA脚本虚拟机, protobuff</td>\n</tr>\n<tr>\n<td>峰值使用预估</td>\n<td>好评估, 从选用该方案前的业务侧就能确定上限, 在代码编译期或者系统运行前读到配置后就一次性计算好总大小</td>\n<td>无法简单使用对象池的领域往往业务侧就只能给出宽松的上限, 通过这些宽松的上限直接计算出的总内存量一般在实际运行时只具备参考意义,  需要结合生产环境的实际测试进行综合评估</td>\n</tr>\n<tr>\n<td>实现复杂度</td>\n<td>低, 简单分离存储模型</td>\n<td>高, 分离适配模型</td>\n</tr>\n<tr>\n<td>调试难度</td>\n<td>低, 内存地址和类型固定映射, 并且方便扩充管理信息</td>\n<td>高, 内存地址和类型无关</td>\n</tr>\n</tbody></table>"},{"title":"内存分配器","date":"2020-05-08T16:00:00.000Z","author":"yawei.zhang","_content":"\n## 内存分配器核心思想和算法\n\n### 内存管理策略   \n\n#### Sequential Fit  (连续适配)\n 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  \n\n\n\n#### Segregated List (分离列表) \n 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  \n\n* Buddy System (Sequential Fit变种)  \n  * 内部碎片化问题比较严重   \n  * Binary Buddies  \n  * Fibonacci Buddies  \n  * Weighted Buddies   \n  \n#### Indexed  Fit  \n 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。\n* 使用Balanced Tree的Best Fit allocator\n* 使用Cartesian tree 的Stephenson Fast-Fit allocator\n* Bitmap Fit (Indexed Fit 变种)\n  Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  \n  \n### 路径匹配策略  \n对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    \n\n* Best fit:   \n  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.   \n  最佳匹配:  \n  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.  \n  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  \n\n\n* Worst fit:  \n  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.  \n  最不适合匹配  \n  内存管理器总是选择获得的最大的那个未分配内存块. \n  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)  \n  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  \n\n* First fit:  \n  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.  \n  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.   \n  同上例中, 首先匹配会从14k的block中分配12k的请求.   \n  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  \n\n\n\n#### TLSF: a New Dynamic Memory Allocator for Real-Time Systems   \n通过一组链表来管理不同大小内存块的内存分配算法。\n适用环境和要求:\n内存分配/释放的执行时间可预期，可接受的。由于RTOS对指令的执行时间有严格要求，所以常常采用静态内存分配的方法，以获得一个可以预期的执行时间。\n内存分配算法的碎片化程度要低，这是由于RTOS往往长时间执行，碎片化程度高会导致内存分配失败。\n实时系统动态内存算法\n可信的执行环境，Trusted Environment，应用不会故意破坏数据或者窃取数据。\n有限的物理内存。\n没有物理MMU来支持虚拟内存。\n\n核心概念: Two Level\n基本的Segregated Fit算法是使用一组链表，每个链表只包含特定长度范围来的空闲块的方式来管理空闲块的，这样链表数组的长度可能会很大。如下图，TLSF为了简化查找定位过程，使用了两层链表。第一层，将空闲内存块的大小根据2的幂进行分类，如（16、32、64...）。第二层链表在第一层的基础上，按照一定的间隔，线性分段。比如2的6次方这一段，分为4个小区间【64,80），【80,96），【96,112），【112，128）.每一级的链表都有一个bitmap用于标记对应的链表中是否有内存块。比如第一级别bitmap的后4bit位0100，即2的6次方这个区间有空闲块。对应的第二级链表的bitmap位0010及【80,96）这个区间有空闲块，即下面的89 Byte。\n\n\n\n策略: \nImmediate coalescing，立即合并，当内存块被释放后，立即与相邻的空闲内存块合并，以获得一个更大的空闲块，插入到链表的相应位置。这样可以减少碎片化。\nSplitting threshold，分割阈值，最小可分配的内存块大小为16字节，应用一般不会分配一些基本的数据结构，如int、char等。限定最小可分配大小为16字节，这样可以在空闲的内存块中存储一些管理信息。\nGood-fit strategy，TLSF会尽可能的返回一个最小的、能够满足需求的内存块。\nSame strategy for all block sizes，对于不同大小的内存请求，TLSF只有一个分配策略，实现相对简单，执行时间可以预期。相应的dlmalloc根据所请求的内存大小不同，有多达4种内存分配策略。\nMemory is not cleaned-up，分配个应用的内存没有被请0.\n\n特点:\n可以预期的分配执行时间，无论对于多达的内存分配请求，TLSF可以在限定的时间内完成分配。\n碎片化程度低。\n\n\n#### mimalloc:\n\n\n#### 多线程\n\n* 局部化, 本地缓存/链表  \n* 注意false shared  \n* 跨线程队列 最大本地缓存 \n\n#### 内存安全   \n管理数据和被管理内存分离\nbuddy system\npages 管理  \n\n可信的执行环境Trusted Environment，应用不会故意破坏数据或者窃取数据  \n有限的物理内存  \n有限的物理地址  \n没有物理MMU来支持虚拟内存\n\n#### 开源内存分配器  \n* dlmalloc \n* tcmalloc  \n* jemalloc  \n* Hoard\n* minimalloc\n* TLSF: https://github.com/OlegHahm/tlsf    \n\n#### 援引\n[jemalloc深入分析 PDF](https://github.com/everschen/tools/blob/master/DOC/Jemalloc.pdf)  \n[jemalloc 2015演讲视频 tick tock, malloc needs a clock 背景和初始设计思想介绍](http://applicative.acm.org/2015/applicative.acm.org/speaker-JasonEvans.html)   \n[jemalloc facebook工程贴](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919)   \n[BSDcan paper 2006](http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf)   \n[On the Impact of Memory Allocationon High-Performance Query Processing](https://dl.acm.org/doi/abs/10.1145/3329785.3329918)   \n[How tcmalloc Works](https://www.jamesgolick.com/2013/5/19/how-tcmalloc-works.html)   \n[Chromimum Project: Out of memory handling](https://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling)  \n[Scalable Memory Allocation TBB](https://rd.springer.com/content/pdf/10.1007%2F978-1-4842-4398-5_7.pdf)  \n[ptmalloc,tcmalloc和jemalloc内存分配策略研究](https://cloud.tencent.com/developer/article/1173720)   \n\n","source":"_posts/2020-05-09-memory_alloctor.md","raw":"---\ntitle: 内存分配器\ndate: 2020-05-09\ncategories: develop \nauthor: yawei.zhang \n---\n\n## 内存分配器核心思想和算法\n\n### 内存管理策略   \n\n#### Sequential Fit  (连续适配)\n 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  \n\n\n\n#### Segregated List (分离列表) \n 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  \n\n* Buddy System (Sequential Fit变种)  \n  * 内部碎片化问题比较严重   \n  * Binary Buddies  \n  * Fibonacci Buddies  \n  * Weighted Buddies   \n  \n#### Indexed  Fit  \n 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。\n* 使用Balanced Tree的Best Fit allocator\n* 使用Cartesian tree 的Stephenson Fast-Fit allocator\n* Bitmap Fit (Indexed Fit 变种)\n  Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  \n  \n### 路径匹配策略  \n对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    \n\n* Best fit:   \n  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.   \n  最佳匹配:  \n  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.  \n  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  \n\n\n* Worst fit:  \n  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.  \n  最不适合匹配  \n  内存管理器总是选择获得的最大的那个未分配内存块. \n  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)  \n  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  \n\n* First fit:  \n  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.  \n  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.   \n  同上例中, 首先匹配会从14k的block中分配12k的请求.   \n  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  \n\n\n\n#### TLSF: a New Dynamic Memory Allocator for Real-Time Systems   \n通过一组链表来管理不同大小内存块的内存分配算法。\n适用环境和要求:\n内存分配/释放的执行时间可预期，可接受的。由于RTOS对指令的执行时间有严格要求，所以常常采用静态内存分配的方法，以获得一个可以预期的执行时间。\n内存分配算法的碎片化程度要低，这是由于RTOS往往长时间执行，碎片化程度高会导致内存分配失败。\n实时系统动态内存算法\n可信的执行环境，Trusted Environment，应用不会故意破坏数据或者窃取数据。\n有限的物理内存。\n没有物理MMU来支持虚拟内存。\n\n核心概念: Two Level\n基本的Segregated Fit算法是使用一组链表，每个链表只包含特定长度范围来的空闲块的方式来管理空闲块的，这样链表数组的长度可能会很大。如下图，TLSF为了简化查找定位过程，使用了两层链表。第一层，将空闲内存块的大小根据2的幂进行分类，如（16、32、64...）。第二层链表在第一层的基础上，按照一定的间隔，线性分段。比如2的6次方这一段，分为4个小区间【64,80），【80,96），【96,112），【112，128）.每一级的链表都有一个bitmap用于标记对应的链表中是否有内存块。比如第一级别bitmap的后4bit位0100，即2的6次方这个区间有空闲块。对应的第二级链表的bitmap位0010及【80,96）这个区间有空闲块，即下面的89 Byte。\n\n\n\n策略: \nImmediate coalescing，立即合并，当内存块被释放后，立即与相邻的空闲内存块合并，以获得一个更大的空闲块，插入到链表的相应位置。这样可以减少碎片化。\nSplitting threshold，分割阈值，最小可分配的内存块大小为16字节，应用一般不会分配一些基本的数据结构，如int、char等。限定最小可分配大小为16字节，这样可以在空闲的内存块中存储一些管理信息。\nGood-fit strategy，TLSF会尽可能的返回一个最小的、能够满足需求的内存块。\nSame strategy for all block sizes，对于不同大小的内存请求，TLSF只有一个分配策略，实现相对简单，执行时间可以预期。相应的dlmalloc根据所请求的内存大小不同，有多达4种内存分配策略。\nMemory is not cleaned-up，分配个应用的内存没有被请0.\n\n特点:\n可以预期的分配执行时间，无论对于多达的内存分配请求，TLSF可以在限定的时间内完成分配。\n碎片化程度低。\n\n\n#### mimalloc:\n\n\n#### 多线程\n\n* 局部化, 本地缓存/链表  \n* 注意false shared  \n* 跨线程队列 最大本地缓存 \n\n#### 内存安全   \n管理数据和被管理内存分离\nbuddy system\npages 管理  \n\n可信的执行环境Trusted Environment，应用不会故意破坏数据或者窃取数据  \n有限的物理内存  \n有限的物理地址  \n没有物理MMU来支持虚拟内存\n\n#### 开源内存分配器  \n* dlmalloc \n* tcmalloc  \n* jemalloc  \n* Hoard\n* minimalloc\n* TLSF: https://github.com/OlegHahm/tlsf    \n\n#### 援引\n[jemalloc深入分析 PDF](https://github.com/everschen/tools/blob/master/DOC/Jemalloc.pdf)  \n[jemalloc 2015演讲视频 tick tock, malloc needs a clock 背景和初始设计思想介绍](http://applicative.acm.org/2015/applicative.acm.org/speaker-JasonEvans.html)   \n[jemalloc facebook工程贴](https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919)   \n[BSDcan paper 2006](http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf)   \n[On the Impact of Memory Allocationon High-Performance Query Processing](https://dl.acm.org/doi/abs/10.1145/3329785.3329918)   \n[How tcmalloc Works](https://www.jamesgolick.com/2013/5/19/how-tcmalloc-works.html)   \n[Chromimum Project: Out of memory handling](https://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling)  \n[Scalable Memory Allocation TBB](https://rd.springer.com/content/pdf/10.1007%2F978-1-4842-4398-5_7.pdf)  \n[ptmalloc,tcmalloc和jemalloc内存分配策略研究](https://cloud.tencent.com/developer/article/1173720)   \n\n","slug":"2020-05-09-memory_alloctor","published":1,"updated":"2020-06-15T14:08:40.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyej9001b7w5h53zb5bq2","content":"<h2><span id=\"内存分配器核心思想和算法\">内存分配器核心思想和算法</span></h2><h3><span id=\"内存管理策略\">内存管理策略</span></h3><h4><span id=\"sequential-fit-连续适配\">Sequential Fit  (连续适配)</span></h4><p> 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  </p>\n<h4><span id=\"segregated-list-分离列表\">Segregated List (分离列表)</span></h4><p> 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  </p>\n<ul>\n<li>Buddy System (Sequential Fit变种)  <ul>\n<li>内部碎片化问题比较严重   </li>\n<li>Binary Buddies  </li>\n<li>Fibonacci Buddies  </li>\n<li>Weighted Buddies   </li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"indexed-fit\">Indexed  Fit</span></h4><p> 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。</p>\n<ul>\n<li>使用Balanced Tree的Best Fit allocator</li>\n<li>使用Cartesian tree 的Stephenson Fast-Fit allocator</li>\n<li>Bitmap Fit (Indexed Fit 变种)<br>Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  </li>\n</ul>\n<h3><span id=\"路径匹配策略\">路径匹配策略</span></h3><p>对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    </p>\n<ul>\n<li>Best fit:<br>The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.<br>最佳匹配:<br>这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.<br>例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  </li>\n</ul>\n<ul>\n<li><p>Worst fit:<br>The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.<br>最不适合匹配<br>内存管理器总是选择获得的最大的那个未分配内存块.<br>这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)<br>同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  </p>\n</li>\n<li><p>First fit:<br>There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.<br>通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.<br>同上例中, 首先匹配会从14k的block中分配12k的请求.<br>First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  </p>\n</li>\n</ul>\n<h4><span id=\"tlsf-a-new-dynamic-memory-allocator-for-real-time-systems\">TLSF: a New Dynamic Memory Allocator for Real-Time Systems</span></h4><p>通过一组链表来管理不同大小内存块的内存分配算法。<br>适用环境和要求:<br>内存分配/释放的执行时间可预期，可接受的。由于RTOS对指令的执行时间有严格要求，所以常常采用静态内存分配的方法，以获得一个可以预期的执行时间。<br>内存分配算法的碎片化程度要低，这是由于RTOS往往长时间执行，碎片化程度高会导致内存分配失败。<br>实时系统动态内存算法<br>可信的执行环境，Trusted Environment，应用不会故意破坏数据或者窃取数据。<br>有限的物理内存。<br>没有物理MMU来支持虚拟内存。</p>\n<p>核心概念: Two Level<br>基本的Segregated Fit算法是使用一组链表，每个链表只包含特定长度范围来的空闲块的方式来管理空闲块的，这样链表数组的长度可能会很大。如下图，TLSF为了简化查找定位过程，使用了两层链表。第一层，将空闲内存块的大小根据2的幂进行分类，如（16、32、64…）。第二层链表在第一层的基础上，按照一定的间隔，线性分段。比如2的6次方这一段，分为4个小区间【64,80），【80,96），【96,112），【112，128）.每一级的链表都有一个bitmap用于标记对应的链表中是否有内存块。比如第一级别bitmap的后4bit位0100，即2的6次方这个区间有空闲块。对应的第二级链表的bitmap位0010及【80,96）这个区间有空闲块，即下面的89 Byte。</p>\n<p>策略:<br>Immediate coalescing，立即合并，当内存块被释放后，立即与相邻的空闲内存块合并，以获得一个更大的空闲块，插入到链表的相应位置。这样可以减少碎片化。<br>Splitting threshold，分割阈值，最小可分配的内存块大小为16字节，应用一般不会分配一些基本的数据结构，如int、char等。限定最小可分配大小为16字节，这样可以在空闲的内存块中存储一些管理信息。<br>Good-fit strategy，TLSF会尽可能的返回一个最小的、能够满足需求的内存块。<br>Same strategy for all block sizes，对于不同大小的内存请求，TLSF只有一个分配策略，实现相对简单，执行时间可以预期。相应的dlmalloc根据所请求的内存大小不同，有多达4种内存分配策略。<br>Memory is not cleaned-up，分配个应用的内存没有被请0.</p>\n<p>特点:<br>可以预期的分配执行时间，无论对于多达的内存分配请求，TLSF可以在限定的时间内完成分配。<br>碎片化程度低。</p>\n<h4><span id=\"mimalloc\">mimalloc:</span></h4><h4><span id=\"多线程\">多线程</span></h4><ul>\n<li>局部化, 本地缓存/链表  </li>\n<li>注意false shared  </li>\n<li>跨线程队列 最大本地缓存 </li>\n</ul>\n<h4><span id=\"内存安全\">内存安全</span></h4><p>管理数据和被管理内存分离<br>buddy system<br>pages 管理  </p>\n<p>可信的执行环境Trusted Environment，应用不会故意破坏数据或者窃取数据<br>有限的物理内存<br>有限的物理地址<br>没有物理MMU来支持虚拟内存</p>\n<h4><span id=\"开源内存分配器\">开源内存分配器</span></h4><ul>\n<li>dlmalloc </li>\n<li>tcmalloc  </li>\n<li>jemalloc  </li>\n<li>Hoard</li>\n<li>minimalloc</li>\n<li>TLSF: <a href=\"https://github.com/OlegHahm/tlsf\" target=\"_blank\" rel=\"noopener\">https://github.com/OlegHahm/tlsf</a>    </li>\n</ul>\n<h4><span id=\"援引\">援引</span></h4><p><a href=\"https://github.com/everschen/tools/blob/master/DOC/Jemalloc.pdf\" target=\"_blank\" rel=\"noopener\">jemalloc深入分析 PDF</a><br><a href=\"http://applicative.acm.org/2015/applicative.acm.org/speaker-JasonEvans.html\" target=\"_blank\" rel=\"noopener\">jemalloc 2015演讲视频 tick tock, malloc needs a clock 背景和初始设计思想介绍</a><br><a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">jemalloc facebook工程贴</a><br><a href=\"http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf\" target=\"_blank\" rel=\"noopener\">BSDcan paper 2006</a><br><a href=\"https://dl.acm.org/doi/abs/10.1145/3329785.3329918\" target=\"_blank\" rel=\"noopener\">On the Impact of Memory Allocationon High-Performance Query Processing</a><br><a href=\"https://www.jamesgolick.com/2013/5/19/how-tcmalloc-works.html\" target=\"_blank\" rel=\"noopener\">How tcmalloc Works</a><br><a href=\"https://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling\" target=\"_blank\" rel=\"noopener\">Chromimum Project: Out of memory handling</a><br><a href=\"https://rd.springer.com/content/pdf/10.1007%2F978-1-4842-4398-5_7.pdf\" target=\"_blank\" rel=\"noopener\">Scalable Memory Allocation TBB</a><br><a href=\"https://cloud.tencent.com/developer/article/1173720\" target=\"_blank\" rel=\"noopener\">ptmalloc,tcmalloc和jemalloc内存分配策略研究</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存分配器核心思想和算法\"><a href=\"#内存分配器核心思想和算法\" class=\"headerlink\" title=\"内存分配器核心思想和算法\"></a>内存分配器核心思想和算法</h2><h3 id=\"内存管理策略\"><a href=\"#内存管理策略\" class=\"headerlink\" title=\"内存管理策略\"></a>内存管理策略</h3><h4 id=\"Sequential-Fit-连续适配\"><a href=\"#Sequential-Fit-连续适配\" class=\"headerlink\" title=\"Sequential Fit  (连续适配)\"></a>Sequential Fit  (连续适配)</h4><p> 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  </p>\n<h4 id=\"Segregated-List-分离列表\"><a href=\"#Segregated-List-分离列表\" class=\"headerlink\" title=\"Segregated List (分离列表)\"></a>Segregated List (分离列表)</h4><p> 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  </p>\n<ul>\n<li>Buddy System (Sequential Fit变种)  <ul>\n<li>内部碎片化问题比较严重   </li>\n<li>Binary Buddies  </li>\n<li>Fibonacci Buddies  </li>\n<li>Weighted Buddies   </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Indexed-Fit\"><a href=\"#Indexed-Fit\" class=\"headerlink\" title=\"Indexed  Fit\"></a>Indexed  Fit</h4><p> 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。</p>\n<ul>\n<li>使用Balanced Tree的Best Fit allocator</li>\n<li>使用Cartesian tree 的Stephenson Fast-Fit allocator</li>\n<li>Bitmap Fit (Indexed Fit 变种)<br>Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  </li>\n</ul>\n<h3 id=\"路径匹配策略\"><a href=\"#路径匹配策略\" class=\"headerlink\" title=\"路径匹配策略\"></a>路径匹配策略</h3><p>对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    </p>\n<ul>\n<li>Best fit:<br>The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.<br>最佳匹配:<br>这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.<br>例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  </li>\n</ul>\n<ul>\n<li><p>Worst fit:<br>The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.<br>最不适合匹配<br>内存管理器总是选择获得的最大的那个未分配内存块.<br>这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)<br>同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  </p>\n</li>\n<li><p>First fit:<br>There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.<br>通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.<br>同上例中, 首先匹配会从14k的block中分配12k的请求.<br>First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  </p>\n</li>\n</ul>\n<h4 id=\"TLSF-a-New-Dynamic-Memory-Allocator-for-Real-Time-Systems\"><a href=\"#TLSF-a-New-Dynamic-Memory-Allocator-for-Real-Time-Systems\" class=\"headerlink\" title=\"TLSF: a New Dynamic Memory Allocator for Real-Time Systems\"></a>TLSF: a New Dynamic Memory Allocator for Real-Time Systems</h4><p>通过一组链表来管理不同大小内存块的内存分配算法。<br>适用环境和要求:<br>内存分配/释放的执行时间可预期，可接受的。由于RTOS对指令的执行时间有严格要求，所以常常采用静态内存分配的方法，以获得一个可以预期的执行时间。<br>内存分配算法的碎片化程度要低，这是由于RTOS往往长时间执行，碎片化程度高会导致内存分配失败。<br>实时系统动态内存算法<br>可信的执行环境，Trusted Environment，应用不会故意破坏数据或者窃取数据。<br>有限的物理内存。<br>没有物理MMU来支持虚拟内存。</p>\n<p>核心概念: Two Level<br>基本的Segregated Fit算法是使用一组链表，每个链表只包含特定长度范围来的空闲块的方式来管理空闲块的，这样链表数组的长度可能会很大。如下图，TLSF为了简化查找定位过程，使用了两层链表。第一层，将空闲内存块的大小根据2的幂进行分类，如（16、32、64…）。第二层链表在第一层的基础上，按照一定的间隔，线性分段。比如2的6次方这一段，分为4个小区间【64,80），【80,96），【96,112），【112，128）.每一级的链表都有一个bitmap用于标记对应的链表中是否有内存块。比如第一级别bitmap的后4bit位0100，即2的6次方这个区间有空闲块。对应的第二级链表的bitmap位0010及【80,96）这个区间有空闲块，即下面的89 Byte。</p>\n<p>策略:<br>Immediate coalescing，立即合并，当内存块被释放后，立即与相邻的空闲内存块合并，以获得一个更大的空闲块，插入到链表的相应位置。这样可以减少碎片化。<br>Splitting threshold，分割阈值，最小可分配的内存块大小为16字节，应用一般不会分配一些基本的数据结构，如int、char等。限定最小可分配大小为16字节，这样可以在空闲的内存块中存储一些管理信息。<br>Good-fit strategy，TLSF会尽可能的返回一个最小的、能够满足需求的内存块。<br>Same strategy for all block sizes，对于不同大小的内存请求，TLSF只有一个分配策略，实现相对简单，执行时间可以预期。相应的dlmalloc根据所请求的内存大小不同，有多达4种内存分配策略。<br>Memory is not cleaned-up，分配个应用的内存没有被请0.</p>\n<p>特点:<br>可以预期的分配执行时间，无论对于多达的内存分配请求，TLSF可以在限定的时间内完成分配。<br>碎片化程度低。</p>\n<h4 id=\"mimalloc\"><a href=\"#mimalloc\" class=\"headerlink\" title=\"mimalloc:\"></a>mimalloc:</h4><h4 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h4><ul>\n<li>局部化, 本地缓存/链表  </li>\n<li>注意false shared  </li>\n<li>跨线程队列 最大本地缓存 </li>\n</ul>\n<h4 id=\"内存安全\"><a href=\"#内存安全\" class=\"headerlink\" title=\"内存安全\"></a>内存安全</h4><p>管理数据和被管理内存分离<br>buddy system<br>pages 管理  </p>\n<p>可信的执行环境Trusted Environment，应用不会故意破坏数据或者窃取数据<br>有限的物理内存<br>有限的物理地址<br>没有物理MMU来支持虚拟内存</p>\n<h4 id=\"开源内存分配器\"><a href=\"#开源内存分配器\" class=\"headerlink\" title=\"开源内存分配器\"></a>开源内存分配器</h4><ul>\n<li>dlmalloc </li>\n<li>tcmalloc  </li>\n<li>jemalloc  </li>\n<li>Hoard</li>\n<li>minimalloc</li>\n<li>TLSF: <a href=\"https://github.com/OlegHahm/tlsf\" target=\"_blank\" rel=\"noopener\">https://github.com/OlegHahm/tlsf</a>    </li>\n</ul>\n<h4 id=\"援引\"><a href=\"#援引\" class=\"headerlink\" title=\"援引\"></a>援引</h4><p><a href=\"https://github.com/everschen/tools/blob/master/DOC/Jemalloc.pdf\" target=\"_blank\" rel=\"noopener\">jemalloc深入分析 PDF</a><br><a href=\"http://applicative.acm.org/2015/applicative.acm.org/speaker-JasonEvans.html\" target=\"_blank\" rel=\"noopener\">jemalloc 2015演讲视频 tick tock, malloc needs a clock 背景和初始设计思想介绍</a><br><a href=\"https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919\" target=\"_blank\" rel=\"noopener\">jemalloc facebook工程贴</a><br><a href=\"http://people.freebsd.org/~jasone/jemalloc/bsdcan2006/jemalloc.pdf\" target=\"_blank\" rel=\"noopener\">BSDcan paper 2006</a><br><a href=\"https://dl.acm.org/doi/abs/10.1145/3329785.3329918\" target=\"_blank\" rel=\"noopener\">On the Impact of Memory Allocationon High-Performance Query Processing</a><br><a href=\"https://www.jamesgolick.com/2013/5/19/how-tcmalloc-works.html\" target=\"_blank\" rel=\"noopener\">How tcmalloc Works</a><br><a href=\"https://www.chromium.org/chromium-os/chromiumos-design-docs/out-of-memory-handling\" target=\"_blank\" rel=\"noopener\">Chromimum Project: Out of memory handling</a><br><a href=\"https://rd.springer.com/content/pdf/10.1007%2F978-1-4842-4398-5_7.pdf\" target=\"_blank\" rel=\"noopener\">Scalable Memory Allocation TBB</a><br><a href=\"https://cloud.tencent.com/developer/article/1173720\" target=\"_blank\" rel=\"noopener\">ptmalloc,tcmalloc和jemalloc内存分配策略研究</a></p>\n"},{"title":"游戏(技能)中的脚本设计","date":"2020-06-15T16:00:00.000Z","author":"yawei.zhang","_content":"\n# 脚本设计   \n\n## 前言和需求情景  \n每种语言都有自己的惯用思维, 面对领域需求时, 也应该在不同的语言思维环境下寻找解决方案, 而不是生搬硬套另外一种语言的特性, 但是从可计算性的角度上来看, 相同需求的良好解决方案往往具备很强的相似性.  \n\n那么更具体的领域中, 我们说说技能系统的场景:  \n\n技能系统的复杂度偏向问题域, 如果不去约束问题域的规模, 最好的解决方案一定是通过脚本化方式让技能的设计者直接去写设计者期望的战斗逻辑. 但是作为一门通用的语言, 是需要转化为一个简洁的, 低门槛的领域语言.  \n\n这里不讨论如何拆解该系统所面对的问题域, 如何抽象出解决域的模型等, 这部分在之前的技能系统相关的PPT中已经描述过,  这里主要关注的是, 在使用脚本的情况下, 我们如何对脚本这部分进行更具体的设计.   \n\n* 作为开发者, 更关注的是开发测试成本, 即用最简洁的代码, 一劳永逸的提供最丰富的上层接口.   \n* 作为设计者, 更关注的是是否提供了足够的封装, 隐藏掉不需要关心的功能实现细节以及流程细节, 并且能够总是通过简单的if else call来完成所有决策, 或者用简单的枚举或者画图 打钩完成所有决策而不需要操刀脚本编写.  \n  \n\n* 更进一步的, 从设计者角度, 按照配置的出场频度和复杂度应该有如下的方案选型排序:<font color=#f33 size=3>   \n  * 几乎总是需要配置的:  默认配置方案,  什么都不需要做就是应该有的功能或者流程   \n  * 次高频:  通过开关来切换功能或者流程   \n  * 高频: 通过枚举来完成多功能或者多流程case   \n  * 高频低中度复杂: 通过枚举+固定的跟随参数来完成   \n  * 高频低中度复杂: 开发人员编写特定的功能模块, 条件模块, 并提炼出参数以特定枚举方式提供   \n  * \n  * 中低频复杂条件: 嵌入简短的脚本, 通过数据接口+脚本提供的布尔表达式来完成   \n  * 中低频复杂逻辑: 开发人员协助设计者编写脚本      \n  * 中低频中低复杂: 策划自行写脚本 自行验证  \n  * 低频其他: 脚本兜底实现  </font>    \n\n\n\n\n* 对于中小型硬核技能玩法项目  或者设计者本身有一定的编程功底, 那么我们可以实现一个简洁的脚本驱动的内核, 然后任由设计者天马行空的设计和铺展战斗系统.   \n* \n* 但对于另外一些情况, 比如存在大规模的低复杂度技能设计, 或者策划人员对脚本的接受能力参差不齐, 我们需要对脚本的适用范围进行收敛, 但是仍然想要灵活的机制来实现丰富的技能体系.  这就需要对涉及到脚本编写部分的更具体的优化设计.     \n  * <font color=#f33 size=3>直接提高数据驱动部分的配置在整个技能系统下所包含的范围</font>   \n    > 通过堆开发人力来提高.  但是这部分会随着需求的细化和新需求的提出导致不断的重构, 开发人员需要持续跟进  \n    > 持续变更的核心代码会降低整个系统的稳定性, 因此这部分的工作需要克制,谨慎的拆解,分析,以及交付测试.   \n\n  * <font color=#f33 size=3>把可以简单替换成脚本的逻辑, 给设计者提供数据驱动的配置接口, 在配表完成阶段或者读取配置阶段翻译成脚本</font>   \n    > 相比上面的方案, 该方案不需要修改核心逻辑, 性能略有下降.   \n  \n  * <font color=#f33 size=3>提供脚本片段/脚本模版, 配置时候快速复用已有脚本逻辑</font>   \n    > 相比上面一条, 该方案设计者可见脚本代码, 但是不需要手写.   \n    > 不容易出错, 可以用来熏陶设计者对脚本的接受能力, 降低脚本门槛.   \n\n  * <font color=#f33 size=3>提供脚本级别的封装机制, 对脚本复杂度进行降级</font>   \n    > 把复杂的脚本实现拆解成独立的多段脚本函数, 一次测试多次复用   \n    > 把多行脚本能完成事情 封装成一行脚本 或者一个函数+参数的形式  \n    > 把简单的脚本映射成数据驱动的枚举+参数形式  (直接映射为封装好的函数+参数)  \n    > 封装的位置单独存放在脚本文件中, 并且支持热更新方便快速试错和验证  \n\n\n\n<!--more -->\n\n## 解决方案    \n脚本作为核心的主体逻辑部分, 和整个技能系统的关系不是简单的集成嵌入, 而是从最初的技能系统框架层面就设计进去的, 这样整个技能系统和脚本的关系才能做到简洁自然, 清晰自洽.   \n\n* 提炼技能系统的meta数据   \n  > 这里的meta数据, 意思是把一个能表征技能状态和数据的关键元素提取出来单独维护, 它足够小但足够提供我们关心的所有信息.  例如初始状态, 当前状态, 可追溯的来源信息, 相关联的配置ID, 上下文等.    \n  > 这份meta数据会成为脚本的基础数据环境, 通过这个meta信息我们可以查询相关的配置 状态, 以作为某些条件的判定依据, 以及新的行为的参数.    \n  > 必要时我们可以拷贝这份meta数据, 或者伪造修饰部分数据来提供更特殊的环境实现.    \n\n* 基础的脚本胶水接口实现 (开发向低级接口)   \n  > 一次性提供所有meta数据的访问接口   \n  > 提供C侧基于meta数据的功能函数封装, 尽可能的做到原子性   \n\n* 编写模板类, 提供易用 易读 易使用的高级接口(用户向)  \n  > 一次性翻译低级接口到高级接口,  这个过程会隐藏掉例如meta数据本身访问等   \n  > 复杂逻辑封装    \n\n* 在C++代码中打桩  \n  > 把来自设计者的脚本片段和合成一个临时函数并压栈  \n  > 把meta数据和调用信息压栈, 作为临时函数的参数去执行.   \n  > 这里为了简化不同流程的桩点环境和不同事件的桩点环境不同, 并不会编写不同的桩点代码而是统一使用meta数据,  这样再脚本系统的实现上就做到了统一的埋点处理, 极大的减少了因此带来的桩点代码量.       \n  > 桩点中来自策划的脚本片段实际执行会经过'模板类'这个中间层,  而这个中间层存储在可热更的单独文件中.   \n  > 打桩的脚本代码在首次执行时会处理为字节码提高性能, 热更配置会清除字节码.    \n  > 模板类脚本也为字节码 可热更.   \n\n* 注意项:  对脚本调用可能存在嵌套, 例如在脚本事件中触发新的脚本甚至重入  \n  > 在每段可能会触发脚本的关键路径上进行stack计数, 超过计数block掉该流程.   \n  > 脚本环境支持嵌套, 或者说脚本环境(包含技能meta和脚本环境实例)应该是放在栈上. \n\n## 更具体的实现细节     \n\n### lua的OOP模拟   \n需要解释下是 lua没有类的概念, 只有实例(table).  但是lua的table是可以聚合函数和数据的, 并且存在metatable这种元表概念, 因此在在lua的语法特性中我们可以用以下方式来完成一个接近OOP的模拟, 基本思路如下:  \n  * 构造一个全局的table实例作为创建实例的metatable(类的概念)   \n  * 提供一个公共的new接口来创建一个新表, 并设置好metatable的关系. (实例化)  \n  * 以:形式来编写所有函数完成C++this指针的作用, 即所有函数的实现默认第一个参数为实例自身, 调用时默认用自身作为函数的第一个参数   \n  * 其简洁的实现形式如下:   \n\n    ```Lua\n    -- 定义全局table  \n    meta = {}\n\n    --数据成员 \n    meta.class_name = \"meta\";  \n\n    --函数成员\n    function meta:desc(msg)\n        print(self.class_name .. \": \" .. msg)\n    end\n\n    --这个:是一个语法糖, 等价代码:\n    --[[\n    function meta.desc(self, msg)\n        print(self.class_name .. \": \" .. msg)\n    end\n    ]]--\n\n    --实例化方法\n    function meta.New(...)\n        local inst = {...}  \n        setmetatable(inst, { __index = meta })   --设置metatable 当inst中不存在某个键，会读出meta相应的元方法   \n        return inst\n    end\n\n    --实例化一个meta的实例  \n    local inst = meta.New()\n\n    --修改新实例的class_name为inst    \n    inst.class_name = \"inst\"   \n\n    --子类并没有desc方法 会尝试读meta的desc 并把inst实例以self参数传入该方法    \n    inst:desc(\"new inst\")\n\n    ```\n\n* output  \n  >  inst: new inst\n\n ### 实际应用  \n\n* 统一的桩点代码\n  ```Lua\n  return function (skill_meta, result, ...)\n    local inst_env = {skill_meta, result, ...}\n    setmetatable(inst_env, { __index = meta_env })\n    do \n        --配置开始\n        --inst_env:cast_skill(...)\n        --配置结束\n    end \n    return 0; \n  end \n    ```\n\n* 配置方式     \n  伪脚本片段: 沉默BUFF的实现:   \n  ``` in pre cast skill ```\n  ``` \n  if inst_env:skill_has_tag(333) then inst_env:block_flow() end   \n  ```\n\n* 封装实现   \n  把上述逻辑封装成一个call   \n  ```\n  function inst_env:silence(tag)\n    if self:skill_has_tag(333) then self:block_flow() end\n  end\n  ```\n  ``` in pre cast skill ```\n  ``` \n  inst_env:silence(333)   \n  ```\n","source":"_posts/2020-06-16-lua-oop.md","raw":"---\ntitle: 游戏(技能)中的脚本设计\ndate: 2020-06-16\ncategories: develop \nauthor: yawei.zhang \n---\n\n# 脚本设计   \n\n## 前言和需求情景  \n每种语言都有自己的惯用思维, 面对领域需求时, 也应该在不同的语言思维环境下寻找解决方案, 而不是生搬硬套另外一种语言的特性, 但是从可计算性的角度上来看, 相同需求的良好解决方案往往具备很强的相似性.  \n\n那么更具体的领域中, 我们说说技能系统的场景:  \n\n技能系统的复杂度偏向问题域, 如果不去约束问题域的规模, 最好的解决方案一定是通过脚本化方式让技能的设计者直接去写设计者期望的战斗逻辑. 但是作为一门通用的语言, 是需要转化为一个简洁的, 低门槛的领域语言.  \n\n这里不讨论如何拆解该系统所面对的问题域, 如何抽象出解决域的模型等, 这部分在之前的技能系统相关的PPT中已经描述过,  这里主要关注的是, 在使用脚本的情况下, 我们如何对脚本这部分进行更具体的设计.   \n\n* 作为开发者, 更关注的是开发测试成本, 即用最简洁的代码, 一劳永逸的提供最丰富的上层接口.   \n* 作为设计者, 更关注的是是否提供了足够的封装, 隐藏掉不需要关心的功能实现细节以及流程细节, 并且能够总是通过简单的if else call来完成所有决策, 或者用简单的枚举或者画图 打钩完成所有决策而不需要操刀脚本编写.  \n  \n\n* 更进一步的, 从设计者角度, 按照配置的出场频度和复杂度应该有如下的方案选型排序:<font color=#f33 size=3>   \n  * 几乎总是需要配置的:  默认配置方案,  什么都不需要做就是应该有的功能或者流程   \n  * 次高频:  通过开关来切换功能或者流程   \n  * 高频: 通过枚举来完成多功能或者多流程case   \n  * 高频低中度复杂: 通过枚举+固定的跟随参数来完成   \n  * 高频低中度复杂: 开发人员编写特定的功能模块, 条件模块, 并提炼出参数以特定枚举方式提供   \n  * \n  * 中低频复杂条件: 嵌入简短的脚本, 通过数据接口+脚本提供的布尔表达式来完成   \n  * 中低频复杂逻辑: 开发人员协助设计者编写脚本      \n  * 中低频中低复杂: 策划自行写脚本 自行验证  \n  * 低频其他: 脚本兜底实现  </font>    \n\n\n\n\n* 对于中小型硬核技能玩法项目  或者设计者本身有一定的编程功底, 那么我们可以实现一个简洁的脚本驱动的内核, 然后任由设计者天马行空的设计和铺展战斗系统.   \n* \n* 但对于另外一些情况, 比如存在大规模的低复杂度技能设计, 或者策划人员对脚本的接受能力参差不齐, 我们需要对脚本的适用范围进行收敛, 但是仍然想要灵活的机制来实现丰富的技能体系.  这就需要对涉及到脚本编写部分的更具体的优化设计.     \n  * <font color=#f33 size=3>直接提高数据驱动部分的配置在整个技能系统下所包含的范围</font>   \n    > 通过堆开发人力来提高.  但是这部分会随着需求的细化和新需求的提出导致不断的重构, 开发人员需要持续跟进  \n    > 持续变更的核心代码会降低整个系统的稳定性, 因此这部分的工作需要克制,谨慎的拆解,分析,以及交付测试.   \n\n  * <font color=#f33 size=3>把可以简单替换成脚本的逻辑, 给设计者提供数据驱动的配置接口, 在配表完成阶段或者读取配置阶段翻译成脚本</font>   \n    > 相比上面的方案, 该方案不需要修改核心逻辑, 性能略有下降.   \n  \n  * <font color=#f33 size=3>提供脚本片段/脚本模版, 配置时候快速复用已有脚本逻辑</font>   \n    > 相比上面一条, 该方案设计者可见脚本代码, 但是不需要手写.   \n    > 不容易出错, 可以用来熏陶设计者对脚本的接受能力, 降低脚本门槛.   \n\n  * <font color=#f33 size=3>提供脚本级别的封装机制, 对脚本复杂度进行降级</font>   \n    > 把复杂的脚本实现拆解成独立的多段脚本函数, 一次测试多次复用   \n    > 把多行脚本能完成事情 封装成一行脚本 或者一个函数+参数的形式  \n    > 把简单的脚本映射成数据驱动的枚举+参数形式  (直接映射为封装好的函数+参数)  \n    > 封装的位置单独存放在脚本文件中, 并且支持热更新方便快速试错和验证  \n\n\n\n<!--more -->\n\n## 解决方案    \n脚本作为核心的主体逻辑部分, 和整个技能系统的关系不是简单的集成嵌入, 而是从最初的技能系统框架层面就设计进去的, 这样整个技能系统和脚本的关系才能做到简洁自然, 清晰自洽.   \n\n* 提炼技能系统的meta数据   \n  > 这里的meta数据, 意思是把一个能表征技能状态和数据的关键元素提取出来单独维护, 它足够小但足够提供我们关心的所有信息.  例如初始状态, 当前状态, 可追溯的来源信息, 相关联的配置ID, 上下文等.    \n  > 这份meta数据会成为脚本的基础数据环境, 通过这个meta信息我们可以查询相关的配置 状态, 以作为某些条件的判定依据, 以及新的行为的参数.    \n  > 必要时我们可以拷贝这份meta数据, 或者伪造修饰部分数据来提供更特殊的环境实现.    \n\n* 基础的脚本胶水接口实现 (开发向低级接口)   \n  > 一次性提供所有meta数据的访问接口   \n  > 提供C侧基于meta数据的功能函数封装, 尽可能的做到原子性   \n\n* 编写模板类, 提供易用 易读 易使用的高级接口(用户向)  \n  > 一次性翻译低级接口到高级接口,  这个过程会隐藏掉例如meta数据本身访问等   \n  > 复杂逻辑封装    \n\n* 在C++代码中打桩  \n  > 把来自设计者的脚本片段和合成一个临时函数并压栈  \n  > 把meta数据和调用信息压栈, 作为临时函数的参数去执行.   \n  > 这里为了简化不同流程的桩点环境和不同事件的桩点环境不同, 并不会编写不同的桩点代码而是统一使用meta数据,  这样再脚本系统的实现上就做到了统一的埋点处理, 极大的减少了因此带来的桩点代码量.       \n  > 桩点中来自策划的脚本片段实际执行会经过'模板类'这个中间层,  而这个中间层存储在可热更的单独文件中.   \n  > 打桩的脚本代码在首次执行时会处理为字节码提高性能, 热更配置会清除字节码.    \n  > 模板类脚本也为字节码 可热更.   \n\n* 注意项:  对脚本调用可能存在嵌套, 例如在脚本事件中触发新的脚本甚至重入  \n  > 在每段可能会触发脚本的关键路径上进行stack计数, 超过计数block掉该流程.   \n  > 脚本环境支持嵌套, 或者说脚本环境(包含技能meta和脚本环境实例)应该是放在栈上. \n\n## 更具体的实现细节     \n\n### lua的OOP模拟   \n需要解释下是 lua没有类的概念, 只有实例(table).  但是lua的table是可以聚合函数和数据的, 并且存在metatable这种元表概念, 因此在在lua的语法特性中我们可以用以下方式来完成一个接近OOP的模拟, 基本思路如下:  \n  * 构造一个全局的table实例作为创建实例的metatable(类的概念)   \n  * 提供一个公共的new接口来创建一个新表, 并设置好metatable的关系. (实例化)  \n  * 以:形式来编写所有函数完成C++this指针的作用, 即所有函数的实现默认第一个参数为实例自身, 调用时默认用自身作为函数的第一个参数   \n  * 其简洁的实现形式如下:   \n\n    ```Lua\n    -- 定义全局table  \n    meta = {}\n\n    --数据成员 \n    meta.class_name = \"meta\";  \n\n    --函数成员\n    function meta:desc(msg)\n        print(self.class_name .. \": \" .. msg)\n    end\n\n    --这个:是一个语法糖, 等价代码:\n    --[[\n    function meta.desc(self, msg)\n        print(self.class_name .. \": \" .. msg)\n    end\n    ]]--\n\n    --实例化方法\n    function meta.New(...)\n        local inst = {...}  \n        setmetatable(inst, { __index = meta })   --设置metatable 当inst中不存在某个键，会读出meta相应的元方法   \n        return inst\n    end\n\n    --实例化一个meta的实例  \n    local inst = meta.New()\n\n    --修改新实例的class_name为inst    \n    inst.class_name = \"inst\"   \n\n    --子类并没有desc方法 会尝试读meta的desc 并把inst实例以self参数传入该方法    \n    inst:desc(\"new inst\")\n\n    ```\n\n* output  \n  >  inst: new inst\n\n ### 实际应用  \n\n* 统一的桩点代码\n  ```Lua\n  return function (skill_meta, result, ...)\n    local inst_env = {skill_meta, result, ...}\n    setmetatable(inst_env, { __index = meta_env })\n    do \n        --配置开始\n        --inst_env:cast_skill(...)\n        --配置结束\n    end \n    return 0; \n  end \n    ```\n\n* 配置方式     \n  伪脚本片段: 沉默BUFF的实现:   \n  ``` in pre cast skill ```\n  ``` \n  if inst_env:skill_has_tag(333) then inst_env:block_flow() end   \n  ```\n\n* 封装实现   \n  把上述逻辑封装成一个call   \n  ```\n  function inst_env:silence(tag)\n    if self:skill_has_tag(333) then self:block_flow() end\n  end\n  ```\n  ``` in pre cast skill ```\n  ``` \n  inst_env:silence(333)   \n  ```\n","slug":"2020-06-16-lua-oop","published":1,"updated":"2020-06-18T02:52:56.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyejb001d7w5h3q6odclo","content":"<h1><span id=\"脚本设计\">脚本设计</span></h1><h2><span id=\"前言和需求情景\">前言和需求情景</span></h2><p>每种语言都有自己的惯用思维, 面对领域需求时, 也应该在不同的语言思维环境下寻找解决方案, 而不是生搬硬套另外一种语言的特性, 但是从可计算性的角度上来看, 相同需求的良好解决方案往往具备很强的相似性.  </p>\n<p>那么更具体的领域中, 我们说说技能系统的场景:  </p>\n<p>技能系统的复杂度偏向问题域, 如果不去约束问题域的规模, 最好的解决方案一定是通过脚本化方式让技能的设计者直接去写设计者期望的战斗逻辑. 但是作为一门通用的语言, 是需要转化为一个简洁的, 低门槛的领域语言.  </p>\n<p>这里不讨论如何拆解该系统所面对的问题域, 如何抽象出解决域的模型等, 这部分在之前的技能系统相关的PPT中已经描述过,  这里主要关注的是, 在使用脚本的情况下, 我们如何对脚本这部分进行更具体的设计.   </p>\n<ul>\n<li>作为开发者, 更关注的是开发测试成本, 即用最简洁的代码, 一劳永逸的提供最丰富的上层接口.   </li>\n<li>作为设计者, 更关注的是是否提供了足够的封装, 隐藏掉不需要关心的功能实现细节以及流程细节, 并且能够总是通过简单的if else call来完成所有决策, 或者用简单的枚举或者画图 打钩完成所有决策而不需要操刀脚本编写.  </li>\n</ul>\n<ul>\n<li>更进一步的, 从设计者角度, 按照配置的出场频度和复杂度应该有如下的方案选型排序:<font color=\"#f33\" size=\"3\">   <ul>\n<li>几乎总是需要配置的:  默认配置方案,  什么都不需要做就是应该有的功能或者流程   </li>\n<li>次高频:  通过开关来切换功能或者流程   </li>\n<li>高频: 通过枚举来完成多功能或者多流程case   </li>\n<li>高频低中度复杂: 通过枚举+固定的跟随参数来完成   </li>\n<li>高频低中度复杂: 开发人员编写特定的功能模块, 条件模块, 并提炼出参数以特定枚举方式提供   </li>\n<li></li>\n<li>中低频复杂条件: 嵌入简短的脚本, 通过数据接口+脚本提供的布尔表达式来完成   </li>\n<li>中低频复杂逻辑: 开发人员协助设计者编写脚本      </li>\n<li>中低频中低复杂: 策划自行写脚本 自行验证  </li>\n<li>低频其他: 脚本兜底实现  </li></ul></font>    </li>\n</ul>\n\n\n<ul>\n<li><p>对于中小型硬核技能玩法项目  或者设计者本身有一定的编程功底, 那么我们可以实现一个简洁的脚本驱动的内核, 然后任由设计者天马行空的设计和铺展战斗系统.   </p>\n</li>\n<li></li>\n<li><p>但对于另外一些情况, 比如存在大规模的低复杂度技能设计, 或者策划人员对脚本的接受能力参差不齐, 我们需要对脚本的适用范围进行收敛, 但是仍然想要灵活的机制来实现丰富的技能体系.  这就需要对涉及到脚本编写部分的更具体的优化设计.     </p>\n<ul>\n<li><p><font color=\"#f33\" size=\"3\">直接提高数据驱动部分的配置在整个技能系统下所包含的范围</font>   </p>\n<blockquote>\n<p>通过堆开发人力来提高.  但是这部分会随着需求的细化和新需求的提出导致不断的重构, 开发人员需要持续跟进<br>持续变更的核心代码会降低整个系统的稳定性, 因此这部分的工作需要克制,谨慎的拆解,分析,以及交付测试.   </p>\n</blockquote>\n</li>\n<li><p><font color=\"#f33\" size=\"3\">把可以简单替换成脚本的逻辑, 给设计者提供数据驱动的配置接口, 在配表完成阶段或者读取配置阶段翻译成脚本</font>   </p>\n<blockquote>\n<p>相比上面的方案, 该方案不需要修改核心逻辑, 性能略有下降.   </p>\n</blockquote>\n</li>\n<li><p><font color=\"#f33\" size=\"3\">提供脚本片段/脚本模版, 配置时候快速复用已有脚本逻辑</font>   </p>\n<blockquote>\n<p>相比上面一条, 该方案设计者可见脚本代码, 但是不需要手写.<br>不容易出错, 可以用来熏陶设计者对脚本的接受能力, 降低脚本门槛.   </p>\n</blockquote>\n</li>\n<li><p><font color=\"#f33\" size=\"3\">提供脚本级别的封装机制, 对脚本复杂度进行降级</font>   </p>\n<blockquote>\n<p>把复杂的脚本实现拆解成独立的多段脚本函数, 一次测试多次复用<br>把多行脚本能完成事情 封装成一行脚本 或者一个函数+参数的形式<br>把简单的脚本映射成数据驱动的枚举+参数形式  (直接映射为封装好的函数+参数)<br>封装的位置单独存放在脚本文件中, 并且支持热更新方便快速试错和验证  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2><span id=\"解决方案\">解决方案</span></h2><p>脚本作为核心的主体逻辑部分, 和整个技能系统的关系不是简单的集成嵌入, 而是从最初的技能系统框架层面就设计进去的, 这样整个技能系统和脚本的关系才能做到简洁自然, 清晰自洽.   </p>\n<ul>\n<li><p>提炼技能系统的meta数据   </p>\n<blockquote>\n<p>这里的meta数据, 意思是把一个能表征技能状态和数据的关键元素提取出来单独维护, 它足够小但足够提供我们关心的所有信息.  例如初始状态, 当前状态, 可追溯的来源信息, 相关联的配置ID, 上下文等.<br>这份meta数据会成为脚本的基础数据环境, 通过这个meta信息我们可以查询相关的配置 状态, 以作为某些条件的判定依据, 以及新的行为的参数.<br>必要时我们可以拷贝这份meta数据, 或者伪造修饰部分数据来提供更特殊的环境实现.    </p>\n</blockquote>\n</li>\n<li><p>基础的脚本胶水接口实现 (开发向低级接口)   </p>\n<blockquote>\n<p>一次性提供所有meta数据的访问接口<br>提供C侧基于meta数据的功能函数封装, 尽可能的做到原子性   </p>\n</blockquote>\n</li>\n<li><p>编写模板类, 提供易用 易读 易使用的高级接口(用户向)  </p>\n<blockquote>\n<p>一次性翻译低级接口到高级接口,  这个过程会隐藏掉例如meta数据本身访问等<br>复杂逻辑封装    </p>\n</blockquote>\n</li>\n<li><p>在C++代码中打桩  </p>\n<blockquote>\n<p>把来自设计者的脚本片段和合成一个临时函数并压栈<br>把meta数据和调用信息压栈, 作为临时函数的参数去执行.<br>这里为了简化不同流程的桩点环境和不同事件的桩点环境不同, 并不会编写不同的桩点代码而是统一使用meta数据,  这样再脚本系统的实现上就做到了统一的埋点处理, 极大的减少了因此带来的桩点代码量.<br>桩点中来自策划的脚本片段实际执行会经过’模板类’这个中间层,  而这个中间层存储在可热更的单独文件中.<br>打桩的脚本代码在首次执行时会处理为字节码提高性能, 热更配置会清除字节码.<br>模板类脚本也为字节码 可热更.   </p>\n</blockquote>\n</li>\n<li><p>注意项:  对脚本调用可能存在嵌套, 例如在脚本事件中触发新的脚本甚至重入  </p>\n<blockquote>\n<p>在每段可能会触发脚本的关键路径上进行stack计数, 超过计数block掉该流程.<br>脚本环境支持嵌套, 或者说脚本环境(包含技能meta和脚本环境实例)应该是放在栈上. </p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"更具体的实现细节\">更具体的实现细节</span></h2><h3><span id=\"lua的oop模拟\">lua的OOP模拟</span></h3><p>需要解释下是 lua没有类的概念, 只有实例(table).  但是lua的table是可以聚合函数和数据的, 并且存在metatable这种元表概念, 因此在在lua的语法特性中我们可以用以下方式来完成一个接近OOP的模拟, 基本思路如下:  </p>\n<ul>\n<li><p>构造一个全局的table实例作为创建实例的metatable(类的概念)   </p>\n</li>\n<li><p>提供一个公共的new接口来创建一个新表, 并设置好metatable的关系. (实例化)  </p>\n</li>\n<li><p>以:形式来编写所有函数完成C++this指针的作用, 即所有函数的实现默认第一个参数为实例自身, 调用时默认用自身作为函数的第一个参数   </p>\n</li>\n<li><p>其简洁的实现形式如下:   </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 定义全局table  </span></span><br><span class=\"line\">meta = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--数据成员 </span></span><br><span class=\"line\">meta.class_name = <span class=\"string\">\"meta\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--函数成员</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meta:desc</span><span class=\"params\">(msg)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(self.class_name .. <span class=\"string\">\": \"</span> .. msg)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--这个:是一个语法糖, 等价代码:</span></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">function meta.desc(self, msg)</span></span><br><span class=\"line\"><span class=\"comment\">    print(self.class_name .. \": \" .. msg)</span></span><br><span class=\"line\"><span class=\"comment\">end</span></span><br><span class=\"line\"><span class=\"comment\">]]</span><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实例化方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meta.New</span><span class=\"params\">(...)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> inst = &#123;...&#125;  </span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(inst, &#123; <span class=\"built_in\">__index</span> = meta &#125;)   <span class=\"comment\">--设置metatable 当inst中不存在某个键，会读出meta相应的元方法   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inst</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实例化一个meta的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">local</span> inst = meta.New()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改新实例的class_name为inst    </span></span><br><span class=\"line\">inst.class_name = <span class=\"string\">\"inst\"</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--子类并没有desc方法 会尝试读meta的desc 并把inst实例以self参数传入该方法    </span></span><br><span class=\"line\">inst:desc(<span class=\"string\">\"new inst\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>output  </p>\n<blockquote>\n<p> inst: new inst</p>\n</blockquote>\n<h3><span id=\"实际应用\">实际应用</span></h3></li>\n<li><p>统一的桩点代码</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(skill_meta, result, ...)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> inst_env = &#123;skill_meta, result, ...&#125;</span><br><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(inst_env, &#123; <span class=\"built_in\">__index</span> = meta_env &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">do</span> </span><br><span class=\"line\">      <span class=\"comment\">--配置开始</span></span><br><span class=\"line\">      <span class=\"comment\">--inst_env:cast_skill(...)</span></span><br><span class=\"line\">      <span class=\"comment\">--配置结束</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置方式<br>伪脚本片段: 沉默BUFF的实现:   </p>\n<figure class=\"highlight plain\"><figcaption><span>pre cast skill ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">if inst_env:skill_has_tag(333) then inst_env:block_flow() end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装实现<br>把上述逻辑封装成一个call   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inst_env:silence(tag)</span><br><span class=\"line\">  if self:skill_has_tag(333) then self:block_flow() end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>pre cast skill ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">inst_env:silence(333)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"脚本设计\"><a href=\"#脚本设计\" class=\"headerlink\" title=\"脚本设计\"></a>脚本设计</h1><h2 id=\"前言和需求情景\"><a href=\"#前言和需求情景\" class=\"headerlink\" title=\"前言和需求情景\"></a>前言和需求情景</h2><p>每种语言都有自己的惯用思维, 面对领域需求时, 也应该在不同的语言思维环境下寻找解决方案, 而不是生搬硬套另外一种语言的特性, 但是从可计算性的角度上来看, 相同需求的良好解决方案往往具备很强的相似性.  </p>\n<p>那么更具体的领域中, 我们说说技能系统的场景:  </p>\n<p>技能系统的复杂度偏向问题域, 如果不去约束问题域的规模, 最好的解决方案一定是通过脚本化方式让技能的设计者直接去写设计者期望的战斗逻辑. 但是作为一门通用的语言, 是需要转化为一个简洁的, 低门槛的领域语言.  </p>\n<p>这里不讨论如何拆解该系统所面对的问题域, 如何抽象出解决域的模型等, 这部分在之前的技能系统相关的PPT中已经描述过,  这里主要关注的是, 在使用脚本的情况下, 我们如何对脚本这部分进行更具体的设计.   </p>\n<ul>\n<li>作为开发者, 更关注的是开发测试成本, 即用最简洁的代码, 一劳永逸的提供最丰富的上层接口.   </li>\n<li>作为设计者, 更关注的是是否提供了足够的封装, 隐藏掉不需要关心的功能实现细节以及流程细节, 并且能够总是通过简单的if else call来完成所有决策, 或者用简单的枚举或者画图 打钩完成所有决策而不需要操刀脚本编写.  </li>\n</ul>\n<ul>\n<li>更进一步的, 从设计者角度, 按照配置的出场频度和复杂度应该有如下的方案选型排序:<font color=#f33 size=3>   <ul>\n<li>几乎总是需要配置的:  默认配置方案,  什么都不需要做就是应该有的功能或者流程   </li>\n<li>次高频:  通过开关来切换功能或者流程   </li>\n<li>高频: 通过枚举来完成多功能或者多流程case   </li>\n<li>高频低中度复杂: 通过枚举+固定的跟随参数来完成   </li>\n<li>高频低中度复杂: 开发人员编写特定的功能模块, 条件模块, 并提炼出参数以特定枚举方式提供   </li>\n<li></li>\n<li>中低频复杂条件: 嵌入简短的脚本, 通过数据接口+脚本提供的布尔表达式来完成   </li>\n<li>中低频复杂逻辑: 开发人员协助设计者编写脚本      </li>\n<li>中低频中低复杂: 策划自行写脚本 自行验证  </li>\n<li>低频其他: 脚本兜底实现  </font>    </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>对于中小型硬核技能玩法项目  或者设计者本身有一定的编程功底, 那么我们可以实现一个简洁的脚本驱动的内核, 然后任由设计者天马行空的设计和铺展战斗系统.   </p>\n</li>\n<li></li>\n<li><p>但对于另外一些情况, 比如存在大规模的低复杂度技能设计, 或者策划人员对脚本的接受能力参差不齐, 我们需要对脚本的适用范围进行收敛, 但是仍然想要灵活的机制来实现丰富的技能体系.  这就需要对涉及到脚本编写部分的更具体的优化设计.     </p>\n<ul>\n<li><p><font color=#f33 size=3>直接提高数据驱动部分的配置在整个技能系统下所包含的范围</font>   </p>\n<blockquote>\n<p>通过堆开发人力来提高.  但是这部分会随着需求的细化和新需求的提出导致不断的重构, 开发人员需要持续跟进<br>持续变更的核心代码会降低整个系统的稳定性, 因此这部分的工作需要克制,谨慎的拆解,分析,以及交付测试.   </p>\n</blockquote>\n</li>\n<li><p><font color=#f33 size=3>把可以简单替换成脚本的逻辑, 给设计者提供数据驱动的配置接口, 在配表完成阶段或者读取配置阶段翻译成脚本</font>   </p>\n<blockquote>\n<p>相比上面的方案, 该方案不需要修改核心逻辑, 性能略有下降.   </p>\n</blockquote>\n</li>\n<li><p><font color=#f33 size=3>提供脚本片段/脚本模版, 配置时候快速复用已有脚本逻辑</font>   </p>\n<blockquote>\n<p>相比上面一条, 该方案设计者可见脚本代码, 但是不需要手写.<br>不容易出错, 可以用来熏陶设计者对脚本的接受能力, 降低脚本门槛.   </p>\n</blockquote>\n</li>\n<li><p><font color=#f33 size=3>提供脚本级别的封装机制, 对脚本复杂度进行降级</font>   </p>\n<blockquote>\n<p>把复杂的脚本实现拆解成独立的多段脚本函数, 一次测试多次复用<br>把多行脚本能完成事情 封装成一行脚本 或者一个函数+参数的形式<br>把简单的脚本映射成数据驱动的枚举+参数形式  (直接映射为封装好的函数+参数)<br>封装的位置单独存放在脚本文件中, 并且支持热更新方便快速试错和验证  </p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>脚本作为核心的主体逻辑部分, 和整个技能系统的关系不是简单的集成嵌入, 而是从最初的技能系统框架层面就设计进去的, 这样整个技能系统和脚本的关系才能做到简洁自然, 清晰自洽.   </p>\n<ul>\n<li><p>提炼技能系统的meta数据   </p>\n<blockquote>\n<p>这里的meta数据, 意思是把一个能表征技能状态和数据的关键元素提取出来单独维护, 它足够小但足够提供我们关心的所有信息.  例如初始状态, 当前状态, 可追溯的来源信息, 相关联的配置ID, 上下文等.<br>这份meta数据会成为脚本的基础数据环境, 通过这个meta信息我们可以查询相关的配置 状态, 以作为某些条件的判定依据, 以及新的行为的参数.<br>必要时我们可以拷贝这份meta数据, 或者伪造修饰部分数据来提供更特殊的环境实现.    </p>\n</blockquote>\n</li>\n<li><p>基础的脚本胶水接口实现 (开发向低级接口)   </p>\n<blockquote>\n<p>一次性提供所有meta数据的访问接口<br>提供C侧基于meta数据的功能函数封装, 尽可能的做到原子性   </p>\n</blockquote>\n</li>\n<li><p>编写模板类, 提供易用 易读 易使用的高级接口(用户向)  </p>\n<blockquote>\n<p>一次性翻译低级接口到高级接口,  这个过程会隐藏掉例如meta数据本身访问等<br>复杂逻辑封装    </p>\n</blockquote>\n</li>\n<li><p>在C++代码中打桩  </p>\n<blockquote>\n<p>把来自设计者的脚本片段和合成一个临时函数并压栈<br>把meta数据和调用信息压栈, 作为临时函数的参数去执行.<br>这里为了简化不同流程的桩点环境和不同事件的桩点环境不同, 并不会编写不同的桩点代码而是统一使用meta数据,  这样再脚本系统的实现上就做到了统一的埋点处理, 极大的减少了因此带来的桩点代码量.<br>桩点中来自策划的脚本片段实际执行会经过’模板类’这个中间层,  而这个中间层存储在可热更的单独文件中.<br>打桩的脚本代码在首次执行时会处理为字节码提高性能, 热更配置会清除字节码.<br>模板类脚本也为字节码 可热更.   </p>\n</blockquote>\n</li>\n<li><p>注意项:  对脚本调用可能存在嵌套, 例如在脚本事件中触发新的脚本甚至重入  </p>\n<blockquote>\n<p>在每段可能会触发脚本的关键路径上进行stack计数, 超过计数block掉该流程.<br>脚本环境支持嵌套, 或者说脚本环境(包含技能meta和脚本环境实例)应该是放在栈上. </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"更具体的实现细节\"><a href=\"#更具体的实现细节\" class=\"headerlink\" title=\"更具体的实现细节\"></a>更具体的实现细节</h2><h3 id=\"lua的OOP模拟\"><a href=\"#lua的OOP模拟\" class=\"headerlink\" title=\"lua的OOP模拟\"></a>lua的OOP模拟</h3><p>需要解释下是 lua没有类的概念, 只有实例(table).  但是lua的table是可以聚合函数和数据的, 并且存在metatable这种元表概念, 因此在在lua的语法特性中我们可以用以下方式来完成一个接近OOP的模拟, 基本思路如下:  </p>\n<ul>\n<li><p>构造一个全局的table实例作为创建实例的metatable(类的概念)   </p>\n</li>\n<li><p>提供一个公共的new接口来创建一个新表, 并设置好metatable的关系. (实例化)  </p>\n</li>\n<li><p>以:形式来编写所有函数完成C++this指针的作用, 即所有函数的实现默认第一个参数为实例自身, 调用时默认用自身作为函数的第一个参数   </p>\n</li>\n<li><p>其简洁的实现形式如下:   </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 定义全局table  </span></span><br><span class=\"line\">meta = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--数据成员 </span></span><br><span class=\"line\">meta.class_name = <span class=\"string\">\"meta\"</span>;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--函数成员</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meta:desc</span><span class=\"params\">(msg)</span></span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(self.class_name .. <span class=\"string\">\": \"</span> .. msg)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--这个:是一个语法糖, 等价代码:</span></span><br><span class=\"line\"><span class=\"comment\">--[[</span></span><br><span class=\"line\"><span class=\"comment\">function meta.desc(self, msg)</span></span><br><span class=\"line\"><span class=\"comment\">    print(self.class_name .. \": \" .. msg)</span></span><br><span class=\"line\"><span class=\"comment\">end</span></span><br><span class=\"line\"><span class=\"comment\">]]</span><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实例化方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">meta.New</span><span class=\"params\">(...)</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> inst = &#123;...&#125;  </span><br><span class=\"line\">    <span class=\"built_in\">setmetatable</span>(inst, &#123; <span class=\"built_in\">__index</span> = meta &#125;)   <span class=\"comment\">--设置metatable 当inst中不存在某个键，会读出meta相应的元方法   </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inst</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--实例化一个meta的实例  </span></span><br><span class=\"line\"><span class=\"keyword\">local</span> inst = meta.New()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--修改新实例的class_name为inst    </span></span><br><span class=\"line\">inst.class_name = <span class=\"string\">\"inst\"</span>   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--子类并没有desc方法 会尝试读meta的desc 并把inst实例以self参数传入该方法    </span></span><br><span class=\"line\">inst:desc(<span class=\"string\">\"new inst\"</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<ul>\n<li><p>output  </p>\n<blockquote>\n<p> inst: new inst</p>\n</blockquote>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3></li>\n<li><p>统一的桩点代码</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(skill_meta, result, ...)</span></span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> inst_env = &#123;skill_meta, result, ...&#125;</span><br><span class=\"line\">  <span class=\"built_in\">setmetatable</span>(inst_env, &#123; <span class=\"built_in\">__index</span> = meta_env &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">do</span> </span><br><span class=\"line\">      <span class=\"comment\">--配置开始</span></span><br><span class=\"line\">      <span class=\"comment\">--inst_env:cast_skill(...)</span></span><br><span class=\"line\">      <span class=\"comment\">--配置结束</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置方式<br>伪脚本片段: 沉默BUFF的实现:   </p>\n<figure class=\"highlight plain\"><figcaption><span>pre cast skill ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">if inst_env:skill_has_tag(333) then inst_env:block_flow() end</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>封装实现<br>把上述逻辑封装成一个call   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inst_env:silence(tag)</span><br><span class=\"line\">  if self:skill_has_tag(333) then self:block_flow() end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><figcaption><span>pre cast skill ```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">inst_env:silence(333)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"shadowsocks代理远端和本地配置以及VPS上的bbr开启等","date":"2020-05-08T16:00:00.000Z","author":"yawei.zhang","_content":"\n## shadowsocks服务器配置  \n* 安装shadowsocks  \n```\napt-get install shadowsocks\n```\n* 配置shadowsocks\n  配置路径\n  ```\n  /etc/shadowsocks/config.json\n  ```\n* 配置内容(参考):\n  ```\n  {\n    \"server\":[\"::1\", \"0.0.0.0\"],\n    \"mode\":\"tcp_and_udp\",\n    \"server_port\":8080,\n    \"password\":\"****\",\n    \"method\":\"aes-256-cfb\"\n  }\n  ```\n  <!-- more -->  \n  \n* 参数说明:\n  |-|-|\n  |名称|解释|\n  |-|-|\n  |server|    服务端监听地址| \n  |server_port |服务端端口| \n  |local_address|本地监听地址| \n  |local_port|本地端口| \n  |password|用于加密的密码| \n  |timeout|超时时间（秒）| \n  |method|加密方式，默认为 chacha20-ietf-poly1305| \n  |mode|是否启用 TCP / UDP 转发，参阅 shadowsocks-libev(8)| \n  |fast_open|是否启用 TCP Fast Open| \n  |workers|worker 数量| \n* 参数内容/详细  \n  shadowsocks执行 \n  ```\n  ssserver -h\n  ```\n  shadowsocks-libev执行\n  ```\n  ss-server -h\n  ```\n\n* 停止/开启/重启服务\n  ```\n  /etc/init.d/shadowsocks restart\n  ```\n\n\n## kcptun加速 \n* 下载/安装kcptun  \n  在比较新的linux系统中默认已经有kcptun的源 例如debian10中可以用以下命令直接安装  \n  ``` Shell\n    apt-get install kcptun\n  ```\n\n* 示例启动脚本\n  开启kcptun进行加速, 如下命令使用 fast2 和fast3模式打开两个通道  其中从8081接受到的数据会以mode fast2转发到本地的8080端口     \n  ```\n  killall server_linux_amd64 -w\n  /root/.ssh/server_linux_amd64 -t \"127.0.0.1:8080\" -l \":8081\" -mode fast2  1>/dev/null 2>&1 &\n  /root/.ssh/server_linux_amd64 -t \"127.0.0.1:8080\" -l \":8082\" -mode fast3  1>/dev/null 2>&1 &\n  ```\n\n* shadowsocks 客户端配置   \n  支持插件启动的shadowsocks 在插件选项中填写 kcptun  \n  在插件的选项中填写, 这里要注意有的版本 插件选项一栏要留空格 否则会出现黏连问题导致配置错误    \n  ```\n   -mode fast2\n  ```\n  如果没有内置kcptun 则需要下载kcptun到shadowsocks的目录下, 这时插件的名字则为可执行程序的名称  \n\n* kcptun-client \n  ```\n  kcptun-client -l\":8081\" -r\"vps:8081\" --mode fast2 1>/dev/null 2>&1 &  \n  ```\n\n## linux本地配置\n* 下载shadowsocks   \n\n* 填写配置到某文件例如 example.json  如下:  \n  ```\n  {                                                                                                                                                               \n    \"server\":\"remote ip\",\n    \"server_port\":remote port,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":8080,\n    \"password\":\"****\",\n    \"method\":\"aes-256-cfb\"\n  }\n  ```\n\n* 然后以以下命令进行启动   \n  ```\n  sslocal -c example.json -d start  \n  ```\n  如果是shadowsocks-libev  上述命令由sslocal改为ss-local即可   \n\n* 通过kcptun启动本地shadowsocks  \n  脚本如下:  \n  ```\n  killall sslocal\n  killall kcptun-client\n  kcptun-client  -r \"remote:9090\" -l \":8081\" -mode fast2  &\n  sslocal -s 127.0.0.1 -p 8024 -l 8081 -k passwd -m aes-256-cfb  -d start \n  ```\n\n* 测试代理命令   --socks5-hostname 和--socks5的区别在于前者的dns解析是在远端进行 后者在本地  \n  ```\n  curl --socks5 127.0.0.1:8080 www.youtube.com\n  ```\n\n## linux本地的proxy设置转换和使用   \n  大部分命令是没有--socks5这样的选项以供使用的   常用的代理转换工具如下:   \n* 安装privoxy服务  \n\n* 配置/etc/privoxy/config  \n  ```\n  forward-socks5t   /               127.0.0.1:9050 .\n  listen-address  127.0.0.1:1080\n  listen-address  [::1]:1080\n  ```\n\n  通过这样的配置可以提供本地http代理1080, 并把所有请求fowrad到socks5的目标127.0.0.1:9050   \n  通过针对域名/IP的规则匹配, 可以实现把不同的请求转发到不同的目标服务器上 例如对于本地请求可以进行跳过:  \n  ```\n  forward         192.168.*.*/     .\n  ```\n\n* 设置linux代理  \n  编辑/etc/bash.bashrc 或者```~/.bashrc ```     \n  ```\n  export http_proxy=\"http://127.0.0.1:1080\"\n  export https_proxy=\"http://127.0.0.1:1080\"\n  ```\n\n\n## linux本地的proxy方案proxychains  \n这个命令比上述的linux本地方案更方便一些   \n* 安装proxychains\n\n* 编辑proxychains的配置文件  /etc/proxychains.conf   \n  ```\n  [ProxyList]\n  socks5  127.0.0.1 8080\n  ```\n\n* 使用和测试  在进行任何需要代理的命令前面增加proxychains即可  例如:\n  ```\n  proxychains wget youtube.com\n  ```\n\n## 网络调优/开启BBR   \n\n* 查看os版本 4.9之后系统支持bbr\n  ```\n  uname -a\n  ```\n\n* 查看是否开启bbr  \n  ```\n  lsmod | grep bbr\n  ```\n\n* 更新内核到4.9: Debian 8 / Ubuntu 14 / Ubuntu 16\n  ```\n  wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11.4/linux-image-4.11.4-041104-generic_4.11.4-041104.201706071003_amd64.deb\n  ```\n\n* 更新内核  \n  ```\n  dpkg -i linux-image-4.*.deb\n  ```\n\n* 清理旧内核(可跳过)\n  ```\n  apt-get autoremove\n  ```\n\n* 更新 grub 系统引导文件并重启  \n  ```\n  update-grub\n  reboot\n  ```\n\n* 开启BBR算法   \n  ```\n  modprobe tcp_bbr\n  echo \"tcp_bbr\" >> /etc/modules-load.d/modules.conf\n  echo \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\n  echo \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\n  sysctl -p\n  ```\n\n* 测试应该均有bbr  \n  ```\n  sysctl net.ipv4.tcp_available_congestion_control\n  sysctl net.ipv4.tcp_congestion_control\n  ```\n  \n\n* 最新的发行版现在默认都已开启BBR   ","source":"_posts/2020-06-15-shadowsock-proxy.md","raw":"---\ntitle: shadowsocks代理远端和本地配置以及VPS上的bbr开启等\ndate: 2020-05-09\ncategories: develop \nauthor: yawei.zhang \n---\n\n## shadowsocks服务器配置  \n* 安装shadowsocks  \n```\napt-get install shadowsocks\n```\n* 配置shadowsocks\n  配置路径\n  ```\n  /etc/shadowsocks/config.json\n  ```\n* 配置内容(参考):\n  ```\n  {\n    \"server\":[\"::1\", \"0.0.0.0\"],\n    \"mode\":\"tcp_and_udp\",\n    \"server_port\":8080,\n    \"password\":\"****\",\n    \"method\":\"aes-256-cfb\"\n  }\n  ```\n  <!-- more -->  \n  \n* 参数说明:\n  |-|-|\n  |名称|解释|\n  |-|-|\n  |server|    服务端监听地址| \n  |server_port |服务端端口| \n  |local_address|本地监听地址| \n  |local_port|本地端口| \n  |password|用于加密的密码| \n  |timeout|超时时间（秒）| \n  |method|加密方式，默认为 chacha20-ietf-poly1305| \n  |mode|是否启用 TCP / UDP 转发，参阅 shadowsocks-libev(8)| \n  |fast_open|是否启用 TCP Fast Open| \n  |workers|worker 数量| \n* 参数内容/详细  \n  shadowsocks执行 \n  ```\n  ssserver -h\n  ```\n  shadowsocks-libev执行\n  ```\n  ss-server -h\n  ```\n\n* 停止/开启/重启服务\n  ```\n  /etc/init.d/shadowsocks restart\n  ```\n\n\n## kcptun加速 \n* 下载/安装kcptun  \n  在比较新的linux系统中默认已经有kcptun的源 例如debian10中可以用以下命令直接安装  \n  ``` Shell\n    apt-get install kcptun\n  ```\n\n* 示例启动脚本\n  开启kcptun进行加速, 如下命令使用 fast2 和fast3模式打开两个通道  其中从8081接受到的数据会以mode fast2转发到本地的8080端口     \n  ```\n  killall server_linux_amd64 -w\n  /root/.ssh/server_linux_amd64 -t \"127.0.0.1:8080\" -l \":8081\" -mode fast2  1>/dev/null 2>&1 &\n  /root/.ssh/server_linux_amd64 -t \"127.0.0.1:8080\" -l \":8082\" -mode fast3  1>/dev/null 2>&1 &\n  ```\n\n* shadowsocks 客户端配置   \n  支持插件启动的shadowsocks 在插件选项中填写 kcptun  \n  在插件的选项中填写, 这里要注意有的版本 插件选项一栏要留空格 否则会出现黏连问题导致配置错误    \n  ```\n   -mode fast2\n  ```\n  如果没有内置kcptun 则需要下载kcptun到shadowsocks的目录下, 这时插件的名字则为可执行程序的名称  \n\n* kcptun-client \n  ```\n  kcptun-client -l\":8081\" -r\"vps:8081\" --mode fast2 1>/dev/null 2>&1 &  \n  ```\n\n## linux本地配置\n* 下载shadowsocks   \n\n* 填写配置到某文件例如 example.json  如下:  \n  ```\n  {                                                                                                                                                               \n    \"server\":\"remote ip\",\n    \"server_port\":remote port,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":8080,\n    \"password\":\"****\",\n    \"method\":\"aes-256-cfb\"\n  }\n  ```\n\n* 然后以以下命令进行启动   \n  ```\n  sslocal -c example.json -d start  \n  ```\n  如果是shadowsocks-libev  上述命令由sslocal改为ss-local即可   \n\n* 通过kcptun启动本地shadowsocks  \n  脚本如下:  \n  ```\n  killall sslocal\n  killall kcptun-client\n  kcptun-client  -r \"remote:9090\" -l \":8081\" -mode fast2  &\n  sslocal -s 127.0.0.1 -p 8024 -l 8081 -k passwd -m aes-256-cfb  -d start \n  ```\n\n* 测试代理命令   --socks5-hostname 和--socks5的区别在于前者的dns解析是在远端进行 后者在本地  \n  ```\n  curl --socks5 127.0.0.1:8080 www.youtube.com\n  ```\n\n## linux本地的proxy设置转换和使用   \n  大部分命令是没有--socks5这样的选项以供使用的   常用的代理转换工具如下:   \n* 安装privoxy服务  \n\n* 配置/etc/privoxy/config  \n  ```\n  forward-socks5t   /               127.0.0.1:9050 .\n  listen-address  127.0.0.1:1080\n  listen-address  [::1]:1080\n  ```\n\n  通过这样的配置可以提供本地http代理1080, 并把所有请求fowrad到socks5的目标127.0.0.1:9050   \n  通过针对域名/IP的规则匹配, 可以实现把不同的请求转发到不同的目标服务器上 例如对于本地请求可以进行跳过:  \n  ```\n  forward         192.168.*.*/     .\n  ```\n\n* 设置linux代理  \n  编辑/etc/bash.bashrc 或者```~/.bashrc ```     \n  ```\n  export http_proxy=\"http://127.0.0.1:1080\"\n  export https_proxy=\"http://127.0.0.1:1080\"\n  ```\n\n\n## linux本地的proxy方案proxychains  \n这个命令比上述的linux本地方案更方便一些   \n* 安装proxychains\n\n* 编辑proxychains的配置文件  /etc/proxychains.conf   \n  ```\n  [ProxyList]\n  socks5  127.0.0.1 8080\n  ```\n\n* 使用和测试  在进行任何需要代理的命令前面增加proxychains即可  例如:\n  ```\n  proxychains wget youtube.com\n  ```\n\n## 网络调优/开启BBR   \n\n* 查看os版本 4.9之后系统支持bbr\n  ```\n  uname -a\n  ```\n\n* 查看是否开启bbr  \n  ```\n  lsmod | grep bbr\n  ```\n\n* 更新内核到4.9: Debian 8 / Ubuntu 14 / Ubuntu 16\n  ```\n  wget -c http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.11.4/linux-image-4.11.4-041104-generic_4.11.4-041104.201706071003_amd64.deb\n  ```\n\n* 更新内核  \n  ```\n  dpkg -i linux-image-4.*.deb\n  ```\n\n* 清理旧内核(可跳过)\n  ```\n  apt-get autoremove\n  ```\n\n* 更新 grub 系统引导文件并重启  \n  ```\n  update-grub\n  reboot\n  ```\n\n* 开启BBR算法   \n  ```\n  modprobe tcp_bbr\n  echo \"tcp_bbr\" >> /etc/modules-load.d/modules.conf\n  echo \"net.core.default_qdisc=fq\" >> /etc/sysctl.conf\n  echo \"net.ipv4.tcp_congestion_control=bbr\" >> /etc/sysctl.conf\n  sysctl -p\n  ```\n\n* 测试应该均有bbr  \n  ```\n  sysctl net.ipv4.tcp_available_congestion_control\n  sysctl net.ipv4.tcp_congestion_control\n  ```\n  \n\n* 最新的发行版现在默认都已开启BBR   ","slug":"2020-06-15-shadowsock-proxy","published":1,"updated":"2020-06-15T13:02:04.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyejd001f7w5hc6vb33fx","content":"<h2><span id=\"shadowsocks服务器配置\">shadowsocks服务器配置</span></h2><ul>\n<li><p>安装shadowsocks  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install shadowsocks</span><br></pre></td></tr></table></figure></li>\n<li><p>配置shadowsocks<br>配置路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;shadowsocks&#x2F;config.json</span><br></pre></td></tr></table></figure></li>\n<li><p>配置内容(参考):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;:[&quot;::1&quot;, &quot;0.0.0.0&quot;],</span><br><span class=\"line\">  &quot;mode&quot;:&quot;tcp_and_udp&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;:8080,</span><br><span class=\"line\">  &quot;password&quot;:&quot;****&quot;,</span><br><span class=\"line\">  &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>  \n</li>\n<li><p>参数说明:<br>|-|-|</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>server</td>\n<td>服务端监听地址</td>\n</tr>\n<tr>\n<td>server_port</td>\n<td>服务端端口</td>\n</tr>\n<tr>\n<td>local_address</td>\n<td>本地监听地址</td>\n</tr>\n<tr>\n<td>local_port</td>\n<td>本地端口</td>\n</tr>\n<tr>\n<td>password</td>\n<td>用于加密的密码</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>超时时间（秒）</td>\n</tr>\n<tr>\n<td>method</td>\n<td>加密方式，默认为 chacha20-ietf-poly1305</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>是否启用 TCP / UDP 转发，参阅 shadowsocks-libev(8)</td>\n</tr>\n<tr>\n<td>fast_open</td>\n<td>是否启用 TCP Fast Open</td>\n</tr>\n<tr>\n<td>workers</td>\n<td>worker 数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>参数内容/详细<br>shadowsocks执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -h</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止/开启/重启服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2><span id=\"kcptun加速\">kcptun加速</span></h2><ul>\n<li><p>下载/安装kcptun<br>在比较新的linux系统中默认已经有kcptun的源 例如debian10中可以用以下命令直接安装  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install kcptun</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例启动脚本<br>开启kcptun进行加速, 如下命令使用 fast2 和fast3模式打开两个通道  其中从8081接受到的数据会以mode fast2转发到本地的8080端口     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall server_linux_amd64 -w</span><br><span class=\"line\">&#x2F;root&#x2F;.ssh&#x2F;server_linux_amd64 -t &quot;127.0.0.1:8080&quot; -l &quot;:8081&quot; -mode fast2  1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class=\"line\">&#x2F;root&#x2F;.ssh&#x2F;server_linux_amd64 -t &quot;127.0.0.1:8080&quot; -l &quot;:8082&quot; -mode fast3  1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>shadowsocks 客户端配置<br>支持插件启动的shadowsocks 在插件选项中填写 kcptun<br>在插件的选项中填写, 这里要注意有的版本 插件选项一栏要留空格 否则会出现黏连问题导致配置错误    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-mode fast2</span><br></pre></td></tr></table></figure>\n<p>如果没有内置kcptun 则需要下载kcptun到shadowsocks的目录下, 这时插件的名字则为可执行程序的名称  </p>\n</li>\n<li><p>kcptun-client </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kcptun-client -l&quot;:8081&quot; -r&quot;vps:8081&quot; --mode fast2 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"linux本地配置\">linux本地配置</span></h2><ul>\n<li><p>下载shadowsocks   </p>\n</li>\n<li><p>填写配置到某文件例如 example.json  如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;                                                                                                                                                               </span><br><span class=\"line\">  &quot;server&quot;:&quot;remote ip&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;:remote port,</span><br><span class=\"line\">  &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">  &quot;local_port&quot;:8080,</span><br><span class=\"line\">  &quot;password&quot;:&quot;****&quot;,</span><br><span class=\"line\">  &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后以以下命令进行启动   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c example.json -d start</span><br></pre></td></tr></table></figure>\n<p>如果是shadowsocks-libev  上述命令由sslocal改为ss-local即可   </p>\n</li>\n<li><p>通过kcptun启动本地shadowsocks<br>脚本如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall sslocal</span><br><span class=\"line\">killall kcptun-client</span><br><span class=\"line\">kcptun-client  -r &quot;remote:9090&quot; -l &quot;:8081&quot; -mode fast2  &amp;</span><br><span class=\"line\">sslocal -s 127.0.0.1 -p 8024 -l 8081 -k passwd -m aes-256-cfb  -d start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试代理命令   –socks5-hostname 和–socks5的区别在于前者的dns解析是在远端进行 后者在本地  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:8080 www.youtube.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"linux本地的proxy设置转换和使用\">linux本地的proxy设置转换和使用</span></h2><p>  大部分命令是没有–socks5这样的选项以供使用的   常用的代理转换工具如下:   </p>\n<ul>\n<li><p>安装privoxy服务  </p>\n</li>\n<li><p>配置/etc/privoxy/config  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward-socks5t   &#x2F;               127.0.0.1:9050 .</span><br><span class=\"line\">listen-address  127.0.0.1:1080</span><br><span class=\"line\">listen-address  [::1]:1080</span><br></pre></td></tr></table></figure>\n\n<p>通过这样的配置可以提供本地http代理1080, 并把所有请求fowrad到socks5的目标127.0.0.1:9050<br>通过针对域名/IP的规则匹配, 可以实现把不同的请求转发到不同的目标服务器上 例如对于本地请求可以进行跳过:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward         192.168.*.*&#x2F;     .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置linux代理<br>编辑/etc/bash.bashrc 或者<code>~/.bashrc</code>     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br><span class=\"line\">export https_proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2><span id=\"linux本地的proxy方案proxychains\">linux本地的proxy方案proxychains</span></h2><p>这个命令比上述的linux本地方案更方便一些   </p>\n<ul>\n<li><p>安装proxychains</p>\n</li>\n<li><p>编辑proxychains的配置文件  /etc/proxychains.conf   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\">socks5  127.0.0.1 8080</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用和测试  在进行任何需要代理的命令前面增加proxychains即可  例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget youtube.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2><span id=\"网络调优开启bbr\">网络调优/开启BBR</span></h2><ul>\n<li><p>查看os版本 4.9之后系统支持bbr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否开启bbr  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep bbr</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新内核到4.9: Debian 8 / Ubuntu 14 / Ubuntu 16</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.11.4&#x2F;linux-image-4.11.4-041104-generic_4.11.4-041104.201706071003_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新内核  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i linux-image-4.*.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理旧内核(可跳过)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get autoremove</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新 grub 系统引导文件并重启  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启BBR算法   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modprobe tcp_bbr</span><br><span class=\"line\">echo &quot;tcp_bbr&quot; &gt;&gt; &#x2F;etc&#x2F;modules-load.d&#x2F;modules.conf</span><br><span class=\"line\">echo &quot;net.core.default_qdisc&#x3D;fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class=\"line\">echo &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试应该均有bbr  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>最新的发行版现在默认都已开启BBR</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"shadowsocks服务器配置\"><a href=\"#shadowsocks服务器配置\" class=\"headerlink\" title=\"shadowsocks服务器配置\"></a>shadowsocks服务器配置</h2><ul>\n<li><p>安装shadowsocks  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install shadowsocks</span><br></pre></td></tr></table></figure></li>\n<li><p>配置shadowsocks<br>配置路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;shadowsocks&#x2F;config.json</span><br></pre></td></tr></table></figure></li>\n<li><p>配置内容(参考):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;:[&quot;::1&quot;, &quot;0.0.0.0&quot;],</span><br><span class=\"line\">  &quot;mode&quot;:&quot;tcp_and_udp&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;:8080,</span><br><span class=\"line\">  &quot;password&quot;:&quot;****&quot;,</span><br><span class=\"line\">  &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"</li>\n<li><p>参数说明:<br>|-|-|</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>server</td>\n<td>服务端监听地址</td>\n</tr>\n<tr>\n<td>server_port</td>\n<td>服务端端口</td>\n</tr>\n<tr>\n<td>local_address</td>\n<td>本地监听地址</td>\n</tr>\n<tr>\n<td>local_port</td>\n<td>本地端口</td>\n</tr>\n<tr>\n<td>password</td>\n<td>用于加密的密码</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>超时时间（秒）</td>\n</tr>\n<tr>\n<td>method</td>\n<td>加密方式，默认为 chacha20-ietf-poly1305</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>是否启用 TCP / UDP 转发，参阅 shadowsocks-libev(8)</td>\n</tr>\n<tr>\n<td>fast_open</td>\n<td>是否启用 TCP Fast Open</td>\n</tr>\n<tr>\n<td>workers</td>\n<td>worker 数量</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>参数内容/详细<br>shadowsocks执行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -h</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-server -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止/开启/重启服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;shadowsocks restart</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"kcptun加速\"><a href=\"#kcptun加速\" class=\"headerlink\" title=\"kcptun加速\"></a>kcptun加速</h2><ul>\n<li><p>下载/安装kcptun<br>在比较新的linux系统中默认已经有kcptun的源 例如debian10中可以用以下命令直接安装  </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install kcptun</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例启动脚本<br>开启kcptun进行加速, 如下命令使用 fast2 和fast3模式打开两个通道  其中从8081接受到的数据会以mode fast2转发到本地的8080端口     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall server_linux_amd64 -w</span><br><span class=\"line\">&#x2F;root&#x2F;.ssh&#x2F;server_linux_amd64 -t &quot;127.0.0.1:8080&quot; -l &quot;:8081&quot; -mode fast2  1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br><span class=\"line\">&#x2F;root&#x2F;.ssh&#x2F;server_linux_amd64 -t &quot;127.0.0.1:8080&quot; -l &quot;:8082&quot; -mode fast3  1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>shadowsocks 客户端配置<br>支持插件启动的shadowsocks 在插件选项中填写 kcptun<br>在插件的选项中填写, 这里要注意有的版本 插件选项一栏要留空格 否则会出现黏连问题导致配置错误    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-mode fast2</span><br></pre></td></tr></table></figure>\n<p>如果没有内置kcptun 则需要下载kcptun到shadowsocks的目录下, 这时插件的名字则为可执行程序的名称  </p>\n</li>\n<li><p>kcptun-client </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kcptun-client -l&quot;:8081&quot; -r&quot;vps:8081&quot; --mode fast2 1&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"linux本地配置\"><a href=\"#linux本地配置\" class=\"headerlink\" title=\"linux本地配置\"></a>linux本地配置</h2><ul>\n<li><p>下载shadowsocks   </p>\n</li>\n<li><p>填写配置到某文件例如 example.json  如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;                                                                                                                                                               </span><br><span class=\"line\">  &quot;server&quot;:&quot;remote ip&quot;,</span><br><span class=\"line\">  &quot;server_port&quot;:remote port,</span><br><span class=\"line\">  &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">  &quot;local_port&quot;:8080,</span><br><span class=\"line\">  &quot;password&quot;:&quot;****&quot;,</span><br><span class=\"line\">  &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后以以下命令进行启动   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c example.json -d start</span><br></pre></td></tr></table></figure>\n<p>如果是shadowsocks-libev  上述命令由sslocal改为ss-local即可   </p>\n</li>\n<li><p>通过kcptun启动本地shadowsocks<br>脚本如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall sslocal</span><br><span class=\"line\">killall kcptun-client</span><br><span class=\"line\">kcptun-client  -r &quot;remote:9090&quot; -l &quot;:8081&quot; -mode fast2  &amp;</span><br><span class=\"line\">sslocal -s 127.0.0.1 -p 8024 -l 8081 -k passwd -m aes-256-cfb  -d start</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试代理命令   –socks5-hostname 和–socks5的区别在于前者的dns解析是在远端进行 后者在本地  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --socks5 127.0.0.1:8080 www.youtube.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"linux本地的proxy设置转换和使用\"><a href=\"#linux本地的proxy设置转换和使用\" class=\"headerlink\" title=\"linux本地的proxy设置转换和使用\"></a>linux本地的proxy设置转换和使用</h2><p>  大部分命令是没有–socks5这样的选项以供使用的   常用的代理转换工具如下:   </p>\n<ul>\n<li><p>安装privoxy服务  </p>\n</li>\n<li><p>配置/etc/privoxy/config  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward-socks5t   &#x2F;               127.0.0.1:9050 .</span><br><span class=\"line\">listen-address  127.0.0.1:1080</span><br><span class=\"line\">listen-address  [::1]:1080</span><br></pre></td></tr></table></figure>\n\n<p>通过这样的配置可以提供本地http代理1080, 并把所有请求fowrad到socks5的目标127.0.0.1:9050<br>通过针对域名/IP的规则匹配, 可以实现把不同的请求转发到不同的目标服务器上 例如对于本地请求可以进行跳过:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forward         192.168.*.*&#x2F;     .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置linux代理<br>编辑/etc/bash.bashrc 或者<code>~/.bashrc</code>     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br><span class=\"line\">export https_proxy&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:1080&quot;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"linux本地的proxy方案proxychains\"><a href=\"#linux本地的proxy方案proxychains\" class=\"headerlink\" title=\"linux本地的proxy方案proxychains\"></a>linux本地的proxy方案proxychains</h2><p>这个命令比上述的linux本地方案更方便一些   </p>\n<ul>\n<li><p>安装proxychains</p>\n</li>\n<li><p>编辑proxychains的配置文件  /etc/proxychains.conf   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\">socks5  127.0.0.1 8080</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用和测试  在进行任何需要代理的命令前面增加proxychains即可  例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget youtube.com</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"网络调优-开启BBR\"><a href=\"#网络调优-开启BBR\" class=\"headerlink\" title=\"网络调优/开启BBR\"></a>网络调优/开启BBR</h2><ul>\n<li><p>查看os版本 4.9之后系统支持bbr</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -a</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否开启bbr  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsmod | grep bbr</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新内核到4.9: Debian 8 / Ubuntu 14 / Ubuntu 16</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.11.4&#x2F;linux-image-4.11.4-041104-generic_4.11.4-041104.201706071003_amd64.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新内核  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i linux-image-4.*.deb</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清理旧内核(可跳过)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get autoremove</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新 grub 系统引导文件并重启  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-grub</span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启BBR算法   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modprobe tcp_bbr</span><br><span class=\"line\">echo &quot;tcp_bbr&quot; &gt;&gt; &#x2F;etc&#x2F;modules-load.d&#x2F;modules.conf</span><br><span class=\"line\">echo &quot;net.core.default_qdisc&#x3D;fq&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class=\"line\">echo &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; &gt;&gt; &#x2F;etc&#x2F;sysctl.conf</span><br><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试应该均有bbr  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class=\"line\">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>最新的发行版现在默认都已开启BBR</li>\n</ul>"},{"title":"技能系统中的标签机制","date":"2020-06-17T16:00:00.000Z","author":"yawei.zhang","_content":"\n# 技能系统中的标签机制   \n\n## 前言  \n------------------------\n\n对于一个大规模系统的建模 一定离不开常见的分类手段, 而分类要根据系统中的元素以及元素之间的关系来作为划分依据, 从而采用不同策略\n技能系统中的配置以'技能'和'效果'作为完整的配置单位, 所有的技能和效果之间的关系则是多维的图的拓扑关系的, 例如:\n\n> 眩晕BUFF: 禁止普通移动, 禁止常规技能释放,    \n> 定身BUFF: 禁止普通移动  \n> 金身BUFF: 禁止普通移动, 禁止所有技能释放,  不可被眩晕/禁止所有效果(受击, 伤害, debuff/buff等)   \n> 冰冻BUFF: 禁止普通移动, 禁止所有技能释放除了解控技能,  可能禁止受击   \n> 沉默BUFF:              禁止所有(部分)技能释放    \n> 无敌BUFF: 不接受任何伤害  \n> 霸体BUFF: 打断受击状态并免控  \n> 灯笼BUFF: 可困住霸体BUFF单位   \n> 解控技能: 接触被控状态但无法接触部分例如灯笼BUFF  \n> 净化技能: 移除DEBUFF  \n> 破盾技能: 移除带有指定盾效果的BUFF   \n> 致命一击: 突破所有防御包括部分无敌BUFF .  \n> 引导技能A: 可被强控技能打断  \n> 引导技能B: 可被移动取消   \n> 连招技能: 需要前置技能成功释放完成  \n> 千斤坠技能: 需要飞行状态可释放     \n\n几乎所有的技能和buff之间都需要定义好他们的交互关系, 包括依赖条件, 禁止状态,  打断逻辑,  替换规则, 触发节奏, 否则在不断的引入新的技能时, 很容易导致已有的系统出现局部甚至整体的错误流程和功能表现.   \n\n而作为一个灵动丰富的多样性的技能系统, 在具体的状态关系上往往不会是简单的禁止打断逻辑, 而是分梯度, 计数, 浮动值的不同而有不同的分支策略, 需要对这样的一个规模和结构复杂的系统进行井井有条的管理和维护, 则需要一套完善灵活的拆分理念和管理机制.   \n\n<!-- more -->\n\n### 常见系统的拓扑关系和拆分方式       \n\n* 水平聚合  --> 分组   \n* 垂直聚合  --> 分层   \n* 分形聚合  --> 分维   \n* 树形(水平+垂直) -->  按照继承关系逐层分组      \n* 有向图 -->  按阶段划分  \n* 图 --> 系统分析\n  \n### 技能系统的拓扑关系基本分析梳理与划分方法   \n\n* 根据上层表现进行逻辑拆解, 分类, 分组, 分优先级直到不可继续拆分    \n  > 自定向下拆分   \n  > 不可拆分的定义应该由实现者参与和辅助  \n* 根据上层表现的总量分布, 重新划分定义好相应的组,类, 层级关系, 来方便上层表现的组装   \n  > 自底向上重组   \n  > 在这个阶段奠定基础的组,类,层级之间的关系,  例如打断的基本关系, 禁止的基本关系, 依赖的基本关系.    \n* 构建新的系统模型   \n  > 因为是网络图, 因此无论任何系统模型都可能存在表达的边界 对于这个问题尝试以下几个方法解决或者规避   \n    * 可以尝试砍部分需求来简化系统模型 如果这些需求本身存在逻辑上矛盾, 计算的边界等硬伤问题    \n    * 实现者提供尽可能的开放拓扑关系的制定, 提供更为松散的框架进行兜底设计, 或者说提供一套图灵完备的设计, 让设计者直接面对复杂度来达到对脑洞的克制目的.  \n\n### 提供特征的编码和分类机制, 把定义抛给设计者   \n\n通常来讲, 类型划分中, 类和事物的关系是 IS-A的关系, 是一种强的分类定义, 但是假设能按照类型进行划分和分类, 其构建出来的系统也更为简洁.    \n例如: 我们对所有生物进行了IS-A的划分,  并且该类型是存在继承(上下)关系的阶元系统.   \n\n作为技能系统, 和生物群体类似, 每个技能都有丰富的特征和效果, 问题是谁可以去定义类型, 依据什么特征进行划分, 这种划分的依据是否会频繁变更导致整个系统持续的动态调整.   \n\n针对这个问题, 我们采用另外一套方法, 即标签机制,  标签是和事物的特征进行映射, 从分类视角来看  标签和事物的关系是 HAS-A的关系,  标签提供了类型划分的依据, 也因此只要做好了标签相关的机制, 即可把分类的定义抛给设计者灵活设计.    \n即本文介绍的核心主旨:  \n\n<font color=#b6b size=4>**标签机制提供了分类的依据但不定义分类本身, 把定义交给设计者, 尽量减少和避免开发人员的持续跟进开发** </font>\n\n\n\n## 标签机制在技能中的设计   \n------------------------------------------------------------    \n\n### 资源标签配置     \n\n无论是技能还是效果的配置, 都存在一个标示这个配置包含哪些标签, 例如:  \n\n> 某buff需要免疫某种类型的伤害(效果): 伤害效果可能携带 **魔法 物理** \n> 某buff需要沉默某种类型的技能: 技能可能携带 **普攻 刺杀 强交互 重击**   \n> 某技能需要清除某些负面效果: BUFF可能携带 **\\Debuff 沉默 禁止移动 无敌**   \n\n对于持续性的技能和效果, 存在额外的track标签, 与持续阶段, 时间点相关 例如:   \n> 攻击技能持续2秒 划分为三个阶段, 前摇和攻击阶段不可普通移动, 后摇可移动取消, 那么禁止普通移动的标签只能贴在前两个阶段   \n> 攻击过程中有大约5帧时间会有霸体效果, 那么可以拖一个5帧时长的标签来标识这个效果开启和截止时间点    \n\n\n### 战斗中的标签检测    \n\n在战斗中的事件节点中, 如果涉及到技能和效果, 则可以通过查找配置, 根据事件中的配置的标签进行分支决策, 例如:     \n> 在被攻击事件中, 检测攻击来源所属的技能配置是否包含'物理'标签, 如果当前状态免疫物理攻击, 则一旦查询到有该标签则免疫掉本次攻击的效果  \n> 在被攻击事件中, 检测自身是否有技能或者buff存在'霸体'标签, 如果有并且该标签的影响范围覆盖当前时间点, 则免疫掉掉本次攻击的受击效果  \n> 在攻击事件中, 检测目标是否存在'霸体'标签, 如果存在且覆盖当前时间点, 则主动取消掉受击效果. (该配置同上, 但属于主动检测)   \n\n\n## 标签机制在技能中的实现   \n-------------------------------------------------------------   \n\n### 运行时的记录(作为状态存在的标签集合):  \n\n为了实现快速查询, 减少遍历的性能开销, 在涉及到持续存在的标签部分都会记录到战斗单位的属性中, 并进行计数.    \n\n\n* 固定标签编号的范围, 以数组的形式存储计数信息   \n  > 例如: 标签的范围是200, 同时存在的技能和buff等影响计数的持续状态不超过50个, 单个技能或者buff的标签不超过3个, 那么我们就可以用200个字节来存储计数.   \n  > 放宽范围的话可能需要ushort大小    \n\n* 数组计数   \n  > 所有标签信息生效时均在战斗单位对应的属性内存段的标签位进行计数++\n  > 在标签信息失效时在战斗单位对应的属性内存段的标签位进行计数--\n\n* bitmap优化判定, CPUcache友好     \n  > 标签范围是200, 则只需要4个uint64来存储, 非常高效快速   \n  > bitmap只包含0或者1,  0-1的切换由计数模块负责   \n  > 复杂度为O(1)   index计算+位的与运算即可   \n  \n\n* 标签的同步   \n  > 直接全量BITMAP(脏同步/实时同步)给观察者   \n  > 进出视野, 标签变化等时机  \n\n* 全量模式下的变更对比   \n  > 通过异或检测是否发生变更并记录到老数据中  \n  > 通过bsr扫描变更的位置, 与新数据对比确认变更方向\n  > 所有变更对比完后使用新数据覆盖     \n\n* 分全量模式下的变更对比  \n  > 把变更的部分已数组的形式下发  \n  > 遍历该数据即可   \n\n### 基于标签的资源分类和定义   \n类型总是拆解成具体的标签,  类型的划分依据标签, 类型的定义也由标签实现.  \n* 扩展定义   \n  > 指定的类型本质上是一个和普通标签不冲突的标签编号, 单独配置   \n\n* 聚合定义   \n  > 指定的类型本质上是多个普通标签+类型标签聚合而成, 单独配置并解析为具体的标签  \n\n* 继承定义   \n  > 指定的类型和层级关系由多个普通标签+多层类型标签聚合而成,  单独配置并解析为具体的标签    \n\n\n  \n## 其他分类    \n\n* 连招组   \n* 公共CD组  ","source":"_posts/2020-06-18-skill-tag.md","raw":"---\ntitle: 技能系统中的标签机制\ndate: 2020-06-18\ncategories: develop \nauthor: yawei.zhang \n---\n\n# 技能系统中的标签机制   \n\n## 前言  \n------------------------\n\n对于一个大规模系统的建模 一定离不开常见的分类手段, 而分类要根据系统中的元素以及元素之间的关系来作为划分依据, 从而采用不同策略\n技能系统中的配置以'技能'和'效果'作为完整的配置单位, 所有的技能和效果之间的关系则是多维的图的拓扑关系的, 例如:\n\n> 眩晕BUFF: 禁止普通移动, 禁止常规技能释放,    \n> 定身BUFF: 禁止普通移动  \n> 金身BUFF: 禁止普通移动, 禁止所有技能释放,  不可被眩晕/禁止所有效果(受击, 伤害, debuff/buff等)   \n> 冰冻BUFF: 禁止普通移动, 禁止所有技能释放除了解控技能,  可能禁止受击   \n> 沉默BUFF:              禁止所有(部分)技能释放    \n> 无敌BUFF: 不接受任何伤害  \n> 霸体BUFF: 打断受击状态并免控  \n> 灯笼BUFF: 可困住霸体BUFF单位   \n> 解控技能: 接触被控状态但无法接触部分例如灯笼BUFF  \n> 净化技能: 移除DEBUFF  \n> 破盾技能: 移除带有指定盾效果的BUFF   \n> 致命一击: 突破所有防御包括部分无敌BUFF .  \n> 引导技能A: 可被强控技能打断  \n> 引导技能B: 可被移动取消   \n> 连招技能: 需要前置技能成功释放完成  \n> 千斤坠技能: 需要飞行状态可释放     \n\n几乎所有的技能和buff之间都需要定义好他们的交互关系, 包括依赖条件, 禁止状态,  打断逻辑,  替换规则, 触发节奏, 否则在不断的引入新的技能时, 很容易导致已有的系统出现局部甚至整体的错误流程和功能表现.   \n\n而作为一个灵动丰富的多样性的技能系统, 在具体的状态关系上往往不会是简单的禁止打断逻辑, 而是分梯度, 计数, 浮动值的不同而有不同的分支策略, 需要对这样的一个规模和结构复杂的系统进行井井有条的管理和维护, 则需要一套完善灵活的拆分理念和管理机制.   \n\n<!-- more -->\n\n### 常见系统的拓扑关系和拆分方式       \n\n* 水平聚合  --> 分组   \n* 垂直聚合  --> 分层   \n* 分形聚合  --> 分维   \n* 树形(水平+垂直) -->  按照继承关系逐层分组      \n* 有向图 -->  按阶段划分  \n* 图 --> 系统分析\n  \n### 技能系统的拓扑关系基本分析梳理与划分方法   \n\n* 根据上层表现进行逻辑拆解, 分类, 分组, 分优先级直到不可继续拆分    \n  > 自定向下拆分   \n  > 不可拆分的定义应该由实现者参与和辅助  \n* 根据上层表现的总量分布, 重新划分定义好相应的组,类, 层级关系, 来方便上层表现的组装   \n  > 自底向上重组   \n  > 在这个阶段奠定基础的组,类,层级之间的关系,  例如打断的基本关系, 禁止的基本关系, 依赖的基本关系.    \n* 构建新的系统模型   \n  > 因为是网络图, 因此无论任何系统模型都可能存在表达的边界 对于这个问题尝试以下几个方法解决或者规避   \n    * 可以尝试砍部分需求来简化系统模型 如果这些需求本身存在逻辑上矛盾, 计算的边界等硬伤问题    \n    * 实现者提供尽可能的开放拓扑关系的制定, 提供更为松散的框架进行兜底设计, 或者说提供一套图灵完备的设计, 让设计者直接面对复杂度来达到对脑洞的克制目的.  \n\n### 提供特征的编码和分类机制, 把定义抛给设计者   \n\n通常来讲, 类型划分中, 类和事物的关系是 IS-A的关系, 是一种强的分类定义, 但是假设能按照类型进行划分和分类, 其构建出来的系统也更为简洁.    \n例如: 我们对所有生物进行了IS-A的划分,  并且该类型是存在继承(上下)关系的阶元系统.   \n\n作为技能系统, 和生物群体类似, 每个技能都有丰富的特征和效果, 问题是谁可以去定义类型, 依据什么特征进行划分, 这种划分的依据是否会频繁变更导致整个系统持续的动态调整.   \n\n针对这个问题, 我们采用另外一套方法, 即标签机制,  标签是和事物的特征进行映射, 从分类视角来看  标签和事物的关系是 HAS-A的关系,  标签提供了类型划分的依据, 也因此只要做好了标签相关的机制, 即可把分类的定义抛给设计者灵活设计.    \n即本文介绍的核心主旨:  \n\n<font color=#b6b size=4>**标签机制提供了分类的依据但不定义分类本身, 把定义交给设计者, 尽量减少和避免开发人员的持续跟进开发** </font>\n\n\n\n## 标签机制在技能中的设计   \n------------------------------------------------------------    \n\n### 资源标签配置     \n\n无论是技能还是效果的配置, 都存在一个标示这个配置包含哪些标签, 例如:  \n\n> 某buff需要免疫某种类型的伤害(效果): 伤害效果可能携带 **魔法 物理** \n> 某buff需要沉默某种类型的技能: 技能可能携带 **普攻 刺杀 强交互 重击**   \n> 某技能需要清除某些负面效果: BUFF可能携带 **\\Debuff 沉默 禁止移动 无敌**   \n\n对于持续性的技能和效果, 存在额外的track标签, 与持续阶段, 时间点相关 例如:   \n> 攻击技能持续2秒 划分为三个阶段, 前摇和攻击阶段不可普通移动, 后摇可移动取消, 那么禁止普通移动的标签只能贴在前两个阶段   \n> 攻击过程中有大约5帧时间会有霸体效果, 那么可以拖一个5帧时长的标签来标识这个效果开启和截止时间点    \n\n\n### 战斗中的标签检测    \n\n在战斗中的事件节点中, 如果涉及到技能和效果, 则可以通过查找配置, 根据事件中的配置的标签进行分支决策, 例如:     \n> 在被攻击事件中, 检测攻击来源所属的技能配置是否包含'物理'标签, 如果当前状态免疫物理攻击, 则一旦查询到有该标签则免疫掉本次攻击的效果  \n> 在被攻击事件中, 检测自身是否有技能或者buff存在'霸体'标签, 如果有并且该标签的影响范围覆盖当前时间点, 则免疫掉掉本次攻击的受击效果  \n> 在攻击事件中, 检测目标是否存在'霸体'标签, 如果存在且覆盖当前时间点, 则主动取消掉受击效果. (该配置同上, 但属于主动检测)   \n\n\n## 标签机制在技能中的实现   \n-------------------------------------------------------------   \n\n### 运行时的记录(作为状态存在的标签集合):  \n\n为了实现快速查询, 减少遍历的性能开销, 在涉及到持续存在的标签部分都会记录到战斗单位的属性中, 并进行计数.    \n\n\n* 固定标签编号的范围, 以数组的形式存储计数信息   \n  > 例如: 标签的范围是200, 同时存在的技能和buff等影响计数的持续状态不超过50个, 单个技能或者buff的标签不超过3个, 那么我们就可以用200个字节来存储计数.   \n  > 放宽范围的话可能需要ushort大小    \n\n* 数组计数   \n  > 所有标签信息生效时均在战斗单位对应的属性内存段的标签位进行计数++\n  > 在标签信息失效时在战斗单位对应的属性内存段的标签位进行计数--\n\n* bitmap优化判定, CPUcache友好     \n  > 标签范围是200, 则只需要4个uint64来存储, 非常高效快速   \n  > bitmap只包含0或者1,  0-1的切换由计数模块负责   \n  > 复杂度为O(1)   index计算+位的与运算即可   \n  \n\n* 标签的同步   \n  > 直接全量BITMAP(脏同步/实时同步)给观察者   \n  > 进出视野, 标签变化等时机  \n\n* 全量模式下的变更对比   \n  > 通过异或检测是否发生变更并记录到老数据中  \n  > 通过bsr扫描变更的位置, 与新数据对比确认变更方向\n  > 所有变更对比完后使用新数据覆盖     \n\n* 分全量模式下的变更对比  \n  > 把变更的部分已数组的形式下发  \n  > 遍历该数据即可   \n\n### 基于标签的资源分类和定义   \n类型总是拆解成具体的标签,  类型的划分依据标签, 类型的定义也由标签实现.  \n* 扩展定义   \n  > 指定的类型本质上是一个和普通标签不冲突的标签编号, 单独配置   \n\n* 聚合定义   \n  > 指定的类型本质上是多个普通标签+类型标签聚合而成, 单独配置并解析为具体的标签  \n\n* 继承定义   \n  > 指定的类型和层级关系由多个普通标签+多层类型标签聚合而成,  单独配置并解析为具体的标签    \n\n\n  \n## 其他分类    \n\n* 连招组   \n* 公共CD组  ","slug":"2020-06-18-skill-tag","published":1,"updated":"2020-07-15T07:26:23.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeje001h7w5h8f38a0wr","content":"<h1><span id=\"技能系统中的标签机制\">技能系统中的标签机制</span></h1><h2><span id=\"前言\">前言</span></h2><hr>\n<p>对于一个大规模系统的建模 一定离不开常见的分类手段, 而分类要根据系统中的元素以及元素之间的关系来作为划分依据, 从而采用不同策略<br>技能系统中的配置以’技能’和’效果’作为完整的配置单位, 所有的技能和效果之间的关系则是多维的图的拓扑关系的, 例如:</p>\n<blockquote>\n<p>眩晕BUFF: 禁止普通移动, 禁止常规技能释放,<br>定身BUFF: 禁止普通移动<br>金身BUFF: 禁止普通移动, 禁止所有技能释放,  不可被眩晕/禁止所有效果(受击, 伤害, debuff/buff等)<br>冰冻BUFF: 禁止普通移动, 禁止所有技能释放除了解控技能,  可能禁止受击<br>沉默BUFF:              禁止所有(部分)技能释放<br>无敌BUFF: 不接受任何伤害<br>霸体BUFF: 打断受击状态并免控<br>灯笼BUFF: 可困住霸体BUFF单位<br>解控技能: 接触被控状态但无法接触部分例如灯笼BUFF<br>净化技能: 移除DEBUFF<br>破盾技能: 移除带有指定盾效果的BUFF<br>致命一击: 突破所有防御包括部分无敌BUFF .<br>引导技能A: 可被强控技能打断<br>引导技能B: 可被移动取消<br>连招技能: 需要前置技能成功释放完成<br>千斤坠技能: 需要飞行状态可释放     </p>\n</blockquote>\n<p>几乎所有的技能和buff之间都需要定义好他们的交互关系, 包括依赖条件, 禁止状态,  打断逻辑,  替换规则, 触发节奏, 否则在不断的引入新的技能时, 很容易导致已有的系统出现局部甚至整体的错误流程和功能表现.   </p>\n<p>而作为一个灵动丰富的多样性的技能系统, 在具体的状态关系上往往不会是简单的禁止打断逻辑, 而是分梯度, 计数, 浮动值的不同而有不同的分支策略, 需要对这样的一个规模和结构复杂的系统进行井井有条的管理和维护, 则需要一套完善灵活的拆分理念和管理机制.   </p>\n<a id=\"more\"></a>\n\n<h3><span id=\"常见系统的拓扑关系和拆分方式\">常见系统的拓扑关系和拆分方式</span></h3><ul>\n<li>水平聚合  –&gt; 分组   </li>\n<li>垂直聚合  –&gt; 分层   </li>\n<li>分形聚合  –&gt; 分维   </li>\n<li>树形(水平+垂直) –&gt;  按照继承关系逐层分组      </li>\n<li>有向图 –&gt;  按阶段划分  </li>\n<li>图 –&gt; 系统分析</li>\n</ul>\n<h3><span id=\"技能系统的拓扑关系基本分析梳理与划分方法\">技能系统的拓扑关系基本分析梳理与划分方法</span></h3><ul>\n<li>根据上层表现进行逻辑拆解, 分类, 分组, 分优先级直到不可继续拆分    <blockquote>\n<p>自定向下拆分<br>不可拆分的定义应该由实现者参与和辅助  </p>\n</blockquote>\n</li>\n<li>根据上层表现的总量分布, 重新划分定义好相应的组,类, 层级关系, 来方便上层表现的组装   <blockquote>\n<p>自底向上重组<br>在这个阶段奠定基础的组,类,层级之间的关系,  例如打断的基本关系, 禁止的基本关系, 依赖的基本关系.    </p>\n</blockquote>\n</li>\n<li>构建新的系统模型   <blockquote>\n<p>因为是网络图, 因此无论任何系统模型都可能存在表达的边界 对于这个问题尝试以下几个方法解决或者规避   </p>\n</blockquote>\n<ul>\n<li>可以尝试砍部分需求来简化系统模型 如果这些需求本身存在逻辑上矛盾, 计算的边界等硬伤问题    </li>\n<li>实现者提供尽可能的开放拓扑关系的制定, 提供更为松散的框架进行兜底设计, 或者说提供一套图灵完备的设计, 让设计者直接面对复杂度来达到对脑洞的克制目的.  </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"提供特征的编码和分类机制-把定义抛给设计者\">提供特征的编码和分类机制, 把定义抛给设计者</span></h3><p>通常来讲, 类型划分中, 类和事物的关系是 IS-A的关系, 是一种强的分类定义, 但是假设能按照类型进行划分和分类, 其构建出来的系统也更为简洁.<br>例如: 我们对所有生物进行了IS-A的划分,  并且该类型是存在继承(上下)关系的阶元系统.   </p>\n<p>作为技能系统, 和生物群体类似, 每个技能都有丰富的特征和效果, 问题是谁可以去定义类型, 依据什么特征进行划分, 这种划分的依据是否会频繁变更导致整个系统持续的动态调整.   </p>\n<p>针对这个问题, 我们采用另外一套方法, 即标签机制,  标签是和事物的特征进行映射, 从分类视角来看  标签和事物的关系是 HAS-A的关系,  标签提供了类型划分的依据, 也因此只要做好了标签相关的机制, 即可把分类的定义抛给设计者灵活设计.<br>即本文介绍的核心主旨:  </p>\n<p><font color=\"#b6b\" size=\"4\"><strong>标签机制提供了分类的依据但不定义分类本身, 把定义交给设计者, 尽量减少和避免开发人员的持续跟进开发</strong> </font></p>\n<h2><span id=\"标签机制在技能中的设计\">标签机制在技能中的设计</span></h2><hr>\n<h3><span id=\"资源标签配置\">资源标签配置</span></h3><p>无论是技能还是效果的配置, 都存在一个标示这个配置包含哪些标签, 例如:  </p>\n<blockquote>\n<p>某buff需要免疫某种类型的伤害(效果): 伤害效果可能携带 <strong>魔法 物理</strong><br>某buff需要沉默某种类型的技能: 技能可能携带 <strong>普攻 刺杀 强交互 重击</strong><br>某技能需要清除某些负面效果: BUFF可能携带 <strong>\\Debuff 沉默 禁止移动 无敌</strong>   </p>\n</blockquote>\n<p>对于持续性的技能和效果, 存在额外的track标签, 与持续阶段, 时间点相关 例如:   </p>\n<blockquote>\n<p>攻击技能持续2秒 划分为三个阶段, 前摇和攻击阶段不可普通移动, 后摇可移动取消, 那么禁止普通移动的标签只能贴在前两个阶段<br>攻击过程中有大约5帧时间会有霸体效果, 那么可以拖一个5帧时长的标签来标识这个效果开启和截止时间点    </p>\n</blockquote>\n<h3><span id=\"战斗中的标签检测\">战斗中的标签检测</span></h3><p>在战斗中的事件节点中, 如果涉及到技能和效果, 则可以通过查找配置, 根据事件中的配置的标签进行分支决策, 例如:     </p>\n<blockquote>\n<p>在被攻击事件中, 检测攻击来源所属的技能配置是否包含’物理’标签, 如果当前状态免疫物理攻击, 则一旦查询到有该标签则免疫掉本次攻击的效果<br>在被攻击事件中, 检测自身是否有技能或者buff存在’霸体’标签, 如果有并且该标签的影响范围覆盖当前时间点, 则免疫掉掉本次攻击的受击效果<br>在攻击事件中, 检测目标是否存在’霸体’标签, 如果存在且覆盖当前时间点, 则主动取消掉受击效果. (该配置同上, 但属于主动检测)   </p>\n</blockquote>\n<h2><span id=\"标签机制在技能中的实现\">标签机制在技能中的实现</span></h2><hr>\n<h3><span id=\"运行时的记录作为状态存在的标签集合\">运行时的记录(作为状态存在的标签集合):</span></h3><p>为了实现快速查询, 减少遍历的性能开销, 在涉及到持续存在的标签部分都会记录到战斗单位的属性中, 并进行计数.    </p>\n<ul>\n<li><p>固定标签编号的范围, 以数组的形式存储计数信息   </p>\n<blockquote>\n<p>例如: 标签的范围是200, 同时存在的技能和buff等影响计数的持续状态不超过50个, 单个技能或者buff的标签不超过3个, 那么我们就可以用200个字节来存储计数.<br>放宽范围的话可能需要ushort大小    </p>\n</blockquote>\n</li>\n<li><p>数组计数   </p>\n<blockquote>\n<p>所有标签信息生效时均在战斗单位对应的属性内存段的标签位进行计数++<br>在标签信息失效时在战斗单位对应的属性内存段的标签位进行计数–</p>\n</blockquote>\n</li>\n<li><p>bitmap优化判定, CPUcache友好     </p>\n<blockquote>\n<p>标签范围是200, 则只需要4个uint64来存储, 非常高效快速<br>bitmap只包含0或者1,  0-1的切换由计数模块负责<br>复杂度为O(1)   index计算+位的与运算即可   </p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>标签的同步   </p>\n<blockquote>\n<p>直接全量BITMAP(脏同步/实时同步)给观察者<br>进出视野, 标签变化等时机  </p>\n</blockquote>\n</li>\n<li><p>全量模式下的变更对比   </p>\n<blockquote>\n<p>通过异或检测是否发生变更并记录到老数据中<br>通过bsr扫描变更的位置, 与新数据对比确认变更方向<br>所有变更对比完后使用新数据覆盖     </p>\n</blockquote>\n</li>\n<li><p>分全量模式下的变更对比  </p>\n<blockquote>\n<p>把变更的部分已数组的形式下发<br>遍历该数据即可   </p>\n</blockquote>\n</li>\n</ul>\n<h3><span id=\"基于标签的资源分类和定义\">基于标签的资源分类和定义</span></h3><p>类型总是拆解成具体的标签,  类型的划分依据标签, 类型的定义也由标签实现.  </p>\n<ul>\n<li><p>扩展定义   </p>\n<blockquote>\n<p>指定的类型本质上是一个和普通标签不冲突的标签编号, 单独配置   </p>\n</blockquote>\n</li>\n<li><p>聚合定义   </p>\n<blockquote>\n<p>指定的类型本质上是多个普通标签+类型标签聚合而成, 单独配置并解析为具体的标签  </p>\n</blockquote>\n</li>\n<li><p>继承定义   </p>\n<blockquote>\n<p>指定的类型和层级关系由多个普通标签+多层类型标签聚合而成,  单独配置并解析为具体的标签    </p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"其他分类\">其他分类</span></h2><ul>\n<li>连招组   </li>\n<li>公共CD组</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"技能系统中的标签机制\"><a href=\"#技能系统中的标签机制\" class=\"headerlink\" title=\"技能系统中的标签机制\"></a>技能系统中的标签机制</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><hr>\n<p>对于一个大规模系统的建模 一定离不开常见的分类手段, 而分类要根据系统中的元素以及元素之间的关系来作为划分依据, 从而采用不同策略<br>技能系统中的配置以’技能’和’效果’作为完整的配置单位, 所有的技能和效果之间的关系则是多维的图的拓扑关系的, 例如:</p>\n<blockquote>\n<p>眩晕BUFF: 禁止普通移动, 禁止常规技能释放,<br>定身BUFF: 禁止普通移动<br>金身BUFF: 禁止普通移动, 禁止所有技能释放,  不可被眩晕/禁止所有效果(受击, 伤害, debuff/buff等)<br>冰冻BUFF: 禁止普通移动, 禁止所有技能释放除了解控技能,  可能禁止受击<br>沉默BUFF:              禁止所有(部分)技能释放<br>无敌BUFF: 不接受任何伤害<br>霸体BUFF: 打断受击状态并免控<br>灯笼BUFF: 可困住霸体BUFF单位<br>解控技能: 接触被控状态但无法接触部分例如灯笼BUFF<br>净化技能: 移除DEBUFF<br>破盾技能: 移除带有指定盾效果的BUFF<br>致命一击: 突破所有防御包括部分无敌BUFF .<br>引导技能A: 可被强控技能打断<br>引导技能B: 可被移动取消<br>连招技能: 需要前置技能成功释放完成<br>千斤坠技能: 需要飞行状态可释放     </p>\n</blockquote>\n<p>几乎所有的技能和buff之间都需要定义好他们的交互关系, 包括依赖条件, 禁止状态,  打断逻辑,  替换规则, 触发节奏, 否则在不断的引入新的技能时, 很容易导致已有的系统出现局部甚至整体的错误流程和功能表现.   </p>\n<p>而作为一个灵动丰富的多样性的技能系统, 在具体的状态关系上往往不会是简单的禁止打断逻辑, 而是分梯度, 计数, 浮动值的不同而有不同的分支策略, 需要对这样的一个规模和结构复杂的系统进行井井有条的管理和维护, 则需要一套完善灵活的拆分理念和管理机制.   </p>","more":"<h3 id=\"常见系统的拓扑关系和拆分方式\"><a href=\"#常见系统的拓扑关系和拆分方式\" class=\"headerlink\" title=\"常见系统的拓扑关系和拆分方式\"></a>常见系统的拓扑关系和拆分方式</h3><ul>\n<li>水平聚合  –&gt; 分组   </li>\n<li>垂直聚合  –&gt; 分层   </li>\n<li>分形聚合  –&gt; 分维   </li>\n<li>树形(水平+垂直) –&gt;  按照继承关系逐层分组      </li>\n<li>有向图 –&gt;  按阶段划分  </li>\n<li>图 –&gt; 系统分析</li>\n</ul>\n<h3 id=\"技能系统的拓扑关系基本分析梳理与划分方法\"><a href=\"#技能系统的拓扑关系基本分析梳理与划分方法\" class=\"headerlink\" title=\"技能系统的拓扑关系基本分析梳理与划分方法\"></a>技能系统的拓扑关系基本分析梳理与划分方法</h3><ul>\n<li>根据上层表现进行逻辑拆解, 分类, 分组, 分优先级直到不可继续拆分    <blockquote>\n<p>自定向下拆分<br>不可拆分的定义应该由实现者参与和辅助  </p>\n</blockquote>\n</li>\n<li>根据上层表现的总量分布, 重新划分定义好相应的组,类, 层级关系, 来方便上层表现的组装   <blockquote>\n<p>自底向上重组<br>在这个阶段奠定基础的组,类,层级之间的关系,  例如打断的基本关系, 禁止的基本关系, 依赖的基本关系.    </p>\n</blockquote>\n</li>\n<li>构建新的系统模型   <blockquote>\n<p>因为是网络图, 因此无论任何系统模型都可能存在表达的边界 对于这个问题尝试以下几个方法解决或者规避   </p>\n</blockquote>\n<ul>\n<li>可以尝试砍部分需求来简化系统模型 如果这些需求本身存在逻辑上矛盾, 计算的边界等硬伤问题    </li>\n<li>实现者提供尽可能的开放拓扑关系的制定, 提供更为松散的框架进行兜底设计, 或者说提供一套图灵完备的设计, 让设计者直接面对复杂度来达到对脑洞的克制目的.  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"提供特征的编码和分类机制-把定义抛给设计者\"><a href=\"#提供特征的编码和分类机制-把定义抛给设计者\" class=\"headerlink\" title=\"提供特征的编码和分类机制, 把定义抛给设计者\"></a>提供特征的编码和分类机制, 把定义抛给设计者</h3><p>通常来讲, 类型划分中, 类和事物的关系是 IS-A的关系, 是一种强的分类定义, 但是假设能按照类型进行划分和分类, 其构建出来的系统也更为简洁.<br>例如: 我们对所有生物进行了IS-A的划分,  并且该类型是存在继承(上下)关系的阶元系统.   </p>\n<p>作为技能系统, 和生物群体类似, 每个技能都有丰富的特征和效果, 问题是谁可以去定义类型, 依据什么特征进行划分, 这种划分的依据是否会频繁变更导致整个系统持续的动态调整.   </p>\n<p>针对这个问题, 我们采用另外一套方法, 即标签机制,  标签是和事物的特征进行映射, 从分类视角来看  标签和事物的关系是 HAS-A的关系,  标签提供了类型划分的依据, 也因此只要做好了标签相关的机制, 即可把分类的定义抛给设计者灵活设计.<br>即本文介绍的核心主旨:  </p>\n<p><font color=#b6b size=4><strong>标签机制提供了分类的依据但不定义分类本身, 把定义交给设计者, 尽量减少和避免开发人员的持续跟进开发</strong> </font></p>\n<h2 id=\"标签机制在技能中的设计\"><a href=\"#标签机制在技能中的设计\" class=\"headerlink\" title=\"标签机制在技能中的设计\"></a>标签机制在技能中的设计</h2><hr>\n<h3 id=\"资源标签配置\"><a href=\"#资源标签配置\" class=\"headerlink\" title=\"资源标签配置\"></a>资源标签配置</h3><p>无论是技能还是效果的配置, 都存在一个标示这个配置包含哪些标签, 例如:  </p>\n<blockquote>\n<p>某buff需要免疫某种类型的伤害(效果): 伤害效果可能携带 <strong>魔法 物理</strong><br>某buff需要沉默某种类型的技能: 技能可能携带 <strong>普攻 刺杀 强交互 重击</strong><br>某技能需要清除某些负面效果: BUFF可能携带 <strong>\\Debuff 沉默 禁止移动 无敌</strong>   </p>\n</blockquote>\n<p>对于持续性的技能和效果, 存在额外的track标签, 与持续阶段, 时间点相关 例如:   </p>\n<blockquote>\n<p>攻击技能持续2秒 划分为三个阶段, 前摇和攻击阶段不可普通移动, 后摇可移动取消, 那么禁止普通移动的标签只能贴在前两个阶段<br>攻击过程中有大约5帧时间会有霸体效果, 那么可以拖一个5帧时长的标签来标识这个效果开启和截止时间点    </p>\n</blockquote>\n<h3 id=\"战斗中的标签检测\"><a href=\"#战斗中的标签检测\" class=\"headerlink\" title=\"战斗中的标签检测\"></a>战斗中的标签检测</h3><p>在战斗中的事件节点中, 如果涉及到技能和效果, 则可以通过查找配置, 根据事件中的配置的标签进行分支决策, 例如:     </p>\n<blockquote>\n<p>在被攻击事件中, 检测攻击来源所属的技能配置是否包含’物理’标签, 如果当前状态免疫物理攻击, 则一旦查询到有该标签则免疫掉本次攻击的效果<br>在被攻击事件中, 检测自身是否有技能或者buff存在’霸体’标签, 如果有并且该标签的影响范围覆盖当前时间点, 则免疫掉掉本次攻击的受击效果<br>在攻击事件中, 检测目标是否存在’霸体’标签, 如果存在且覆盖当前时间点, 则主动取消掉受击效果. (该配置同上, 但属于主动检测)   </p>\n</blockquote>\n<h2 id=\"标签机制在技能中的实现\"><a href=\"#标签机制在技能中的实现\" class=\"headerlink\" title=\"标签机制在技能中的实现\"></a>标签机制在技能中的实现</h2><hr>\n<h3 id=\"运行时的记录-作为状态存在的标签集合\"><a href=\"#运行时的记录-作为状态存在的标签集合\" class=\"headerlink\" title=\"运行时的记录(作为状态存在的标签集合):\"></a>运行时的记录(作为状态存在的标签集合):</h3><p>为了实现快速查询, 减少遍历的性能开销, 在涉及到持续存在的标签部分都会记录到战斗单位的属性中, 并进行计数.    </p>\n<ul>\n<li><p>固定标签编号的范围, 以数组的形式存储计数信息   </p>\n<blockquote>\n<p>例如: 标签的范围是200, 同时存在的技能和buff等影响计数的持续状态不超过50个, 单个技能或者buff的标签不超过3个, 那么我们就可以用200个字节来存储计数.<br>放宽范围的话可能需要ushort大小    </p>\n</blockquote>\n</li>\n<li><p>数组计数   </p>\n<blockquote>\n<p>所有标签信息生效时均在战斗单位对应的属性内存段的标签位进行计数++<br>在标签信息失效时在战斗单位对应的属性内存段的标签位进行计数–</p>\n</blockquote>\n</li>\n<li><p>bitmap优化判定, CPUcache友好     </p>\n<blockquote>\n<p>标签范围是200, 则只需要4个uint64来存储, 非常高效快速<br>bitmap只包含0或者1,  0-1的切换由计数模块负责<br>复杂度为O(1)   index计算+位的与运算即可   </p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>标签的同步   </p>\n<blockquote>\n<p>直接全量BITMAP(脏同步/实时同步)给观察者<br>进出视野, 标签变化等时机  </p>\n</blockquote>\n</li>\n<li><p>全量模式下的变更对比   </p>\n<blockquote>\n<p>通过异或检测是否发生变更并记录到老数据中<br>通过bsr扫描变更的位置, 与新数据对比确认变更方向<br>所有变更对比完后使用新数据覆盖     </p>\n</blockquote>\n</li>\n<li><p>分全量模式下的变更对比  </p>\n<blockquote>\n<p>把变更的部分已数组的形式下发<br>遍历该数据即可   </p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"基于标签的资源分类和定义\"><a href=\"#基于标签的资源分类和定义\" class=\"headerlink\" title=\"基于标签的资源分类和定义\"></a>基于标签的资源分类和定义</h3><p>类型总是拆解成具体的标签,  类型的划分依据标签, 类型的定义也由标签实现.  </p>\n<ul>\n<li><p>扩展定义   </p>\n<blockquote>\n<p>指定的类型本质上是一个和普通标签不冲突的标签编号, 单独配置   </p>\n</blockquote>\n</li>\n<li><p>聚合定义   </p>\n<blockquote>\n<p>指定的类型本质上是多个普通标签+类型标签聚合而成, 单独配置并解析为具体的标签  </p>\n</blockquote>\n</li>\n<li><p>继承定义   </p>\n<blockquote>\n<p>指定的类型和层级关系由多个普通标签+多层类型标签聚合而成,  单独配置并解析为具体的标签    </p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"其他分类\"><a href=\"#其他分类\" class=\"headerlink\" title=\"其他分类\"></a>其他分类</h2><ul>\n<li>连招组   </li>\n<li>公共CD组</li>\n</ul>"},{"title":"基于共享内存的通用内存分配器","date":"2020-02-06T16:00:00.000Z","author":"yawei.zhang","_content":"\n### ..1. 目录  \n\n### linux系统的内存管理设计 \n![buddy_system](/images/system_memory.jpg)   \nLinux内核内存管理的一项重要工作就是如何在长期频繁申请释放内存的情况下, 避免碎片的产生.  \nLinux采用伙伴系统在极高的分配和回收性能(LGN)上, 最大化的减少了外部碎片(总是合并伙伴内存)的产生. \n伙伴算法非常简洁并且容易实现, 其一般实现的核心思路为维护一个整块内存, 通过不断的2分把最适配的内存分配给用户, 并且总是优先选择最零碎的空闲内存进行适配, 在回收时候则总是会合并空闲的伙伴内存(左右两个子节点的关系称之为伙伴关系), 以此来尽可能的保证大块的连续内存.   \n但是伙伴算法要求分配的内存必须是2的幂次大小, 因此直接使用会带来大量的内部碎片, 也因此伙伴算法一般都是作为底层内存管理算法不直接提供给用户, 而是通过dlmalloc等slab算法或者衍生算法提供给最终用户.  \n\nlinux采用slab算法来进行更细粒度的内存分配管理, 通过分箱算法, 对于小内存(256字节及以下, 分离存储)可以达到常数的性能, 对于 >256 && <1m的内存可以做到不大于LGN的分配性能, 并且通过对大块内存的精细切分和分箱算法可以做到几乎没有内部碎片, 通过对空闲内存的合并(没有伙伴关系约束也不存在假碎片问题, 但是因为大小chunk混合切分带来了更多的合并次数) 也有效的控制了外部碎片的产生.  \n\nlinux面对的环境在通用性上要求更高, 考虑到brk/mmap作为系统调用在一些环境下的性能差异表现, 以及小内存的在初始化数据(查找 切分等), slab相关的算法中更倾向于缓存足够多的block来保证小内存在分配上的性能表现, 而操作系统heap苛刻的收缩条件也会导致在项目中的实际表现往往是整个heap的内存总是接近保持在峰值水平上, 换句话说slab算法在实际的实现中其分配策略更接近'内存池'的概念.  \n\n其分箱算法采用64位的bitmap 也就是64个箱位, 支持单个内存分配请求的大小范围在dlmalloc的实现中为8字节-1M, 又因为内存池的分配策略, 以及外部碎片的有限控制, 所以slab只是一个针对小内存分配优化方案, 对于一个通用分配器来说仍然需要大内存的分配方案.   \n  \n因此包括linux内核, 整体的通用内存分配方案中, 使用buddy算法或者衍生算法来做大块线性地址空间的管理, 保证性能的情况下最小化外部碎片的产生, 通过slab算法或者衍生算法维护一个小内存请求的内存池, 以增加一小部分外部碎片的代价换取更少的内部碎片产生, 并保证向buddy system索要的内存都是满足2的幂次大小,  从而得到一个综合性能最优的方案, 这个方案比喻成[buddy算法负责批发 slab算法负责零售]具有比较形象的参考价值.    \n\n\n\n### 伙伴算法  \n\n因为最终的目的是希望把伙伴算法的管理结构保存在共享内存中,  因此我们在数组结构上以完美二叉树(perfect binary tree)的方式构建了整个伙伴算法,  由于对cpu cache友好的特征, 并且全局几乎只有简单的加减位移操作, 所以整个实现可以在非常简洁的基础上得到了一个比较出色的性能表现.   \n\n#### 数据结构和概述  \n```C++\n    /*  perfect binary tree\n    *                   0        -----------   : reserve\n    *\t                  1        -----------   :  root \n    *\n    *          2                 3\n    *\n    *     4        5         6        7\n    *\n    *   8   9   10   11   12   13  14   15\n    *\n    * ----------------------------------------\n    *\n    *   0   1   2    3    4    5   6     7     : memory buff\n    *\n    */\n```\n![buddy_system](/images/buddy_system.gif)\n伙伴算法是一个特殊的分离适配的内存管理器  \n* 能被有效管理的内存大小必须是2的幂次方   \n* 分配的内存大小一定是2的幂次大小对齐, 通过逐层向下2分找到最适配请求的大小  \n* 回收的内存会逐层向上合并 并且总是幂次大小合并 并且只能对伙伴内存(左右子节点)进行合并     \n\n* 显而易见的内部碎片  \n  因为2的幂次对齐分配, 比如我们需要power(2, 12)+1 的内存 实际上就会分配power(2,13)的内存,  内部碎片比例为 (power(2, 12)+1)/power(2,13), 有效负荷只有0.5左右.  \n  伙伴系统的分配粒度如果为页框机制, 例如采取页框大小为4k(方便匹配操作系统的页大小), 那么即使请求1个字节也需要一个完整的页框内存,  有效负荷只有1/(4k-1)即4k分之一.  \n\n* 显而易见的假碎片\n  两块相邻的空闲内存因为不属于伙伴关系则无法合并, 换句话说存在一块连续的空闲地址满足需求但是却因为无法在内存管理器中完成合并操作而不能提供服务.    \n  比如上面结构中 IDX 9 和 IDX 10皆为空闲,  IDX 9 和 IDX 5皆为空闲等      \n\n* 存在但被有效控制的外部碎片  \n  对于动态内存分配策略中, 只要满足通用性目标中\"处理任意请求序列\" 那么就一定会有外部碎片的产生, 因为其产生不仅仅在于分配器管理结构的设计, 更在于将来时, 外部的请求和释放时机.    \n    如图所示中, 我们并不能保证不会出现索引11和12被分配出去其他内存全部空闲这样的情况, 导致总空闲内存大小为6但是只能最大分配3个连续页框 .  \n  但相比其他的分配方案, 合并成一个2倍大小的大块内存, 总是只需要两个空闲小块, 而在分配策略中又总是会分配大小相同且相邻的块, 可以说是所有分配策略在保证LGN性能下控制外部碎片最好的方案.  \n   \n\n\n* 较为恒定的分配复杂度   \n  分配时会从根节点向下查找直到适配, 回收时从叶子节点向上查找, 并且都会从对应节点向根节点方向进行分配能力的修改.   \n  因此一对分配和释放请求总是恒定为LGN  \n                              \n\n#### 数据结构的定义:  \n\n同linux系统的方式类似, 我们按照页框为单位来管理内存, 页框的大小大于等于系统的页框大小, 可结合slab分配器进行调整.  \n根据要管理的内存大小和页框大小, 我们可以算出总得叶子数量,  而在这棵树上, 节点总数为2N(2倍叶子节点)   \n\n因此数据结构的定义为如下方式:\n```\n共享内存管理头部: 所有叶子节点 : 被管理的内存\n```\n\n每个节点用1个字节来记录, 内容为该节点的所对应的空间大小, (这里记录的不是大小, 而是大小的幂, 所以可以用一个字节来存储)   \n该节点对应的空间起始地址这位该节点在该层中的```offset* power(2, order) ```\n\n\n##### 初始化  \n所有节点的初始化为为该节点的空间大小.  \n例如index1 对应的则是被管理的所有空间  \n然后每层递减1  \n到叶子节点则为2^0次幂大小, 即一个页框单位.  \n\n\n##### 分配  \n如果分配参数是字节数, 则需要先按照页框向上取整   \n如果分配的参数是页框数量, 则需要按照2的幂次取整, 可以用bit search指令获取2的幂数(这个取法是向下取整 所以取完后要进行一次向上取整)   \n如果分配的是order  \n则检查root节点保存的order是否满足需求, 不满足这代表没有足够大的空间  \n如果满足需求则逐层查找, 直到到达对应的order层级, 然后修改该节点的可分配空间为0, 然后逐层向上修改分配能力  \n\ntips:\n 这里定义0为已分配, 而不是power(2,0)个空间大小,  因此在这里节点对应空间大小计算是power(2, (order ability)-1)   -1后才是power(2, order) .   \n 这样可以保证这棵树中从叶子节点向上查找时候的可以简单的while循环时候少一次边界判定, 计算方便   \n\n分配时候永远选择刚好满足需求的路径, 可以减少切分大块, 其次优先左子树,  减少外部碎片的产生以及提高cache命中.  \n\n\n ##### 释放  \n 通过地址计算页框编号, 然后加上N (树的大小是2N, N为所有非叶子节点的节点总数) 得到叶子节点的索引.  \n 从叶子节点用IDX /2 不断的向上查找, 直到找到节点被标记为0的层级,  修改该节点为该层级对应的空间大小, 然后逐层向上修改每层的新的空间分配能力, 如果左右节点的空间大小为该层级的大小(都空闲)则合并,(每个上层节点的能力均是节点对应的空间大小)   \n\n\n\n### SLAB内存分配器   \n有了buddy system之后, 移植所有可以基于mmap或者brk批量分配的内存分配器都会变得容易, 常见的现在linux系统使用的ptmalloc属于dlmalloc的分支版本, 而常用的TCMALLOC或者jemalloc都是基于dlmalloc的思想进行了更优更细粒度的实现, 体现在cpu cache更友好的分配策略以及多线程下更少的竞争等来获取更好的分配性能.      \n\ndlmalloc有着更简洁干净的实现 大约只有5000行代码, 其设计也非常的出色, 可以说是最容易移植的优秀的内存分配器.  \n\n#### 基础术语和概念如下:  \nPayload: 有效负载.指的是实际交给应用程序使用的内存大小.  \n\nOverhead: 负载,开销.本意是为了满足分配需求所消耗的内存量,实际在代码注释中多指除了payload之外的额外开销(有些书中也称之为cookie).  \n\nChunk: 区块.是内存分配的基本单位,类似物质世界中的原子不可再分. dlmalloc对内存的管理基本上都是以chunk为单位.一个典型的chunk是由用户程序使用的部分(payload)以及额外的标记信息(overhead)组成.  \n\nBin: 分箱.用来管理相同或同一区间大小的chunk.在dlmalloc中分为sbin和tbin两种.  \n\nMspace: 分配空间.说白了就是dlmalloc中内存池的叫法.在dlmalloc中可以管理多个mspace.如果不显式声明,将会使用一个全局的匿名空间,或者用户可以自行划分空间交给dlmalloc管理.  \n\nSegment: 区段.一般情况下,内存分配都是在一片连续区间内开采(exploit).但也会遇到不连续的情况,这就需要分成若干个区段记录.多个区段可以同属一个mspace.  \n\nFenceposts: 栅栏.大多数分配器中, fencepost起到非连续内存间的隔离作用.一般这种隔离被用做安全检查.分配器会在fenceposts所在位置写上特殊标记,一旦非连续内存间发生写入溢出(overwrite)就可以通过异常的fenceposts值发出警告.  \n\nBookkeeping: 记录信息.不同于每个chunk中的overhead,这里指的是整个mspace控制块的记录信息.往往这部分信息都固定在mspace开始的一段空间,或者干脆就放在地址空间的静态区中.  \n\nGranularity: 粒度.这个粒度指的是从system heap上获取内存的最小单位.一般来说该值至少为一个page size, 且必须以2为底.  \n\nMmap: 本意是类unix系统的文件映射调用.但在dlmalloc中表示的更宽泛,这里指代可以在进程地址空间中开辟非连续内存空间的系统调用.  \n\nMorecore: 指可以在进程地址空间中开辟连续内存空间的系统调用.在类unix系统下morecore指的是sbrk调用.  \n\nProgram break: 前面提到的sbrk()实际也是一个库函数,真正起作用的是brk()系统调用.这个函数其实就是break的缩写.所谓的break是一个代表进程heap区top-most位置的指针.当我们通过sbrk/brk向系统请求内存时,系统做的仅仅是移动break指针,内存就这样被划拨到heap中了.而当释放内存时,就反方向移动该指针,内存就返回给系统.  \n\nFootprint: 从系统获得的内存量.指的是当前dlmalloc从system heap获取的内存总和.设立footprint一方面是为了方便统计,另一方面也可以限制dlmalloc从系统获取的最大内存量.   \n\nTrimming: 裁剪.被dlmalloc管理的内存被free后,并不直接返还给系统,而是当积累到一定程度会通过一些算法判断system heap是否收缩(shrink),这个过程在dlmalloc中称作auto-trimming.   \n\n\n#### 分箱机制  \n分箱指的是在内存分配器内部划定一些chunk集合, 每个集合中记录的都是固定大小或区间的free chunk, 当分配时可以直接从中找到最贴近用户要求的那一个.  \n越是想要高效的分配,就越要将分箱划分的更细致,相应的也就浪费更多的内存, 因此, 分箱机制既不能太粗放而影响效率, 也不能太细致而降低利用率. \n分箱算法通过位移的计算技巧, 可以简单且快速的找到满足请求大小的最小非空箱位索引\n\n\n#### 小内存分配   \n\ndlmalloc定义了最小的分配粒度为8字节, 这样在保存chunk大小的字段中可以多出来3个位作为bit标记   \n然后每8个字节递增, 直到248字节, 总共32个箱子 如下:   \n```\n[bin idx] 8 8 8 8 8 8 8 8 8 \n[bin idx] 16 16 16 16 16 16   \n[bin idx] 24 24 24 24 24 24   \n...\n[bin idx] 248 248 248 248 248 248  \n```\n\n在64位下需要保证分配给用户的地址是两倍(void\\*)大小且包含一个8字节的prev_foot 一个8字节的head, 因此实际上使用的箱位不会用满32个. \ndlmalloc的prev_foot是一个边界标记法的使用技巧, 逻辑上其实是上一个chunk的foot部分, 如果不是空闲状态则会标记\"下个chunk的P\"为非空闲,  如果是空闲则会填充该字段为空闲chunk的大小.  \n这样就可以完成一个块从分配状态到空闲状态时候 总是能直接向前合并或者向后合并.   \n在非空闲状态没有合并需求, 因此为了充分利用内存, 分配状态的chunk其foot部分总是被'踩'的,  也就是说这里的的箱位使用在实际情况下(64位)  \n是32byte开始, 后面以24字节递增(踩prev_foot) 48byte 64byte 直到240byte  对于调用dlmalloc接口请求的大小在超过232字节后就会走big bin分配[256\\~384)范围的内存.   \n\n\n分配:  \n\n首先检查对应bin idx是否有空闲chunk 有这分配并返回   \n其次检查更高bin idx中是否有空闲的chunk, 有则切割, 并把剩余大小组合成一个新chunk记录为切割剩余chunk(如果过小则直接丢给用户)  \n其次检查大内存的bin里面是否有内存 有则切割 同上  \n其次检查上次剩余切割的chunk是否满足需要 如果满足则进一步切割 同上  \n其次检查最新从上级分配器(buddy system, 或者对应系统函数mmap brk)得到的大块chunk的剩余是否满足 满足就切割 (brk表现为扩展top)   \n其次则申请一个新的大块chunk进行切割   \n\n\n\n\n#### 大内存分配  \n大内存的bin idx递增则为2的幂次的半高为区分 总共32个箱子, 箱内是一个特殊实现的bitwise trie tree 如:  \n```\n[bin idx] [256~384)  \n[bin idx] [384~512)  \n[bin idx] [512~768)  \n[bin idx] ...  \n[bin idx] [4096~6144)  \n[bin idx] ...   \n[bin idx] [768k~1m)   \n```\n\n分配:  \n首先查找对应的bin idx是否存在空闲, 如果空闲则从该bitwise trie tree中查找最佳的chunk节点   \n  \n如果当前bin无空闲内存或者没找到合适空闲内存, 则检查更高bin idx中是否存在空闲, 如果有则拿最小的一个chunk \n\n如果找到则切分保存剩余内存为剩余chunk并返回合适大小的内存给用户  \n\n其次检查剩余chunk的大小是否满足, 满足则进一步切割  \n\n其次检查最近一次向上层管理器申请的内存chunk是否满足需求, 满足则切分     \n\n其次选择向底层(操作系统)申请满足需求的大块内存 \n\n##### bitwise trie tree\n大内存的箱内管理是一个特殊的前缀树, 节点均为0或者1, 和buddy system的结构稍微有点相似 都是做地址空间管理.  \n这个树的的节点是按照chunk的大小(chunk大小在二进制上的0,1顺序作为排序依据)进行构建的\n并且其节点本身就是chunk,  因此查找时候时候不但要检测叶子节点的大小是否最佳 也要检测其节点路径的chunk大小是否是最佳.   \n添加节点时候会自顶向下查找最佳位置, 如果已经存在大小相同的节点或者叶子节点 则以链表形式附加到该节点的空闲链表中, 如果不存在则直接以叶子节点添加  \n删除(最佳)节点时, 如果该节点有相同大小的其他chunk 则直接替换为相同大小的即可, 如果是叶子节点直接摘除, 否则会从右侧叶子节点提升到该节点位置.   \n\n这棵树的优点是动态树高, 查找的最坏性能是地址空间的LGN复杂度, 在树不满的情况则是相对树高的LGN复杂度,  在插入和删除时只是简单的查找+一次替换/添加操作, 不会对树进行调整, 因此性能非常好.    \n\n\n\n#### 内存回收和内存收缩  \n回收内存时会根据标志检查是否存在前一个空闲块 如果存在则合并. \n如果是直接mmap的内存 则直接返还给底层分配器\n检查是否满足收缩条件, 满足收缩条件则向系统/底层分配器返还内存 这里分heap的堆顶收缩检测和非连续mmap segment回收检测   \n未被返还给底层分配器则插入到对应的bin空闲块中.   \n\n\n\n#### 默认内存分配阈值   \n分配对齐至少8字节 默认为两倍```sizeof(void*)```\n向系统的索要内存的最小粒度默认为64k, windows下通过api获取到的分配粒度默认也是64k (最小单位)   \n当dlmalloc的请求内存超过阈值256k时 直接向系统索要内存 \n系统的内存分配方式是brk时至少在堆顶缓存一个分配粒度的空闲内存而不是收缩堆顶所有空闲内存 \n系统的内存分配方式是mmap时会通过满足条件一定次数后扫描线性扫描所有segment列表, 对未使用并且完全空闲的segment进行清除(保留堆顶 剩余切分被占用的segment). \n\n\n\n","source":"_posts/2020-02-07-shared-memory-buddy_system.md","raw":"---\ntitle: 基于共享内存的通用内存分配器\ndate: 2020-02-07\ncategories: develop \nauthor: yawei.zhang \n---\n\n### ..1. 目录  \n\n### linux系统的内存管理设计 \n![buddy_system](/images/system_memory.jpg)   \nLinux内核内存管理的一项重要工作就是如何在长期频繁申请释放内存的情况下, 避免碎片的产生.  \nLinux采用伙伴系统在极高的分配和回收性能(LGN)上, 最大化的减少了外部碎片(总是合并伙伴内存)的产生. \n伙伴算法非常简洁并且容易实现, 其一般实现的核心思路为维护一个整块内存, 通过不断的2分把最适配的内存分配给用户, 并且总是优先选择最零碎的空闲内存进行适配, 在回收时候则总是会合并空闲的伙伴内存(左右两个子节点的关系称之为伙伴关系), 以此来尽可能的保证大块的连续内存.   \n但是伙伴算法要求分配的内存必须是2的幂次大小, 因此直接使用会带来大量的内部碎片, 也因此伙伴算法一般都是作为底层内存管理算法不直接提供给用户, 而是通过dlmalloc等slab算法或者衍生算法提供给最终用户.  \n\nlinux采用slab算法来进行更细粒度的内存分配管理, 通过分箱算法, 对于小内存(256字节及以下, 分离存储)可以达到常数的性能, 对于 >256 && <1m的内存可以做到不大于LGN的分配性能, 并且通过对大块内存的精细切分和分箱算法可以做到几乎没有内部碎片, 通过对空闲内存的合并(没有伙伴关系约束也不存在假碎片问题, 但是因为大小chunk混合切分带来了更多的合并次数) 也有效的控制了外部碎片的产生.  \n\nlinux面对的环境在通用性上要求更高, 考虑到brk/mmap作为系统调用在一些环境下的性能差异表现, 以及小内存的在初始化数据(查找 切分等), slab相关的算法中更倾向于缓存足够多的block来保证小内存在分配上的性能表现, 而操作系统heap苛刻的收缩条件也会导致在项目中的实际表现往往是整个heap的内存总是接近保持在峰值水平上, 换句话说slab算法在实际的实现中其分配策略更接近'内存池'的概念.  \n\n其分箱算法采用64位的bitmap 也就是64个箱位, 支持单个内存分配请求的大小范围在dlmalloc的实现中为8字节-1M, 又因为内存池的分配策略, 以及外部碎片的有限控制, 所以slab只是一个针对小内存分配优化方案, 对于一个通用分配器来说仍然需要大内存的分配方案.   \n  \n因此包括linux内核, 整体的通用内存分配方案中, 使用buddy算法或者衍生算法来做大块线性地址空间的管理, 保证性能的情况下最小化外部碎片的产生, 通过slab算法或者衍生算法维护一个小内存请求的内存池, 以增加一小部分外部碎片的代价换取更少的内部碎片产生, 并保证向buddy system索要的内存都是满足2的幂次大小,  从而得到一个综合性能最优的方案, 这个方案比喻成[buddy算法负责批发 slab算法负责零售]具有比较形象的参考价值.    \n\n\n\n### 伙伴算法  \n\n因为最终的目的是希望把伙伴算法的管理结构保存在共享内存中,  因此我们在数组结构上以完美二叉树(perfect binary tree)的方式构建了整个伙伴算法,  由于对cpu cache友好的特征, 并且全局几乎只有简单的加减位移操作, 所以整个实现可以在非常简洁的基础上得到了一个比较出色的性能表现.   \n\n#### 数据结构和概述  \n```C++\n    /*  perfect binary tree\n    *                   0        -----------   : reserve\n    *\t                  1        -----------   :  root \n    *\n    *          2                 3\n    *\n    *     4        5         6        7\n    *\n    *   8   9   10   11   12   13  14   15\n    *\n    * ----------------------------------------\n    *\n    *   0   1   2    3    4    5   6     7     : memory buff\n    *\n    */\n```\n![buddy_system](/images/buddy_system.gif)\n伙伴算法是一个特殊的分离适配的内存管理器  \n* 能被有效管理的内存大小必须是2的幂次方   \n* 分配的内存大小一定是2的幂次大小对齐, 通过逐层向下2分找到最适配请求的大小  \n* 回收的内存会逐层向上合并 并且总是幂次大小合并 并且只能对伙伴内存(左右子节点)进行合并     \n\n* 显而易见的内部碎片  \n  因为2的幂次对齐分配, 比如我们需要power(2, 12)+1 的内存 实际上就会分配power(2,13)的内存,  内部碎片比例为 (power(2, 12)+1)/power(2,13), 有效负荷只有0.5左右.  \n  伙伴系统的分配粒度如果为页框机制, 例如采取页框大小为4k(方便匹配操作系统的页大小), 那么即使请求1个字节也需要一个完整的页框内存,  有效负荷只有1/(4k-1)即4k分之一.  \n\n* 显而易见的假碎片\n  两块相邻的空闲内存因为不属于伙伴关系则无法合并, 换句话说存在一块连续的空闲地址满足需求但是却因为无法在内存管理器中完成合并操作而不能提供服务.    \n  比如上面结构中 IDX 9 和 IDX 10皆为空闲,  IDX 9 和 IDX 5皆为空闲等      \n\n* 存在但被有效控制的外部碎片  \n  对于动态内存分配策略中, 只要满足通用性目标中\"处理任意请求序列\" 那么就一定会有外部碎片的产生, 因为其产生不仅仅在于分配器管理结构的设计, 更在于将来时, 外部的请求和释放时机.    \n    如图所示中, 我们并不能保证不会出现索引11和12被分配出去其他内存全部空闲这样的情况, 导致总空闲内存大小为6但是只能最大分配3个连续页框 .  \n  但相比其他的分配方案, 合并成一个2倍大小的大块内存, 总是只需要两个空闲小块, 而在分配策略中又总是会分配大小相同且相邻的块, 可以说是所有分配策略在保证LGN性能下控制外部碎片最好的方案.  \n   \n\n\n* 较为恒定的分配复杂度   \n  分配时会从根节点向下查找直到适配, 回收时从叶子节点向上查找, 并且都会从对应节点向根节点方向进行分配能力的修改.   \n  因此一对分配和释放请求总是恒定为LGN  \n                              \n\n#### 数据结构的定义:  \n\n同linux系统的方式类似, 我们按照页框为单位来管理内存, 页框的大小大于等于系统的页框大小, 可结合slab分配器进行调整.  \n根据要管理的内存大小和页框大小, 我们可以算出总得叶子数量,  而在这棵树上, 节点总数为2N(2倍叶子节点)   \n\n因此数据结构的定义为如下方式:\n```\n共享内存管理头部: 所有叶子节点 : 被管理的内存\n```\n\n每个节点用1个字节来记录, 内容为该节点的所对应的空间大小, (这里记录的不是大小, 而是大小的幂, 所以可以用一个字节来存储)   \n该节点对应的空间起始地址这位该节点在该层中的```offset* power(2, order) ```\n\n\n##### 初始化  \n所有节点的初始化为为该节点的空间大小.  \n例如index1 对应的则是被管理的所有空间  \n然后每层递减1  \n到叶子节点则为2^0次幂大小, 即一个页框单位.  \n\n\n##### 分配  \n如果分配参数是字节数, 则需要先按照页框向上取整   \n如果分配的参数是页框数量, 则需要按照2的幂次取整, 可以用bit search指令获取2的幂数(这个取法是向下取整 所以取完后要进行一次向上取整)   \n如果分配的是order  \n则检查root节点保存的order是否满足需求, 不满足这代表没有足够大的空间  \n如果满足需求则逐层查找, 直到到达对应的order层级, 然后修改该节点的可分配空间为0, 然后逐层向上修改分配能力  \n\ntips:\n 这里定义0为已分配, 而不是power(2,0)个空间大小,  因此在这里节点对应空间大小计算是power(2, (order ability)-1)   -1后才是power(2, order) .   \n 这样可以保证这棵树中从叶子节点向上查找时候的可以简单的while循环时候少一次边界判定, 计算方便   \n\n分配时候永远选择刚好满足需求的路径, 可以减少切分大块, 其次优先左子树,  减少外部碎片的产生以及提高cache命中.  \n\n\n ##### 释放  \n 通过地址计算页框编号, 然后加上N (树的大小是2N, N为所有非叶子节点的节点总数) 得到叶子节点的索引.  \n 从叶子节点用IDX /2 不断的向上查找, 直到找到节点被标记为0的层级,  修改该节点为该层级对应的空间大小, 然后逐层向上修改每层的新的空间分配能力, 如果左右节点的空间大小为该层级的大小(都空闲)则合并,(每个上层节点的能力均是节点对应的空间大小)   \n\n\n\n### SLAB内存分配器   \n有了buddy system之后, 移植所有可以基于mmap或者brk批量分配的内存分配器都会变得容易, 常见的现在linux系统使用的ptmalloc属于dlmalloc的分支版本, 而常用的TCMALLOC或者jemalloc都是基于dlmalloc的思想进行了更优更细粒度的实现, 体现在cpu cache更友好的分配策略以及多线程下更少的竞争等来获取更好的分配性能.      \n\ndlmalloc有着更简洁干净的实现 大约只有5000行代码, 其设计也非常的出色, 可以说是最容易移植的优秀的内存分配器.  \n\n#### 基础术语和概念如下:  \nPayload: 有效负载.指的是实际交给应用程序使用的内存大小.  \n\nOverhead: 负载,开销.本意是为了满足分配需求所消耗的内存量,实际在代码注释中多指除了payload之外的额外开销(有些书中也称之为cookie).  \n\nChunk: 区块.是内存分配的基本单位,类似物质世界中的原子不可再分. dlmalloc对内存的管理基本上都是以chunk为单位.一个典型的chunk是由用户程序使用的部分(payload)以及额外的标记信息(overhead)组成.  \n\nBin: 分箱.用来管理相同或同一区间大小的chunk.在dlmalloc中分为sbin和tbin两种.  \n\nMspace: 分配空间.说白了就是dlmalloc中内存池的叫法.在dlmalloc中可以管理多个mspace.如果不显式声明,将会使用一个全局的匿名空间,或者用户可以自行划分空间交给dlmalloc管理.  \n\nSegment: 区段.一般情况下,内存分配都是在一片连续区间内开采(exploit).但也会遇到不连续的情况,这就需要分成若干个区段记录.多个区段可以同属一个mspace.  \n\nFenceposts: 栅栏.大多数分配器中, fencepost起到非连续内存间的隔离作用.一般这种隔离被用做安全检查.分配器会在fenceposts所在位置写上特殊标记,一旦非连续内存间发生写入溢出(overwrite)就可以通过异常的fenceposts值发出警告.  \n\nBookkeeping: 记录信息.不同于每个chunk中的overhead,这里指的是整个mspace控制块的记录信息.往往这部分信息都固定在mspace开始的一段空间,或者干脆就放在地址空间的静态区中.  \n\nGranularity: 粒度.这个粒度指的是从system heap上获取内存的最小单位.一般来说该值至少为一个page size, 且必须以2为底.  \n\nMmap: 本意是类unix系统的文件映射调用.但在dlmalloc中表示的更宽泛,这里指代可以在进程地址空间中开辟非连续内存空间的系统调用.  \n\nMorecore: 指可以在进程地址空间中开辟连续内存空间的系统调用.在类unix系统下morecore指的是sbrk调用.  \n\nProgram break: 前面提到的sbrk()实际也是一个库函数,真正起作用的是brk()系统调用.这个函数其实就是break的缩写.所谓的break是一个代表进程heap区top-most位置的指针.当我们通过sbrk/brk向系统请求内存时,系统做的仅仅是移动break指针,内存就这样被划拨到heap中了.而当释放内存时,就反方向移动该指针,内存就返回给系统.  \n\nFootprint: 从系统获得的内存量.指的是当前dlmalloc从system heap获取的内存总和.设立footprint一方面是为了方便统计,另一方面也可以限制dlmalloc从系统获取的最大内存量.   \n\nTrimming: 裁剪.被dlmalloc管理的内存被free后,并不直接返还给系统,而是当积累到一定程度会通过一些算法判断system heap是否收缩(shrink),这个过程在dlmalloc中称作auto-trimming.   \n\n\n#### 分箱机制  \n分箱指的是在内存分配器内部划定一些chunk集合, 每个集合中记录的都是固定大小或区间的free chunk, 当分配时可以直接从中找到最贴近用户要求的那一个.  \n越是想要高效的分配,就越要将分箱划分的更细致,相应的也就浪费更多的内存, 因此, 分箱机制既不能太粗放而影响效率, 也不能太细致而降低利用率. \n分箱算法通过位移的计算技巧, 可以简单且快速的找到满足请求大小的最小非空箱位索引\n\n\n#### 小内存分配   \n\ndlmalloc定义了最小的分配粒度为8字节, 这样在保存chunk大小的字段中可以多出来3个位作为bit标记   \n然后每8个字节递增, 直到248字节, 总共32个箱子 如下:   \n```\n[bin idx] 8 8 8 8 8 8 8 8 8 \n[bin idx] 16 16 16 16 16 16   \n[bin idx] 24 24 24 24 24 24   \n...\n[bin idx] 248 248 248 248 248 248  \n```\n\n在64位下需要保证分配给用户的地址是两倍(void\\*)大小且包含一个8字节的prev_foot 一个8字节的head, 因此实际上使用的箱位不会用满32个. \ndlmalloc的prev_foot是一个边界标记法的使用技巧, 逻辑上其实是上一个chunk的foot部分, 如果不是空闲状态则会标记\"下个chunk的P\"为非空闲,  如果是空闲则会填充该字段为空闲chunk的大小.  \n这样就可以完成一个块从分配状态到空闲状态时候 总是能直接向前合并或者向后合并.   \n在非空闲状态没有合并需求, 因此为了充分利用内存, 分配状态的chunk其foot部分总是被'踩'的,  也就是说这里的的箱位使用在实际情况下(64位)  \n是32byte开始, 后面以24字节递增(踩prev_foot) 48byte 64byte 直到240byte  对于调用dlmalloc接口请求的大小在超过232字节后就会走big bin分配[256\\~384)范围的内存.   \n\n\n分配:  \n\n首先检查对应bin idx是否有空闲chunk 有这分配并返回   \n其次检查更高bin idx中是否有空闲的chunk, 有则切割, 并把剩余大小组合成一个新chunk记录为切割剩余chunk(如果过小则直接丢给用户)  \n其次检查大内存的bin里面是否有内存 有则切割 同上  \n其次检查上次剩余切割的chunk是否满足需要 如果满足则进一步切割 同上  \n其次检查最新从上级分配器(buddy system, 或者对应系统函数mmap brk)得到的大块chunk的剩余是否满足 满足就切割 (brk表现为扩展top)   \n其次则申请一个新的大块chunk进行切割   \n\n\n\n\n#### 大内存分配  \n大内存的bin idx递增则为2的幂次的半高为区分 总共32个箱子, 箱内是一个特殊实现的bitwise trie tree 如:  \n```\n[bin idx] [256~384)  \n[bin idx] [384~512)  \n[bin idx] [512~768)  \n[bin idx] ...  \n[bin idx] [4096~6144)  \n[bin idx] ...   \n[bin idx] [768k~1m)   \n```\n\n分配:  \n首先查找对应的bin idx是否存在空闲, 如果空闲则从该bitwise trie tree中查找最佳的chunk节点   \n  \n如果当前bin无空闲内存或者没找到合适空闲内存, 则检查更高bin idx中是否存在空闲, 如果有则拿最小的一个chunk \n\n如果找到则切分保存剩余内存为剩余chunk并返回合适大小的内存给用户  \n\n其次检查剩余chunk的大小是否满足, 满足则进一步切割  \n\n其次检查最近一次向上层管理器申请的内存chunk是否满足需求, 满足则切分     \n\n其次选择向底层(操作系统)申请满足需求的大块内存 \n\n##### bitwise trie tree\n大内存的箱内管理是一个特殊的前缀树, 节点均为0或者1, 和buddy system的结构稍微有点相似 都是做地址空间管理.  \n这个树的的节点是按照chunk的大小(chunk大小在二进制上的0,1顺序作为排序依据)进行构建的\n并且其节点本身就是chunk,  因此查找时候时候不但要检测叶子节点的大小是否最佳 也要检测其节点路径的chunk大小是否是最佳.   \n添加节点时候会自顶向下查找最佳位置, 如果已经存在大小相同的节点或者叶子节点 则以链表形式附加到该节点的空闲链表中, 如果不存在则直接以叶子节点添加  \n删除(最佳)节点时, 如果该节点有相同大小的其他chunk 则直接替换为相同大小的即可, 如果是叶子节点直接摘除, 否则会从右侧叶子节点提升到该节点位置.   \n\n这棵树的优点是动态树高, 查找的最坏性能是地址空间的LGN复杂度, 在树不满的情况则是相对树高的LGN复杂度,  在插入和删除时只是简单的查找+一次替换/添加操作, 不会对树进行调整, 因此性能非常好.    \n\n\n\n#### 内存回收和内存收缩  \n回收内存时会根据标志检查是否存在前一个空闲块 如果存在则合并. \n如果是直接mmap的内存 则直接返还给底层分配器\n检查是否满足收缩条件, 满足收缩条件则向系统/底层分配器返还内存 这里分heap的堆顶收缩检测和非连续mmap segment回收检测   \n未被返还给底层分配器则插入到对应的bin空闲块中.   \n\n\n\n#### 默认内存分配阈值   \n分配对齐至少8字节 默认为两倍```sizeof(void*)```\n向系统的索要内存的最小粒度默认为64k, windows下通过api获取到的分配粒度默认也是64k (最小单位)   \n当dlmalloc的请求内存超过阈值256k时 直接向系统索要内存 \n系统的内存分配方式是brk时至少在堆顶缓存一个分配粒度的空闲内存而不是收缩堆顶所有空闲内存 \n系统的内存分配方式是mmap时会通过满足条件一定次数后扫描线性扫描所有segment列表, 对未使用并且完全空闲的segment进行清除(保留堆顶 剩余切分被占用的segment). \n\n\n\n","slug":"2020-02-07-shared-memory-buddy_system","published":1,"updated":"2020-03-13T15:06:16.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeje001j7w5hgrli7w7q","content":"<h3><span id=\"1-目录\">..1. 目录</span></h3><h3><span id=\"linux系统的内存管理设计\">linux系统的内存管理设计</span></h3><p><img src=\"/images/system_memory.jpg\" alt=\"buddy_system\"><br>Linux内核内存管理的一项重要工作就是如何在长期频繁申请释放内存的情况下, 避免碎片的产生.<br>Linux采用伙伴系统在极高的分配和回收性能(LGN)上, 最大化的减少了外部碎片(总是合并伙伴内存)的产生.<br>伙伴算法非常简洁并且容易实现, 其一般实现的核心思路为维护一个整块内存, 通过不断的2分把最适配的内存分配给用户, 并且总是优先选择最零碎的空闲内存进行适配, 在回收时候则总是会合并空闲的伙伴内存(左右两个子节点的关系称之为伙伴关系), 以此来尽可能的保证大块的连续内存.<br>但是伙伴算法要求分配的内存必须是2的幂次大小, 因此直接使用会带来大量的内部碎片, 也因此伙伴算法一般都是作为底层内存管理算法不直接提供给用户, 而是通过dlmalloc等slab算法或者衍生算法提供给最终用户.  </p>\n<p>linux采用slab算法来进行更细粒度的内存分配管理, 通过分箱算法, 对于小内存(256字节及以下, 分离存储)可以达到常数的性能, 对于 &gt;256 &amp;&amp; &lt;1m的内存可以做到不大于LGN的分配性能, 并且通过对大块内存的精细切分和分箱算法可以做到几乎没有内部碎片, 通过对空闲内存的合并(没有伙伴关系约束也不存在假碎片问题, 但是因为大小chunk混合切分带来了更多的合并次数) 也有效的控制了外部碎片的产生.  </p>\n<p>linux面对的环境在通用性上要求更高, 考虑到brk/mmap作为系统调用在一些环境下的性能差异表现, 以及小内存的在初始化数据(查找 切分等), slab相关的算法中更倾向于缓存足够多的block来保证小内存在分配上的性能表现, 而操作系统heap苛刻的收缩条件也会导致在项目中的实际表现往往是整个heap的内存总是接近保持在峰值水平上, 换句话说slab算法在实际的实现中其分配策略更接近’内存池’的概念.  </p>\n<p>其分箱算法采用64位的bitmap 也就是64个箱位, 支持单个内存分配请求的大小范围在dlmalloc的实现中为8字节-1M, 又因为内存池的分配策略, 以及外部碎片的有限控制, 所以slab只是一个针对小内存分配优化方案, 对于一个通用分配器来说仍然需要大内存的分配方案.   </p>\n<p>因此包括linux内核, 整体的通用内存分配方案中, 使用buddy算法或者衍生算法来做大块线性地址空间的管理, 保证性能的情况下最小化外部碎片的产生, 通过slab算法或者衍生算法维护一个小内存请求的内存池, 以增加一小部分外部碎片的代价换取更少的内部碎片产生, 并保证向buddy system索要的内存都是满足2的幂次大小,  从而得到一个综合性能最优的方案, 这个方案比喻成[buddy算法负责批发 slab算法负责零售]具有比较形象的参考价值.    </p>\n<h3><span id=\"伙伴算法\">伙伴算法</span></h3><p>因为最终的目的是希望把伙伴算法的管理结构保存在共享内存中,  因此我们在数组结构上以完美二叉树(perfect binary tree)的方式构建了整个伙伴算法,  由于对cpu cache友好的特征, 并且全局几乎只有简单的加减位移操作, 所以整个实现可以在非常简洁的基础上得到了一个比较出色的性能表现.   </p>\n<h4><span id=\"数据结构和概述\">数据结构和概述</span></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  perfect binary tree</span></span><br><span class=\"line\"><span class=\"comment\">*                   0        -----------   : reserve</span></span><br><span class=\"line\"><span class=\"comment\">*\t                  1        -----------   :  root </span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*          2                 3</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*     4        5         6        7</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*   8   9   10   11   12   13  14   15</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*   0   1   2    3    4    5   6     7     : memory buff</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/buddy_system.gif\" alt=\"buddy_system\"><br>伙伴算法是一个特殊的分离适配的内存管理器  </p>\n<ul>\n<li><p>能被有效管理的内存大小必须是2的幂次方   </p>\n</li>\n<li><p>分配的内存大小一定是2的幂次大小对齐, 通过逐层向下2分找到最适配请求的大小  </p>\n</li>\n<li><p>回收的内存会逐层向上合并 并且总是幂次大小合并 并且只能对伙伴内存(左右子节点)进行合并     </p>\n</li>\n<li><p>显而易见的内部碎片<br>因为2的幂次对齐分配, 比如我们需要power(2, 12)+1 的内存 实际上就会分配power(2,13)的内存,  内部碎片比例为 (power(2, 12)+1)/power(2,13), 有效负荷只有0.5左右.<br>伙伴系统的分配粒度如果为页框机制, 例如采取页框大小为4k(方便匹配操作系统的页大小), 那么即使请求1个字节也需要一个完整的页框内存,  有效负荷只有1/(4k-1)即4k分之一.  </p>\n</li>\n<li><p>显而易见的假碎片<br>两块相邻的空闲内存因为不属于伙伴关系则无法合并, 换句话说存在一块连续的空闲地址满足需求但是却因为无法在内存管理器中完成合并操作而不能提供服务.<br>比如上面结构中 IDX 9 和 IDX 10皆为空闲,  IDX 9 和 IDX 5皆为空闲等      </p>\n</li>\n<li><p>存在但被有效控制的外部碎片<br>对于动态内存分配策略中, 只要满足通用性目标中”处理任意请求序列” 那么就一定会有外部碎片的产生, 因为其产生不仅仅在于分配器管理结构的设计, 更在于将来时, 外部的请求和释放时机.<br>  如图所示中, 我们并不能保证不会出现索引11和12被分配出去其他内存全部空闲这样的情况, 导致总空闲内存大小为6但是只能最大分配3个连续页框 .<br>但相比其他的分配方案, 合并成一个2倍大小的大块内存, 总是只需要两个空闲小块, 而在分配策略中又总是会分配大小相同且相邻的块, 可以说是所有分配策略在保证LGN性能下控制外部碎片最好的方案.  </p>\n</li>\n</ul>\n<ul>\n<li>较为恒定的分配复杂度<br>分配时会从根节点向下查找直到适配, 回收时从叶子节点向上查找, 并且都会从对应节点向根节点方向进行分配能力的修改.<br>因此一对分配和释放请求总是恒定为LGN  </li>\n</ul>\n<h4><span id=\"数据结构的定义\">数据结构的定义:</span></h4><p>同linux系统的方式类似, 我们按照页框为单位来管理内存, 页框的大小大于等于系统的页框大小, 可结合slab分配器进行调整.<br>根据要管理的内存大小和页框大小, 我们可以算出总得叶子数量,  而在这棵树上, 节点总数为2N(2倍叶子节点)   </p>\n<p>因此数据结构的定义为如下方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共享内存管理头部: 所有叶子节点 : 被管理的内存</span><br></pre></td></tr></table></figure>\n\n<p>每个节点用1个字节来记录, 内容为该节点的所对应的空间大小, (这里记录的不是大小, 而是大小的幂, 所以可以用一个字节来存储)<br>该节点对应的空间起始地址这位该节点在该层中的<code>offset* power(2, order)</code></p>\n<h5><span id=\"初始化\">初始化</span></h5><p>所有节点的初始化为为该节点的空间大小.<br>例如index1 对应的则是被管理的所有空间<br>然后每层递减1<br>到叶子节点则为2^0次幂大小, 即一个页框单位.  </p>\n<h5><span id=\"分配\">分配</span></h5><p>如果分配参数是字节数, 则需要先按照页框向上取整<br>如果分配的参数是页框数量, 则需要按照2的幂次取整, 可以用bit search指令获取2的幂数(这个取法是向下取整 所以取完后要进行一次向上取整)<br>如果分配的是order<br>则检查root节点保存的order是否满足需求, 不满足这代表没有足够大的空间<br>如果满足需求则逐层查找, 直到到达对应的order层级, 然后修改该节点的可分配空间为0, 然后逐层向上修改分配能力  </p>\n<p>tips:<br> 这里定义0为已分配, 而不是power(2,0)个空间大小,  因此在这里节点对应空间大小计算是power(2, (order ability)-1)   -1后才是power(2, order) .<br> 这样可以保证这棵树中从叶子节点向上查找时候的可以简单的while循环时候少一次边界判定, 计算方便   </p>\n<p>分配时候永远选择刚好满足需求的路径, 可以减少切分大块, 其次优先左子树,  减少外部碎片的产生以及提高cache命中.  </p>\n<h5><span id=\"释放\">释放</span></h5><p> 通过地址计算页框编号, 然后加上N (树的大小是2N, N为所有非叶子节点的节点总数) 得到叶子节点的索引.<br> 从叶子节点用IDX /2 不断的向上查找, 直到找到节点被标记为0的层级,  修改该节点为该层级对应的空间大小, 然后逐层向上修改每层的新的空间分配能力, 如果左右节点的空间大小为该层级的大小(都空闲)则合并,(每个上层节点的能力均是节点对应的空间大小)   </p>\n<h3><span id=\"slab内存分配器\">SLAB内存分配器</span></h3><p>有了buddy system之后, 移植所有可以基于mmap或者brk批量分配的内存分配器都会变得容易, 常见的现在linux系统使用的ptmalloc属于dlmalloc的分支版本, 而常用的TCMALLOC或者jemalloc都是基于dlmalloc的思想进行了更优更细粒度的实现, 体现在cpu cache更友好的分配策略以及多线程下更少的竞争等来获取更好的分配性能.      </p>\n<p>dlmalloc有着更简洁干净的实现 大约只有5000行代码, 其设计也非常的出色, 可以说是最容易移植的优秀的内存分配器.  </p>\n<h4><span id=\"基础术语和概念如下\">基础术语和概念如下:</span></h4><p>Payload: 有效负载.指的是实际交给应用程序使用的内存大小.  </p>\n<p>Overhead: 负载,开销.本意是为了满足分配需求所消耗的内存量,实际在代码注释中多指除了payload之外的额外开销(有些书中也称之为cookie).  </p>\n<p>Chunk: 区块.是内存分配的基本单位,类似物质世界中的原子不可再分. dlmalloc对内存的管理基本上都是以chunk为单位.一个典型的chunk是由用户程序使用的部分(payload)以及额外的标记信息(overhead)组成.  </p>\n<p>Bin: 分箱.用来管理相同或同一区间大小的chunk.在dlmalloc中分为sbin和tbin两种.  </p>\n<p>Mspace: 分配空间.说白了就是dlmalloc中内存池的叫法.在dlmalloc中可以管理多个mspace.如果不显式声明,将会使用一个全局的匿名空间,或者用户可以自行划分空间交给dlmalloc管理.  </p>\n<p>Segment: 区段.一般情况下,内存分配都是在一片连续区间内开采(exploit).但也会遇到不连续的情况,这就需要分成若干个区段记录.多个区段可以同属一个mspace.  </p>\n<p>Fenceposts: 栅栏.大多数分配器中, fencepost起到非连续内存间的隔离作用.一般这种隔离被用做安全检查.分配器会在fenceposts所在位置写上特殊标记,一旦非连续内存间发生写入溢出(overwrite)就可以通过异常的fenceposts值发出警告.  </p>\n<p>Bookkeeping: 记录信息.不同于每个chunk中的overhead,这里指的是整个mspace控制块的记录信息.往往这部分信息都固定在mspace开始的一段空间,或者干脆就放在地址空间的静态区中.  </p>\n<p>Granularity: 粒度.这个粒度指的是从system heap上获取内存的最小单位.一般来说该值至少为一个page size, 且必须以2为底.  </p>\n<p>Mmap: 本意是类unix系统的文件映射调用.但在dlmalloc中表示的更宽泛,这里指代可以在进程地址空间中开辟非连续内存空间的系统调用.  </p>\n<p>Morecore: 指可以在进程地址空间中开辟连续内存空间的系统调用.在类unix系统下morecore指的是sbrk调用.  </p>\n<p>Program break: 前面提到的sbrk()实际也是一个库函数,真正起作用的是brk()系统调用.这个函数其实就是break的缩写.所谓的break是一个代表进程heap区top-most位置的指针.当我们通过sbrk/brk向系统请求内存时,系统做的仅仅是移动break指针,内存就这样被划拨到heap中了.而当释放内存时,就反方向移动该指针,内存就返回给系统.  </p>\n<p>Footprint: 从系统获得的内存量.指的是当前dlmalloc从system heap获取的内存总和.设立footprint一方面是为了方便统计,另一方面也可以限制dlmalloc从系统获取的最大内存量.   </p>\n<p>Trimming: 裁剪.被dlmalloc管理的内存被free后,并不直接返还给系统,而是当积累到一定程度会通过一些算法判断system heap是否收缩(shrink),这个过程在dlmalloc中称作auto-trimming.   </p>\n<h4><span id=\"分箱机制\">分箱机制</span></h4><p>分箱指的是在内存分配器内部划定一些chunk集合, 每个集合中记录的都是固定大小或区间的free chunk, 当分配时可以直接从中找到最贴近用户要求的那一个.<br>越是想要高效的分配,就越要将分箱划分的更细致,相应的也就浪费更多的内存, 因此, 分箱机制既不能太粗放而影响效率, 也不能太细致而降低利用率.<br>分箱算法通过位移的计算技巧, 可以简单且快速的找到满足请求大小的最小非空箱位索引</p>\n<h4><span id=\"小内存分配\">小内存分配</span></h4><p>dlmalloc定义了最小的分配粒度为8字节, 这样在保存chunk大小的字段中可以多出来3个位作为bit标记<br>然后每8个字节递增, 直到248字节, 总共32个箱子 如下:   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bin idx] 8 8 8 8 8 8 8 8 8 </span><br><span class=\"line\">[bin idx] 16 16 16 16 16 16   </span><br><span class=\"line\">[bin idx] 24 24 24 24 24 24   </span><br><span class=\"line\">...</span><br><span class=\"line\">[bin idx] 248 248 248 248 248 248</span><br></pre></td></tr></table></figure>\n\n<p>在64位下需要保证分配给用户的地址是两倍(void*)大小且包含一个8字节的prev_foot 一个8字节的head, 因此实际上使用的箱位不会用满32个.<br>dlmalloc的prev_foot是一个边界标记法的使用技巧, 逻辑上其实是上一个chunk的foot部分, 如果不是空闲状态则会标记”下个chunk的P”为非空闲,  如果是空闲则会填充该字段为空闲chunk的大小.<br>这样就可以完成一个块从分配状态到空闲状态时候 总是能直接向前合并或者向后合并.<br>在非空闲状态没有合并需求, 因此为了充分利用内存, 分配状态的chunk其foot部分总是被’踩’的,  也就是说这里的的箱位使用在实际情况下(64位)<br>是32byte开始, 后面以24字节递增(踩prev_foot) 48byte 64byte 直到240byte  对于调用dlmalloc接口请求的大小在超过232字节后就会走big bin分配[256~384)范围的内存.   </p>\n<p>分配:  </p>\n<p>首先检查对应bin idx是否有空闲chunk 有这分配并返回<br>其次检查更高bin idx中是否有空闲的chunk, 有则切割, 并把剩余大小组合成一个新chunk记录为切割剩余chunk(如果过小则直接丢给用户)<br>其次检查大内存的bin里面是否有内存 有则切割 同上<br>其次检查上次剩余切割的chunk是否满足需要 如果满足则进一步切割 同上<br>其次检查最新从上级分配器(buddy system, 或者对应系统函数mmap brk)得到的大块chunk的剩余是否满足 满足就切割 (brk表现为扩展top)<br>其次则申请一个新的大块chunk进行切割   </p>\n<h4><span id=\"大内存分配\">大内存分配</span></h4><p>大内存的bin idx递增则为2的幂次的半高为区分 总共32个箱子, 箱内是一个特殊实现的bitwise trie tree 如:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bin idx] [256~384)  </span><br><span class=\"line\">[bin idx] [384~512)  </span><br><span class=\"line\">[bin idx] [512~768)  </span><br><span class=\"line\">[bin idx] ...  </span><br><span class=\"line\">[bin idx] [4096~6144)  </span><br><span class=\"line\">[bin idx] ...   </span><br><span class=\"line\">[bin idx] [768k~1m)</span><br></pre></td></tr></table></figure>\n\n<p>分配:<br>首先查找对应的bin idx是否存在空闲, 如果空闲则从该bitwise trie tree中查找最佳的chunk节点   </p>\n<p>如果当前bin无空闲内存或者没找到合适空闲内存, 则检查更高bin idx中是否存在空闲, 如果有则拿最小的一个chunk </p>\n<p>如果找到则切分保存剩余内存为剩余chunk并返回合适大小的内存给用户  </p>\n<p>其次检查剩余chunk的大小是否满足, 满足则进一步切割  </p>\n<p>其次检查最近一次向上层管理器申请的内存chunk是否满足需求, 满足则切分     </p>\n<p>其次选择向底层(操作系统)申请满足需求的大块内存 </p>\n<h5><span id=\"bitwise-trie-tree\">bitwise trie tree</span></h5><p>大内存的箱内管理是一个特殊的前缀树, 节点均为0或者1, 和buddy system的结构稍微有点相似 都是做地址空间管理.<br>这个树的的节点是按照chunk的大小(chunk大小在二进制上的0,1顺序作为排序依据)进行构建的<br>并且其节点本身就是chunk,  因此查找时候时候不但要检测叶子节点的大小是否最佳 也要检测其节点路径的chunk大小是否是最佳.<br>添加节点时候会自顶向下查找最佳位置, 如果已经存在大小相同的节点或者叶子节点 则以链表形式附加到该节点的空闲链表中, 如果不存在则直接以叶子节点添加<br>删除(最佳)节点时, 如果该节点有相同大小的其他chunk 则直接替换为相同大小的即可, 如果是叶子节点直接摘除, 否则会从右侧叶子节点提升到该节点位置.   </p>\n<p>这棵树的优点是动态树高, 查找的最坏性能是地址空间的LGN复杂度, 在树不满的情况则是相对树高的LGN复杂度,  在插入和删除时只是简单的查找+一次替换/添加操作, 不会对树进行调整, 因此性能非常好.    </p>\n<h4><span id=\"内存回收和内存收缩\">内存回收和内存收缩</span></h4><p>回收内存时会根据标志检查是否存在前一个空闲块 如果存在则合并.<br>如果是直接mmap的内存 则直接返还给底层分配器<br>检查是否满足收缩条件, 满足收缩条件则向系统/底层分配器返还内存 这里分heap的堆顶收缩检测和非连续mmap segment回收检测<br>未被返还给底层分配器则插入到对应的bin空闲块中.   </p>\n<h4><span id=\"默认内存分配阈值\">默认内存分配阈值</span></h4><p>分配对齐至少8字节 默认为两倍<code>sizeof(void*)</code><br>向系统的索要内存的最小粒度默认为64k, windows下通过api获取到的分配粒度默认也是64k (最小单位)<br>当dlmalloc的请求内存超过阈值256k时 直接向系统索要内存<br>系统的内存分配方式是brk时至少在堆顶缓存一个分配粒度的空闲内存而不是收缩堆顶所有空闲内存<br>系统的内存分配方式是mmap时会通过满足条件一定次数后扫描线性扫描所有segment列表, 对未使用并且完全空闲的segment进行清除(保留堆顶 剩余切分被占用的segment).</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-目录\"><a href=\"#1-目录\" class=\"headerlink\" title=\"..1. 目录\"></a>..1. 目录</h3><h3 id=\"linux系统的内存管理设计\"><a href=\"#linux系统的内存管理设计\" class=\"headerlink\" title=\"linux系统的内存管理设计\"></a>linux系统的内存管理设计</h3><p><img src=\"/images/system_memory.jpg\" alt=\"buddy_system\"><br>Linux内核内存管理的一项重要工作就是如何在长期频繁申请释放内存的情况下, 避免碎片的产生.<br>Linux采用伙伴系统在极高的分配和回收性能(LGN)上, 最大化的减少了外部碎片(总是合并伙伴内存)的产生.<br>伙伴算法非常简洁并且容易实现, 其一般实现的核心思路为维护一个整块内存, 通过不断的2分把最适配的内存分配给用户, 并且总是优先选择最零碎的空闲内存进行适配, 在回收时候则总是会合并空闲的伙伴内存(左右两个子节点的关系称之为伙伴关系), 以此来尽可能的保证大块的连续内存.<br>但是伙伴算法要求分配的内存必须是2的幂次大小, 因此直接使用会带来大量的内部碎片, 也因此伙伴算法一般都是作为底层内存管理算法不直接提供给用户, 而是通过dlmalloc等slab算法或者衍生算法提供给最终用户.  </p>\n<p>linux采用slab算法来进行更细粒度的内存分配管理, 通过分箱算法, 对于小内存(256字节及以下, 分离存储)可以达到常数的性能, 对于 &gt;256 &amp;&amp; &lt;1m的内存可以做到不大于LGN的分配性能, 并且通过对大块内存的精细切分和分箱算法可以做到几乎没有内部碎片, 通过对空闲内存的合并(没有伙伴关系约束也不存在假碎片问题, 但是因为大小chunk混合切分带来了更多的合并次数) 也有效的控制了外部碎片的产生.  </p>\n<p>linux面对的环境在通用性上要求更高, 考虑到brk/mmap作为系统调用在一些环境下的性能差异表现, 以及小内存的在初始化数据(查找 切分等), slab相关的算法中更倾向于缓存足够多的block来保证小内存在分配上的性能表现, 而操作系统heap苛刻的收缩条件也会导致在项目中的实际表现往往是整个heap的内存总是接近保持在峰值水平上, 换句话说slab算法在实际的实现中其分配策略更接近’内存池’的概念.  </p>\n<p>其分箱算法采用64位的bitmap 也就是64个箱位, 支持单个内存分配请求的大小范围在dlmalloc的实现中为8字节-1M, 又因为内存池的分配策略, 以及外部碎片的有限控制, 所以slab只是一个针对小内存分配优化方案, 对于一个通用分配器来说仍然需要大内存的分配方案.   </p>\n<p>因此包括linux内核, 整体的通用内存分配方案中, 使用buddy算法或者衍生算法来做大块线性地址空间的管理, 保证性能的情况下最小化外部碎片的产生, 通过slab算法或者衍生算法维护一个小内存请求的内存池, 以增加一小部分外部碎片的代价换取更少的内部碎片产生, 并保证向buddy system索要的内存都是满足2的幂次大小,  从而得到一个综合性能最优的方案, 这个方案比喻成[buddy算法负责批发 slab算法负责零售]具有比较形象的参考价值.    </p>\n<h3 id=\"伙伴算法\"><a href=\"#伙伴算法\" class=\"headerlink\" title=\"伙伴算法\"></a>伙伴算法</h3><p>因为最终的目的是希望把伙伴算法的管理结构保存在共享内存中,  因此我们在数组结构上以完美二叉树(perfect binary tree)的方式构建了整个伙伴算法,  由于对cpu cache友好的特征, 并且全局几乎只有简单的加减位移操作, 所以整个实现可以在非常简洁的基础上得到了一个比较出色的性能表现.   </p>\n<h4 id=\"数据结构和概述\"><a href=\"#数据结构和概述\" class=\"headerlink\" title=\"数据结构和概述\"></a>数据结构和概述</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*  perfect binary tree</span></span><br><span class=\"line\"><span class=\"comment\">*                   0        -----------   : reserve</span></span><br><span class=\"line\"><span class=\"comment\">*\t                  1        -----------   :  root </span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*          2                 3</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*     4        5         6        7</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*   8   9   10   11   12   13  14   15</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* ----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*   0   1   2    3    4    5   6     7     : memory buff</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/buddy_system.gif\" alt=\"buddy_system\"><br>伙伴算法是一个特殊的分离适配的内存管理器  </p>\n<ul>\n<li><p>能被有效管理的内存大小必须是2的幂次方   </p>\n</li>\n<li><p>分配的内存大小一定是2的幂次大小对齐, 通过逐层向下2分找到最适配请求的大小  </p>\n</li>\n<li><p>回收的内存会逐层向上合并 并且总是幂次大小合并 并且只能对伙伴内存(左右子节点)进行合并     </p>\n</li>\n<li><p>显而易见的内部碎片<br>因为2的幂次对齐分配, 比如我们需要power(2, 12)+1 的内存 实际上就会分配power(2,13)的内存,  内部碎片比例为 (power(2, 12)+1)/power(2,13), 有效负荷只有0.5左右.<br>伙伴系统的分配粒度如果为页框机制, 例如采取页框大小为4k(方便匹配操作系统的页大小), 那么即使请求1个字节也需要一个完整的页框内存,  有效负荷只有1/(4k-1)即4k分之一.  </p>\n</li>\n<li><p>显而易见的假碎片<br>两块相邻的空闲内存因为不属于伙伴关系则无法合并, 换句话说存在一块连续的空闲地址满足需求但是却因为无法在内存管理器中完成合并操作而不能提供服务.<br>比如上面结构中 IDX 9 和 IDX 10皆为空闲,  IDX 9 和 IDX 5皆为空闲等      </p>\n</li>\n<li><p>存在但被有效控制的外部碎片<br>对于动态内存分配策略中, 只要满足通用性目标中”处理任意请求序列” 那么就一定会有外部碎片的产生, 因为其产生不仅仅在于分配器管理结构的设计, 更在于将来时, 外部的请求和释放时机.<br>  如图所示中, 我们并不能保证不会出现索引11和12被分配出去其他内存全部空闲这样的情况, 导致总空闲内存大小为6但是只能最大分配3个连续页框 .<br>但相比其他的分配方案, 合并成一个2倍大小的大块内存, 总是只需要两个空闲小块, 而在分配策略中又总是会分配大小相同且相邻的块, 可以说是所有分配策略在保证LGN性能下控制外部碎片最好的方案.  </p>\n</li>\n</ul>\n<ul>\n<li>较为恒定的分配复杂度<br>分配时会从根节点向下查找直到适配, 回收时从叶子节点向上查找, 并且都会从对应节点向根节点方向进行分配能力的修改.<br>因此一对分配和释放请求总是恒定为LGN  </li>\n</ul>\n<h4 id=\"数据结构的定义\"><a href=\"#数据结构的定义\" class=\"headerlink\" title=\"数据结构的定义:\"></a>数据结构的定义:</h4><p>同linux系统的方式类似, 我们按照页框为单位来管理内存, 页框的大小大于等于系统的页框大小, 可结合slab分配器进行调整.<br>根据要管理的内存大小和页框大小, 我们可以算出总得叶子数量,  而在这棵树上, 节点总数为2N(2倍叶子节点)   </p>\n<p>因此数据结构的定义为如下方式:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共享内存管理头部: 所有叶子节点 : 被管理的内存</span><br></pre></td></tr></table></figure>\n\n<p>每个节点用1个字节来记录, 内容为该节点的所对应的空间大小, (这里记录的不是大小, 而是大小的幂, 所以可以用一个字节来存储)<br>该节点对应的空间起始地址这位该节点在该层中的<code>offset* power(2, order)</code></p>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>所有节点的初始化为为该节点的空间大小.<br>例如index1 对应的则是被管理的所有空间<br>然后每层递减1<br>到叶子节点则为2^0次幂大小, 即一个页框单位.  </p>\n<h5 id=\"分配\"><a href=\"#分配\" class=\"headerlink\" title=\"分配\"></a>分配</h5><p>如果分配参数是字节数, 则需要先按照页框向上取整<br>如果分配的参数是页框数量, 则需要按照2的幂次取整, 可以用bit search指令获取2的幂数(这个取法是向下取整 所以取完后要进行一次向上取整)<br>如果分配的是order<br>则检查root节点保存的order是否满足需求, 不满足这代表没有足够大的空间<br>如果满足需求则逐层查找, 直到到达对应的order层级, 然后修改该节点的可分配空间为0, 然后逐层向上修改分配能力  </p>\n<p>tips:<br> 这里定义0为已分配, 而不是power(2,0)个空间大小,  因此在这里节点对应空间大小计算是power(2, (order ability)-1)   -1后才是power(2, order) .<br> 这样可以保证这棵树中从叶子节点向上查找时候的可以简单的while循环时候少一次边界判定, 计算方便   </p>\n<p>分配时候永远选择刚好满足需求的路径, 可以减少切分大块, 其次优先左子树,  减少外部碎片的产生以及提高cache命中.  </p>\n<h5 id=\"释放\"><a href=\"#释放\" class=\"headerlink\" title=\"释放\"></a>释放</h5><p> 通过地址计算页框编号, 然后加上N (树的大小是2N, N为所有非叶子节点的节点总数) 得到叶子节点的索引.<br> 从叶子节点用IDX /2 不断的向上查找, 直到找到节点被标记为0的层级,  修改该节点为该层级对应的空间大小, 然后逐层向上修改每层的新的空间分配能力, 如果左右节点的空间大小为该层级的大小(都空闲)则合并,(每个上层节点的能力均是节点对应的空间大小)   </p>\n<h3 id=\"SLAB内存分配器\"><a href=\"#SLAB内存分配器\" class=\"headerlink\" title=\"SLAB内存分配器\"></a>SLAB内存分配器</h3><p>有了buddy system之后, 移植所有可以基于mmap或者brk批量分配的内存分配器都会变得容易, 常见的现在linux系统使用的ptmalloc属于dlmalloc的分支版本, 而常用的TCMALLOC或者jemalloc都是基于dlmalloc的思想进行了更优更细粒度的实现, 体现在cpu cache更友好的分配策略以及多线程下更少的竞争等来获取更好的分配性能.      </p>\n<p>dlmalloc有着更简洁干净的实现 大约只有5000行代码, 其设计也非常的出色, 可以说是最容易移植的优秀的内存分配器.  </p>\n<h4 id=\"基础术语和概念如下\"><a href=\"#基础术语和概念如下\" class=\"headerlink\" title=\"基础术语和概念如下:\"></a>基础术语和概念如下:</h4><p>Payload: 有效负载.指的是实际交给应用程序使用的内存大小.  </p>\n<p>Overhead: 负载,开销.本意是为了满足分配需求所消耗的内存量,实际在代码注释中多指除了payload之外的额外开销(有些书中也称之为cookie).  </p>\n<p>Chunk: 区块.是内存分配的基本单位,类似物质世界中的原子不可再分. dlmalloc对内存的管理基本上都是以chunk为单位.一个典型的chunk是由用户程序使用的部分(payload)以及额外的标记信息(overhead)组成.  </p>\n<p>Bin: 分箱.用来管理相同或同一区间大小的chunk.在dlmalloc中分为sbin和tbin两种.  </p>\n<p>Mspace: 分配空间.说白了就是dlmalloc中内存池的叫法.在dlmalloc中可以管理多个mspace.如果不显式声明,将会使用一个全局的匿名空间,或者用户可以自行划分空间交给dlmalloc管理.  </p>\n<p>Segment: 区段.一般情况下,内存分配都是在一片连续区间内开采(exploit).但也会遇到不连续的情况,这就需要分成若干个区段记录.多个区段可以同属一个mspace.  </p>\n<p>Fenceposts: 栅栏.大多数分配器中, fencepost起到非连续内存间的隔离作用.一般这种隔离被用做安全检查.分配器会在fenceposts所在位置写上特殊标记,一旦非连续内存间发生写入溢出(overwrite)就可以通过异常的fenceposts值发出警告.  </p>\n<p>Bookkeeping: 记录信息.不同于每个chunk中的overhead,这里指的是整个mspace控制块的记录信息.往往这部分信息都固定在mspace开始的一段空间,或者干脆就放在地址空间的静态区中.  </p>\n<p>Granularity: 粒度.这个粒度指的是从system heap上获取内存的最小单位.一般来说该值至少为一个page size, 且必须以2为底.  </p>\n<p>Mmap: 本意是类unix系统的文件映射调用.但在dlmalloc中表示的更宽泛,这里指代可以在进程地址空间中开辟非连续内存空间的系统调用.  </p>\n<p>Morecore: 指可以在进程地址空间中开辟连续内存空间的系统调用.在类unix系统下morecore指的是sbrk调用.  </p>\n<p>Program break: 前面提到的sbrk()实际也是一个库函数,真正起作用的是brk()系统调用.这个函数其实就是break的缩写.所谓的break是一个代表进程heap区top-most位置的指针.当我们通过sbrk/brk向系统请求内存时,系统做的仅仅是移动break指针,内存就这样被划拨到heap中了.而当释放内存时,就反方向移动该指针,内存就返回给系统.  </p>\n<p>Footprint: 从系统获得的内存量.指的是当前dlmalloc从system heap获取的内存总和.设立footprint一方面是为了方便统计,另一方面也可以限制dlmalloc从系统获取的最大内存量.   </p>\n<p>Trimming: 裁剪.被dlmalloc管理的内存被free后,并不直接返还给系统,而是当积累到一定程度会通过一些算法判断system heap是否收缩(shrink),这个过程在dlmalloc中称作auto-trimming.   </p>\n<h4 id=\"分箱机制\"><a href=\"#分箱机制\" class=\"headerlink\" title=\"分箱机制\"></a>分箱机制</h4><p>分箱指的是在内存分配器内部划定一些chunk集合, 每个集合中记录的都是固定大小或区间的free chunk, 当分配时可以直接从中找到最贴近用户要求的那一个.<br>越是想要高效的分配,就越要将分箱划分的更细致,相应的也就浪费更多的内存, 因此, 分箱机制既不能太粗放而影响效率, 也不能太细致而降低利用率.<br>分箱算法通过位移的计算技巧, 可以简单且快速的找到满足请求大小的最小非空箱位索引</p>\n<h4 id=\"小内存分配\"><a href=\"#小内存分配\" class=\"headerlink\" title=\"小内存分配\"></a>小内存分配</h4><p>dlmalloc定义了最小的分配粒度为8字节, 这样在保存chunk大小的字段中可以多出来3个位作为bit标记<br>然后每8个字节递增, 直到248字节, 总共32个箱子 如下:   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bin idx] 8 8 8 8 8 8 8 8 8 </span><br><span class=\"line\">[bin idx] 16 16 16 16 16 16   </span><br><span class=\"line\">[bin idx] 24 24 24 24 24 24   </span><br><span class=\"line\">...</span><br><span class=\"line\">[bin idx] 248 248 248 248 248 248</span><br></pre></td></tr></table></figure>\n\n<p>在64位下需要保证分配给用户的地址是两倍(void*)大小且包含一个8字节的prev_foot 一个8字节的head, 因此实际上使用的箱位不会用满32个.<br>dlmalloc的prev_foot是一个边界标记法的使用技巧, 逻辑上其实是上一个chunk的foot部分, 如果不是空闲状态则会标记”下个chunk的P”为非空闲,  如果是空闲则会填充该字段为空闲chunk的大小.<br>这样就可以完成一个块从分配状态到空闲状态时候 总是能直接向前合并或者向后合并.<br>在非空闲状态没有合并需求, 因此为了充分利用内存, 分配状态的chunk其foot部分总是被’踩’的,  也就是说这里的的箱位使用在实际情况下(64位)<br>是32byte开始, 后面以24字节递增(踩prev_foot) 48byte 64byte 直到240byte  对于调用dlmalloc接口请求的大小在超过232字节后就会走big bin分配[256~384)范围的内存.   </p>\n<p>分配:  </p>\n<p>首先检查对应bin idx是否有空闲chunk 有这分配并返回<br>其次检查更高bin idx中是否有空闲的chunk, 有则切割, 并把剩余大小组合成一个新chunk记录为切割剩余chunk(如果过小则直接丢给用户)<br>其次检查大内存的bin里面是否有内存 有则切割 同上<br>其次检查上次剩余切割的chunk是否满足需要 如果满足则进一步切割 同上<br>其次检查最新从上级分配器(buddy system, 或者对应系统函数mmap brk)得到的大块chunk的剩余是否满足 满足就切割 (brk表现为扩展top)<br>其次则申请一个新的大块chunk进行切割   </p>\n<h4 id=\"大内存分配\"><a href=\"#大内存分配\" class=\"headerlink\" title=\"大内存分配\"></a>大内存分配</h4><p>大内存的bin idx递增则为2的幂次的半高为区分 总共32个箱子, 箱内是一个特殊实现的bitwise trie tree 如:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[bin idx] [256~384)  </span><br><span class=\"line\">[bin idx] [384~512)  </span><br><span class=\"line\">[bin idx] [512~768)  </span><br><span class=\"line\">[bin idx] ...  </span><br><span class=\"line\">[bin idx] [4096~6144)  </span><br><span class=\"line\">[bin idx] ...   </span><br><span class=\"line\">[bin idx] [768k~1m)</span><br></pre></td></tr></table></figure>\n\n<p>分配:<br>首先查找对应的bin idx是否存在空闲, 如果空闲则从该bitwise trie tree中查找最佳的chunk节点   </p>\n<p>如果当前bin无空闲内存或者没找到合适空闲内存, 则检查更高bin idx中是否存在空闲, 如果有则拿最小的一个chunk </p>\n<p>如果找到则切分保存剩余内存为剩余chunk并返回合适大小的内存给用户  </p>\n<p>其次检查剩余chunk的大小是否满足, 满足则进一步切割  </p>\n<p>其次检查最近一次向上层管理器申请的内存chunk是否满足需求, 满足则切分     </p>\n<p>其次选择向底层(操作系统)申请满足需求的大块内存 </p>\n<h5 id=\"bitwise-trie-tree\"><a href=\"#bitwise-trie-tree\" class=\"headerlink\" title=\"bitwise trie tree\"></a>bitwise trie tree</h5><p>大内存的箱内管理是一个特殊的前缀树, 节点均为0或者1, 和buddy system的结构稍微有点相似 都是做地址空间管理.<br>这个树的的节点是按照chunk的大小(chunk大小在二进制上的0,1顺序作为排序依据)进行构建的<br>并且其节点本身就是chunk,  因此查找时候时候不但要检测叶子节点的大小是否最佳 也要检测其节点路径的chunk大小是否是最佳.<br>添加节点时候会自顶向下查找最佳位置, 如果已经存在大小相同的节点或者叶子节点 则以链表形式附加到该节点的空闲链表中, 如果不存在则直接以叶子节点添加<br>删除(最佳)节点时, 如果该节点有相同大小的其他chunk 则直接替换为相同大小的即可, 如果是叶子节点直接摘除, 否则会从右侧叶子节点提升到该节点位置.   </p>\n<p>这棵树的优点是动态树高, 查找的最坏性能是地址空间的LGN复杂度, 在树不满的情况则是相对树高的LGN复杂度,  在插入和删除时只是简单的查找+一次替换/添加操作, 不会对树进行调整, 因此性能非常好.    </p>\n<h4 id=\"内存回收和内存收缩\"><a href=\"#内存回收和内存收缩\" class=\"headerlink\" title=\"内存回收和内存收缩\"></a>内存回收和内存收缩</h4><p>回收内存时会根据标志检查是否存在前一个空闲块 如果存在则合并.<br>如果是直接mmap的内存 则直接返还给底层分配器<br>检查是否满足收缩条件, 满足收缩条件则向系统/底层分配器返还内存 这里分heap的堆顶收缩检测和非连续mmap segment回收检测<br>未被返还给底层分配器则插入到对应的bin空闲块中.   </p>\n<h4 id=\"默认内存分配阈值\"><a href=\"#默认内存分配阈值\" class=\"headerlink\" title=\"默认内存分配阈值\"></a>默认内存分配阈值</h4><p>分配对齐至少8字节 默认为两倍<code>sizeof(void*)</code><br>向系统的索要内存的最小粒度默认为64k, windows下通过api获取到的分配粒度默认也是64k (最小单位)<br>当dlmalloc的请求内存超过阈值256k时 直接向系统索要内存<br>系统的内存分配方式是brk时至少在堆顶缓存一个分配粒度的空闲内存而不是收缩堆顶所有空闲内存<br>系统的内存分配方式是mmap时会通过满足条件一定次数后扫描线性扫描所有segment列表, 对未使用并且完全空闲的segment进行清除(保留堆顶 剩余切分被占用的segment).</p>\n"},{"title":"技能系统中的输出循环和节奏控制","date":"2020-06-17T16:00:00.000Z","author":"yawei.zhang","_content":"\n# 技能系统中的循环控制   \n\n## 动作循环控制 \n------------------------\n* 动作类技能, 普攻等依赖战斗单位身体动作的技能, 其受影响的身体部位不能同时做出两个动作   \n* 根据技能的价值级别以及特色设计, 在可能导致冲突的两个动作之间需要明确打断关系    \n\n### 设计策略   \n无论是时间线的设计还是多段设计亦或是朴素的单段多子技能设计,  我们需要标记出每段动作的影响部位, 其意义是在于我们对所有技能通过打标记的形式来获得'技能与技能之间是否存在动作冲突'的信息.     \n\n其次, 我们需要对冲突的技能之间的 重叠释放问题,  这里本质上是一个压制规则问题.   \n\n1. 冲突的动作类技能一旦释放成功,  一定打断掉所有相关旧的技能\n2. 如果不做上下半身分离, 普通移动视为动作, 否则为下半身动作  \n3. 不希望被某些类型打断的时候  要禁止这些类型的技能释放 即压制类标签     \n\n举例来说   \n\n* 跳击技能:  \n  * 技能类型:      上半身动作, 下半身动作  \n  * 前摇时间压制:  禁止普通移动 禁止下半身动作 禁止上半身动作   \n\n* 出拳技能   \n  * 技能类型: 上半身动作   \n  * 前摇时间压制: 禁止上半身动作  \n  \n* 闪避技能   \n  * 技能类型: 上半身动作 下半身动作   \n  * 前摇时间压制: 禁止普通移动 禁止上半身移动 禁止下半身移动    \n  \n注意:  有些闪避是特色玩法  则需要额外的标签和流程来完成   \n闪避技能进行条件判定时先使用脚本进行预判, 如果当前存在会因动作压制闪避的技能 则先进行打断, 防止被压制   \n所有动作类技能额外添加是否可被闪避技能打断的标签,  单独完成闪避相关的压制处理.   \n\n设计小结:   本质上动作类循环的控制, 在流程上首先是模拟动作状态机,  其次通过压制策略对状态机的切换策略进行控制    \n\n<!-- more -->\n\n## CD循环控制    \n\n* 对于常见的技能来说, 技能的存在时长和该技能可再次释放的时长往往是不一样的  例如说:   \n  * 高价值的爆发类技能, 如果动作结束就可以再次释放, 那么在一场战斗中就很难设计出来可以抗衡的多样性的其他技能  通常而言, 价值越高, 我们希望他们的节奏越长,  他们需要等待合适的时机来释放珍贵的一击 .    \n  * 这是引入CD的机制的最本质的原因.   \n\n* CD和动作循环控制完全不冲突, 各自流程独立.   \n\n## 公共CD组循环控制     \n公共CD组的作用主要是进行跨技能级别的循环控制和压制管理, 和CD一样是和动作无关系的纯逻辑配置    \n公共CD组的核心配置为触发和响应两组   \n\n* 该技能释放时是否响应(检测)(被压制)某GCD ,  如果存在该GCD则释放失败   \n* 该技能释放后触发某GCD一定时间, 如果已有则按照最长原则刷新   \n\n举例来说:   \n我们规定A技能释放完的10秒内, A和与A相关的B,C,D等技能均不能释放, 那么我们配置A触发一个GCD,   A,B,C,D均响应即可.     \n\n更高阶的配置方法举例:   \n我们有一个BOSS, 有 A, B, C, D 4个技能,  价值根据顺序递减,  并且隶属于同一个冷却组 即一旦任意一个技能释放完毕后, 其他技能在CD结束前均不能释放,    并且GCD一旦结束, 如果ABCD均能释放  则应该按照价值高低进行释放,  但是其中A,B不能连续释放.       \n* 首先 A B C D一定存在一个GCD来控制   \n* 优先级问题可以用行为树来进行检测判定 来实现优先级释放 但是不能解决A,B连续释放问题     \n* GCD完整做法:   \n  * ABCD触发和响应同一个GCD大组来完成基础循环控制和优先级循环控制    \n    * gcd 1  ABCD均响应  \n    * gcd 2 A响应\n    * gcd 3 B响应  \n    * gcd 4 C响应  \n    * gcd 5 D响应   \n  * 通过调整2,3,4,5的时长, 可以做到逐时长解放ABCD4个技能的释放条件  \n  * 处于配置清晰目的考虑AB单独触发和响应一个GCD(AB为小组), 而不是调整AB技能中2,3的触发时长   \n    * gcd 10 AB触发和响应 其时间超过大组内GCD的最长时长   \n  * 从表现结果上来描述:  \n    * BOSS一旦释放A或者B 那么B或者A则会长时间被禁止  \n    * BOSS一旦释放ABCD, 那么一定时间内ABCD均不能再次释放, 并且到期后逐个解开  \n\n## 职业内循环   \n这里属于职业内多个技能的配合设计   \n例如射手A中  Q重伤用来增加输出,  W位移用来追人或者逃跑,  R用来打出一个大型AOE进行团战输出  \n那么射手A的职业内循环顺风WQR追人输出  逆风QRW逃跑   \n\n射手B可能是Q留人W推人R输出    被近战贴脸可以W推人Q风筝R输出  \n\n## 职业外循环   \n这个属于职业搭配设计   \n例如坦克奶妈射手   \n坦克开团抗伤害  奶妈补血救射手   射手躲坦克后面暴力输出    \n\n## 连招   \n和CD类的循环控制不同:  \n* GCD CD是以压制的形式进行循环控制 战斗单位在正常情况下可以放某技能但被压制而不能释放,   而连招则是战斗单位不能放某技能因为条件得到满足而可以释放.   \n* CD和GCD一般是扁平独立关系,  而连招则是树形关系甚至是链表关系.     \n* 一般CD和GCD都是以技能释放成功即触发   而连招则可能是因为'命中>=3个目标'等特殊条件后才会触发的一段窗口时间  \n* CD和GCD一旦触发不会清除, 除非特殊指定流程,  连招窗口时间内如果触发了后续连招技能, 则会清除该连招窗口.     \n\n","source":"_posts/2020-07-15-gcd.md","raw":"---\ntitle: 技能系统中的输出循环和节奏控制\ndate: 2020-06-18\ncategories: develop \nauthor: yawei.zhang \n---\n\n# 技能系统中的循环控制   \n\n## 动作循环控制 \n------------------------\n* 动作类技能, 普攻等依赖战斗单位身体动作的技能, 其受影响的身体部位不能同时做出两个动作   \n* 根据技能的价值级别以及特色设计, 在可能导致冲突的两个动作之间需要明确打断关系    \n\n### 设计策略   \n无论是时间线的设计还是多段设计亦或是朴素的单段多子技能设计,  我们需要标记出每段动作的影响部位, 其意义是在于我们对所有技能通过打标记的形式来获得'技能与技能之间是否存在动作冲突'的信息.     \n\n其次, 我们需要对冲突的技能之间的 重叠释放问题,  这里本质上是一个压制规则问题.   \n\n1. 冲突的动作类技能一旦释放成功,  一定打断掉所有相关旧的技能\n2. 如果不做上下半身分离, 普通移动视为动作, 否则为下半身动作  \n3. 不希望被某些类型打断的时候  要禁止这些类型的技能释放 即压制类标签     \n\n举例来说   \n\n* 跳击技能:  \n  * 技能类型:      上半身动作, 下半身动作  \n  * 前摇时间压制:  禁止普通移动 禁止下半身动作 禁止上半身动作   \n\n* 出拳技能   \n  * 技能类型: 上半身动作   \n  * 前摇时间压制: 禁止上半身动作  \n  \n* 闪避技能   \n  * 技能类型: 上半身动作 下半身动作   \n  * 前摇时间压制: 禁止普通移动 禁止上半身移动 禁止下半身移动    \n  \n注意:  有些闪避是特色玩法  则需要额外的标签和流程来完成   \n闪避技能进行条件判定时先使用脚本进行预判, 如果当前存在会因动作压制闪避的技能 则先进行打断, 防止被压制   \n所有动作类技能额外添加是否可被闪避技能打断的标签,  单独完成闪避相关的压制处理.   \n\n设计小结:   本质上动作类循环的控制, 在流程上首先是模拟动作状态机,  其次通过压制策略对状态机的切换策略进行控制    \n\n<!-- more -->\n\n## CD循环控制    \n\n* 对于常见的技能来说, 技能的存在时长和该技能可再次释放的时长往往是不一样的  例如说:   \n  * 高价值的爆发类技能, 如果动作结束就可以再次释放, 那么在一场战斗中就很难设计出来可以抗衡的多样性的其他技能  通常而言, 价值越高, 我们希望他们的节奏越长,  他们需要等待合适的时机来释放珍贵的一击 .    \n  * 这是引入CD的机制的最本质的原因.   \n\n* CD和动作循环控制完全不冲突, 各自流程独立.   \n\n## 公共CD组循环控制     \n公共CD组的作用主要是进行跨技能级别的循环控制和压制管理, 和CD一样是和动作无关系的纯逻辑配置    \n公共CD组的核心配置为触发和响应两组   \n\n* 该技能释放时是否响应(检测)(被压制)某GCD ,  如果存在该GCD则释放失败   \n* 该技能释放后触发某GCD一定时间, 如果已有则按照最长原则刷新   \n\n举例来说:   \n我们规定A技能释放完的10秒内, A和与A相关的B,C,D等技能均不能释放, 那么我们配置A触发一个GCD,   A,B,C,D均响应即可.     \n\n更高阶的配置方法举例:   \n我们有一个BOSS, 有 A, B, C, D 4个技能,  价值根据顺序递减,  并且隶属于同一个冷却组 即一旦任意一个技能释放完毕后, 其他技能在CD结束前均不能释放,    并且GCD一旦结束, 如果ABCD均能释放  则应该按照价值高低进行释放,  但是其中A,B不能连续释放.       \n* 首先 A B C D一定存在一个GCD来控制   \n* 优先级问题可以用行为树来进行检测判定 来实现优先级释放 但是不能解决A,B连续释放问题     \n* GCD完整做法:   \n  * ABCD触发和响应同一个GCD大组来完成基础循环控制和优先级循环控制    \n    * gcd 1  ABCD均响应  \n    * gcd 2 A响应\n    * gcd 3 B响应  \n    * gcd 4 C响应  \n    * gcd 5 D响应   \n  * 通过调整2,3,4,5的时长, 可以做到逐时长解放ABCD4个技能的释放条件  \n  * 处于配置清晰目的考虑AB单独触发和响应一个GCD(AB为小组), 而不是调整AB技能中2,3的触发时长   \n    * gcd 10 AB触发和响应 其时间超过大组内GCD的最长时长   \n  * 从表现结果上来描述:  \n    * BOSS一旦释放A或者B 那么B或者A则会长时间被禁止  \n    * BOSS一旦释放ABCD, 那么一定时间内ABCD均不能再次释放, 并且到期后逐个解开  \n\n## 职业内循环   \n这里属于职业内多个技能的配合设计   \n例如射手A中  Q重伤用来增加输出,  W位移用来追人或者逃跑,  R用来打出一个大型AOE进行团战输出  \n那么射手A的职业内循环顺风WQR追人输出  逆风QRW逃跑   \n\n射手B可能是Q留人W推人R输出    被近战贴脸可以W推人Q风筝R输出  \n\n## 职业外循环   \n这个属于职业搭配设计   \n例如坦克奶妈射手   \n坦克开团抗伤害  奶妈补血救射手   射手躲坦克后面暴力输出    \n\n## 连招   \n和CD类的循环控制不同:  \n* GCD CD是以压制的形式进行循环控制 战斗单位在正常情况下可以放某技能但被压制而不能释放,   而连招则是战斗单位不能放某技能因为条件得到满足而可以释放.   \n* CD和GCD一般是扁平独立关系,  而连招则是树形关系甚至是链表关系.     \n* 一般CD和GCD都是以技能释放成功即触发   而连招则可能是因为'命中>=3个目标'等特殊条件后才会触发的一段窗口时间  \n* CD和GCD一旦触发不会清除, 除非特殊指定流程,  连招窗口时间内如果触发了后续连招技能, 则会清除该连招窗口.     \n\n","slug":"2020-07-15-gcd","published":1,"updated":"2020-07-22T03:50:52.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyejf001l7w5haizpdolo","content":"<h1><span id=\"技能系统中的循环控制\">技能系统中的循环控制</span></h1><h2><span id=\"动作循环控制\">动作循环控制</span></h2><hr>\n<ul>\n<li>动作类技能, 普攻等依赖战斗单位身体动作的技能, 其受影响的身体部位不能同时做出两个动作   </li>\n<li>根据技能的价值级别以及特色设计, 在可能导致冲突的两个动作之间需要明确打断关系    </li>\n</ul>\n<h3><span id=\"设计策略\">设计策略</span></h3><p>无论是时间线的设计还是多段设计亦或是朴素的单段多子技能设计,  我们需要标记出每段动作的影响部位, 其意义是在于我们对所有技能通过打标记的形式来获得’技能与技能之间是否存在动作冲突’的信息.     </p>\n<p>其次, 我们需要对冲突的技能之间的 重叠释放问题,  这里本质上是一个压制规则问题.   </p>\n<ol>\n<li>冲突的动作类技能一旦释放成功,  一定打断掉所有相关旧的技能</li>\n<li>如果不做上下半身分离, 普通移动视为动作, 否则为下半身动作  </li>\n<li>不希望被某些类型打断的时候  要禁止这些类型的技能释放 即压制类标签     </li>\n</ol>\n<p>举例来说   </p>\n<ul>\n<li><p>跳击技能:  </p>\n<ul>\n<li>技能类型:      上半身动作, 下半身动作  </li>\n<li>前摇时间压制:  禁止普通移动 禁止下半身动作 禁止上半身动作   </li>\n</ul>\n</li>\n<li><p>出拳技能   </p>\n<ul>\n<li>技能类型: 上半身动作   </li>\n<li>前摇时间压制: 禁止上半身动作  </li>\n</ul>\n</li>\n<li><p>闪避技能   </p>\n<ul>\n<li>技能类型: 上半身动作 下半身动作   </li>\n<li>前摇时间压制: 禁止普通移动 禁止上半身移动 禁止下半身移动    </li>\n</ul>\n</li>\n</ul>\n<p>注意:  有些闪避是特色玩法  则需要额外的标签和流程来完成<br>闪避技能进行条件判定时先使用脚本进行预判, 如果当前存在会因动作压制闪避的技能 则先进行打断, 防止被压制<br>所有动作类技能额外添加是否可被闪避技能打断的标签,  单独完成闪避相关的压制处理.   </p>\n<p>设计小结:   本质上动作类循环的控制, 在流程上首先是模拟动作状态机,  其次通过压制策略对状态机的切换策略进行控制    </p>\n<a id=\"more\"></a>\n\n<h2><span id=\"cd循环控制\">CD循环控制</span></h2><ul>\n<li><p>对于常见的技能来说, 技能的存在时长和该技能可再次释放的时长往往是不一样的  例如说:   </p>\n<ul>\n<li>高价值的爆发类技能, 如果动作结束就可以再次释放, 那么在一场战斗中就很难设计出来可以抗衡的多样性的其他技能  通常而言, 价值越高, 我们希望他们的节奏越长,  他们需要等待合适的时机来释放珍贵的一击 .    </li>\n<li>这是引入CD的机制的最本质的原因.   </li>\n</ul>\n</li>\n<li><p>CD和动作循环控制完全不冲突, 各自流程独立.   </p>\n</li>\n</ul>\n<h2><span id=\"公共cd组循环控制\">公共CD组循环控制</span></h2><p>公共CD组的作用主要是进行跨技能级别的循环控制和压制管理, 和CD一样是和动作无关系的纯逻辑配置<br>公共CD组的核心配置为触发和响应两组   </p>\n<ul>\n<li>该技能释放时是否响应(检测)(被压制)某GCD ,  如果存在该GCD则释放失败   </li>\n<li>该技能释放后触发某GCD一定时间, 如果已有则按照最长原则刷新   </li>\n</ul>\n<p>举例来说:<br>我们规定A技能释放完的10秒内, A和与A相关的B,C,D等技能均不能释放, 那么我们配置A触发一个GCD,   A,B,C,D均响应即可.     </p>\n<p>更高阶的配置方法举例:<br>我们有一个BOSS, 有 A, B, C, D 4个技能,  价值根据顺序递减,  并且隶属于同一个冷却组 即一旦任意一个技能释放完毕后, 其他技能在CD结束前均不能释放,    并且GCD一旦结束, 如果ABCD均能释放  则应该按照价值高低进行释放,  但是其中A,B不能连续释放.       </p>\n<ul>\n<li>首先 A B C D一定存在一个GCD来控制   </li>\n<li>优先级问题可以用行为树来进行检测判定 来实现优先级释放 但是不能解决A,B连续释放问题     </li>\n<li>GCD完整做法:   <ul>\n<li>ABCD触发和响应同一个GCD大组来完成基础循环控制和优先级循环控制    <ul>\n<li>gcd 1  ABCD均响应  </li>\n<li>gcd 2 A响应</li>\n<li>gcd 3 B响应  </li>\n<li>gcd 4 C响应  </li>\n<li>gcd 5 D响应   </li>\n</ul>\n</li>\n<li>通过调整2,3,4,5的时长, 可以做到逐时长解放ABCD4个技能的释放条件  </li>\n<li>处于配置清晰目的考虑AB单独触发和响应一个GCD(AB为小组), 而不是调整AB技能中2,3的触发时长   <ul>\n<li>gcd 10 AB触发和响应 其时间超过大组内GCD的最长时长   </li>\n</ul>\n</li>\n<li>从表现结果上来描述:  <ul>\n<li>BOSS一旦释放A或者B 那么B或者A则会长时间被禁止  </li>\n<li>BOSS一旦释放ABCD, 那么一定时间内ABCD均不能再次释放, 并且到期后逐个解开  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"职业内循环\">职业内循环</span></h2><p>这里属于职业内多个技能的配合设计<br>例如射手A中  Q重伤用来增加输出,  W位移用来追人或者逃跑,  R用来打出一个大型AOE进行团战输出<br>那么射手A的职业内循环顺风WQR追人输出  逆风QRW逃跑   </p>\n<p>射手B可能是Q留人W推人R输出    被近战贴脸可以W推人Q风筝R输出  </p>\n<h2><span id=\"职业外循环\">职业外循环</span></h2><p>这个属于职业搭配设计<br>例如坦克奶妈射手<br>坦克开团抗伤害  奶妈补血救射手   射手躲坦克后面暴力输出    </p>\n<h2><span id=\"连招\">连招</span></h2><p>和CD类的循环控制不同:  </p>\n<ul>\n<li>GCD CD是以压制的形式进行循环控制 战斗单位在正常情况下可以放某技能但被压制而不能释放,   而连招则是战斗单位不能放某技能因为条件得到满足而可以释放.   </li>\n<li>CD和GCD一般是扁平独立关系,  而连招则是树形关系甚至是链表关系.     </li>\n<li>一般CD和GCD都是以技能释放成功即触发   而连招则可能是因为’命中&gt;=3个目标’等特殊条件后才会触发的一段窗口时间  </li>\n<li>CD和GCD一旦触发不会清除, 除非特殊指定流程,  连招窗口时间内如果触发了后续连招技能, 则会清除该连招窗口.</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"技能系统中的循环控制\"><a href=\"#技能系统中的循环控制\" class=\"headerlink\" title=\"技能系统中的循环控制\"></a>技能系统中的循环控制</h1><h2 id=\"动作循环控制\"><a href=\"#动作循环控制\" class=\"headerlink\" title=\"动作循环控制\"></a>动作循环控制</h2><hr>\n<ul>\n<li>动作类技能, 普攻等依赖战斗单位身体动作的技能, 其受影响的身体部位不能同时做出两个动作   </li>\n<li>根据技能的价值级别以及特色设计, 在可能导致冲突的两个动作之间需要明确打断关系    </li>\n</ul>\n<h3 id=\"设计策略\"><a href=\"#设计策略\" class=\"headerlink\" title=\"设计策略\"></a>设计策略</h3><p>无论是时间线的设计还是多段设计亦或是朴素的单段多子技能设计,  我们需要标记出每段动作的影响部位, 其意义是在于我们对所有技能通过打标记的形式来获得’技能与技能之间是否存在动作冲突’的信息.     </p>\n<p>其次, 我们需要对冲突的技能之间的 重叠释放问题,  这里本质上是一个压制规则问题.   </p>\n<ol>\n<li>冲突的动作类技能一旦释放成功,  一定打断掉所有相关旧的技能</li>\n<li>如果不做上下半身分离, 普通移动视为动作, 否则为下半身动作  </li>\n<li>不希望被某些类型打断的时候  要禁止这些类型的技能释放 即压制类标签     </li>\n</ol>\n<p>举例来说   </p>\n<ul>\n<li><p>跳击技能:  </p>\n<ul>\n<li>技能类型:      上半身动作, 下半身动作  </li>\n<li>前摇时间压制:  禁止普通移动 禁止下半身动作 禁止上半身动作   </li>\n</ul>\n</li>\n<li><p>出拳技能   </p>\n<ul>\n<li>技能类型: 上半身动作   </li>\n<li>前摇时间压制: 禁止上半身动作  </li>\n</ul>\n</li>\n<li><p>闪避技能   </p>\n<ul>\n<li>技能类型: 上半身动作 下半身动作   </li>\n<li>前摇时间压制: 禁止普通移动 禁止上半身移动 禁止下半身移动    </li>\n</ul>\n</li>\n</ul>\n<p>注意:  有些闪避是特色玩法  则需要额外的标签和流程来完成<br>闪避技能进行条件判定时先使用脚本进行预判, 如果当前存在会因动作压制闪避的技能 则先进行打断, 防止被压制<br>所有动作类技能额外添加是否可被闪避技能打断的标签,  单独完成闪避相关的压制处理.   </p>\n<p>设计小结:   本质上动作类循环的控制, 在流程上首先是模拟动作状态机,  其次通过压制策略对状态机的切换策略进行控制    </p>","more":"<h2 id=\"CD循环控制\"><a href=\"#CD循环控制\" class=\"headerlink\" title=\"CD循环控制\"></a>CD循环控制</h2><ul>\n<li><p>对于常见的技能来说, 技能的存在时长和该技能可再次释放的时长往往是不一样的  例如说:   </p>\n<ul>\n<li>高价值的爆发类技能, 如果动作结束就可以再次释放, 那么在一场战斗中就很难设计出来可以抗衡的多样性的其他技能  通常而言, 价值越高, 我们希望他们的节奏越长,  他们需要等待合适的时机来释放珍贵的一击 .    </li>\n<li>这是引入CD的机制的最本质的原因.   </li>\n</ul>\n</li>\n<li><p>CD和动作循环控制完全不冲突, 各自流程独立.   </p>\n</li>\n</ul>\n<h2 id=\"公共CD组循环控制\"><a href=\"#公共CD组循环控制\" class=\"headerlink\" title=\"公共CD组循环控制\"></a>公共CD组循环控制</h2><p>公共CD组的作用主要是进行跨技能级别的循环控制和压制管理, 和CD一样是和动作无关系的纯逻辑配置<br>公共CD组的核心配置为触发和响应两组   </p>\n<ul>\n<li>该技能释放时是否响应(检测)(被压制)某GCD ,  如果存在该GCD则释放失败   </li>\n<li>该技能释放后触发某GCD一定时间, 如果已有则按照最长原则刷新   </li>\n</ul>\n<p>举例来说:<br>我们规定A技能释放完的10秒内, A和与A相关的B,C,D等技能均不能释放, 那么我们配置A触发一个GCD,   A,B,C,D均响应即可.     </p>\n<p>更高阶的配置方法举例:<br>我们有一个BOSS, 有 A, B, C, D 4个技能,  价值根据顺序递减,  并且隶属于同一个冷却组 即一旦任意一个技能释放完毕后, 其他技能在CD结束前均不能释放,    并且GCD一旦结束, 如果ABCD均能释放  则应该按照价值高低进行释放,  但是其中A,B不能连续释放.       </p>\n<ul>\n<li>首先 A B C D一定存在一个GCD来控制   </li>\n<li>优先级问题可以用行为树来进行检测判定 来实现优先级释放 但是不能解决A,B连续释放问题     </li>\n<li>GCD完整做法:   <ul>\n<li>ABCD触发和响应同一个GCD大组来完成基础循环控制和优先级循环控制    <ul>\n<li>gcd 1  ABCD均响应  </li>\n<li>gcd 2 A响应</li>\n<li>gcd 3 B响应  </li>\n<li>gcd 4 C响应  </li>\n<li>gcd 5 D响应   </li>\n</ul>\n</li>\n<li>通过调整2,3,4,5的时长, 可以做到逐时长解放ABCD4个技能的释放条件  </li>\n<li>处于配置清晰目的考虑AB单独触发和响应一个GCD(AB为小组), 而不是调整AB技能中2,3的触发时长   <ul>\n<li>gcd 10 AB触发和响应 其时间超过大组内GCD的最长时长   </li>\n</ul>\n</li>\n<li>从表现结果上来描述:  <ul>\n<li>BOSS一旦释放A或者B 那么B或者A则会长时间被禁止  </li>\n<li>BOSS一旦释放ABCD, 那么一定时间内ABCD均不能再次释放, 并且到期后逐个解开  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"职业内循环\"><a href=\"#职业内循环\" class=\"headerlink\" title=\"职业内循环\"></a>职业内循环</h2><p>这里属于职业内多个技能的配合设计<br>例如射手A中  Q重伤用来增加输出,  W位移用来追人或者逃跑,  R用来打出一个大型AOE进行团战输出<br>那么射手A的职业内循环顺风WQR追人输出  逆风QRW逃跑   </p>\n<p>射手B可能是Q留人W推人R输出    被近战贴脸可以W推人Q风筝R输出  </p>\n<h2 id=\"职业外循环\"><a href=\"#职业外循环\" class=\"headerlink\" title=\"职业外循环\"></a>职业外循环</h2><p>这个属于职业搭配设计<br>例如坦克奶妈射手<br>坦克开团抗伤害  奶妈补血救射手   射手躲坦克后面暴力输出    </p>\n<h2 id=\"连招\"><a href=\"#连招\" class=\"headerlink\" title=\"连招\"></a>连招</h2><p>和CD类的循环控制不同:  </p>\n<ul>\n<li>GCD CD是以压制的形式进行循环控制 战斗单位在正常情况下可以放某技能但被压制而不能释放,   而连招则是战斗单位不能放某技能因为条件得到满足而可以释放.   </li>\n<li>CD和GCD一般是扁平独立关系,  而连招则是树形关系甚至是链表关系.     </li>\n<li>一般CD和GCD都是以技能释放成功即触发   而连招则可能是因为’命中&gt;=3个目标’等特殊条件后才会触发的一段窗口时间  </li>\n<li>CD和GCD一旦触发不会清除, 除非特殊指定流程,  连招窗口时间内如果触发了后续连招技能, 则会清除该连招窗口.</li>\n</ul>"},{"title":"多人游戏中的同步机制综述","date":"2020-07-23T16:00:00.000Z","author":"yawei.zhang","mathjax":true,"_content":"\n<!-- toc -->\n\n\n## 前言    \n本文中所有内容默认都基于逻辑描述, 逻辑状态,逻辑处理的逻辑游戏世界,  纯本地表现类, 总是通过逻辑世界单向导出的渲染计算等, 均不在本篇文章讨论范畴.  \n\n\n## 同步问题的产生和基本策略机制  \n\n**在多人游戏或者基于CS网络模型的游戏中, 玩家所在的游戏世界并非全由本地生成和修改, 必须不断从服务器或者其他玩家获得最新的信息来完成游戏世界的共享体验, 在多人实时交互的游戏中,  相当于每个人都维护一个'完整世界'的副本, 并保证每个人维护的副本之间一致性和实时性, 不同游戏对副本的规模复杂度以及对一致性和实时性的要求不同, 并随着网络环境的变化在不同的历史时期下演化出了多种同步方案.**   \n\n在所有的同步方案中, 有两种最基础也最常见的同步机制, 即状态同步和帧同步, 其基本机制和区别为:  \n\n* **状态同步: 通过同步游戏中的各种状态来保证游戏世界副本的一致性, 基本流程如下:**   \n  * 服务器维护权威完整副本  客户端维护本地副本 <font color=#ccc> (可以只维护部分副本) </font>   \n  * 客户端上行请求到服务器 服务器进行完整的逻辑演算 并将发生改变的状态下行给客户端   \n  * <font color=#ccc>客户端基于本地副本进行预演和状态预刷新 </font>  \n  * 客户端用来自服务器的状态数据刷新本地副本, 对齐服务器副本   \n    * <font color=#ccc>客户端如果有因预演导致的数据不对齐需要通过强同步/回滚/和解等机制达成最终对齐</font>   \n      * <font color=#ccc>快照类同步方式总是全量对齐</font>   \n\n  \n* **帧同步: 泛指通过一致的初始状态, 一致的输入事件和一致的逻辑处理, 从而得到相同的计算结果来保证游戏世界副本的一致性的同步方案**    \n  * 该术语为泛指, 所有通过确定性算法,以保证输入一致来得出相同游戏流程结果的同步均可泛称为帧同步.   \n  * 最早有对等网络的锁步同步, 发展为非对等网络的主机锁步同步, 再到后来的bucket同步以及现在比较流行的定时不等待乐观帧同步  \n  \n  * 锁步同步:  \n    * 客户端定时(比如每五帧为一个关键帧)上传一轮输入信息   \n    * 服务器收到所有输入信息后广播给其他所有客户端  \n    * 客户端用服务器发来的更新消息中的输入信息进行游戏(如果是对称网络, 这个过程则是广播自己输入信息和搜集所有其他客户端的输入信息)     \n    * 如果客户端进行到下一个关键帧(5帧后)时没有收到服务器的更新消息则等待   \n    * 如果客户端进行到下一个关键帧时已经接收到了服务器的更新消息, 则将上面的数据用于游戏, 并采集当前鼠标键盘输入发送给服务器, 同时继续进行下去   \n    * 服务端采集到所有数据后再次发送下一个关键帧更新消息   \n  \n  * 定时不等待:     \n    * 相对于锁步同步来说, 服务器会定时下发收集到的信息,  并根据收集到的信息调整关键帧的间隔,  没有在指定间隔内收到的消息会排在下一次关键帧或者丢弃   \n    * 相对于锁步同步来说, 任何客户端的卡顿不会阻塞其他玩家   \n\n**这两种同步模型本质上并不冲突, 并且在细节上会相互补充优化,  常见的为在状态同步这种弱一致性框架下添加确定性演算来增加同步的准确性, 在确定性的帧同步下隔离出来部分状态进行优化增加流畅性,  从模型角度来说, 在复杂的同步需求中, 状态同步总是比帧同步有更多的扩展和调优空间, 典型的案例如UE4和UNITY中的DS服务器.**   \n\n<!-- more -->   \n\n| .                          | 锁步同步                                                                                                            | 状态同步                                                                                                                                                                                                                         |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 流量                       | 一般情况下较低, 决定于网络玩家数目                                                                                  | 一般情况下较高, 决定于当前该客户端可观察到(Observable)的网络实体数目                                                                                                                                                             |\n| 预表现                     | 难, 客户端需本地进行状态序列化反序列化, 进行Roll-Forth                                                              | 较易, 客户端进行预表现, 服务器进行权威演算, 客户端最终和服务器下发的状态进行调解(Reconciliation)和Roll-Forth                                                                                                                     |\n| 对弱网络的适应能力         | 较低, 因为较难做到预表现, 不能做容忍处理                                                                                            | 较高, 因为较易做到预表现,较容易做容忍等                                                                                                                                                                                                         |\n| 确定性                     | 严格确定性, 强一致性要求                                                                                            | 弱一致性                                                                                                                                                                                                                         |\n| 版本更新                   | 较难, 无法保证一致性                                                                                                | 较易或者非常容易                                                                                                                                                                                                                 |\n| 断线重连                   | 较难, 需比较耗时地进行快播追上实时进度的游戏状态                                                                    | 较易, 服务器下发当前实时游戏状态的Snapshot即可                                                                                                                                                                                   |\n| 自由进出                   | 较难, 需要从起点开始计算所有逻辑,包括进出的后的玩家                                                                 | 较易, 服务器下发当前实时游戏状态的Snapshot即可                                                                                                                                                                                   |\n| 离线重播(比如播放录像文件) | 较易, 且重播文件大小较小(和流量相关)                                                                                | 较易, 但重播文件较大(和流量相关)                                                                                                                                                                                                 |\n| 实时重播(比如死亡重播)     | 难, 需要rollback到过去再forth到实时状态                                                                             | 较易, 服务器下发历史Snapshot给客户端回到过去、下发重播数据进行重播、再下发当前Snapshot恢复实时游戏                                                                                                                               |\n| 网络逻辑性能优化           | 较难, 因为客户端需要运算所有逻辑                                                                                    | 较易, 大部分逻辑默认是在服务器进行运算, 从而分担客户端运算压力；服务器也可帮助客户端进行可观察网络对象的剔除(基于距离剔除、遮挡剔除、分块剔除等), 也可以降低优先级低的物体或属性的同步频率, 从而减小流量和再次减小客户端运算压力 |\n| 大量网络实体时的流量情况   | 好, 因为流量只决定于网络玩家数目                                                                                    | 如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS                                                                                           |\n| 大量网络实体时的性能情况   | 较差, 因为客户端需要运算所有逻辑。如果大部分网络实体有 \"Sleep\" 的可能, 则有优化空间                                   | 如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS                                                                                           |\n| 外挂                       | 因为客户端拥有所有信息, 所以透视类外挂的影响会比较严重                                                              | 也会有透视类外挂, 但服务器会进行一定的视野剔除, 所以影响稍小                                                                                                                                                                     |\n| 作弊                       | 多人竞技匹配相对还好, 少数人作弊是无效的, 但是PVE GVE同时作弊难以检测                                               | 比较困难 仲裁逻辑在服务器 做好入口防护即可有效避免                                                                                                                                                                               |\n| 开发特征                   | 平时开发起来很高效, 不需前后端联调, 但写代码时需要确保确定性, 心智负担较大, 不同步bug如果出现, 对版本质量是灾难性的 | 平时开发起来效率一般, 需要前后端联调(LocalHost自测起来效率很高, 但和最终Client-Server的真实情况不尽相同, 自测应以后者为准, 故依然需要联调), 但写代码时不需确保确定性, 心智负担较小, 无不同步的bug                                |\n| 开发特征2                  | 可以快速做出MVP验证                                                                                                 |                                                                                                                                                                                                                                  |\n| 采用第三方库               | 较难, 因为第三方库也须确保确定性 例如导航网格 物理引擎 动画引擎                                                     | 较容易, 因为第三方库不须确保确定性                                                                                                                                                                                               |\n\n\n\n\n\n\n\n\n\n\n\n## 同步模型的一般性描述    \n\n在锁步同步中, 逻辑帧一般称为Tick, 而渲染帧被称为Frame,  在确定性的帧同步中不会引入物理时间, 其时间的尺度即是逻辑帧的步.   \n在确定性锁步帧同步中, 其逻辑处理是一个逻辑帧一个逻辑帧执行的,  可以抽象为以下公式:   \n\n$$\nS_k=\\begin{cases}\ng(P, C), \\qquad if \\quad k = 0 \\\\\\\\\nt(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1\n\\end{cases}\n$$\n\n\nI是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作  \nS是游戏状态的集合 由众多状态子集组成  \n\n该公式的描述: \n* 游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    \n* 游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   \n  \n\n游戏状态的集合有关键的两个子集定义:   \n\n\n$\nS  \\begin{cases}\nO = \\{ o \\in S  \\quad|\\quad \\text {o is an important state that can be observed by the player} \\}  \\\\\\\\\nM = \\{ m \\in S  \\quad|\\quad \\text {m is an intermediate state to infer the final state} \\}  \n\\end{cases}\n$\n\n\n$\nS \\begin{cases}\nO = \\{ o \\in S  \\quad|\\quad \\text {o 是一些能被玩家所明显观察到的对象的状态集合} \\}   \\\\\\\\\nM = \\{ m \\in S  \\quad|\\quad \\text  {m 一些可用于推导最终状态的中间状态集合} \\}  \n\\end{cases}\n$\n\n\n在网络同步时, 称从客户端发出信息进行网络传输的过程为上行, 称客户端经过网络传输收到信息的过程为下行:   \n\n**一般锁步同步的本质是: 上下行都仅包含游戏外部变化原因集合$I_k$**   \n**一般状态同步的本质是: 下行仅包含游戏运算得出的结果状态集合$S_k$(更精确地说是状态子集$O_k$), 上行包含$I_k$和/或状态子集$M_k$**  \n   \n\n\n## 游戏中的状态一致性问题   \n\n无论是帧同步还是状态同步, 在实现上, 首先要做的是区分哪些是需要同步的状态, 而哪些是不需要关注的, 收缩解决域的规模.   \n\n* **区分需要同步的状态和不需要同步的状态**   \n  多人游戏中, 不需要同步的部分往往是指的纯本地的状态, 即其他玩家不会去感知的状态   \n\n\n* **逻辑和表现分离:**   \n  * 本质上, 表现是属于根据当前的状态集合$S_k$可以推导出的冗余状态以及不需要同步的细节表现部分    \n    * 战斗单位受到伤害:  血量变化是状态变化, 其中变化数值和是否暴击属于计算结果,  这些属于逻辑,  根据是否暴击而选择飘红字还是蓝字 还是不飘字用其他形式展示给玩家这是伤害的表现,  血条是否要跟随发生变化, 是否需要先标注扣除的血条颜色然后清空这部分血条, 这也是表现.    \n    * 在2D攻击判定中, 一个战斗角色可能有几千面三角形, 有骨骼有蒙皮有纹理,  但是逻辑上, 对于攻击判定来说, 没有这些细节 只有一个圆形+高度的圆柱体,  前者是逻辑, 后者是渲染模型和表现形式   \n  * 这里关键是设计好Gamecore或者LocalServer  \n  * 一般经过良好的逻辑和表现分离逻辑, 我们会拿到一份参与同步计算的纯净的状态集合$S_k$, 以方便我们进行帧同步的推演计算或者状态上的同步处理   \n\n* **可接受弱一致性**   \n  * 通常在游戏中, 我们需要保证的最终一致性而非强一致性. 例如:   \n    * 可被修正的过渡状态\n      * 玩家移动的位置在$S_{k}$的点a, 在$S_{k+5}$为点f,  那么玩家如果在中间b,c,d,e的点出现问题但是很快在f点再一次完成同步对齐, 其过程只要不会有肉眼可见的逻辑错误或者偏差 往往视为可接受的. (帧同步如果中间出现错误, 是不会有对齐点f的).    \n      * 过渡状态会持续较长时间或者虽然时间较短但导致可感知的的逻辑结果变化 则需要具体的trade off   \n       \n    * 可容忍的数值偏差   \n      * 例如客户端C1在发起攻击时, C1玩家的位置和服务器的位置存在一个微小偏差, 服务器可以使用C1玩家的位置来作为基准位置进行后续判定, 以达到更为精准的判定体验.   (减少位置同步对一致性的要求压力, 在PVE时效果良好, 在PVP时需要根据具体情况trade off)   \n\n* **强一致性**   \n  * 在帧同步的逻辑计算中, 我们需要严格按照公式保证所有客户端以拥有一致性的初始化, 一致性的处理逻辑, 一致性的输入, 一旦存在任何偏差, 都会在后续的每一个step中累积 最终导致完全不同的计算结果.     \n  * 一致的随机数发生器,  要保证每个副本计算所用到的随机数发生器在计算过程中随机出的值一致.   \n  * 计算机的浮点数计算并不保证一致性,(最近偶数) 因此涉及到浮点数计算的场合需要改为整数, 或者采用一些确定性的定点数计算   \n  * 容器的增删改查,排序和遍历需要确定性   \n    * std::sort非稳定排序 需要用std::stable_sort    \n    * std::unorder_map之类的hash map的插入位置和遍历顺序等为实现定义, 不同的版本可能存在差异   \n  * 做好逻辑层的隔离和封装, 防止意外的不确定性调用   \n  * 如果计算过程引入了比如骨骼动画, 物理引擎, 导航网格等 那么也要保证其浮点数和随机数的计算确定性问题   \n\n\n\n## 同步过程中的抖动和延迟问题    \n\n* 输入采样延迟和事件响应延迟:  \n  * 例如客户端的处理帧率是30帧, 平均采样延迟就有16.5ms  \n  * 一般通过提高帧率可以改善   \n   \n* 逻辑处理延迟   \n  * 包的序列化和反序列化延迟   \n  * 多线程投递延迟   \n  * 逻辑收发队列延迟(例如有的网络收发并不是实时发送和实时响应 而是采用的轮询, 类似逐帧处理下的采样延迟)   \n  * 业务处理延迟\n  * 通常逐帧处理方案下, 逻辑处理延迟只要保证在一帧内完成即可   \n\n* 渲染延迟:  \n  * 渲染流水线延迟  \n  * 多线程渲染的同步延迟\n  * 垂直同步延迟, 显示器显示延迟 像素响应延迟等    \n\n* 网络延迟   \n  * 协议栈处理延迟   \n  * 链路传输延迟: 向物理介质写入的延迟   \n  * 传播延迟:  物理介质内的传播速度 (例如普通光纤中光的传播速度约为真空中的2/3)   \n  * 路由节点的排队处理延迟   \n\n\n* 延迟抖动   \n  * 网络拥堵,丢包等    \n  * 逻辑处理, 例如大量的广播导致客户端一帧无法处理完所有消息包, 创建模型,场景,特效等带来的延迟超过一帧等          \n\n\n\n## 优化网络延迟和抖动   \n\n### 当前的网络环境    \n\n* 骨干网在大陆内部互连时延约20ms \n  * 这个和地理位置有关, 例如从北京到深圳的直线距离 仅仅按照光纤中的光速传播延迟就折合11.4ms   \n* 基站延迟  \n  * 4G网络自身时延实际约30ms~40ms 在4G标准中单程为10ms\n  * 5G网络自身时延实际约为6~10ms 在5G标准中单程1ms\n* wifi延迟  \n  * 这个因素比较多, 主要是丢包和小区宽带拥堵带来的延迟  见下网络质量图表.   \n\n从移动通信的角度来说, 在4G时代4G接入本身是网络时延瓶颈, 5G时代骨干网为网络时延瓶颈.   \n\n\n| 环境类型       | 平均时延(ms) | 抖动时延(ms) | 丢包率 | 上行带宽 | 下行带宽 |\n|----------------|----------------|----------------|--------|----------|----------|\n| 正常网络       | 20             | 20             | 2%     | 90%      | 90%      |\n| 普通弱网络     | 30             | 100~300        | 12%    | 80%      | 60%      |\n| 超低网络       | 50             | 100~500        | 30%    | 60%      | 40%      |\n| 繁忙网络       | 50~100         | 30~50          | 5%     | 25%      | 25%      |\n| 交通工具行驶中 | 200~400        | 200~2000       | 5%     | 60%      | 60%      |\n| 地铁中         | 200~400        | 200~2000       | 12%    | 60%      | 60%      |\n| 基站切换中     | 3000~7000      | 2000           | 5%     | 60%      | 60%      |\n\n一个简单的推算, 假如客户端是30帧  \n输入采样 + 基站延迟(双程) + 骨干网延迟(双程) + 服务器平均处理延迟  + 客户端渲染延迟  $\\approx$  总延迟   \n例如在30帧的王者荣耀中按下技能键, 全国玩家看到技能生效后的效果的总延迟在国内平均约为67ms左右.   \n而如果机房在上海人在上海, 使用5G网络,  那么基本上延迟约等于客户端的帧率间隔  .  \n\n### 工具   \n* 弱网模拟器  \n  * Net Limiter  守望先锋使用\n  * Network Simulator\n  * CCProxy\n  * clumsy  \n\n* 流量解析\n  * wireshark\n  * tcpdump\n\n\n### 链路层延迟的优化   \n* 服务器就近部署   \n* 减少网络发包量和流量   \n* 提高链路带宽减少排队  \n* 购买专线流量提供给小ISP   \n* 搭建私有专线   \n  \n### TCP还是UDP  \n虽然目前的网络环境变得越来越好, 新的TCP拥塞控制算法例如BBR针对当下的互联网环境又做了进一步的提高,   TCP也变得越来越流行,  但是在对实时性有较高要求的游戏中, TCP对仍然显得笨拙而且有一些不合适.    \n\n\n| Genre                      | Game                                          | Year  | Network Transport Protocol | Network Model | Network Topology |\n|----------------------------|-----------------------------------------------|-------|----------------------------|---------------|------------------|\n| RTS                        | Age of Empires[11][12]                        | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| RTS                        | Starcraft I/II[11][12]                        | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| RTS                        | Warcraft I/II/III/Dota[11]                    | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| MMORPG                     | Ever Quest[9]                                 | 2000s | UDP                        | State Sync    | Client Server    |\n| MMORPG                     | World of Warcraft[9]                          | 2000s | TCP                        | State Sync    | Client Server    |\n| MMORPG                     | Lineage I/II[9]                               | 2000s | TCP                        | State Sync    | Client Server    |\n| MOBA                       | League of Legends                             | 2000s | UDP                        | State Sync    | Client Server    |\n| MOBA                       | DOTA2                                         | 2010s | UDP                        | State Sync    | Client Server    |\n| MOBA(Mobile)               | 王者荣耀                                      | 2010s | UDP                        | Lockstep      | Client Server    |\n| MOBA(Mobile)               | 全民超神                                      | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS                        | Doom I/II[11]                                 | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| FPS                        | Quake I/II/III[11][12], Counter Strike        | 1990s | UDP                        | State Sync    | Peer to Peer     |\n| FPS                        | HALO: REACH Campagin and Firefight Mode[10]   | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FPS                        | HALO: REACH Multiplayer Mode[10]              | 2010s | UDP                        | State Sync    | Peer to Peer     |\n| FPS                        | Battlefield[8], Call of Duty[8][12], CS:GO[8] | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(Mobile)                | 穿越火线：枪战王者                            | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+MOBA)                 | Team Fortress, Overwatch[4], Paladins         | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+BattleRoyale)         | PUBG, Fortnite                                | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+BattleRoyale)(Mobile) | 绝地求生：刺激战场, 绝地求生：全军出击        | 2010s | UDP                        | State Sync    | Client Server    |\n| RAC                        | Watch Dog 2[6]                                | 2010s | UDP                        | State Sync    | Peer to Peer     |\n| RAC                        | Rocket League[7]                              | 2010s | UDP                        | State Sync    | Client Server    |\n| ACT                        | For Honor[5]                                  | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FTG                        | Street Fighter IV/V[8]                        | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FTG                        | Tekken 7[8]                                   | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| CCG                        | Hearthstone                                   | 2010s | TCP                        | State Sync    | Client Server    |\n\n\n\n### TCP下的延迟和抖动优化    \n\n* 开启TCP_NODELAY \n  * 关闭Nagle算法   \n  * Nagle算法原理: 在收到下一个ACK包之前, 合并(缓存)小于MSS大小的封包; 只要有已提交的数据包尚未确认, 就coalescing一定数量的数据后才提交.; 同一时间链路上(期望)只能存在一个包.   \n  *  历史遗留算法 针对小带宽慢速环境, 能容忍延迟的高频小包发送情景下的优化选项. 例如ssh会话   \n\n* 关闭TCP_CORK选项   \n  * (同Nagle类似) 但是这个是完全手动控制的    因此只要不用即可    \n\n  \n* 每次recv之后开启TCP_QUICKACK立刻确认  \n  * 关闭延迟确认  \n  * ACK延迟确认通过合并ACK 窗口更新 响应数据, 可以将服务器发送的响应数量减少3倍    \n  * ACK延迟确认和Nagle算法结合可能会导致更长的延迟,  例如发送方等待ACK才进行后续小包发送, 但是接受方因开启Delay确认收到ACK后不会立刻确认, 可能会导致总是ACK超时后才能发送数据    \n\n* 开启SACK优化(拥塞控制)   \n  * TCP通信过程中, 如果发送序列中间某个数据包丢失, TCP会重传最后确认包之后的所有包,  这里存在重复发送问题, 例如队首阻塞问题     \n  * SACK则是选择性重传 可以较少重传的数据量来提高性能和优化延迟\n\n* 启用BBR   \n  * TCP诞生的年代和当下的网络环境已经发生了较大变化,  TCP的拥塞控制手段在诞生之初是主要解决的是小宽带低丢包率的环境下最大化优化互联网的吞吐,   而现在的网络情况则是大宽带但是丢包率因为无线信号传输的断续 干扰  信道串扰问题成为常态.  例如家里客厅wifi多个卧室或者卫生间的穿墙带来的丢包量大增, 乘坐交通工具穿行等.  \n  * BBR的优化主要是把拥塞控制的参数从基于丢包探测改为基于实时采集的探测 对保守克制的拥塞方案进行较为开放的优化来适应当下的网络.  \n    * **传统的拥塞控制是基于丢包的AIMD策略 即 和式增加 积式减少**  \n    * BBR 尽量减少丢包, 瞬时时延的判定, 采用了实时采集并保留时间窗口的策略, 通过Probe More的宽带探测和Drain Less的过程(核心是完成宽带与RTT的乘积BDP计算) 来完成拥塞控制      \n  * 优化和解决传统TCP拥塞控制中的以下问题:   \n    * 慢启动问题  以非常小的窗口启动, 每个轮次提升窗口大小,   在大宽带情景下 要消耗特别多的轮次, 特别是大宽带高延迟情况下    \n    * 慢开始问题  遇到拥塞时 乘法减少, 加性增加窗口 导致窗口的大小出现震荡并进入低速模式  \n      * 虽然有快速重传和快速回复(reno版本)但是情景和效果有限   \n\n* BBR不能解决的问题 :    \n  * 通过BBR技术来说 已经缓解了大部分TCP的拥塞问题, 但是从根本上来讲 还有一些可以优化的点无法进行    \n  * BBR依赖内核版本,  虽然最新的发行版已经默认启用了BBR 甚至最新的android底层也启用了这项技术,  但是 仍然不够广泛, 很多游戏服务器的环境仍然是非常老的内核版本无法应用BBR      \n  * BBR版本最好的效果是双端都开启    \n  * 丢包重传仍然无法减少和规避   \n  * 无论数据是否可以丢弃乱序,  TCP本身都要保证所有数据的有序和完整     \n\n### UDP的优化    \n如果仅仅是用UDP重写可靠的另外一套可靠传输, 其意义相对于来说并不大 特别是有BBR之后,  那么哪些才是UDP的强项?     \n\n* Multi-streaming 多重串流(FEC前向纠错思想)      \n  * 缩水版本可以用简单的多倍发包策略来实现   \n  * 在丢包后通过其他已收到的包计算出该包 从而避免丢包后的重传等待问题   \n* 多通道下的可充分定制的传输选项    \n  * 可靠性可选  例如普通移动包除了标记关键信息的包丢掉后不需要重传,  移动模拟从前后包插值出来后即可.    \n  * 有序可选  聊天消息可以乱序接受 按照编号在UI上重排   \n\n\n## 时钟选择和时钟同步      \n在所有的同步方案中, 时钟校时是一个前提工作.  \n\n**在时钟的选择上自顶向下分为两大类**   \n\n* 逻辑时钟   \n  * 和现实时间不相关, 通常帧同步中的step即是一种典型的逻辑时钟   \n  * 逻辑时钟关注的是事件的时序关系, 而不关心是否和真实时间映射    \n  * 可以方便做缩放处理, 例如帧同步中的快播处理,  以及帧同步中的动态调整turn/step/bucket间隔   \n  * 和物理时钟相比实现和同步联调会比较麻烦\n  \n* 物理时钟   \n  * 和系统时间相关或者直接采用std::chrono::system_clock或者std::chrono::steady_clock  \n  * 和逻辑时钟相比实现简单直观 联调方便 同步问题排查也方便 \n\n**有了时钟后就是校时, 让所有客户端和服务器的时钟对齐到时间线下**   \n时钟校时基于两个前提:   \n\n* RTT时间是相对稳定的   \n* RTT往返即上行和下行延迟是接近的    \n\n**校时的原理是通过这两个前提, 我们通过记录RTT时间并获得服务器下行的时间戳, 即可推算出服务器的时钟. 然后客户端以对齐后的时钟进行使用.**     \n\n\n### 实现   \n校时工作的具体实现一般分为两步    \n\n* 初始校时   \n  * 一般通过多次采样, 并通过合适的手段尽量规避掉因为DELAY ACK, NAGLE算法, MSS合并等带来的采样问题,  通过统计学的原理进行统计并获的一个小的范围 取中间值    \n  \n* 动态校时   \n  * 网络质量存在抖动和变化, 动态校时尽量减少抖动带来的误差并跟进网络延迟的变化    \n  * 参考linux早期的SRTT平滑算法  每次动态按照偏差修正一定比例 而不是覆盖    \n  * $SRTT = (α \\times SRTT) + ((1-α)*RTT), \\quad  0.8 \\leq α \\geq 0.9$\n\n\n## 移动: 影子跟随算法和优化(内插)    \n\n核心流程如下:  \n\n1. 屏幕上现实的实体(entity)只是不停的追逐它的 \"影子\" (shadow)\n2. 服务器向各客户端发送各个影子的状态改变(坐标, 方向, 速度, 时间)\n3. 各个客户端收到以后按照当前重新插值修正影子状态\n4. 影子状态是跳变的, 但实体追赶影子是连续的, 故整个过程是平滑的\n\n影子跟随算法同其名, 影子总是滞后于实体的真实位置的,  从实践上来看, 一般还需要进行一定帧的相位滞后来保证网络抖动情况下的平滑性, 延迟感会比较大, 算法本质上是 内插值+相位滞后,  因此该算法自然简单粗暴, 并且能得到非常高的一致性保证, 缺点是延迟大.         \n\n## 常见的延迟隐藏手段   \n原则上, 通过快速反馈的视觉特效, 声音特效, 不影响逻辑的动作表现, 衣物抖动, 以及可容忍的不同步状态变化等设计, 把需要等待这部分的时间分梯度过渡掉, 让玩家有整体上的及时顺畅的体验.     \n* 移动的惯性加速和停止的减速  参考CS    \n* 垫步动作偷位移  \n* 施法时的抬手动作过渡  \n* 受击假特效 例如客户端在子弹位置放击中的声效而不是等服务器通知   \n* 震屏   \n* 顿帧  \n\n\n## 移动: 航位推测法(外推)\n相位滞后+内插值来实现的影子追随算法的主要区别是在于, 航位推测法主要利用了外插值预测未来移动路线, 来达到本地位置和时间线和服务器位置与时间线的拟合,  但由于外插值的误差问题以及关键状态的瞬间改变,  航位推测法需要更多的细节优化和辅助手段来达到比较好的效果.   \n通常航位预测法比较好的情景是低速或者小角速度的情景, 例如船舶航行, 赛车 .  \n\n举例来说:  \n一辆快速行驶的汽车的轨迹是可预测的, 例如它以100米/秒的速度前行, 那么1秒钟后它大概的位置在它出发点的前方100米处, 之所以这么说, 主要是因为汽车在这一秒钟内可能会有一点加速或者一点减速, 可能有一点偏航, 但汽车不会突然静止或者180度掉头(小概率正面撞山可能取决于设计需求以及进行回滚或者和解), **高速行驶的汽车的坐标高度依赖于它上一个时刻的坐标,速度,方向.**    \n\n而类似CS这样的游戏, 玩家可以在任意时刻转弯, 并进行任意角度发生不符合现实的加速度, 外推法的意义非常有限.   \n\n\n##  插值和外推, 以及常用算法  \n内插值和外插值援引至数学上的概念,  一般来说都是通过已知的离散点拉一个曲线, 从曲线中获取期望的新的点.  \n在游戏移动过程中, 曲线对应移动轨迹, 内插值相当于在两次移动点中间推算过程点,  而外插值则是通过已知的移动点求未来即将移动到的点  .    \n\n### 内插值常用算法   \n* 片段插值\n* 线性插值\n* 多项式插值\n* 样条曲线插值\n* 三角内插法\n* 有理内插\n* 小波内插\n\n### 外插值常用算法  \n* 线性外推\n* 多项式外推\n* 锥形外推\n* 云形外推\n\n\n## 命中: 延迟补偿    \n\n前面说过, 外推法不适合CS类游戏, 那么现实其他玩家只能尽可能的用内插法, 这样就带来一个流畅性问题.   \n\n一般来说, 玩家更多的会关注于自己的按键和反馈, 无法感知别人的按键只能感知别人的反馈,  因此选择差异性的做法,  即玩家总是根据自身的按键进行预演(自身的移动总是先于服务器), 使用内插法来显示其他玩家(其他玩家总是落后于服务器), 这样可以达到最大的流畅性. 但是这样就造就了一个新的需要解决的问题, 命中判定的双方不在一个时间轴上: \n\n玩家总是站在未来攻击历史上的玩家, 如果大家都在移动 那么在这样的情景下就无法正确的处理命中.    \n\n解决这个问题的方法就成为延迟补偿,  基本策略为服务器收到了玩家的开火请求后, 根据开火请求的时间,网络延迟和差值量, 把其他玩家拉回到该玩家看到这一刻所看到的位置, 然后执行命中判定, 最后再把相应的所有玩家恢复到当前的正确位置   \n\n步骤如下:  \n* 为玩家计算一个相当精确的延迟时间\n* 对每个玩家 从服务器历史信息中找一个已发送给这个玩家并且这个玩家已收到的的world update  这个world update是在这个玩家将要执行这个movement command之前的world update    \n* 对于每一个玩家 将其从上述的world update处拉回到这个玩家生成此user command的更新时间中执行用户命令  这个回退时间需要考虑到命令执行的时候的网络延时和插值量     \n* 执行玩家命令 包括武器开火等     \n* 将所有移动的、错位的玩家移动到他们当前正确位置\n\n### 延迟补偿的局限   \n1. 延迟补偿在延迟超过一定时间后开始失效.   \n2. 对于像PUBG战场这样的超远距离, 延迟补偿也会失去预期的作用    \n\n## 逻辑预演和客户端提交命中  \n在PUBG这种100名玩家的绝地岛中 想达到CS一样的延迟补偿效果是不太可能的,  一个是人数众多难以提高帧率, 另外一个是场景开阔,  失之毫厘谬以千里.    \n同样类似的场景例如写实类实时动作游戏, 轻微的延迟和误差都会造成受击部位的不同, 受击时命中法线的不同, 以至于后续逻辑发生不同的分支..   \n\n对于这种情况, 一般来说权威服务器会进一步下放权限, 客户端预演并提交命中, 服务器进行后校验.  例如PUBG的命中完全由客户端来提交.    \n\n这样虽然解决了流畅性和精度问题, 但是也同时引出了其他的一些问题:   \n* 两个玩家在延迟不同,看到的位置都有误差的情况下都提交了命中,  相信哪一个?    \n* 预演失败的玩家如何进行状态纠正处理,  回滚?和解? 拉扯?  \n* 客户端作弊怎么办? \n\n#### 满足进攻者的精彩时刻\n大部分时间都会优先满足进攻者 除非受害者做了什么事情缓和（mitigate）了这次进攻  \n\n\n## 提高TickRate   \n在PUBG的ServerTick中  \n前5分钟的的通信频率约12~24  之后会达到30帧并根据具体情况进行动态自适应调整 .  \n\n\n## 回退 快播 和解   \n对于帧同步而言, 一般来说会记录历史的状态切片和, 一旦出现预演失败则回退到之前的位置使用正确的输入进行快播追帧,然后进入新的预测状态   \n守望先锋中:   \n* 通过确定性的算法来提高预测的正确率\n* 预测失败后\n   在守望先锋中采用和解方法而不是直接拉扯(覆盖), 即像帧同步一样 守望先锋中的移动代码是保证确定性的 , 一旦出现预测失败则会进行重算所有输入直到追上当前时刻 并做一个平滑的处理   \n \n\n\n## 案例分析部分  \n略\n\n\n## 引用文献   \n* [多人游戏中的同步机制综述](https://zsummer.github.io/2020/07/24/2020-07-24-state_sync/)\n* [TCP_NODELAY and Small Buffer Writes](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/1.2/html/Realtime_Tuning_Guide/sect-Realtime_Tuning_Guide-Application_Tuning_and_Deployment-TCP_NODELAY_and_Small_Buffer_Writes.html)\n* [TCP_CORK: More than you ever wanted to know](http://baus.net/on-tcp_cork)\n* [TCP/IP options for high-performance data transmission](http://www.techrepublic.com/article/tcp-ip-options-for-high-performance-data-transmission/)\n* [Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush](https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html)\n* [The Linux Programming Interface Page 1262](https://books.google.com/books?id=2SAQAQAAQBAJ&pg=PA1262&lpg=PA1262&dq=tcp_cork&source=bl&ots=qPy0egFGus&sig=Y3_IGgidMc7K8AceiHG0UVGMwmo&hl=ja&sa=X&ei=-bsWU_bbLqm2yAGKsYG4BQ&ved=0CGMQ6AEwCDgK#v=onepage&q=tcp_cork&f=false)\n* [Linux: When to use scatter/gather IO (readv, writev) vs a large buffer with fread](http://stackoverflow.com/questions/10520182/linux-when-to-use-scatter-gather-io-readv-writev-vs-a-large-buffer-with-frea)\n\n\n* [Mark Frohnmayer, Tim Gift, \"The TRIBES Engine Networking Model or How to Make the Internet Rock for Multi­player Games\", 1998. Available: ](https://www.gamedevs.org/uploads/tribes-networking-model.pdf) [Accessed: 2019-01-27]\n* [Glenn Fiedler, \"State Synchronization Keeping simulations in sync by sending state\", 2015, Available: ](https://gafferongames.com/post/state_synchronization/) [Accessed: 2019-01-27]\n* Joshua Glazer, Sanjay Madhav, \"Multiplayer Game Programming\", Addison-Wesley, 2015.\n* Tim Ford, \"Overwatch Gameplay Architecture and Netcode\", GDC, 2017.\n* Xavier Guilbeault, Frederic Doll, \"Deterministic vs Replicated AI Building the Battlefield of For Honor\", GDC, 2017.\n* Matt Delbosc, \"Replicating Chaos Vehicle Replication in Watch Dogs 2\", GDC, 2017.\n* Jared Cone, \"It IS Rocket Science! The Physics of 'Rocket League' Detailed\", GDC, 2018.\n* [Battle(non)sense, \"Netcode & Input Lag Analyses\", 2017. Available: ](https://www.youtube.com/playlist?list=PLfOoCUS0PSkXVGjhB63KMDTOT5sJ0vWy8) [Accessed: 2019-02-08]\n* [Chen-Chi Wu, Kuan-Ta Chen, Chih-Ming Chen, Polly Huang, and Chin-Laung Lei, \"On the Challenge and Design of Transport Protocols for MMORPGs\". 2019. Available: ](http://www.iis.sinica.edu.tw/~swc/pub/tcp_mmorpg.html) [Accessed: 2019-02-08]\n* [David Aldridge, \"I Shot You First: Networking the Gameplay of HALO: REACH\", GDC, 2011. Available: ](https://www.youtube.com/watch?v=h47zZrqjgLc) [Accessed: 2016-07-02]\n* [Maksym Kurylovych, \"Lockstep protocol\", University of Tartu, 2008. Available: ](http://ds.cs.ut.ee/courses/course-files/Report%20-2.pdf) [Accessed: 2019-02-11]\n* [Glenn Fiedler, \"What Every Programmer Needs To Know About Game Networking A short history of game networking techniques\", 2010. Available: ](https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/) [Accessed: 2019-02-11]\n* [Christophe DIOT, Laurent GAUTIER, \"A Distributed Architecture for Multiplayer Interactive Applications on the Internet\", IEEE, 1999. Available: ](https://www.cs.ubc.ca/~krasic/cpsc538a-2005/papers/diot99distributed.pdf) [Accessed: 2019-02-12]\n* [Nathaniel E. Baughman, Brian Neil Levine, \"Cheat-Proof Playout for Centralized and Distributed Online Games\", IEEE INFOCOM, 2001. Available: ](https://pdfs.semanticscholar.org/2301/a3f35845baf350f65e17f6056868791854fe.pdf) [Accessed: 2019-02-12]\n* [Mark Terrano, Paul Bettner, \"1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond\", 2001. Available: ](http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php) [Accessed: 2019-02-12]\n* [Ho Lee, Eric Kozlowski, Scott Lenker, Sugih Jamin, \"Multiplayer Game Cheating Prevention With Pipelined Lockstep Protocol\", 2003. Available: ](http://www.ekozlowski.com/assets/multiplayer-game-cheating-prevention.pdf) [Accessed: 2019-02-12]\n* [\"Internet Backbone Network Latency\". Available: ](https://www.dotcom-tools.com/internet-backbone-latency.aspx) [Accessed: 2019-02-15]\n* [\"List of interface bit rates\". Available: ](https://en.wikipedia.org/wiki/List_of_interface_bit_rates) [Accessed: 2019-02-15]\n* [\"5G\", Available: ](https://en.wikipedia.org/wiki/5G#Performance_targets) [Accessed: 2019-02-15]\n* [网络游戏同步技术概述](https://www.jianshu.com/p/6ae1a6f81b01)   \n* [实时对战游戏的同步——问题分析](https://www.jianshu.com/p/6ae1a6f81b01)\n* [帧锁定同步算法](http://www.skywind.me/blog/archives/131)\n* [从物理时钟到逻辑时钟](https://www.raychase.net/5768)\n* [细谈网络同步在游戏历史中的发展变化](https://zhuanlan.zhihu.com/p/130702310)  \n* [图像插值算法](https://zhuanlan.zhihu.com/p/141681355)\n* [影子跟随算法](http://www.skywind.me/blog/archives/1145)\n* [C/S游戏架构中延迟补偿的设计和优化方法](https://hulinhong.com/2016/01/06/latency_compensating_methods_in_client_server_in_game_protocol_design_and_optimization/)\n* [《守望先锋》中的网络脚本化的武器和技能系统](https://gameinstitute.qq.com/community/detail/114122)\n* [《守望先锋》中的网络同步技术](https://www.bilibili.com/video/av14551705/)\n* [《守望先锋》架构设计与网络同步 -- GDC2017 精品分享实录](https://gameinstitute.qq.com/community/detail/114516)\n\n","source":"_posts/2020-07-24-state_sync.md","raw":"---\ntitle: 多人游戏中的同步机制综述 \ndate: 2020-07-24\ncategories: develop \nauthor: yawei.zhang \nmathjax: true\n---\n\n<!-- toc -->\n\n\n## 前言    \n本文中所有内容默认都基于逻辑描述, 逻辑状态,逻辑处理的逻辑游戏世界,  纯本地表现类, 总是通过逻辑世界单向导出的渲染计算等, 均不在本篇文章讨论范畴.  \n\n\n## 同步问题的产生和基本策略机制  \n\n**在多人游戏或者基于CS网络模型的游戏中, 玩家所在的游戏世界并非全由本地生成和修改, 必须不断从服务器或者其他玩家获得最新的信息来完成游戏世界的共享体验, 在多人实时交互的游戏中,  相当于每个人都维护一个'完整世界'的副本, 并保证每个人维护的副本之间一致性和实时性, 不同游戏对副本的规模复杂度以及对一致性和实时性的要求不同, 并随着网络环境的变化在不同的历史时期下演化出了多种同步方案.**   \n\n在所有的同步方案中, 有两种最基础也最常见的同步机制, 即状态同步和帧同步, 其基本机制和区别为:  \n\n* **状态同步: 通过同步游戏中的各种状态来保证游戏世界副本的一致性, 基本流程如下:**   \n  * 服务器维护权威完整副本  客户端维护本地副本 <font color=#ccc> (可以只维护部分副本) </font>   \n  * 客户端上行请求到服务器 服务器进行完整的逻辑演算 并将发生改变的状态下行给客户端   \n  * <font color=#ccc>客户端基于本地副本进行预演和状态预刷新 </font>  \n  * 客户端用来自服务器的状态数据刷新本地副本, 对齐服务器副本   \n    * <font color=#ccc>客户端如果有因预演导致的数据不对齐需要通过强同步/回滚/和解等机制达成最终对齐</font>   \n      * <font color=#ccc>快照类同步方式总是全量对齐</font>   \n\n  \n* **帧同步: 泛指通过一致的初始状态, 一致的输入事件和一致的逻辑处理, 从而得到相同的计算结果来保证游戏世界副本的一致性的同步方案**    \n  * 该术语为泛指, 所有通过确定性算法,以保证输入一致来得出相同游戏流程结果的同步均可泛称为帧同步.   \n  * 最早有对等网络的锁步同步, 发展为非对等网络的主机锁步同步, 再到后来的bucket同步以及现在比较流行的定时不等待乐观帧同步  \n  \n  * 锁步同步:  \n    * 客户端定时(比如每五帧为一个关键帧)上传一轮输入信息   \n    * 服务器收到所有输入信息后广播给其他所有客户端  \n    * 客户端用服务器发来的更新消息中的输入信息进行游戏(如果是对称网络, 这个过程则是广播自己输入信息和搜集所有其他客户端的输入信息)     \n    * 如果客户端进行到下一个关键帧(5帧后)时没有收到服务器的更新消息则等待   \n    * 如果客户端进行到下一个关键帧时已经接收到了服务器的更新消息, 则将上面的数据用于游戏, 并采集当前鼠标键盘输入发送给服务器, 同时继续进行下去   \n    * 服务端采集到所有数据后再次发送下一个关键帧更新消息   \n  \n  * 定时不等待:     \n    * 相对于锁步同步来说, 服务器会定时下发收集到的信息,  并根据收集到的信息调整关键帧的间隔,  没有在指定间隔内收到的消息会排在下一次关键帧或者丢弃   \n    * 相对于锁步同步来说, 任何客户端的卡顿不会阻塞其他玩家   \n\n**这两种同步模型本质上并不冲突, 并且在细节上会相互补充优化,  常见的为在状态同步这种弱一致性框架下添加确定性演算来增加同步的准确性, 在确定性的帧同步下隔离出来部分状态进行优化增加流畅性,  从模型角度来说, 在复杂的同步需求中, 状态同步总是比帧同步有更多的扩展和调优空间, 典型的案例如UE4和UNITY中的DS服务器.**   \n\n<!-- more -->   \n\n| .                          | 锁步同步                                                                                                            | 状态同步                                                                                                                                                                                                                         |\n|----------------------------|---------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 流量                       | 一般情况下较低, 决定于网络玩家数目                                                                                  | 一般情况下较高, 决定于当前该客户端可观察到(Observable)的网络实体数目                                                                                                                                                             |\n| 预表现                     | 难, 客户端需本地进行状态序列化反序列化, 进行Roll-Forth                                                              | 较易, 客户端进行预表现, 服务器进行权威演算, 客户端最终和服务器下发的状态进行调解(Reconciliation)和Roll-Forth                                                                                                                     |\n| 对弱网络的适应能力         | 较低, 因为较难做到预表现, 不能做容忍处理                                                                                            | 较高, 因为较易做到预表现,较容易做容忍等                                                                                                                                                                                                         |\n| 确定性                     | 严格确定性, 强一致性要求                                                                                            | 弱一致性                                                                                                                                                                                                                         |\n| 版本更新                   | 较难, 无法保证一致性                                                                                                | 较易或者非常容易                                                                                                                                                                                                                 |\n| 断线重连                   | 较难, 需比较耗时地进行快播追上实时进度的游戏状态                                                                    | 较易, 服务器下发当前实时游戏状态的Snapshot即可                                                                                                                                                                                   |\n| 自由进出                   | 较难, 需要从起点开始计算所有逻辑,包括进出的后的玩家                                                                 | 较易, 服务器下发当前实时游戏状态的Snapshot即可                                                                                                                                                                                   |\n| 离线重播(比如播放录像文件) | 较易, 且重播文件大小较小(和流量相关)                                                                                | 较易, 但重播文件较大(和流量相关)                                                                                                                                                                                                 |\n| 实时重播(比如死亡重播)     | 难, 需要rollback到过去再forth到实时状态                                                                             | 较易, 服务器下发历史Snapshot给客户端回到过去、下发重播数据进行重播、再下发当前Snapshot恢复实时游戏                                                                                                                               |\n| 网络逻辑性能优化           | 较难, 因为客户端需要运算所有逻辑                                                                                    | 较易, 大部分逻辑默认是在服务器进行运算, 从而分担客户端运算压力；服务器也可帮助客户端进行可观察网络对象的剔除(基于距离剔除、遮挡剔除、分块剔除等), 也可以降低优先级低的物体或属性的同步频率, 从而减小流量和再次减小客户端运算压力 |\n| 大量网络实体时的流量情况   | 好, 因为流量只决定于网络玩家数目                                                                                    | 如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS                                                                                           |\n| 大量网络实体时的性能情况   | 较差, 因为客户端需要运算所有逻辑。如果大部分网络实体有 \"Sleep\" 的可能, 则有优化空间                                   | 如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS                                                                                           |\n| 外挂                       | 因为客户端拥有所有信息, 所以透视类外挂的影响会比较严重                                                              | 也会有透视类外挂, 但服务器会进行一定的视野剔除, 所以影响稍小                                                                                                                                                                     |\n| 作弊                       | 多人竞技匹配相对还好, 少数人作弊是无效的, 但是PVE GVE同时作弊难以检测                                               | 比较困难 仲裁逻辑在服务器 做好入口防护即可有效避免                                                                                                                                                                               |\n| 开发特征                   | 平时开发起来很高效, 不需前后端联调, 但写代码时需要确保确定性, 心智负担较大, 不同步bug如果出现, 对版本质量是灾难性的 | 平时开发起来效率一般, 需要前后端联调(LocalHost自测起来效率很高, 但和最终Client-Server的真实情况不尽相同, 自测应以后者为准, 故依然需要联调), 但写代码时不需确保确定性, 心智负担较小, 无不同步的bug                                |\n| 开发特征2                  | 可以快速做出MVP验证                                                                                                 |                                                                                                                                                                                                                                  |\n| 采用第三方库               | 较难, 因为第三方库也须确保确定性 例如导航网格 物理引擎 动画引擎                                                     | 较容易, 因为第三方库不须确保确定性                                                                                                                                                                                               |\n\n\n\n\n\n\n\n\n\n\n\n## 同步模型的一般性描述    \n\n在锁步同步中, 逻辑帧一般称为Tick, 而渲染帧被称为Frame,  在确定性的帧同步中不会引入物理时间, 其时间的尺度即是逻辑帧的步.   \n在确定性锁步帧同步中, 其逻辑处理是一个逻辑帧一个逻辑帧执行的,  可以抽象为以下公式:   \n\n$$\nS_k=\\begin{cases}\ng(P, C), \\qquad if \\quad k = 0 \\\\\\\\\nt(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1\n\\end{cases}\n$$\n\n\nI是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作  \nS是游戏状态的集合 由众多状态子集组成  \n\n该公式的描述: \n* 游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    \n* 游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   \n  \n\n游戏状态的集合有关键的两个子集定义:   \n\n\n$\nS  \\begin{cases}\nO = \\{ o \\in S  \\quad|\\quad \\text {o is an important state that can be observed by the player} \\}  \\\\\\\\\nM = \\{ m \\in S  \\quad|\\quad \\text {m is an intermediate state to infer the final state} \\}  \n\\end{cases}\n$\n\n\n$\nS \\begin{cases}\nO = \\{ o \\in S  \\quad|\\quad \\text {o 是一些能被玩家所明显观察到的对象的状态集合} \\}   \\\\\\\\\nM = \\{ m \\in S  \\quad|\\quad \\text  {m 一些可用于推导最终状态的中间状态集合} \\}  \n\\end{cases}\n$\n\n\n在网络同步时, 称从客户端发出信息进行网络传输的过程为上行, 称客户端经过网络传输收到信息的过程为下行:   \n\n**一般锁步同步的本质是: 上下行都仅包含游戏外部变化原因集合$I_k$**   \n**一般状态同步的本质是: 下行仅包含游戏运算得出的结果状态集合$S_k$(更精确地说是状态子集$O_k$), 上行包含$I_k$和/或状态子集$M_k$**  \n   \n\n\n## 游戏中的状态一致性问题   \n\n无论是帧同步还是状态同步, 在实现上, 首先要做的是区分哪些是需要同步的状态, 而哪些是不需要关注的, 收缩解决域的规模.   \n\n* **区分需要同步的状态和不需要同步的状态**   \n  多人游戏中, 不需要同步的部分往往是指的纯本地的状态, 即其他玩家不会去感知的状态   \n\n\n* **逻辑和表现分离:**   \n  * 本质上, 表现是属于根据当前的状态集合$S_k$可以推导出的冗余状态以及不需要同步的细节表现部分    \n    * 战斗单位受到伤害:  血量变化是状态变化, 其中变化数值和是否暴击属于计算结果,  这些属于逻辑,  根据是否暴击而选择飘红字还是蓝字 还是不飘字用其他形式展示给玩家这是伤害的表现,  血条是否要跟随发生变化, 是否需要先标注扣除的血条颜色然后清空这部分血条, 这也是表现.    \n    * 在2D攻击判定中, 一个战斗角色可能有几千面三角形, 有骨骼有蒙皮有纹理,  但是逻辑上, 对于攻击判定来说, 没有这些细节 只有一个圆形+高度的圆柱体,  前者是逻辑, 后者是渲染模型和表现形式   \n  * 这里关键是设计好Gamecore或者LocalServer  \n  * 一般经过良好的逻辑和表现分离逻辑, 我们会拿到一份参与同步计算的纯净的状态集合$S_k$, 以方便我们进行帧同步的推演计算或者状态上的同步处理   \n\n* **可接受弱一致性**   \n  * 通常在游戏中, 我们需要保证的最终一致性而非强一致性. 例如:   \n    * 可被修正的过渡状态\n      * 玩家移动的位置在$S_{k}$的点a, 在$S_{k+5}$为点f,  那么玩家如果在中间b,c,d,e的点出现问题但是很快在f点再一次完成同步对齐, 其过程只要不会有肉眼可见的逻辑错误或者偏差 往往视为可接受的. (帧同步如果中间出现错误, 是不会有对齐点f的).    \n      * 过渡状态会持续较长时间或者虽然时间较短但导致可感知的的逻辑结果变化 则需要具体的trade off   \n       \n    * 可容忍的数值偏差   \n      * 例如客户端C1在发起攻击时, C1玩家的位置和服务器的位置存在一个微小偏差, 服务器可以使用C1玩家的位置来作为基准位置进行后续判定, 以达到更为精准的判定体验.   (减少位置同步对一致性的要求压力, 在PVE时效果良好, 在PVP时需要根据具体情况trade off)   \n\n* **强一致性**   \n  * 在帧同步的逻辑计算中, 我们需要严格按照公式保证所有客户端以拥有一致性的初始化, 一致性的处理逻辑, 一致性的输入, 一旦存在任何偏差, 都会在后续的每一个step中累积 最终导致完全不同的计算结果.     \n  * 一致的随机数发生器,  要保证每个副本计算所用到的随机数发生器在计算过程中随机出的值一致.   \n  * 计算机的浮点数计算并不保证一致性,(最近偶数) 因此涉及到浮点数计算的场合需要改为整数, 或者采用一些确定性的定点数计算   \n  * 容器的增删改查,排序和遍历需要确定性   \n    * std::sort非稳定排序 需要用std::stable_sort    \n    * std::unorder_map之类的hash map的插入位置和遍历顺序等为实现定义, 不同的版本可能存在差异   \n  * 做好逻辑层的隔离和封装, 防止意外的不确定性调用   \n  * 如果计算过程引入了比如骨骼动画, 物理引擎, 导航网格等 那么也要保证其浮点数和随机数的计算确定性问题   \n\n\n\n## 同步过程中的抖动和延迟问题    \n\n* 输入采样延迟和事件响应延迟:  \n  * 例如客户端的处理帧率是30帧, 平均采样延迟就有16.5ms  \n  * 一般通过提高帧率可以改善   \n   \n* 逻辑处理延迟   \n  * 包的序列化和反序列化延迟   \n  * 多线程投递延迟   \n  * 逻辑收发队列延迟(例如有的网络收发并不是实时发送和实时响应 而是采用的轮询, 类似逐帧处理下的采样延迟)   \n  * 业务处理延迟\n  * 通常逐帧处理方案下, 逻辑处理延迟只要保证在一帧内完成即可   \n\n* 渲染延迟:  \n  * 渲染流水线延迟  \n  * 多线程渲染的同步延迟\n  * 垂直同步延迟, 显示器显示延迟 像素响应延迟等    \n\n* 网络延迟   \n  * 协议栈处理延迟   \n  * 链路传输延迟: 向物理介质写入的延迟   \n  * 传播延迟:  物理介质内的传播速度 (例如普通光纤中光的传播速度约为真空中的2/3)   \n  * 路由节点的排队处理延迟   \n\n\n* 延迟抖动   \n  * 网络拥堵,丢包等    \n  * 逻辑处理, 例如大量的广播导致客户端一帧无法处理完所有消息包, 创建模型,场景,特效等带来的延迟超过一帧等          \n\n\n\n## 优化网络延迟和抖动   \n\n### 当前的网络环境    \n\n* 骨干网在大陆内部互连时延约20ms \n  * 这个和地理位置有关, 例如从北京到深圳的直线距离 仅仅按照光纤中的光速传播延迟就折合11.4ms   \n* 基站延迟  \n  * 4G网络自身时延实际约30ms~40ms 在4G标准中单程为10ms\n  * 5G网络自身时延实际约为6~10ms 在5G标准中单程1ms\n* wifi延迟  \n  * 这个因素比较多, 主要是丢包和小区宽带拥堵带来的延迟  见下网络质量图表.   \n\n从移动通信的角度来说, 在4G时代4G接入本身是网络时延瓶颈, 5G时代骨干网为网络时延瓶颈.   \n\n\n| 环境类型       | 平均时延(ms) | 抖动时延(ms) | 丢包率 | 上行带宽 | 下行带宽 |\n|----------------|----------------|----------------|--------|----------|----------|\n| 正常网络       | 20             | 20             | 2%     | 90%      | 90%      |\n| 普通弱网络     | 30             | 100~300        | 12%    | 80%      | 60%      |\n| 超低网络       | 50             | 100~500        | 30%    | 60%      | 40%      |\n| 繁忙网络       | 50~100         | 30~50          | 5%     | 25%      | 25%      |\n| 交通工具行驶中 | 200~400        | 200~2000       | 5%     | 60%      | 60%      |\n| 地铁中         | 200~400        | 200~2000       | 12%    | 60%      | 60%      |\n| 基站切换中     | 3000~7000      | 2000           | 5%     | 60%      | 60%      |\n\n一个简单的推算, 假如客户端是30帧  \n输入采样 + 基站延迟(双程) + 骨干网延迟(双程) + 服务器平均处理延迟  + 客户端渲染延迟  $\\approx$  总延迟   \n例如在30帧的王者荣耀中按下技能键, 全国玩家看到技能生效后的效果的总延迟在国内平均约为67ms左右.   \n而如果机房在上海人在上海, 使用5G网络,  那么基本上延迟约等于客户端的帧率间隔  .  \n\n### 工具   \n* 弱网模拟器  \n  * Net Limiter  守望先锋使用\n  * Network Simulator\n  * CCProxy\n  * clumsy  \n\n* 流量解析\n  * wireshark\n  * tcpdump\n\n\n### 链路层延迟的优化   \n* 服务器就近部署   \n* 减少网络发包量和流量   \n* 提高链路带宽减少排队  \n* 购买专线流量提供给小ISP   \n* 搭建私有专线   \n  \n### TCP还是UDP  \n虽然目前的网络环境变得越来越好, 新的TCP拥塞控制算法例如BBR针对当下的互联网环境又做了进一步的提高,   TCP也变得越来越流行,  但是在对实时性有较高要求的游戏中, TCP对仍然显得笨拙而且有一些不合适.    \n\n\n| Genre                      | Game                                          | Year  | Network Transport Protocol | Network Model | Network Topology |\n|----------------------------|-----------------------------------------------|-------|----------------------------|---------------|------------------|\n| RTS                        | Age of Empires[11][12]                        | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| RTS                        | Starcraft I/II[11][12]                        | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| RTS                        | Warcraft I/II/III/Dota[11]                    | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| MMORPG                     | Ever Quest[9]                                 | 2000s | UDP                        | State Sync    | Client Server    |\n| MMORPG                     | World of Warcraft[9]                          | 2000s | TCP                        | State Sync    | Client Server    |\n| MMORPG                     | Lineage I/II[9]                               | 2000s | TCP                        | State Sync    | Client Server    |\n| MOBA                       | League of Legends                             | 2000s | UDP                        | State Sync    | Client Server    |\n| MOBA                       | DOTA2                                         | 2010s | UDP                        | State Sync    | Client Server    |\n| MOBA(Mobile)               | 王者荣耀                                      | 2010s | UDP                        | Lockstep      | Client Server    |\n| MOBA(Mobile)               | 全民超神                                      | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS                        | Doom I/II[11]                                 | 1990s | UDP                        | Lockstep      | Peer to Peer     |\n| FPS                        | Quake I/II/III[11][12], Counter Strike        | 1990s | UDP                        | State Sync    | Peer to Peer     |\n| FPS                        | HALO: REACH Campagin and Firefight Mode[10]   | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FPS                        | HALO: REACH Multiplayer Mode[10]              | 2010s | UDP                        | State Sync    | Peer to Peer     |\n| FPS                        | Battlefield[8], Call of Duty[8][12], CS:GO[8] | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(Mobile)                | 穿越火线：枪战王者                            | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+MOBA)                 | Team Fortress, Overwatch[4], Paladins         | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+BattleRoyale)         | PUBG, Fortnite                                | 2010s | UDP                        | State Sync    | Client Server    |\n| FPS(+BattleRoyale)(Mobile) | 绝地求生：刺激战场, 绝地求生：全军出击        | 2010s | UDP                        | State Sync    | Client Server    |\n| RAC                        | Watch Dog 2[6]                                | 2010s | UDP                        | State Sync    | Peer to Peer     |\n| RAC                        | Rocket League[7]                              | 2010s | UDP                        | State Sync    | Client Server    |\n| ACT                        | For Honor[5]                                  | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FTG                        | Street Fighter IV/V[8]                        | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| FTG                        | Tekken 7[8]                                   | 2010s | UDP                        | Lockstep      | Peer to Peer     |\n| CCG                        | Hearthstone                                   | 2010s | TCP                        | State Sync    | Client Server    |\n\n\n\n### TCP下的延迟和抖动优化    \n\n* 开启TCP_NODELAY \n  * 关闭Nagle算法   \n  * Nagle算法原理: 在收到下一个ACK包之前, 合并(缓存)小于MSS大小的封包; 只要有已提交的数据包尚未确认, 就coalescing一定数量的数据后才提交.; 同一时间链路上(期望)只能存在一个包.   \n  *  历史遗留算法 针对小带宽慢速环境, 能容忍延迟的高频小包发送情景下的优化选项. 例如ssh会话   \n\n* 关闭TCP_CORK选项   \n  * (同Nagle类似) 但是这个是完全手动控制的    因此只要不用即可    \n\n  \n* 每次recv之后开启TCP_QUICKACK立刻确认  \n  * 关闭延迟确认  \n  * ACK延迟确认通过合并ACK 窗口更新 响应数据, 可以将服务器发送的响应数量减少3倍    \n  * ACK延迟确认和Nagle算法结合可能会导致更长的延迟,  例如发送方等待ACK才进行后续小包发送, 但是接受方因开启Delay确认收到ACK后不会立刻确认, 可能会导致总是ACK超时后才能发送数据    \n\n* 开启SACK优化(拥塞控制)   \n  * TCP通信过程中, 如果发送序列中间某个数据包丢失, TCP会重传最后确认包之后的所有包,  这里存在重复发送问题, 例如队首阻塞问题     \n  * SACK则是选择性重传 可以较少重传的数据量来提高性能和优化延迟\n\n* 启用BBR   \n  * TCP诞生的年代和当下的网络环境已经发生了较大变化,  TCP的拥塞控制手段在诞生之初是主要解决的是小宽带低丢包率的环境下最大化优化互联网的吞吐,   而现在的网络情况则是大宽带但是丢包率因为无线信号传输的断续 干扰  信道串扰问题成为常态.  例如家里客厅wifi多个卧室或者卫生间的穿墙带来的丢包量大增, 乘坐交通工具穿行等.  \n  * BBR的优化主要是把拥塞控制的参数从基于丢包探测改为基于实时采集的探测 对保守克制的拥塞方案进行较为开放的优化来适应当下的网络.  \n    * **传统的拥塞控制是基于丢包的AIMD策略 即 和式增加 积式减少**  \n    * BBR 尽量减少丢包, 瞬时时延的判定, 采用了实时采集并保留时间窗口的策略, 通过Probe More的宽带探测和Drain Less的过程(核心是完成宽带与RTT的乘积BDP计算) 来完成拥塞控制      \n  * 优化和解决传统TCP拥塞控制中的以下问题:   \n    * 慢启动问题  以非常小的窗口启动, 每个轮次提升窗口大小,   在大宽带情景下 要消耗特别多的轮次, 特别是大宽带高延迟情况下    \n    * 慢开始问题  遇到拥塞时 乘法减少, 加性增加窗口 导致窗口的大小出现震荡并进入低速模式  \n      * 虽然有快速重传和快速回复(reno版本)但是情景和效果有限   \n\n* BBR不能解决的问题 :    \n  * 通过BBR技术来说 已经缓解了大部分TCP的拥塞问题, 但是从根本上来讲 还有一些可以优化的点无法进行    \n  * BBR依赖内核版本,  虽然最新的发行版已经默认启用了BBR 甚至最新的android底层也启用了这项技术,  但是 仍然不够广泛, 很多游戏服务器的环境仍然是非常老的内核版本无法应用BBR      \n  * BBR版本最好的效果是双端都开启    \n  * 丢包重传仍然无法减少和规避   \n  * 无论数据是否可以丢弃乱序,  TCP本身都要保证所有数据的有序和完整     \n\n### UDP的优化    \n如果仅仅是用UDP重写可靠的另外一套可靠传输, 其意义相对于来说并不大 特别是有BBR之后,  那么哪些才是UDP的强项?     \n\n* Multi-streaming 多重串流(FEC前向纠错思想)      \n  * 缩水版本可以用简单的多倍发包策略来实现   \n  * 在丢包后通过其他已收到的包计算出该包 从而避免丢包后的重传等待问题   \n* 多通道下的可充分定制的传输选项    \n  * 可靠性可选  例如普通移动包除了标记关键信息的包丢掉后不需要重传,  移动模拟从前后包插值出来后即可.    \n  * 有序可选  聊天消息可以乱序接受 按照编号在UI上重排   \n\n\n## 时钟选择和时钟同步      \n在所有的同步方案中, 时钟校时是一个前提工作.  \n\n**在时钟的选择上自顶向下分为两大类**   \n\n* 逻辑时钟   \n  * 和现实时间不相关, 通常帧同步中的step即是一种典型的逻辑时钟   \n  * 逻辑时钟关注的是事件的时序关系, 而不关心是否和真实时间映射    \n  * 可以方便做缩放处理, 例如帧同步中的快播处理,  以及帧同步中的动态调整turn/step/bucket间隔   \n  * 和物理时钟相比实现和同步联调会比较麻烦\n  \n* 物理时钟   \n  * 和系统时间相关或者直接采用std::chrono::system_clock或者std::chrono::steady_clock  \n  * 和逻辑时钟相比实现简单直观 联调方便 同步问题排查也方便 \n\n**有了时钟后就是校时, 让所有客户端和服务器的时钟对齐到时间线下**   \n时钟校时基于两个前提:   \n\n* RTT时间是相对稳定的   \n* RTT往返即上行和下行延迟是接近的    \n\n**校时的原理是通过这两个前提, 我们通过记录RTT时间并获得服务器下行的时间戳, 即可推算出服务器的时钟. 然后客户端以对齐后的时钟进行使用.**     \n\n\n### 实现   \n校时工作的具体实现一般分为两步    \n\n* 初始校时   \n  * 一般通过多次采样, 并通过合适的手段尽量规避掉因为DELAY ACK, NAGLE算法, MSS合并等带来的采样问题,  通过统计学的原理进行统计并获的一个小的范围 取中间值    \n  \n* 动态校时   \n  * 网络质量存在抖动和变化, 动态校时尽量减少抖动带来的误差并跟进网络延迟的变化    \n  * 参考linux早期的SRTT平滑算法  每次动态按照偏差修正一定比例 而不是覆盖    \n  * $SRTT = (α \\times SRTT) + ((1-α)*RTT), \\quad  0.8 \\leq α \\geq 0.9$\n\n\n## 移动: 影子跟随算法和优化(内插)    \n\n核心流程如下:  \n\n1. 屏幕上现实的实体(entity)只是不停的追逐它的 \"影子\" (shadow)\n2. 服务器向各客户端发送各个影子的状态改变(坐标, 方向, 速度, 时间)\n3. 各个客户端收到以后按照当前重新插值修正影子状态\n4. 影子状态是跳变的, 但实体追赶影子是连续的, 故整个过程是平滑的\n\n影子跟随算法同其名, 影子总是滞后于实体的真实位置的,  从实践上来看, 一般还需要进行一定帧的相位滞后来保证网络抖动情况下的平滑性, 延迟感会比较大, 算法本质上是 内插值+相位滞后,  因此该算法自然简单粗暴, 并且能得到非常高的一致性保证, 缺点是延迟大.         \n\n## 常见的延迟隐藏手段   \n原则上, 通过快速反馈的视觉特效, 声音特效, 不影响逻辑的动作表现, 衣物抖动, 以及可容忍的不同步状态变化等设计, 把需要等待这部分的时间分梯度过渡掉, 让玩家有整体上的及时顺畅的体验.     \n* 移动的惯性加速和停止的减速  参考CS    \n* 垫步动作偷位移  \n* 施法时的抬手动作过渡  \n* 受击假特效 例如客户端在子弹位置放击中的声效而不是等服务器通知   \n* 震屏   \n* 顿帧  \n\n\n## 移动: 航位推测法(外推)\n相位滞后+内插值来实现的影子追随算法的主要区别是在于, 航位推测法主要利用了外插值预测未来移动路线, 来达到本地位置和时间线和服务器位置与时间线的拟合,  但由于外插值的误差问题以及关键状态的瞬间改变,  航位推测法需要更多的细节优化和辅助手段来达到比较好的效果.   \n通常航位预测法比较好的情景是低速或者小角速度的情景, 例如船舶航行, 赛车 .  \n\n举例来说:  \n一辆快速行驶的汽车的轨迹是可预测的, 例如它以100米/秒的速度前行, 那么1秒钟后它大概的位置在它出发点的前方100米处, 之所以这么说, 主要是因为汽车在这一秒钟内可能会有一点加速或者一点减速, 可能有一点偏航, 但汽车不会突然静止或者180度掉头(小概率正面撞山可能取决于设计需求以及进行回滚或者和解), **高速行驶的汽车的坐标高度依赖于它上一个时刻的坐标,速度,方向.**    \n\n而类似CS这样的游戏, 玩家可以在任意时刻转弯, 并进行任意角度发生不符合现实的加速度, 外推法的意义非常有限.   \n\n\n##  插值和外推, 以及常用算法  \n内插值和外插值援引至数学上的概念,  一般来说都是通过已知的离散点拉一个曲线, 从曲线中获取期望的新的点.  \n在游戏移动过程中, 曲线对应移动轨迹, 内插值相当于在两次移动点中间推算过程点,  而外插值则是通过已知的移动点求未来即将移动到的点  .    \n\n### 内插值常用算法   \n* 片段插值\n* 线性插值\n* 多项式插值\n* 样条曲线插值\n* 三角内插法\n* 有理内插\n* 小波内插\n\n### 外插值常用算法  \n* 线性外推\n* 多项式外推\n* 锥形外推\n* 云形外推\n\n\n## 命中: 延迟补偿    \n\n前面说过, 外推法不适合CS类游戏, 那么现实其他玩家只能尽可能的用内插法, 这样就带来一个流畅性问题.   \n\n一般来说, 玩家更多的会关注于自己的按键和反馈, 无法感知别人的按键只能感知别人的反馈,  因此选择差异性的做法,  即玩家总是根据自身的按键进行预演(自身的移动总是先于服务器), 使用内插法来显示其他玩家(其他玩家总是落后于服务器), 这样可以达到最大的流畅性. 但是这样就造就了一个新的需要解决的问题, 命中判定的双方不在一个时间轴上: \n\n玩家总是站在未来攻击历史上的玩家, 如果大家都在移动 那么在这样的情景下就无法正确的处理命中.    \n\n解决这个问题的方法就成为延迟补偿,  基本策略为服务器收到了玩家的开火请求后, 根据开火请求的时间,网络延迟和差值量, 把其他玩家拉回到该玩家看到这一刻所看到的位置, 然后执行命中判定, 最后再把相应的所有玩家恢复到当前的正确位置   \n\n步骤如下:  \n* 为玩家计算一个相当精确的延迟时间\n* 对每个玩家 从服务器历史信息中找一个已发送给这个玩家并且这个玩家已收到的的world update  这个world update是在这个玩家将要执行这个movement command之前的world update    \n* 对于每一个玩家 将其从上述的world update处拉回到这个玩家生成此user command的更新时间中执行用户命令  这个回退时间需要考虑到命令执行的时候的网络延时和插值量     \n* 执行玩家命令 包括武器开火等     \n* 将所有移动的、错位的玩家移动到他们当前正确位置\n\n### 延迟补偿的局限   \n1. 延迟补偿在延迟超过一定时间后开始失效.   \n2. 对于像PUBG战场这样的超远距离, 延迟补偿也会失去预期的作用    \n\n## 逻辑预演和客户端提交命中  \n在PUBG这种100名玩家的绝地岛中 想达到CS一样的延迟补偿效果是不太可能的,  一个是人数众多难以提高帧率, 另外一个是场景开阔,  失之毫厘谬以千里.    \n同样类似的场景例如写实类实时动作游戏, 轻微的延迟和误差都会造成受击部位的不同, 受击时命中法线的不同, 以至于后续逻辑发生不同的分支..   \n\n对于这种情况, 一般来说权威服务器会进一步下放权限, 客户端预演并提交命中, 服务器进行后校验.  例如PUBG的命中完全由客户端来提交.    \n\n这样虽然解决了流畅性和精度问题, 但是也同时引出了其他的一些问题:   \n* 两个玩家在延迟不同,看到的位置都有误差的情况下都提交了命中,  相信哪一个?    \n* 预演失败的玩家如何进行状态纠正处理,  回滚?和解? 拉扯?  \n* 客户端作弊怎么办? \n\n#### 满足进攻者的精彩时刻\n大部分时间都会优先满足进攻者 除非受害者做了什么事情缓和（mitigate）了这次进攻  \n\n\n## 提高TickRate   \n在PUBG的ServerTick中  \n前5分钟的的通信频率约12~24  之后会达到30帧并根据具体情况进行动态自适应调整 .  \n\n\n## 回退 快播 和解   \n对于帧同步而言, 一般来说会记录历史的状态切片和, 一旦出现预演失败则回退到之前的位置使用正确的输入进行快播追帧,然后进入新的预测状态   \n守望先锋中:   \n* 通过确定性的算法来提高预测的正确率\n* 预测失败后\n   在守望先锋中采用和解方法而不是直接拉扯(覆盖), 即像帧同步一样 守望先锋中的移动代码是保证确定性的 , 一旦出现预测失败则会进行重算所有输入直到追上当前时刻 并做一个平滑的处理   \n \n\n\n## 案例分析部分  \n略\n\n\n## 引用文献   \n* [多人游戏中的同步机制综述](https://zsummer.github.io/2020/07/24/2020-07-24-state_sync/)\n* [TCP_NODELAY and Small Buffer Writes](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/1.2/html/Realtime_Tuning_Guide/sect-Realtime_Tuning_Guide-Application_Tuning_and_Deployment-TCP_NODELAY_and_Small_Buffer_Writes.html)\n* [TCP_CORK: More than you ever wanted to know](http://baus.net/on-tcp_cork)\n* [TCP/IP options for high-performance data transmission](http://www.techrepublic.com/article/tcp-ip-options-for-high-performance-data-transmission/)\n* [Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush](https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html)\n* [The Linux Programming Interface Page 1262](https://books.google.com/books?id=2SAQAQAAQBAJ&pg=PA1262&lpg=PA1262&dq=tcp_cork&source=bl&ots=qPy0egFGus&sig=Y3_IGgidMc7K8AceiHG0UVGMwmo&hl=ja&sa=X&ei=-bsWU_bbLqm2yAGKsYG4BQ&ved=0CGMQ6AEwCDgK#v=onepage&q=tcp_cork&f=false)\n* [Linux: When to use scatter/gather IO (readv, writev) vs a large buffer with fread](http://stackoverflow.com/questions/10520182/linux-when-to-use-scatter-gather-io-readv-writev-vs-a-large-buffer-with-frea)\n\n\n* [Mark Frohnmayer, Tim Gift, \"The TRIBES Engine Networking Model or How to Make the Internet Rock for Multi­player Games\", 1998. Available: ](https://www.gamedevs.org/uploads/tribes-networking-model.pdf) [Accessed: 2019-01-27]\n* [Glenn Fiedler, \"State Synchronization Keeping simulations in sync by sending state\", 2015, Available: ](https://gafferongames.com/post/state_synchronization/) [Accessed: 2019-01-27]\n* Joshua Glazer, Sanjay Madhav, \"Multiplayer Game Programming\", Addison-Wesley, 2015.\n* Tim Ford, \"Overwatch Gameplay Architecture and Netcode\", GDC, 2017.\n* Xavier Guilbeault, Frederic Doll, \"Deterministic vs Replicated AI Building the Battlefield of For Honor\", GDC, 2017.\n* Matt Delbosc, \"Replicating Chaos Vehicle Replication in Watch Dogs 2\", GDC, 2017.\n* Jared Cone, \"It IS Rocket Science! The Physics of 'Rocket League' Detailed\", GDC, 2018.\n* [Battle(non)sense, \"Netcode & Input Lag Analyses\", 2017. Available: ](https://www.youtube.com/playlist?list=PLfOoCUS0PSkXVGjhB63KMDTOT5sJ0vWy8) [Accessed: 2019-02-08]\n* [Chen-Chi Wu, Kuan-Ta Chen, Chih-Ming Chen, Polly Huang, and Chin-Laung Lei, \"On the Challenge and Design of Transport Protocols for MMORPGs\". 2019. Available: ](http://www.iis.sinica.edu.tw/~swc/pub/tcp_mmorpg.html) [Accessed: 2019-02-08]\n* [David Aldridge, \"I Shot You First: Networking the Gameplay of HALO: REACH\", GDC, 2011. Available: ](https://www.youtube.com/watch?v=h47zZrqjgLc) [Accessed: 2016-07-02]\n* [Maksym Kurylovych, \"Lockstep protocol\", University of Tartu, 2008. Available: ](http://ds.cs.ut.ee/courses/course-files/Report%20-2.pdf) [Accessed: 2019-02-11]\n* [Glenn Fiedler, \"What Every Programmer Needs To Know About Game Networking A short history of game networking techniques\", 2010. Available: ](https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/) [Accessed: 2019-02-11]\n* [Christophe DIOT, Laurent GAUTIER, \"A Distributed Architecture for Multiplayer Interactive Applications on the Internet\", IEEE, 1999. Available: ](https://www.cs.ubc.ca/~krasic/cpsc538a-2005/papers/diot99distributed.pdf) [Accessed: 2019-02-12]\n* [Nathaniel E. Baughman, Brian Neil Levine, \"Cheat-Proof Playout for Centralized and Distributed Online Games\", IEEE INFOCOM, 2001. Available: ](https://pdfs.semanticscholar.org/2301/a3f35845baf350f65e17f6056868791854fe.pdf) [Accessed: 2019-02-12]\n* [Mark Terrano, Paul Bettner, \"1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond\", 2001. Available: ](http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php) [Accessed: 2019-02-12]\n* [Ho Lee, Eric Kozlowski, Scott Lenker, Sugih Jamin, \"Multiplayer Game Cheating Prevention With Pipelined Lockstep Protocol\", 2003. Available: ](http://www.ekozlowski.com/assets/multiplayer-game-cheating-prevention.pdf) [Accessed: 2019-02-12]\n* [\"Internet Backbone Network Latency\". Available: ](https://www.dotcom-tools.com/internet-backbone-latency.aspx) [Accessed: 2019-02-15]\n* [\"List of interface bit rates\". Available: ](https://en.wikipedia.org/wiki/List_of_interface_bit_rates) [Accessed: 2019-02-15]\n* [\"5G\", Available: ](https://en.wikipedia.org/wiki/5G#Performance_targets) [Accessed: 2019-02-15]\n* [网络游戏同步技术概述](https://www.jianshu.com/p/6ae1a6f81b01)   \n* [实时对战游戏的同步——问题分析](https://www.jianshu.com/p/6ae1a6f81b01)\n* [帧锁定同步算法](http://www.skywind.me/blog/archives/131)\n* [从物理时钟到逻辑时钟](https://www.raychase.net/5768)\n* [细谈网络同步在游戏历史中的发展变化](https://zhuanlan.zhihu.com/p/130702310)  \n* [图像插值算法](https://zhuanlan.zhihu.com/p/141681355)\n* [影子跟随算法](http://www.skywind.me/blog/archives/1145)\n* [C/S游戏架构中延迟补偿的设计和优化方法](https://hulinhong.com/2016/01/06/latency_compensating_methods_in_client_server_in_game_protocol_design_and_optimization/)\n* [《守望先锋》中的网络脚本化的武器和技能系统](https://gameinstitute.qq.com/community/detail/114122)\n* [《守望先锋》中的网络同步技术](https://www.bilibili.com/video/av14551705/)\n* [《守望先锋》架构设计与网络同步 -- GDC2017 精品分享实录](https://gameinstitute.qq.com/community/detail/114516)\n\n","slug":"2020-07-24-state_sync","published":1,"updated":"2020-08-05T11:05:20.478Z","_id":"ckd3wyejg001n7w5hfgln6qys","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- toc -->\n\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#同步问题的产生和基本策略机制\">同步问题的产生和基本策略机制</a></li>\n<li><a href=\"#同步模型的一般性描述\">同步模型的一般性描述</a></li>\n<li><a href=\"#游戏中的状态一致性问题\">游戏中的状态一致性问题</a></li>\n<li><a href=\"#同步过程中的抖动和延迟问题\">同步过程中的抖动和延迟问题</a></li>\n<li><a href=\"#优化网络延迟和抖动\">优化网络延迟和抖动</a><ul>\n<li><a href=\"#当前的网络环境\">当前的网络环境</a></li>\n<li><a href=\"#工具\">工具</a></li>\n<li><a href=\"#链路层延迟的优化\">链路层延迟的优化</a></li>\n<li><a href=\"#tcp还是udp\">TCP还是UDP</a></li>\n<li><a href=\"#tcp下的延迟和抖动优化\">TCP下的延迟和抖动优化</a></li>\n<li><a href=\"#udp的优化\">UDP的优化</a></li>\n</ul>\n</li>\n<li><a href=\"#时钟选择和时钟同步\">时钟选择和时钟同步</a><ul>\n<li><a href=\"#实现\">实现</a></li>\n</ul>\n</li>\n<li><a href=\"#移动-影子跟随算法和优化内插\">移动: 影子跟随算法和优化(内插)</a></li>\n<li><a href=\"#常见的延迟隐藏手段\">常见的延迟隐藏手段</a></li>\n<li><a href=\"#移动-航位推测法外推\">移动: 航位推测法(外推)</a></li>\n<li><a href=\"#插值和外推-以及常用算法\">插值和外推, 以及常用算法</a><ul>\n<li><a href=\"#内插值常用算法\">内插值常用算法</a></li>\n<li><a href=\"#外插值常用算法\">外插值常用算法</a></li>\n</ul>\n</li>\n<li><a href=\"#命中-延迟补偿\">命中: 延迟补偿</a><ul>\n<li><a href=\"#延迟补偿的局限\">延迟补偿的局限</a></li>\n</ul>\n</li>\n<li><a href=\"#逻辑预演和客户端提交命中\">逻辑预演和客户端提交命中</a><ul>\n<li><a href=\"#满足进攻者的精彩时刻\">满足进攻者的精彩时刻</a></li>\n</ul>\n</li>\n<li><a href=\"#提高tickrate\">提高TickRate</a></li>\n<li><a href=\"#回退-快播-和解\">回退 快播 和解</a></li>\n<li><a href=\"#案例分析部分\">案例分析部分</a></li>\n<li><a href=\"#引用文献\">引用文献</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2><span id=\"前言\">前言</span></h2><p>本文中所有内容默认都基于逻辑描述, 逻辑状态,逻辑处理的逻辑游戏世界,  纯本地表现类, 总是通过逻辑世界单向导出的渲染计算等, 均不在本篇文章讨论范畴.  </p>\n<h2><span id=\"同步问题的产生和基本策略机制\">同步问题的产生和基本策略机制</span></h2><p><strong>在多人游戏或者基于CS网络模型的游戏中, 玩家所在的游戏世界并非全由本地生成和修改, 必须不断从服务器或者其他玩家获得最新的信息来完成游戏世界的共享体验, 在多人实时交互的游戏中,  相当于每个人都维护一个’完整世界’的副本, 并保证每个人维护的副本之间一致性和实时性, 不同游戏对副本的规模复杂度以及对一致性和实时性的要求不同, 并随着网络环境的变化在不同的历史时期下演化出了多种同步方案.</strong>   </p>\n<p>在所有的同步方案中, 有两种最基础也最常见的同步机制, 即状态同步和帧同步, 其基本机制和区别为:  </p>\n<ul>\n<li><strong>状态同步: 通过同步游戏中的各种状态来保证游戏世界副本的一致性, 基本流程如下:</strong>   <ul>\n<li>服务器维护权威完整副本  客户端维护本地副本 <font color=\"#ccc\"> (可以只维护部分副本) </font>   </li>\n<li>客户端上行请求到服务器 服务器进行完整的逻辑演算 并将发生改变的状态下行给客户端   </li>\n<li><font color=\"#ccc\">客户端基于本地副本进行预演和状态预刷新 </font>  </li>\n<li>客户端用来自服务器的状态数据刷新本地副本, 对齐服务器副本   <ul>\n<li><font color=\"#ccc\">客户端如果有因预演导致的数据不对齐需要通过强同步/回滚/和解等机制达成最终对齐</font>   <ul>\n<li><font color=\"#ccc\">快照类同步方式总是全量对齐</font>   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>帧同步: 泛指通过一致的初始状态, 一致的输入事件和一致的逻辑处理, 从而得到相同的计算结果来保证游戏世界副本的一致性的同步方案</strong>    </p>\n<ul>\n<li><p>该术语为泛指, 所有通过确定性算法,以保证输入一致来得出相同游戏流程结果的同步均可泛称为帧同步.   </p>\n</li>\n<li><p>最早有对等网络的锁步同步, 发展为非对等网络的主机锁步同步, 再到后来的bucket同步以及现在比较流行的定时不等待乐观帧同步  </p>\n</li>\n<li><p>锁步同步:  </p>\n<ul>\n<li>客户端定时(比如每五帧为一个关键帧)上传一轮输入信息   </li>\n<li>服务器收到所有输入信息后广播给其他所有客户端  </li>\n<li>客户端用服务器发来的更新消息中的输入信息进行游戏(如果是对称网络, 这个过程则是广播自己输入信息和搜集所有其他客户端的输入信息)     </li>\n<li>如果客户端进行到下一个关键帧(5帧后)时没有收到服务器的更新消息则等待   </li>\n<li>如果客户端进行到下一个关键帧时已经接收到了服务器的更新消息, 则将上面的数据用于游戏, 并采集当前鼠标键盘输入发送给服务器, 同时继续进行下去   </li>\n<li>服务端采集到所有数据后再次发送下一个关键帧更新消息   </li>\n</ul>\n</li>\n<li><p>定时不等待:     </p>\n<ul>\n<li>相对于锁步同步来说, 服务器会定时下发收集到的信息,  并根据收集到的信息调整关键帧的间隔,  没有在指定间隔内收到的消息会排在下一次关键帧或者丢弃   </li>\n<li>相对于锁步同步来说, 任何客户端的卡顿不会阻塞其他玩家   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>这两种同步模型本质上并不冲突, 并且在细节上会相互补充优化,  常见的为在状态同步这种弱一致性框架下添加确定性演算来增加同步的准确性, 在确定性的帧同步下隔离出来部分状态进行优化增加流畅性,  从模型角度来说, 在复杂的同步需求中, 状态同步总是比帧同步有更多的扩展和调优空间, 典型的案例如UE4和UNITY中的DS服务器.</strong>   </p>\n<a id=\"more\"></a>   \n\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>锁步同步</th>\n<th>状态同步</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>流量</td>\n<td>一般情况下较低, 决定于网络玩家数目</td>\n<td>一般情况下较高, 决定于当前该客户端可观察到(Observable)的网络实体数目</td>\n</tr>\n<tr>\n<td>预表现</td>\n<td>难, 客户端需本地进行状态序列化反序列化, 进行Roll-Forth</td>\n<td>较易, 客户端进行预表现, 服务器进行权威演算, 客户端最终和服务器下发的状态进行调解(Reconciliation)和Roll-Forth</td>\n</tr>\n<tr>\n<td>对弱网络的适应能力</td>\n<td>较低, 因为较难做到预表现, 不能做容忍处理</td>\n<td>较高, 因为较易做到预表现,较容易做容忍等</td>\n</tr>\n<tr>\n<td>确定性</td>\n<td>严格确定性, 强一致性要求</td>\n<td>弱一致性</td>\n</tr>\n<tr>\n<td>版本更新</td>\n<td>较难, 无法保证一致性</td>\n<td>较易或者非常容易</td>\n</tr>\n<tr>\n<td>断线重连</td>\n<td>较难, 需比较耗时地进行快播追上实时进度的游戏状态</td>\n<td>较易, 服务器下发当前实时游戏状态的Snapshot即可</td>\n</tr>\n<tr>\n<td>自由进出</td>\n<td>较难, 需要从起点开始计算所有逻辑,包括进出的后的玩家</td>\n<td>较易, 服务器下发当前实时游戏状态的Snapshot即可</td>\n</tr>\n<tr>\n<td>离线重播(比如播放录像文件)</td>\n<td>较易, 且重播文件大小较小(和流量相关)</td>\n<td>较易, 但重播文件较大(和流量相关)</td>\n</tr>\n<tr>\n<td>实时重播(比如死亡重播)</td>\n<td>难, 需要rollback到过去再forth到实时状态</td>\n<td>较易, 服务器下发历史Snapshot给客户端回到过去、下发重播数据进行重播、再下发当前Snapshot恢复实时游戏</td>\n</tr>\n<tr>\n<td>网络逻辑性能优化</td>\n<td>较难, 因为客户端需要运算所有逻辑</td>\n<td>较易, 大部分逻辑默认是在服务器进行运算, 从而分担客户端运算压力；服务器也可帮助客户端进行可观察网络对象的剔除(基于距离剔除、遮挡剔除、分块剔除等), 也可以降低优先级低的物体或属性的同步频率, 从而减小流量和再次减小客户端运算压力</td>\n</tr>\n<tr>\n<td>大量网络实体时的流量情况</td>\n<td>好, 因为流量只决定于网络玩家数目</td>\n<td>如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS</td>\n</tr>\n<tr>\n<td>大量网络实体时的性能情况</td>\n<td>较差, 因为客户端需要运算所有逻辑。如果大部分网络实体有 “Sleep” 的可能, 则有优化空间</td>\n<td>如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS</td>\n</tr>\n<tr>\n<td>外挂</td>\n<td>因为客户端拥有所有信息, 所以透视类外挂的影响会比较严重</td>\n<td>也会有透视类外挂, 但服务器会进行一定的视野剔除, 所以影响稍小</td>\n</tr>\n<tr>\n<td>作弊</td>\n<td>多人竞技匹配相对还好, 少数人作弊是无效的, 但是PVE GVE同时作弊难以检测</td>\n<td>比较困难 仲裁逻辑在服务器 做好入口防护即可有效避免</td>\n</tr>\n<tr>\n<td>开发特征</td>\n<td>平时开发起来很高效, 不需前后端联调, 但写代码时需要确保确定性, 心智负担较大, 不同步bug如果出现, 对版本质量是灾难性的</td>\n<td>平时开发起来效率一般, 需要前后端联调(LocalHost自测起来效率很高, 但和最终Client-Server的真实情况不尽相同, 自测应以后者为准, 故依然需要联调), 但写代码时不需确保确定性, 心智负担较小, 无不同步的bug</td>\n</tr>\n<tr>\n<td>开发特征2</td>\n<td>可以快速做出MVP验证</td>\n<td></td>\n</tr>\n<tr>\n<td>采用第三方库</td>\n<td>较难, 因为第三方库也须确保确定性 例如导航网格 物理引擎 动画引擎</td>\n<td>较容易, 因为第三方库不须确保确定性</td>\n</tr>\n</tbody></table>\n<h2><span id=\"同步模型的一般性描述\">同步模型的一般性描述</span></h2><p>在锁步同步中, 逻辑帧一般称为Tick, 而渲染帧被称为Frame,  在确定性的帧同步中不会引入物理时间, 其时间的尺度即是逻辑帧的步.<br>在确定性锁步帧同步中, 其逻辑处理是一个逻辑帧一个逻辑帧执行的,  可以抽象为以下公式:   </p>\n<p>$$<br>S_k=\\begin{cases}<br>g(P, C), \\qquad if \\quad k = 0 \\\\<br>t(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1<br>\\end{cases}<br>$$</p>\n<p>I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作<br>S是游戏状态的集合 由众多状态子集组成  </p>\n<p>该公式的描述: </p>\n<ul>\n<li>游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    </li>\n<li>游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   </li>\n</ul>\n<p>游戏状态的集合有关键的两个子集定义:   </p>\n<p>$<br>S  \\begin{cases}<br>O = { o \\in S  \\quad|\\quad \\text {o is an important state that can be observed by the player} }  \\\\<br>M = { m \\in S  \\quad|\\quad \\text {m is an intermediate state to infer the final state} }<br>\\end{cases}<br>$</p>\n<p>$<br>S \\begin{cases}<br>O = { o \\in S  \\quad|\\quad \\text {o 是一些能被玩家所明显观察到的对象的状态集合} }   \\\\<br>M = { m \\in S  \\quad|\\quad \\text  {m 一些可用于推导最终状态的中间状态集合} }<br>\\end{cases}<br>$</p>\n<p>在网络同步时, 称从客户端发出信息进行网络传输的过程为上行, 称客户端经过网络传输收到信息的过程为下行:   </p>\n<p><strong>一般锁步同步的本质是: 上下行都仅包含游戏外部变化原因集合$I_k$</strong><br><strong>一般状态同步的本质是: 下行仅包含游戏运算得出的结果状态集合$S_k$(更精确地说是状态子集$O_k$), 上行包含$I_k$和/或状态子集$M_k$</strong>  </p>\n<h2><span id=\"游戏中的状态一致性问题\">游戏中的状态一致性问题</span></h2><p>无论是帧同步还是状态同步, 在实现上, 首先要做的是区分哪些是需要同步的状态, 而哪些是不需要关注的, 收缩解决域的规模.   </p>\n<ul>\n<li><strong>区分需要同步的状态和不需要同步的状态</strong><br>多人游戏中, 不需要同步的部分往往是指的纯本地的状态, 即其他玩家不会去感知的状态   </li>\n</ul>\n<ul>\n<li><p><strong>逻辑和表现分离:</strong>   </p>\n<ul>\n<li>本质上, 表现是属于根据当前的状态集合$S_k$可以推导出的冗余状态以及不需要同步的细节表现部分    <ul>\n<li>战斗单位受到伤害:  血量变化是状态变化, 其中变化数值和是否暴击属于计算结果,  这些属于逻辑,  根据是否暴击而选择飘红字还是蓝字 还是不飘字用其他形式展示给玩家这是伤害的表现,  血条是否要跟随发生变化, 是否需要先标注扣除的血条颜色然后清空这部分血条, 这也是表现.    </li>\n<li>在2D攻击判定中, 一个战斗角色可能有几千面三角形, 有骨骼有蒙皮有纹理,  但是逻辑上, 对于攻击判定来说, 没有这些细节 只有一个圆形+高度的圆柱体,  前者是逻辑, 后者是渲染模型和表现形式   </li>\n</ul>\n</li>\n<li>这里关键是设计好Gamecore或者LocalServer  </li>\n<li>一般经过良好的逻辑和表现分离逻辑, 我们会拿到一份参与同步计算的纯净的状态集合$S_k$, 以方便我们进行帧同步的推演计算或者状态上的同步处理   </li>\n</ul>\n</li>\n<li><p><strong>可接受弱一致性</strong>   </p>\n<ul>\n<li><p>通常在游戏中, 我们需要保证的最终一致性而非强一致性. 例如:   </p>\n<ul>\n<li><p>可被修正的过渡状态</p>\n<ul>\n<li>玩家移动的位置在$S_{k}$的点a, 在$S_{k+5}$为点f,  那么玩家如果在中间b,c,d,e的点出现问题但是很快在f点再一次完成同步对齐, 其过程只要不会有肉眼可见的逻辑错误或者偏差 往往视为可接受的. (帧同步如果中间出现错误, 是不会有对齐点f的).    </li>\n<li>过渡状态会持续较长时间或者虽然时间较短但导致可感知的的逻辑结果变化 则需要具体的trade off   </li>\n</ul>\n</li>\n<li><p>可容忍的数值偏差   </p>\n<ul>\n<li>例如客户端C1在发起攻击时, C1玩家的位置和服务器的位置存在一个微小偏差, 服务器可以使用C1玩家的位置来作为基准位置进行后续判定, 以达到更为精准的判定体验.   (减少位置同步对一致性的要求压力, 在PVE时效果良好, 在PVP时需要根据具体情况trade off)   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>强一致性</strong>   </p>\n<ul>\n<li>在帧同步的逻辑计算中, 我们需要严格按照公式保证所有客户端以拥有一致性的初始化, 一致性的处理逻辑, 一致性的输入, 一旦存在任何偏差, 都会在后续的每一个step中累积 最终导致完全不同的计算结果.     </li>\n<li>一致的随机数发生器,  要保证每个副本计算所用到的随机数发生器在计算过程中随机出的值一致.   </li>\n<li>计算机的浮点数计算并不保证一致性,(最近偶数) 因此涉及到浮点数计算的场合需要改为整数, 或者采用一些确定性的定点数计算   </li>\n<li>容器的增删改查,排序和遍历需要确定性   <ul>\n<li>std::sort非稳定排序 需要用std::stable_sort    </li>\n<li>std::unorder_map之类的hash map的插入位置和遍历顺序等为实现定义, 不同的版本可能存在差异   </li>\n</ul>\n</li>\n<li>做好逻辑层的隔离和封装, 防止意外的不确定性调用   </li>\n<li>如果计算过程引入了比如骨骼动画, 物理引擎, 导航网格等 那么也要保证其浮点数和随机数的计算确定性问题   </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"同步过程中的抖动和延迟问题\">同步过程中的抖动和延迟问题</span></h2><ul>\n<li><p>输入采样延迟和事件响应延迟:  </p>\n<ul>\n<li>例如客户端的处理帧率是30帧, 平均采样延迟就有16.5ms  </li>\n<li>一般通过提高帧率可以改善   </li>\n</ul>\n</li>\n<li><p>逻辑处理延迟   </p>\n<ul>\n<li>包的序列化和反序列化延迟   </li>\n<li>多线程投递延迟   </li>\n<li>逻辑收发队列延迟(例如有的网络收发并不是实时发送和实时响应 而是采用的轮询, 类似逐帧处理下的采样延迟)   </li>\n<li>业务处理延迟</li>\n<li>通常逐帧处理方案下, 逻辑处理延迟只要保证在一帧内完成即可   </li>\n</ul>\n</li>\n<li><p>渲染延迟:  </p>\n<ul>\n<li>渲染流水线延迟  </li>\n<li>多线程渲染的同步延迟</li>\n<li>垂直同步延迟, 显示器显示延迟 像素响应延迟等    </li>\n</ul>\n</li>\n<li><p>网络延迟   </p>\n<ul>\n<li>协议栈处理延迟   </li>\n<li>链路传输延迟: 向物理介质写入的延迟   </li>\n<li>传播延迟:  物理介质内的传播速度 (例如普通光纤中光的传播速度约为真空中的2/3)   </li>\n<li>路由节点的排队处理延迟   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>延迟抖动   <ul>\n<li>网络拥堵,丢包等    </li>\n<li>逻辑处理, 例如大量的广播导致客户端一帧无法处理完所有消息包, 创建模型,场景,特效等带来的延迟超过一帧等          </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"优化网络延迟和抖动\">优化网络延迟和抖动</span></h2><h3><span id=\"当前的网络环境\">当前的网络环境</span></h3><ul>\n<li>骨干网在大陆内部互连时延约20ms <ul>\n<li>这个和地理位置有关, 例如从北京到深圳的直线距离 仅仅按照光纤中的光速传播延迟就折合11.4ms   </li>\n</ul>\n</li>\n<li>基站延迟  <ul>\n<li>4G网络自身时延实际约30ms~40ms 在4G标准中单程为10ms</li>\n<li>5G网络自身时延实际约为6~10ms 在5G标准中单程1ms</li>\n</ul>\n</li>\n<li>wifi延迟  <ul>\n<li>这个因素比较多, 主要是丢包和小区宽带拥堵带来的延迟  见下网络质量图表.   </li>\n</ul>\n</li>\n</ul>\n<p>从移动通信的角度来说, 在4G时代4G接入本身是网络时延瓶颈, 5G时代骨干网为网络时延瓶颈.   </p>\n<table>\n<thead>\n<tr>\n<th>环境类型</th>\n<th>平均时延(ms)</th>\n<th>抖动时延(ms)</th>\n<th>丢包率</th>\n<th>上行带宽</th>\n<th>下行带宽</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>正常网络</td>\n<td>20</td>\n<td>20</td>\n<td>2%</td>\n<td>90%</td>\n<td>90%</td>\n</tr>\n<tr>\n<td>普通弱网络</td>\n<td>30</td>\n<td>100~300</td>\n<td>12%</td>\n<td>80%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>超低网络</td>\n<td>50</td>\n<td>100~500</td>\n<td>30%</td>\n<td>60%</td>\n<td>40%</td>\n</tr>\n<tr>\n<td>繁忙网络</td>\n<td>50~100</td>\n<td>30~50</td>\n<td>5%</td>\n<td>25%</td>\n<td>25%</td>\n</tr>\n<tr>\n<td>交通工具行驶中</td>\n<td>200~400</td>\n<td>200~2000</td>\n<td>5%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>地铁中</td>\n<td>200~400</td>\n<td>200~2000</td>\n<td>12%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>基站切换中</td>\n<td>3000~7000</td>\n<td>2000</td>\n<td>5%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n</tbody></table>\n<p>一个简单的推算, 假如客户端是30帧<br>输入采样 + 基站延迟(双程) + 骨干网延迟(双程) + 服务器平均处理延迟  + 客户端渲染延迟  $\\approx$  总延迟<br>例如在30帧的王者荣耀中按下技能键, 全国玩家看到技能生效后的效果的总延迟在国内平均约为67ms左右.<br>而如果机房在上海人在上海, 使用5G网络,  那么基本上延迟约等于客户端的帧率间隔  .  </p>\n<h3><span id=\"工具\">工具</span></h3><ul>\n<li><p>弱网模拟器  </p>\n<ul>\n<li>Net Limiter  守望先锋使用</li>\n<li>Network Simulator</li>\n<li>CCProxy</li>\n<li>clumsy  </li>\n</ul>\n</li>\n<li><p>流量解析</p>\n<ul>\n<li>wireshark</li>\n<li>tcpdump</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"链路层延迟的优化\">链路层延迟的优化</span></h3><ul>\n<li>服务器就近部署   </li>\n<li>减少网络发包量和流量   </li>\n<li>提高链路带宽减少排队  </li>\n<li>购买专线流量提供给小ISP   </li>\n<li>搭建私有专线   </li>\n</ul>\n<h3><span id=\"tcp还是udp\">TCP还是UDP</span></h3><p>虽然目前的网络环境变得越来越好, 新的TCP拥塞控制算法例如BBR针对当下的互联网环境又做了进一步的提高,   TCP也变得越来越流行,  但是在对实时性有较高要求的游戏中, TCP对仍然显得笨拙而且有一些不合适.    </p>\n<table>\n<thead>\n<tr>\n<th>Genre</th>\n<th>Game</th>\n<th>Year</th>\n<th>Network Transport Protocol</th>\n<th>Network Model</th>\n<th>Network Topology</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RTS</td>\n<td>Age of Empires[11][12]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RTS</td>\n<td>Starcraft I/II[11][12]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RTS</td>\n<td>Warcraft I/II/III/Dota[11]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>Ever Quest[9]</td>\n<td>2000s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>World of Warcraft[9]</td>\n<td>2000s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>Lineage I/II[9]</td>\n<td>2000s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA</td>\n<td>League of Legends</td>\n<td>2000s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA</td>\n<td>DOTA2</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA(Mobile)</td>\n<td>王者荣耀</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA(Mobile)</td>\n<td>全民超神</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Doom I/II[11]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Quake I/II/III[11][12], Counter Strike</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>HALO: REACH Campagin and Firefight Mode[10]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>HALO: REACH Multiplayer Mode[10]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Battlefield[8], Call of Duty[8][12], CS:GO[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(Mobile)</td>\n<td>穿越火线：枪战王者</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+MOBA)</td>\n<td>Team Fortress, Overwatch[4], Paladins</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+BattleRoyale)</td>\n<td>PUBG, Fortnite</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+BattleRoyale)(Mobile)</td>\n<td>绝地求生：刺激战场, 绝地求生：全军出击</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>RAC</td>\n<td>Watch Dog 2[6]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RAC</td>\n<td>Rocket League[7]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>ACT</td>\n<td>For Honor[5]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FTG</td>\n<td>Street Fighter IV/V[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FTG</td>\n<td>Tekken 7[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>CCG</td>\n<td>Hearthstone</td>\n<td>2010s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n</tbody></table>\n<h3><span id=\"tcp下的延迟和抖动优化\">TCP下的延迟和抖动优化</span></h3><ul>\n<li><p>开启TCP_NODELAY </p>\n<ul>\n<li>关闭Nagle算法   </li>\n<li>Nagle算法原理: 在收到下一个ACK包之前, 合并(缓存)小于MSS大小的封包; 只要有已提交的数据包尚未确认, 就coalescing一定数量的数据后才提交.; 同一时间链路上(期望)只能存在一个包.   </li>\n<li>历史遗留算法 针对小带宽慢速环境, 能容忍延迟的高频小包发送情景下的优化选项. 例如ssh会话   </li>\n</ul>\n</li>\n<li><p>关闭TCP_CORK选项   </p>\n<ul>\n<li>(同Nagle类似) 但是这个是完全手动控制的    因此只要不用即可    </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>每次recv之后开启TCP_QUICKACK立刻确认  </p>\n<ul>\n<li>关闭延迟确认  </li>\n<li>ACK延迟确认通过合并ACK 窗口更新 响应数据, 可以将服务器发送的响应数量减少3倍    </li>\n<li>ACK延迟确认和Nagle算法结合可能会导致更长的延迟,  例如发送方等待ACK才进行后续小包发送, 但是接受方因开启Delay确认收到ACK后不会立刻确认, 可能会导致总是ACK超时后才能发送数据    </li>\n</ul>\n</li>\n<li><p>开启SACK优化(拥塞控制)   </p>\n<ul>\n<li>TCP通信过程中, 如果发送序列中间某个数据包丢失, TCP会重传最后确认包之后的所有包,  这里存在重复发送问题, 例如队首阻塞问题     </li>\n<li>SACK则是选择性重传 可以较少重传的数据量来提高性能和优化延迟</li>\n</ul>\n</li>\n<li><p>启用BBR   </p>\n<ul>\n<li>TCP诞生的年代和当下的网络环境已经发生了较大变化,  TCP的拥塞控制手段在诞生之初是主要解决的是小宽带低丢包率的环境下最大化优化互联网的吞吐,   而现在的网络情况则是大宽带但是丢包率因为无线信号传输的断续 干扰  信道串扰问题成为常态.  例如家里客厅wifi多个卧室或者卫生间的穿墙带来的丢包量大增, 乘坐交通工具穿行等.  </li>\n<li>BBR的优化主要是把拥塞控制的参数从基于丢包探测改为基于实时采集的探测 对保守克制的拥塞方案进行较为开放的优化来适应当下的网络.  <ul>\n<li><strong>传统的拥塞控制是基于丢包的AIMD策略 即 和式增加 积式减少</strong>  </li>\n<li>BBR 尽量减少丢包, 瞬时时延的判定, 采用了实时采集并保留时间窗口的策略, 通过Probe More的宽带探测和Drain Less的过程(核心是完成宽带与RTT的乘积BDP计算) 来完成拥塞控制      </li>\n</ul>\n</li>\n<li>优化和解决传统TCP拥塞控制中的以下问题:   <ul>\n<li>慢启动问题  以非常小的窗口启动, 每个轮次提升窗口大小,   在大宽带情景下 要消耗特别多的轮次, 特别是大宽带高延迟情况下    </li>\n<li>慢开始问题  遇到拥塞时 乘法减少, 加性增加窗口 导致窗口的大小出现震荡并进入低速模式  <ul>\n<li>虽然有快速重传和快速回复(reno版本)但是情景和效果有限   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BBR不能解决的问题 :    </p>\n<ul>\n<li>通过BBR技术来说 已经缓解了大部分TCP的拥塞问题, 但是从根本上来讲 还有一些可以优化的点无法进行    </li>\n<li>BBR依赖内核版本,  虽然最新的发行版已经默认启用了BBR 甚至最新的android底层也启用了这项技术,  但是 仍然不够广泛, 很多游戏服务器的环境仍然是非常老的内核版本无法应用BBR      </li>\n<li>BBR版本最好的效果是双端都开启    </li>\n<li>丢包重传仍然无法减少和规避   </li>\n<li>无论数据是否可以丢弃乱序,  TCP本身都要保证所有数据的有序和完整     </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"udp的优化\">UDP的优化</span></h3><p>如果仅仅是用UDP重写可靠的另外一套可靠传输, 其意义相对于来说并不大 特别是有BBR之后,  那么哪些才是UDP的强项?     </p>\n<ul>\n<li>Multi-streaming 多重串流(FEC前向纠错思想)      <ul>\n<li>缩水版本可以用简单的多倍发包策略来实现   </li>\n<li>在丢包后通过其他已收到的包计算出该包 从而避免丢包后的重传等待问题   </li>\n</ul>\n</li>\n<li>多通道下的可充分定制的传输选项    <ul>\n<li>可靠性可选  例如普通移动包除了标记关键信息的包丢掉后不需要重传,  移动模拟从前后包插值出来后即可.    </li>\n<li>有序可选  聊天消息可以乱序接受 按照编号在UI上重排   </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"时钟选择和时钟同步\">时钟选择和时钟同步</span></h2><p>在所有的同步方案中, 时钟校时是一个前提工作.  </p>\n<p><strong>在时钟的选择上自顶向下分为两大类</strong>   </p>\n<ul>\n<li><p>逻辑时钟   </p>\n<ul>\n<li>和现实时间不相关, 通常帧同步中的step即是一种典型的逻辑时钟   </li>\n<li>逻辑时钟关注的是事件的时序关系, 而不关心是否和真实时间映射    </li>\n<li>可以方便做缩放处理, 例如帧同步中的快播处理,  以及帧同步中的动态调整turn/step/bucket间隔   </li>\n<li>和物理时钟相比实现和同步联调会比较麻烦</li>\n</ul>\n</li>\n<li><p>物理时钟   </p>\n<ul>\n<li>和系统时间相关或者直接采用std::chrono::system_clock或者std::chrono::steady_clock  </li>\n<li>和逻辑时钟相比实现简单直观 联调方便 同步问题排查也方便 </li>\n</ul>\n</li>\n</ul>\n<p><strong>有了时钟后就是校时, 让所有客户端和服务器的时钟对齐到时间线下</strong><br>时钟校时基于两个前提:   </p>\n<ul>\n<li>RTT时间是相对稳定的   </li>\n<li>RTT往返即上行和下行延迟是接近的    </li>\n</ul>\n<p><strong>校时的原理是通过这两个前提, 我们通过记录RTT时间并获得服务器下行的时间戳, 即可推算出服务器的时钟. 然后客户端以对齐后的时钟进行使用.</strong>     </p>\n<h3><span id=\"实现\">实现</span></h3><p>校时工作的具体实现一般分为两步    </p>\n<ul>\n<li><p>初始校时   </p>\n<ul>\n<li>一般通过多次采样, 并通过合适的手段尽量规避掉因为DELAY ACK, NAGLE算法, MSS合并等带来的采样问题,  通过统计学的原理进行统计并获的一个小的范围 取中间值    </li>\n</ul>\n</li>\n<li><p>动态校时   </p>\n<ul>\n<li>网络质量存在抖动和变化, 动态校时尽量减少抖动带来的误差并跟进网络延迟的变化    </li>\n<li>参考linux早期的SRTT平滑算法  每次动态按照偏差修正一定比例 而不是覆盖    </li>\n<li>$SRTT = (α \\times SRTT) + ((1-α)*RTT), \\quad  0.8 \\leq α \\geq 0.9$</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"移动-影子跟随算法和优化内插\">移动: 影子跟随算法和优化(内插)</span></h2><p>核心流程如下:  </p>\n<ol>\n<li>屏幕上现实的实体(entity)只是不停的追逐它的 “影子” (shadow)</li>\n<li>服务器向各客户端发送各个影子的状态改变(坐标, 方向, 速度, 时间)</li>\n<li>各个客户端收到以后按照当前重新插值修正影子状态</li>\n<li>影子状态是跳变的, 但实体追赶影子是连续的, 故整个过程是平滑的</li>\n</ol>\n<p>影子跟随算法同其名, 影子总是滞后于实体的真实位置的,  从实践上来看, 一般还需要进行一定帧的相位滞后来保证网络抖动情况下的平滑性, 延迟感会比较大, 算法本质上是 内插值+相位滞后,  因此该算法自然简单粗暴, 并且能得到非常高的一致性保证, 缺点是延迟大.         </p>\n<h2><span id=\"常见的延迟隐藏手段\">常见的延迟隐藏手段</span></h2><p>原则上, 通过快速反馈的视觉特效, 声音特效, 不影响逻辑的动作表现, 衣物抖动, 以及可容忍的不同步状态变化等设计, 把需要等待这部分的时间分梯度过渡掉, 让玩家有整体上的及时顺畅的体验.     </p>\n<ul>\n<li>移动的惯性加速和停止的减速  参考CS    </li>\n<li>垫步动作偷位移  </li>\n<li>施法时的抬手动作过渡  </li>\n<li>受击假特效 例如客户端在子弹位置放击中的声效而不是等服务器通知   </li>\n<li>震屏   </li>\n<li>顿帧  </li>\n</ul>\n<h2><span id=\"移动-航位推测法外推\">移动: 航位推测法(外推)</span></h2><p>相位滞后+内插值来实现的影子追随算法的主要区别是在于, 航位推测法主要利用了外插值预测未来移动路线, 来达到本地位置和时间线和服务器位置与时间线的拟合,  但由于外插值的误差问题以及关键状态的瞬间改变,  航位推测法需要更多的细节优化和辅助手段来达到比较好的效果.<br>通常航位预测法比较好的情景是低速或者小角速度的情景, 例如船舶航行, 赛车 .  </p>\n<p>举例来说:<br>一辆快速行驶的汽车的轨迹是可预测的, 例如它以100米/秒的速度前行, 那么1秒钟后它大概的位置在它出发点的前方100米处, 之所以这么说, 主要是因为汽车在这一秒钟内可能会有一点加速或者一点减速, 可能有一点偏航, 但汽车不会突然静止或者180度掉头(小概率正面撞山可能取决于设计需求以及进行回滚或者和解), <strong>高速行驶的汽车的坐标高度依赖于它上一个时刻的坐标,速度,方向.</strong>    </p>\n<p>而类似CS这样的游戏, 玩家可以在任意时刻转弯, 并进行任意角度发生不符合现实的加速度, 外推法的意义非常有限.   </p>\n<h2><span id=\"插值和外推-以及常用算法\">插值和外推, 以及常用算法</span></h2><p>内插值和外插值援引至数学上的概念,  一般来说都是通过已知的离散点拉一个曲线, 从曲线中获取期望的新的点.<br>在游戏移动过程中, 曲线对应移动轨迹, 内插值相当于在两次移动点中间推算过程点,  而外插值则是通过已知的移动点求未来即将移动到的点  .    </p>\n<h3><span id=\"内插值常用算法\">内插值常用算法</span></h3><ul>\n<li>片段插值</li>\n<li>线性插值</li>\n<li>多项式插值</li>\n<li>样条曲线插值</li>\n<li>三角内插法</li>\n<li>有理内插</li>\n<li>小波内插</li>\n</ul>\n<h3><span id=\"外插值常用算法\">外插值常用算法</span></h3><ul>\n<li>线性外推</li>\n<li>多项式外推</li>\n<li>锥形外推</li>\n<li>云形外推</li>\n</ul>\n<h2><span id=\"命中-延迟补偿\">命中: 延迟补偿</span></h2><p>前面说过, 外推法不适合CS类游戏, 那么现实其他玩家只能尽可能的用内插法, 这样就带来一个流畅性问题.   </p>\n<p>一般来说, 玩家更多的会关注于自己的按键和反馈, 无法感知别人的按键只能感知别人的反馈,  因此选择差异性的做法,  即玩家总是根据自身的按键进行预演(自身的移动总是先于服务器), 使用内插法来显示其他玩家(其他玩家总是落后于服务器), 这样可以达到最大的流畅性. 但是这样就造就了一个新的需要解决的问题, 命中判定的双方不在一个时间轴上: </p>\n<p>玩家总是站在未来攻击历史上的玩家, 如果大家都在移动 那么在这样的情景下就无法正确的处理命中.    </p>\n<p>解决这个问题的方法就成为延迟补偿,  基本策略为服务器收到了玩家的开火请求后, 根据开火请求的时间,网络延迟和差值量, 把其他玩家拉回到该玩家看到这一刻所看到的位置, 然后执行命中判定, 最后再把相应的所有玩家恢复到当前的正确位置   </p>\n<p>步骤如下:  </p>\n<ul>\n<li>为玩家计算一个相当精确的延迟时间</li>\n<li>对每个玩家 从服务器历史信息中找一个已发送给这个玩家并且这个玩家已收到的的world update  这个world update是在这个玩家将要执行这个movement command之前的world update    </li>\n<li>对于每一个玩家 将其从上述的world update处拉回到这个玩家生成此user command的更新时间中执行用户命令  这个回退时间需要考虑到命令执行的时候的网络延时和插值量     </li>\n<li>执行玩家命令 包括武器开火等     </li>\n<li>将所有移动的、错位的玩家移动到他们当前正确位置</li>\n</ul>\n<h3><span id=\"延迟补偿的局限\">延迟补偿的局限</span></h3><ol>\n<li>延迟补偿在延迟超过一定时间后开始失效.   </li>\n<li>对于像PUBG战场这样的超远距离, 延迟补偿也会失去预期的作用    </li>\n</ol>\n<h2><span id=\"逻辑预演和客户端提交命中\">逻辑预演和客户端提交命中</span></h2><p>在PUBG这种100名玩家的绝地岛中 想达到CS一样的延迟补偿效果是不太可能的,  一个是人数众多难以提高帧率, 另外一个是场景开阔,  失之毫厘谬以千里.<br>同样类似的场景例如写实类实时动作游戏, 轻微的延迟和误差都会造成受击部位的不同, 受击时命中法线的不同, 以至于后续逻辑发生不同的分支..   </p>\n<p>对于这种情况, 一般来说权威服务器会进一步下放权限, 客户端预演并提交命中, 服务器进行后校验.  例如PUBG的命中完全由客户端来提交.    </p>\n<p>这样虽然解决了流畅性和精度问题, 但是也同时引出了其他的一些问题:   </p>\n<ul>\n<li>两个玩家在延迟不同,看到的位置都有误差的情况下都提交了命中,  相信哪一个?    </li>\n<li>预演失败的玩家如何进行状态纠正处理,  回滚?和解? 拉扯?  </li>\n<li>客户端作弊怎么办? </li>\n</ul>\n<h4><span id=\"满足进攻者的精彩时刻\">满足进攻者的精彩时刻</span></h4><p>大部分时间都会优先满足进攻者 除非受害者做了什么事情缓和（mitigate）了这次进攻  </p>\n<h2><span id=\"提高tickrate\">提高TickRate</span></h2><p>在PUBG的ServerTick中<br>前5分钟的的通信频率约12~24  之后会达到30帧并根据具体情况进行动态自适应调整 .  </p>\n<h2><span id=\"回退-快播-和解\">回退 快播 和解</span></h2><p>对于帧同步而言, 一般来说会记录历史的状态切片和, 一旦出现预演失败则回退到之前的位置使用正确的输入进行快播追帧,然后进入新的预测状态<br>守望先锋中:   </p>\n<ul>\n<li>通过确定性的算法来提高预测的正确率</li>\n<li>预测失败后<br> 在守望先锋中采用和解方法而不是直接拉扯(覆盖), 即像帧同步一样 守望先锋中的移动代码是保证确定性的 , 一旦出现预测失败则会进行重算所有输入直到追上当前时刻 并做一个平滑的处理   </li>\n</ul>\n<h2><span id=\"案例分析部分\">案例分析部分</span></h2><p>略</p>\n<h2><span id=\"引用文献\">引用文献</span></h2><ul>\n<li><a href=\"https://zsummer.github.io/2020/07/24/2020-07-24-state_sync/\">多人游戏中的同步机制综述</a></li>\n<li><a href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/1.2/html/Realtime_Tuning_Guide/sect-Realtime_Tuning_Guide-Application_Tuning_and_Deployment-TCP_NODELAY_and_Small_Buffer_Writes.html\" target=\"_blank\" rel=\"noopener\">TCP_NODELAY and Small Buffer Writes</a></li>\n<li><a href=\"http://baus.net/on-tcp_cork\" target=\"_blank\" rel=\"noopener\">TCP_CORK: More than you ever wanted to know</a></li>\n<li><a href=\"http://www.techrepublic.com/article/tcp-ip-options-for-high-performance-data-transmission/\" target=\"_blank\" rel=\"noopener\">TCP/IP options for high-performance data transmission</a></li>\n<li><a href=\"https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html\" target=\"_blank\" rel=\"noopener\">Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush</a></li>\n<li><a href=\"https://books.google.com/books?id=2SAQAQAAQBAJ&pg=PA1262&lpg=PA1262&dq=tcp_cork&source=bl&ots=qPy0egFGus&sig=Y3_IGgidMc7K8AceiHG0UVGMwmo&hl=ja&sa=X&ei=-bsWU_bbLqm2yAGKsYG4BQ&ved=0CGMQ6AEwCDgK#v=onepage&q=tcp_cork&f=false\" target=\"_blank\" rel=\"noopener\">The Linux Programming Interface Page 1262</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10520182/linux-when-to-use-scatter-gather-io-readv-writev-vs-a-large-buffer-with-frea\" target=\"_blank\" rel=\"noopener\">Linux: When to use scatter/gather IO (readv, writev) vs a large buffer with fread</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.gamedevs.org/uploads/tribes-networking-model.pdf\" target=\"_blank\" rel=\"noopener\">Mark Frohnmayer, Tim Gift, “The TRIBES Engine Networking Model or How to Make the Internet Rock for Multi­player Games”, 1998. Available: </a> [Accessed: 2019-01-27]</li>\n<li><a href=\"https://gafferongames.com/post/state_synchronization/\" target=\"_blank\" rel=\"noopener\">Glenn Fiedler, “State Synchronization Keeping simulations in sync by sending state”, 2015, Available: </a> [Accessed: 2019-01-27]</li>\n<li>Joshua Glazer, Sanjay Madhav, “Multiplayer Game Programming”, Addison-Wesley, 2015.</li>\n<li>Tim Ford, “Overwatch Gameplay Architecture and Netcode”, GDC, 2017.</li>\n<li>Xavier Guilbeault, Frederic Doll, “Deterministic vs Replicated AI Building the Battlefield of For Honor”, GDC, 2017.</li>\n<li>Matt Delbosc, “Replicating Chaos Vehicle Replication in Watch Dogs 2”, GDC, 2017.</li>\n<li>Jared Cone, “It IS Rocket Science! The Physics of ‘Rocket League’ Detailed”, GDC, 2018.</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLfOoCUS0PSkXVGjhB63KMDTOT5sJ0vWy8\" target=\"_blank\" rel=\"noopener\">Battle(non)sense, “Netcode &amp; Input Lag Analyses”, 2017. Available: </a> [Accessed: 2019-02-08]</li>\n<li><a href=\"http://www.iis.sinica.edu.tw/~swc/pub/tcp_mmorpg.html\" target=\"_blank\" rel=\"noopener\">Chen-Chi Wu, Kuan-Ta Chen, Chih-Ming Chen, Polly Huang, and Chin-Laung Lei, “On the Challenge and Design of Transport Protocols for MMORPGs”. 2019. Available: </a> [Accessed: 2019-02-08]</li>\n<li><a href=\"https://www.youtube.com/watch?v=h47zZrqjgLc\" target=\"_blank\" rel=\"noopener\">David Aldridge, “I Shot You First: Networking the Gameplay of HALO: REACH”, GDC, 2011. Available: </a> [Accessed: 2016-07-02]</li>\n<li><a href=\"http://ds.cs.ut.ee/courses/course-files/Report%20-2.pdf\" target=\"_blank\" rel=\"noopener\">Maksym Kurylovych, “Lockstep protocol”, University of Tartu, 2008. Available: </a> [Accessed: 2019-02-11]</li>\n<li><a href=\"https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/\" target=\"_blank\" rel=\"noopener\">Glenn Fiedler, “What Every Programmer Needs To Know About Game Networking A short history of game networking techniques”, 2010. Available: </a> [Accessed: 2019-02-11]</li>\n<li><a href=\"https://www.cs.ubc.ca/~krasic/cpsc538a-2005/papers/diot99distributed.pdf\" target=\"_blank\" rel=\"noopener\">Christophe DIOT, Laurent GAUTIER, “A Distributed Architecture for Multiplayer Interactive Applications on the Internet”, IEEE, 1999. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"https://pdfs.semanticscholar.org/2301/a3f35845baf350f65e17f6056868791854fe.pdf\" target=\"_blank\" rel=\"noopener\">Nathaniel E. Baughman, Brian Neil Levine, “Cheat-Proof Playout for Centralized and Distributed Online Games”, IEEE INFOCOM, 2001. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php\" target=\"_blank\" rel=\"noopener\">Mark Terrano, Paul Bettner, “1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond”, 2001. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"http://www.ekozlowski.com/assets/multiplayer-game-cheating-prevention.pdf\" target=\"_blank\" rel=\"noopener\">Ho Lee, Eric Kozlowski, Scott Lenker, Sugih Jamin, “Multiplayer Game Cheating Prevention With Pipelined Lockstep Protocol”, 2003. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"https://www.dotcom-tools.com/internet-backbone-latency.aspx\" target=\"_blank\" rel=\"noopener\">“Internet Backbone Network Latency”. Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_interface_bit_rates\" target=\"_blank\" rel=\"noopener\">“List of interface bit rates”. Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://en.wikipedia.org/wiki/5G#Performance_targets\" target=\"_blank\" rel=\"noopener\">“5G”, Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://www.jianshu.com/p/6ae1a6f81b01\" target=\"_blank\" rel=\"noopener\">网络游戏同步技术概述</a>   </li>\n<li><a href=\"https://www.jianshu.com/p/6ae1a6f81b01\" target=\"_blank\" rel=\"noopener\">实时对战游戏的同步——问题分析</a></li>\n<li><a href=\"http://www.skywind.me/blog/archives/131\" target=\"_blank\" rel=\"noopener\">帧锁定同步算法</a></li>\n<li><a href=\"https://www.raychase.net/5768\" target=\"_blank\" rel=\"noopener\">从物理时钟到逻辑时钟</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/130702310\" target=\"_blank\" rel=\"noopener\">细谈网络同步在游戏历史中的发展变化</a>  </li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/141681355\" target=\"_blank\" rel=\"noopener\">图像插值算法</a></li>\n<li><a href=\"http://www.skywind.me/blog/archives/1145\" target=\"_blank\" rel=\"noopener\">影子跟随算法</a></li>\n<li><a href=\"https://hulinhong.com/2016/01/06/latency_compensating_methods_in_client_server_in_game_protocol_design_and_optimization/\" target=\"_blank\" rel=\"noopener\">C/S游戏架构中延迟补偿的设计和优化方法</a></li>\n<li><a href=\"https://gameinstitute.qq.com/community/detail/114122\" target=\"_blank\" rel=\"noopener\">《守望先锋》中的网络脚本化的武器和技能系统</a></li>\n<li><a href=\"https://www.bilibili.com/video/av14551705/\" target=\"_blank\" rel=\"noopener\">《守望先锋》中的网络同步技术</a></li>\n<li><a href=\"https://gameinstitute.qq.com/community/detail/114516\" target=\"_blank\" rel=\"noopener\">《守望先锋》架构设计与网络同步 – GDC2017 精品分享实录</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n\n<ul>\n<li><a href=\"#前言\">前言</a></li>\n<li><a href=\"#同步问题的产生和基本策略机制\">同步问题的产生和基本策略机制</a></li>\n<li><a href=\"#同步模型的一般性描述\">同步模型的一般性描述</a></li>\n<li><a href=\"#游戏中的状态一致性问题\">游戏中的状态一致性问题</a></li>\n<li><a href=\"#同步过程中的抖动和延迟问题\">同步过程中的抖动和延迟问题</a></li>\n<li><a href=\"#优化网络延迟和抖动\">优化网络延迟和抖动</a><ul>\n<li><a href=\"#当前的网络环境\">当前的网络环境</a></li>\n<li><a href=\"#工具\">工具</a></li>\n<li><a href=\"#链路层延迟的优化\">链路层延迟的优化</a></li>\n<li><a href=\"#tcp还是udp\">TCP还是UDP</a></li>\n<li><a href=\"#tcp下的延迟和抖动优化\">TCP下的延迟和抖动优化</a></li>\n<li><a href=\"#udp的优化\">UDP的优化</a></li>\n</ul>\n</li>\n<li><a href=\"#时钟选择和时钟同步\">时钟选择和时钟同步</a><ul>\n<li><a href=\"#实现\">实现</a></li>\n</ul>\n</li>\n<li><a href=\"#移动-影子跟随算法和优化内插\">移动: 影子跟随算法和优化(内插)</a></li>\n<li><a href=\"#常见的延迟隐藏手段\">常见的延迟隐藏手段</a></li>\n<li><a href=\"#移动-航位推测法外推\">移动: 航位推测法(外推)</a></li>\n<li><a href=\"#插值和外推-以及常用算法\">插值和外推, 以及常用算法</a><ul>\n<li><a href=\"#内插值常用算法\">内插值常用算法</a></li>\n<li><a href=\"#外插值常用算法\">外插值常用算法</a></li>\n</ul>\n</li>\n<li><a href=\"#命中-延迟补偿\">命中: 延迟补偿</a><ul>\n<li><a href=\"#延迟补偿的局限\">延迟补偿的局限</a></li>\n</ul>\n</li>\n<li><a href=\"#逻辑预演和客户端提交命中\">逻辑预演和客户端提交命中</a><ul>\n<li><a href=\"#满足进攻者的精彩时刻\">满足进攻者的精彩时刻</a></li>\n</ul>\n</li>\n<li><a href=\"#提高tickrate\">提高TickRate</a></li>\n<li><a href=\"#回退-快播-和解\">回退 快播 和解</a></li>\n<li><a href=\"#案例分析部分\">案例分析部分</a></li>\n<li><a href=\"#引用文献\">引用文献</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文中所有内容默认都基于逻辑描述, 逻辑状态,逻辑处理的逻辑游戏世界,  纯本地表现类, 总是通过逻辑世界单向导出的渲染计算等, 均不在本篇文章讨论范畴.  </p>\n<h2 id=\"同步问题的产生和基本策略机制\"><a href=\"#同步问题的产生和基本策略机制\" class=\"headerlink\" title=\"同步问题的产生和基本策略机制\"></a>同步问题的产生和基本策略机制</h2><p><strong>在多人游戏或者基于CS网络模型的游戏中, 玩家所在的游戏世界并非全由本地生成和修改, 必须不断从服务器或者其他玩家获得最新的信息来完成游戏世界的共享体验, 在多人实时交互的游戏中,  相当于每个人都维护一个’完整世界’的副本, 并保证每个人维护的副本之间一致性和实时性, 不同游戏对副本的规模复杂度以及对一致性和实时性的要求不同, 并随着网络环境的变化在不同的历史时期下演化出了多种同步方案.</strong>   </p>\n<p>在所有的同步方案中, 有两种最基础也最常见的同步机制, 即状态同步和帧同步, 其基本机制和区别为:  </p>\n<ul>\n<li><strong>状态同步: 通过同步游戏中的各种状态来保证游戏世界副本的一致性, 基本流程如下:</strong>   <ul>\n<li>服务器维护权威完整副本  客户端维护本地副本 <font color=#ccc> (可以只维护部分副本) </font>   </li>\n<li>客户端上行请求到服务器 服务器进行完整的逻辑演算 并将发生改变的状态下行给客户端   </li>\n<li><font color=#ccc>客户端基于本地副本进行预演和状态预刷新 </font>  </li>\n<li>客户端用来自服务器的状态数据刷新本地副本, 对齐服务器副本   <ul>\n<li><font color=#ccc>客户端如果有因预演导致的数据不对齐需要通过强同步/回滚/和解等机制达成最终对齐</font>   <ul>\n<li><font color=#ccc>快照类同步方式总是全量对齐</font>   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>帧同步: 泛指通过一致的初始状态, 一致的输入事件和一致的逻辑处理, 从而得到相同的计算结果来保证游戏世界副本的一致性的同步方案</strong>    </p>\n<ul>\n<li><p>该术语为泛指, 所有通过确定性算法,以保证输入一致来得出相同游戏流程结果的同步均可泛称为帧同步.   </p>\n</li>\n<li><p>最早有对等网络的锁步同步, 发展为非对等网络的主机锁步同步, 再到后来的bucket同步以及现在比较流行的定时不等待乐观帧同步  </p>\n</li>\n<li><p>锁步同步:  </p>\n<ul>\n<li>客户端定时(比如每五帧为一个关键帧)上传一轮输入信息   </li>\n<li>服务器收到所有输入信息后广播给其他所有客户端  </li>\n<li>客户端用服务器发来的更新消息中的输入信息进行游戏(如果是对称网络, 这个过程则是广播自己输入信息和搜集所有其他客户端的输入信息)     </li>\n<li>如果客户端进行到下一个关键帧(5帧后)时没有收到服务器的更新消息则等待   </li>\n<li>如果客户端进行到下一个关键帧时已经接收到了服务器的更新消息, 则将上面的数据用于游戏, 并采集当前鼠标键盘输入发送给服务器, 同时继续进行下去   </li>\n<li>服务端采集到所有数据后再次发送下一个关键帧更新消息   </li>\n</ul>\n</li>\n<li><p>定时不等待:     </p>\n<ul>\n<li>相对于锁步同步来说, 服务器会定时下发收集到的信息,  并根据收集到的信息调整关键帧的间隔,  没有在指定间隔内收到的消息会排在下一次关键帧或者丢弃   </li>\n<li>相对于锁步同步来说, 任何客户端的卡顿不会阻塞其他玩家   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>这两种同步模型本质上并不冲突, 并且在细节上会相互补充优化,  常见的为在状态同步这种弱一致性框架下添加确定性演算来增加同步的准确性, 在确定性的帧同步下隔离出来部分状态进行优化增加流畅性,  从模型角度来说, 在复杂的同步需求中, 状态同步总是比帧同步有更多的扩展和调优空间, 典型的案例如UE4和UNITY中的DS服务器.</strong>   </p>","more":"<table>\n<thead>\n<tr>\n<th>.</th>\n<th>锁步同步</th>\n<th>状态同步</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>流量</td>\n<td>一般情况下较低, 决定于网络玩家数目</td>\n<td>一般情况下较高, 决定于当前该客户端可观察到(Observable)的网络实体数目</td>\n</tr>\n<tr>\n<td>预表现</td>\n<td>难, 客户端需本地进行状态序列化反序列化, 进行Roll-Forth</td>\n<td>较易, 客户端进行预表现, 服务器进行权威演算, 客户端最终和服务器下发的状态进行调解(Reconciliation)和Roll-Forth</td>\n</tr>\n<tr>\n<td>对弱网络的适应能力</td>\n<td>较低, 因为较难做到预表现, 不能做容忍处理</td>\n<td>较高, 因为较易做到预表现,较容易做容忍等</td>\n</tr>\n<tr>\n<td>确定性</td>\n<td>严格确定性, 强一致性要求</td>\n<td>弱一致性</td>\n</tr>\n<tr>\n<td>版本更新</td>\n<td>较难, 无法保证一致性</td>\n<td>较易或者非常容易</td>\n</tr>\n<tr>\n<td>断线重连</td>\n<td>较难, 需比较耗时地进行快播追上实时进度的游戏状态</td>\n<td>较易, 服务器下发当前实时游戏状态的Snapshot即可</td>\n</tr>\n<tr>\n<td>自由进出</td>\n<td>较难, 需要从起点开始计算所有逻辑,包括进出的后的玩家</td>\n<td>较易, 服务器下发当前实时游戏状态的Snapshot即可</td>\n</tr>\n<tr>\n<td>离线重播(比如播放录像文件)</td>\n<td>较易, 且重播文件大小较小(和流量相关)</td>\n<td>较易, 但重播文件较大(和流量相关)</td>\n</tr>\n<tr>\n<td>实时重播(比如死亡重播)</td>\n<td>难, 需要rollback到过去再forth到实时状态</td>\n<td>较易, 服务器下发历史Snapshot给客户端回到过去、下发重播数据进行重播、再下发当前Snapshot恢复实时游戏</td>\n</tr>\n<tr>\n<td>网络逻辑性能优化</td>\n<td>较难, 因为客户端需要运算所有逻辑</td>\n<td>较易, 大部分逻辑默认是在服务器进行运算, 从而分担客户端运算压力；服务器也可帮助客户端进行可观察网络对象的剔除(基于距离剔除、遮挡剔除、分块剔除等), 也可以降低优先级低的物体或属性的同步频率, 从而减小流量和再次减小客户端运算压力</td>\n</tr>\n<tr>\n<td>大量网络实体时的流量情况</td>\n<td>好, 因为流量只决定于网络玩家数目</td>\n<td>如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS</td>\n</tr>\n<tr>\n<td>大量网络实体时的性能情况</td>\n<td>较差, 因为客户端需要运算所有逻辑。如果大部分网络实体有 “Sleep” 的可能, 则有优化空间</td>\n<td>如果客户端可观察到的网络实体较少, 则较好, 比如PUBG等BattleRoyale类型；否则如果客户端可观测到的网络实体较多, 则较差, 比如Starcraft等RTS</td>\n</tr>\n<tr>\n<td>外挂</td>\n<td>因为客户端拥有所有信息, 所以透视类外挂的影响会比较严重</td>\n<td>也会有透视类外挂, 但服务器会进行一定的视野剔除, 所以影响稍小</td>\n</tr>\n<tr>\n<td>作弊</td>\n<td>多人竞技匹配相对还好, 少数人作弊是无效的, 但是PVE GVE同时作弊难以检测</td>\n<td>比较困难 仲裁逻辑在服务器 做好入口防护即可有效避免</td>\n</tr>\n<tr>\n<td>开发特征</td>\n<td>平时开发起来很高效, 不需前后端联调, 但写代码时需要确保确定性, 心智负担较大, 不同步bug如果出现, 对版本质量是灾难性的</td>\n<td>平时开发起来效率一般, 需要前后端联调(LocalHost自测起来效率很高, 但和最终Client-Server的真实情况不尽相同, 自测应以后者为准, 故依然需要联调), 但写代码时不需确保确定性, 心智负担较小, 无不同步的bug</td>\n</tr>\n<tr>\n<td>开发特征2</td>\n<td>可以快速做出MVP验证</td>\n<td></td>\n</tr>\n<tr>\n<td>采用第三方库</td>\n<td>较难, 因为第三方库也须确保确定性 例如导航网格 物理引擎 动画引擎</td>\n<td>较容易, 因为第三方库不须确保确定性</td>\n</tr>\n</tbody></table>\n<h2 id=\"同步模型的一般性描述\"><a href=\"#同步模型的一般性描述\" class=\"headerlink\" title=\"同步模型的一般性描述\"></a>同步模型的一般性描述</h2><p>在锁步同步中, 逻辑帧一般称为Tick, 而渲染帧被称为Frame,  在确定性的帧同步中不会引入物理时间, 其时间的尺度即是逻辑帧的步.<br>在确定性锁步帧同步中, 其逻辑处理是一个逻辑帧一个逻辑帧执行的,  可以抽象为以下公式:   </p>\n<p>$$<br>S_k=\\begin{cases}<br>g(P, C), \\qquad if \\quad k = 0 \\\\<br>t(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1<br>\\end{cases}<br>$$</p>\n<p>I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作<br>S是游戏状态的集合 由众多状态子集组成  </p>\n<p>该公式的描述: </p>\n<ul>\n<li>游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    </li>\n<li>游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   </li>\n</ul>\n<p>游戏状态的集合有关键的两个子集定义:   </p>\n<p>$<br>S  \\begin{cases}<br>O = { o \\in S  \\quad|\\quad \\text {o is an important state that can be observed by the player} }  \\\\<br>M = { m \\in S  \\quad|\\quad \\text {m is an intermediate state to infer the final state} }<br>\\end{cases}<br>$</p>\n<p>$<br>S \\begin{cases}<br>O = { o \\in S  \\quad|\\quad \\text {o 是一些能被玩家所明显观察到的对象的状态集合} }   \\\\<br>M = { m \\in S  \\quad|\\quad \\text  {m 一些可用于推导最终状态的中间状态集合} }<br>\\end{cases}<br>$</p>\n<p>在网络同步时, 称从客户端发出信息进行网络传输的过程为上行, 称客户端经过网络传输收到信息的过程为下行:   </p>\n<p><strong>一般锁步同步的本质是: 上下行都仅包含游戏外部变化原因集合$I_k$</strong><br><strong>一般状态同步的本质是: 下行仅包含游戏运算得出的结果状态集合$S_k$(更精确地说是状态子集$O_k$), 上行包含$I_k$和/或状态子集$M_k$</strong>  </p>\n<h2 id=\"游戏中的状态一致性问题\"><a href=\"#游戏中的状态一致性问题\" class=\"headerlink\" title=\"游戏中的状态一致性问题\"></a>游戏中的状态一致性问题</h2><p>无论是帧同步还是状态同步, 在实现上, 首先要做的是区分哪些是需要同步的状态, 而哪些是不需要关注的, 收缩解决域的规模.   </p>\n<ul>\n<li><strong>区分需要同步的状态和不需要同步的状态</strong><br>多人游戏中, 不需要同步的部分往往是指的纯本地的状态, 即其他玩家不会去感知的状态   </li>\n</ul>\n<ul>\n<li><p><strong>逻辑和表现分离:</strong>   </p>\n<ul>\n<li>本质上, 表现是属于根据当前的状态集合$S_k$可以推导出的冗余状态以及不需要同步的细节表现部分    <ul>\n<li>战斗单位受到伤害:  血量变化是状态变化, 其中变化数值和是否暴击属于计算结果,  这些属于逻辑,  根据是否暴击而选择飘红字还是蓝字 还是不飘字用其他形式展示给玩家这是伤害的表现,  血条是否要跟随发生变化, 是否需要先标注扣除的血条颜色然后清空这部分血条, 这也是表现.    </li>\n<li>在2D攻击判定中, 一个战斗角色可能有几千面三角形, 有骨骼有蒙皮有纹理,  但是逻辑上, 对于攻击判定来说, 没有这些细节 只有一个圆形+高度的圆柱体,  前者是逻辑, 后者是渲染模型和表现形式   </li>\n</ul>\n</li>\n<li>这里关键是设计好Gamecore或者LocalServer  </li>\n<li>一般经过良好的逻辑和表现分离逻辑, 我们会拿到一份参与同步计算的纯净的状态集合$S_k$, 以方便我们进行帧同步的推演计算或者状态上的同步处理   </li>\n</ul>\n</li>\n<li><p><strong>可接受弱一致性</strong>   </p>\n<ul>\n<li><p>通常在游戏中, 我们需要保证的最终一致性而非强一致性. 例如:   </p>\n<ul>\n<li><p>可被修正的过渡状态</p>\n<ul>\n<li>玩家移动的位置在$S_{k}$的点a, 在$S_{k+5}$为点f,  那么玩家如果在中间b,c,d,e的点出现问题但是很快在f点再一次完成同步对齐, 其过程只要不会有肉眼可见的逻辑错误或者偏差 往往视为可接受的. (帧同步如果中间出现错误, 是不会有对齐点f的).    </li>\n<li>过渡状态会持续较长时间或者虽然时间较短但导致可感知的的逻辑结果变化 则需要具体的trade off   </li>\n</ul>\n</li>\n<li><p>可容忍的数值偏差   </p>\n<ul>\n<li>例如客户端C1在发起攻击时, C1玩家的位置和服务器的位置存在一个微小偏差, 服务器可以使用C1玩家的位置来作为基准位置进行后续判定, 以达到更为精准的判定体验.   (减少位置同步对一致性的要求压力, 在PVE时效果良好, 在PVP时需要根据具体情况trade off)   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>强一致性</strong>   </p>\n<ul>\n<li>在帧同步的逻辑计算中, 我们需要严格按照公式保证所有客户端以拥有一致性的初始化, 一致性的处理逻辑, 一致性的输入, 一旦存在任何偏差, 都会在后续的每一个step中累积 最终导致完全不同的计算结果.     </li>\n<li>一致的随机数发生器,  要保证每个副本计算所用到的随机数发生器在计算过程中随机出的值一致.   </li>\n<li>计算机的浮点数计算并不保证一致性,(最近偶数) 因此涉及到浮点数计算的场合需要改为整数, 或者采用一些确定性的定点数计算   </li>\n<li>容器的增删改查,排序和遍历需要确定性   <ul>\n<li>std::sort非稳定排序 需要用std::stable_sort    </li>\n<li>std::unorder_map之类的hash map的插入位置和遍历顺序等为实现定义, 不同的版本可能存在差异   </li>\n</ul>\n</li>\n<li>做好逻辑层的隔离和封装, 防止意外的不确定性调用   </li>\n<li>如果计算过程引入了比如骨骼动画, 物理引擎, 导航网格等 那么也要保证其浮点数和随机数的计算确定性问题   </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"同步过程中的抖动和延迟问题\"><a href=\"#同步过程中的抖动和延迟问题\" class=\"headerlink\" title=\"同步过程中的抖动和延迟问题\"></a>同步过程中的抖动和延迟问题</h2><ul>\n<li><p>输入采样延迟和事件响应延迟:  </p>\n<ul>\n<li>例如客户端的处理帧率是30帧, 平均采样延迟就有16.5ms  </li>\n<li>一般通过提高帧率可以改善   </li>\n</ul>\n</li>\n<li><p>逻辑处理延迟   </p>\n<ul>\n<li>包的序列化和反序列化延迟   </li>\n<li>多线程投递延迟   </li>\n<li>逻辑收发队列延迟(例如有的网络收发并不是实时发送和实时响应 而是采用的轮询, 类似逐帧处理下的采样延迟)   </li>\n<li>业务处理延迟</li>\n<li>通常逐帧处理方案下, 逻辑处理延迟只要保证在一帧内完成即可   </li>\n</ul>\n</li>\n<li><p>渲染延迟:  </p>\n<ul>\n<li>渲染流水线延迟  </li>\n<li>多线程渲染的同步延迟</li>\n<li>垂直同步延迟, 显示器显示延迟 像素响应延迟等    </li>\n</ul>\n</li>\n<li><p>网络延迟   </p>\n<ul>\n<li>协议栈处理延迟   </li>\n<li>链路传输延迟: 向物理介质写入的延迟   </li>\n<li>传播延迟:  物理介质内的传播速度 (例如普通光纤中光的传播速度约为真空中的2/3)   </li>\n<li>路由节点的排队处理延迟   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>延迟抖动   <ul>\n<li>网络拥堵,丢包等    </li>\n<li>逻辑处理, 例如大量的广播导致客户端一帧无法处理完所有消息包, 创建模型,场景,特效等带来的延迟超过一帧等          </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优化网络延迟和抖动\"><a href=\"#优化网络延迟和抖动\" class=\"headerlink\" title=\"优化网络延迟和抖动\"></a>优化网络延迟和抖动</h2><h3 id=\"当前的网络环境\"><a href=\"#当前的网络环境\" class=\"headerlink\" title=\"当前的网络环境\"></a>当前的网络环境</h3><ul>\n<li>骨干网在大陆内部互连时延约20ms <ul>\n<li>这个和地理位置有关, 例如从北京到深圳的直线距离 仅仅按照光纤中的光速传播延迟就折合11.4ms   </li>\n</ul>\n</li>\n<li>基站延迟  <ul>\n<li>4G网络自身时延实际约30ms~40ms 在4G标准中单程为10ms</li>\n<li>5G网络自身时延实际约为6~10ms 在5G标准中单程1ms</li>\n</ul>\n</li>\n<li>wifi延迟  <ul>\n<li>这个因素比较多, 主要是丢包和小区宽带拥堵带来的延迟  见下网络质量图表.   </li>\n</ul>\n</li>\n</ul>\n<p>从移动通信的角度来说, 在4G时代4G接入本身是网络时延瓶颈, 5G时代骨干网为网络时延瓶颈.   </p>\n<table>\n<thead>\n<tr>\n<th>环境类型</th>\n<th>平均时延(ms)</th>\n<th>抖动时延(ms)</th>\n<th>丢包率</th>\n<th>上行带宽</th>\n<th>下行带宽</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>正常网络</td>\n<td>20</td>\n<td>20</td>\n<td>2%</td>\n<td>90%</td>\n<td>90%</td>\n</tr>\n<tr>\n<td>普通弱网络</td>\n<td>30</td>\n<td>100~300</td>\n<td>12%</td>\n<td>80%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>超低网络</td>\n<td>50</td>\n<td>100~500</td>\n<td>30%</td>\n<td>60%</td>\n<td>40%</td>\n</tr>\n<tr>\n<td>繁忙网络</td>\n<td>50~100</td>\n<td>30~50</td>\n<td>5%</td>\n<td>25%</td>\n<td>25%</td>\n</tr>\n<tr>\n<td>交通工具行驶中</td>\n<td>200~400</td>\n<td>200~2000</td>\n<td>5%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>地铁中</td>\n<td>200~400</td>\n<td>200~2000</td>\n<td>12%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n<tr>\n<td>基站切换中</td>\n<td>3000~7000</td>\n<td>2000</td>\n<td>5%</td>\n<td>60%</td>\n<td>60%</td>\n</tr>\n</tbody></table>\n<p>一个简单的推算, 假如客户端是30帧<br>输入采样 + 基站延迟(双程) + 骨干网延迟(双程) + 服务器平均处理延迟  + 客户端渲染延迟  $\\approx$  总延迟<br>例如在30帧的王者荣耀中按下技能键, 全国玩家看到技能生效后的效果的总延迟在国内平均约为67ms左右.<br>而如果机房在上海人在上海, 使用5G网络,  那么基本上延迟约等于客户端的帧率间隔  .  </p>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><p>弱网模拟器  </p>\n<ul>\n<li>Net Limiter  守望先锋使用</li>\n<li>Network Simulator</li>\n<li>CCProxy</li>\n<li>clumsy  </li>\n</ul>\n</li>\n<li><p>流量解析</p>\n<ul>\n<li>wireshark</li>\n<li>tcpdump</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"链路层延迟的优化\"><a href=\"#链路层延迟的优化\" class=\"headerlink\" title=\"链路层延迟的优化\"></a>链路层延迟的优化</h3><ul>\n<li>服务器就近部署   </li>\n<li>减少网络发包量和流量   </li>\n<li>提高链路带宽减少排队  </li>\n<li>购买专线流量提供给小ISP   </li>\n<li>搭建私有专线   </li>\n</ul>\n<h3 id=\"TCP还是UDP\"><a href=\"#TCP还是UDP\" class=\"headerlink\" title=\"TCP还是UDP\"></a>TCP还是UDP</h3><p>虽然目前的网络环境变得越来越好, 新的TCP拥塞控制算法例如BBR针对当下的互联网环境又做了进一步的提高,   TCP也变得越来越流行,  但是在对实时性有较高要求的游戏中, TCP对仍然显得笨拙而且有一些不合适.    </p>\n<table>\n<thead>\n<tr>\n<th>Genre</th>\n<th>Game</th>\n<th>Year</th>\n<th>Network Transport Protocol</th>\n<th>Network Model</th>\n<th>Network Topology</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RTS</td>\n<td>Age of Empires[11][12]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RTS</td>\n<td>Starcraft I/II[11][12]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RTS</td>\n<td>Warcraft I/II/III/Dota[11]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>Ever Quest[9]</td>\n<td>2000s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>World of Warcraft[9]</td>\n<td>2000s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MMORPG</td>\n<td>Lineage I/II[9]</td>\n<td>2000s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA</td>\n<td>League of Legends</td>\n<td>2000s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA</td>\n<td>DOTA2</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA(Mobile)</td>\n<td>王者荣耀</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>MOBA(Mobile)</td>\n<td>全民超神</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Doom I/II[11]</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Quake I/II/III[11][12], Counter Strike</td>\n<td>1990s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>HALO: REACH Campagin and Firefight Mode[10]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>HALO: REACH Multiplayer Mode[10]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FPS</td>\n<td>Battlefield[8], Call of Duty[8][12], CS:GO[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(Mobile)</td>\n<td>穿越火线：枪战王者</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+MOBA)</td>\n<td>Team Fortress, Overwatch[4], Paladins</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+BattleRoyale)</td>\n<td>PUBG, Fortnite</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>FPS(+BattleRoyale)(Mobile)</td>\n<td>绝地求生：刺激战场, 绝地求生：全军出击</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>RAC</td>\n<td>Watch Dog 2[6]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>RAC</td>\n<td>Rocket League[7]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n<tr>\n<td>ACT</td>\n<td>For Honor[5]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FTG</td>\n<td>Street Fighter IV/V[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>FTG</td>\n<td>Tekken 7[8]</td>\n<td>2010s</td>\n<td>UDP</td>\n<td>Lockstep</td>\n<td>Peer to Peer</td>\n</tr>\n<tr>\n<td>CCG</td>\n<td>Hearthstone</td>\n<td>2010s</td>\n<td>TCP</td>\n<td>State Sync</td>\n<td>Client Server</td>\n</tr>\n</tbody></table>\n<h3 id=\"TCP下的延迟和抖动优化\"><a href=\"#TCP下的延迟和抖动优化\" class=\"headerlink\" title=\"TCP下的延迟和抖动优化\"></a>TCP下的延迟和抖动优化</h3><ul>\n<li><p>开启TCP_NODELAY </p>\n<ul>\n<li>关闭Nagle算法   </li>\n<li>Nagle算法原理: 在收到下一个ACK包之前, 合并(缓存)小于MSS大小的封包; 只要有已提交的数据包尚未确认, 就coalescing一定数量的数据后才提交.; 同一时间链路上(期望)只能存在一个包.   </li>\n<li>历史遗留算法 针对小带宽慢速环境, 能容忍延迟的高频小包发送情景下的优化选项. 例如ssh会话   </li>\n</ul>\n</li>\n<li><p>关闭TCP_CORK选项   </p>\n<ul>\n<li>(同Nagle类似) 但是这个是完全手动控制的    因此只要不用即可    </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>每次recv之后开启TCP_QUICKACK立刻确认  </p>\n<ul>\n<li>关闭延迟确认  </li>\n<li>ACK延迟确认通过合并ACK 窗口更新 响应数据, 可以将服务器发送的响应数量减少3倍    </li>\n<li>ACK延迟确认和Nagle算法结合可能会导致更长的延迟,  例如发送方等待ACK才进行后续小包发送, 但是接受方因开启Delay确认收到ACK后不会立刻确认, 可能会导致总是ACK超时后才能发送数据    </li>\n</ul>\n</li>\n<li><p>开启SACK优化(拥塞控制)   </p>\n<ul>\n<li>TCP通信过程中, 如果发送序列中间某个数据包丢失, TCP会重传最后确认包之后的所有包,  这里存在重复发送问题, 例如队首阻塞问题     </li>\n<li>SACK则是选择性重传 可以较少重传的数据量来提高性能和优化延迟</li>\n</ul>\n</li>\n<li><p>启用BBR   </p>\n<ul>\n<li>TCP诞生的年代和当下的网络环境已经发生了较大变化,  TCP的拥塞控制手段在诞生之初是主要解决的是小宽带低丢包率的环境下最大化优化互联网的吞吐,   而现在的网络情况则是大宽带但是丢包率因为无线信号传输的断续 干扰  信道串扰问题成为常态.  例如家里客厅wifi多个卧室或者卫生间的穿墙带来的丢包量大增, 乘坐交通工具穿行等.  </li>\n<li>BBR的优化主要是把拥塞控制的参数从基于丢包探测改为基于实时采集的探测 对保守克制的拥塞方案进行较为开放的优化来适应当下的网络.  <ul>\n<li><strong>传统的拥塞控制是基于丢包的AIMD策略 即 和式增加 积式减少</strong>  </li>\n<li>BBR 尽量减少丢包, 瞬时时延的判定, 采用了实时采集并保留时间窗口的策略, 通过Probe More的宽带探测和Drain Less的过程(核心是完成宽带与RTT的乘积BDP计算) 来完成拥塞控制      </li>\n</ul>\n</li>\n<li>优化和解决传统TCP拥塞控制中的以下问题:   <ul>\n<li>慢启动问题  以非常小的窗口启动, 每个轮次提升窗口大小,   在大宽带情景下 要消耗特别多的轮次, 特别是大宽带高延迟情况下    </li>\n<li>慢开始问题  遇到拥塞时 乘法减少, 加性增加窗口 导致窗口的大小出现震荡并进入低速模式  <ul>\n<li>虽然有快速重传和快速回复(reno版本)但是情景和效果有限   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>BBR不能解决的问题 :    </p>\n<ul>\n<li>通过BBR技术来说 已经缓解了大部分TCP的拥塞问题, 但是从根本上来讲 还有一些可以优化的点无法进行    </li>\n<li>BBR依赖内核版本,  虽然最新的发行版已经默认启用了BBR 甚至最新的android底层也启用了这项技术,  但是 仍然不够广泛, 很多游戏服务器的环境仍然是非常老的内核版本无法应用BBR      </li>\n<li>BBR版本最好的效果是双端都开启    </li>\n<li>丢包重传仍然无法减少和规避   </li>\n<li>无论数据是否可以丢弃乱序,  TCP本身都要保证所有数据的有序和完整     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"UDP的优化\"><a href=\"#UDP的优化\" class=\"headerlink\" title=\"UDP的优化\"></a>UDP的优化</h3><p>如果仅仅是用UDP重写可靠的另外一套可靠传输, 其意义相对于来说并不大 特别是有BBR之后,  那么哪些才是UDP的强项?     </p>\n<ul>\n<li>Multi-streaming 多重串流(FEC前向纠错思想)      <ul>\n<li>缩水版本可以用简单的多倍发包策略来实现   </li>\n<li>在丢包后通过其他已收到的包计算出该包 从而避免丢包后的重传等待问题   </li>\n</ul>\n</li>\n<li>多通道下的可充分定制的传输选项    <ul>\n<li>可靠性可选  例如普通移动包除了标记关键信息的包丢掉后不需要重传,  移动模拟从前后包插值出来后即可.    </li>\n<li>有序可选  聊天消息可以乱序接受 按照编号在UI上重排   </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"时钟选择和时钟同步\"><a href=\"#时钟选择和时钟同步\" class=\"headerlink\" title=\"时钟选择和时钟同步\"></a>时钟选择和时钟同步</h2><p>在所有的同步方案中, 时钟校时是一个前提工作.  </p>\n<p><strong>在时钟的选择上自顶向下分为两大类</strong>   </p>\n<ul>\n<li><p>逻辑时钟   </p>\n<ul>\n<li>和现实时间不相关, 通常帧同步中的step即是一种典型的逻辑时钟   </li>\n<li>逻辑时钟关注的是事件的时序关系, 而不关心是否和真实时间映射    </li>\n<li>可以方便做缩放处理, 例如帧同步中的快播处理,  以及帧同步中的动态调整turn/step/bucket间隔   </li>\n<li>和物理时钟相比实现和同步联调会比较麻烦</li>\n</ul>\n</li>\n<li><p>物理时钟   </p>\n<ul>\n<li>和系统时间相关或者直接采用std::chrono::system_clock或者std::chrono::steady_clock  </li>\n<li>和逻辑时钟相比实现简单直观 联调方便 同步问题排查也方便 </li>\n</ul>\n</li>\n</ul>\n<p><strong>有了时钟后就是校时, 让所有客户端和服务器的时钟对齐到时间线下</strong><br>时钟校时基于两个前提:   </p>\n<ul>\n<li>RTT时间是相对稳定的   </li>\n<li>RTT往返即上行和下行延迟是接近的    </li>\n</ul>\n<p><strong>校时的原理是通过这两个前提, 我们通过记录RTT时间并获得服务器下行的时间戳, 即可推算出服务器的时钟. 然后客户端以对齐后的时钟进行使用.</strong>     </p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>校时工作的具体实现一般分为两步    </p>\n<ul>\n<li><p>初始校时   </p>\n<ul>\n<li>一般通过多次采样, 并通过合适的手段尽量规避掉因为DELAY ACK, NAGLE算法, MSS合并等带来的采样问题,  通过统计学的原理进行统计并获的一个小的范围 取中间值    </li>\n</ul>\n</li>\n<li><p>动态校时   </p>\n<ul>\n<li>网络质量存在抖动和变化, 动态校时尽量减少抖动带来的误差并跟进网络延迟的变化    </li>\n<li>参考linux早期的SRTT平滑算法  每次动态按照偏差修正一定比例 而不是覆盖    </li>\n<li>$SRTT = (α \\times SRTT) + ((1-α)*RTT), \\quad  0.8 \\leq α \\geq 0.9$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"移动-影子跟随算法和优化-内插\"><a href=\"#移动-影子跟随算法和优化-内插\" class=\"headerlink\" title=\"移动: 影子跟随算法和优化(内插)\"></a>移动: 影子跟随算法和优化(内插)</h2><p>核心流程如下:  </p>\n<ol>\n<li>屏幕上现实的实体(entity)只是不停的追逐它的 “影子” (shadow)</li>\n<li>服务器向各客户端发送各个影子的状态改变(坐标, 方向, 速度, 时间)</li>\n<li>各个客户端收到以后按照当前重新插值修正影子状态</li>\n<li>影子状态是跳变的, 但实体追赶影子是连续的, 故整个过程是平滑的</li>\n</ol>\n<p>影子跟随算法同其名, 影子总是滞后于实体的真实位置的,  从实践上来看, 一般还需要进行一定帧的相位滞后来保证网络抖动情况下的平滑性, 延迟感会比较大, 算法本质上是 内插值+相位滞后,  因此该算法自然简单粗暴, 并且能得到非常高的一致性保证, 缺点是延迟大.         </p>\n<h2 id=\"常见的延迟隐藏手段\"><a href=\"#常见的延迟隐藏手段\" class=\"headerlink\" title=\"常见的延迟隐藏手段\"></a>常见的延迟隐藏手段</h2><p>原则上, 通过快速反馈的视觉特效, 声音特效, 不影响逻辑的动作表现, 衣物抖动, 以及可容忍的不同步状态变化等设计, 把需要等待这部分的时间分梯度过渡掉, 让玩家有整体上的及时顺畅的体验.     </p>\n<ul>\n<li>移动的惯性加速和停止的减速  参考CS    </li>\n<li>垫步动作偷位移  </li>\n<li>施法时的抬手动作过渡  </li>\n<li>受击假特效 例如客户端在子弹位置放击中的声效而不是等服务器通知   </li>\n<li>震屏   </li>\n<li>顿帧  </li>\n</ul>\n<h2 id=\"移动-航位推测法-外推\"><a href=\"#移动-航位推测法-外推\" class=\"headerlink\" title=\"移动: 航位推测法(外推)\"></a>移动: 航位推测法(外推)</h2><p>相位滞后+内插值来实现的影子追随算法的主要区别是在于, 航位推测法主要利用了外插值预测未来移动路线, 来达到本地位置和时间线和服务器位置与时间线的拟合,  但由于外插值的误差问题以及关键状态的瞬间改变,  航位推测法需要更多的细节优化和辅助手段来达到比较好的效果.<br>通常航位预测法比较好的情景是低速或者小角速度的情景, 例如船舶航行, 赛车 .  </p>\n<p>举例来说:<br>一辆快速行驶的汽车的轨迹是可预测的, 例如它以100米/秒的速度前行, 那么1秒钟后它大概的位置在它出发点的前方100米处, 之所以这么说, 主要是因为汽车在这一秒钟内可能会有一点加速或者一点减速, 可能有一点偏航, 但汽车不会突然静止或者180度掉头(小概率正面撞山可能取决于设计需求以及进行回滚或者和解), <strong>高速行驶的汽车的坐标高度依赖于它上一个时刻的坐标,速度,方向.</strong>    </p>\n<p>而类似CS这样的游戏, 玩家可以在任意时刻转弯, 并进行任意角度发生不符合现实的加速度, 外推法的意义非常有限.   </p>\n<h2 id=\"插值和外推-以及常用算法\"><a href=\"#插值和外推-以及常用算法\" class=\"headerlink\" title=\"插值和外推, 以及常用算法\"></a>插值和外推, 以及常用算法</h2><p>内插值和外插值援引至数学上的概念,  一般来说都是通过已知的离散点拉一个曲线, 从曲线中获取期望的新的点.<br>在游戏移动过程中, 曲线对应移动轨迹, 内插值相当于在两次移动点中间推算过程点,  而外插值则是通过已知的移动点求未来即将移动到的点  .    </p>\n<h3 id=\"内插值常用算法\"><a href=\"#内插值常用算法\" class=\"headerlink\" title=\"内插值常用算法\"></a>内插值常用算法</h3><ul>\n<li>片段插值</li>\n<li>线性插值</li>\n<li>多项式插值</li>\n<li>样条曲线插值</li>\n<li>三角内插法</li>\n<li>有理内插</li>\n<li>小波内插</li>\n</ul>\n<h3 id=\"外插值常用算法\"><a href=\"#外插值常用算法\" class=\"headerlink\" title=\"外插值常用算法\"></a>外插值常用算法</h3><ul>\n<li>线性外推</li>\n<li>多项式外推</li>\n<li>锥形外推</li>\n<li>云形外推</li>\n</ul>\n<h2 id=\"命中-延迟补偿\"><a href=\"#命中-延迟补偿\" class=\"headerlink\" title=\"命中: 延迟补偿\"></a>命中: 延迟补偿</h2><p>前面说过, 外推法不适合CS类游戏, 那么现实其他玩家只能尽可能的用内插法, 这样就带来一个流畅性问题.   </p>\n<p>一般来说, 玩家更多的会关注于自己的按键和反馈, 无法感知别人的按键只能感知别人的反馈,  因此选择差异性的做法,  即玩家总是根据自身的按键进行预演(自身的移动总是先于服务器), 使用内插法来显示其他玩家(其他玩家总是落后于服务器), 这样可以达到最大的流畅性. 但是这样就造就了一个新的需要解决的问题, 命中判定的双方不在一个时间轴上: </p>\n<p>玩家总是站在未来攻击历史上的玩家, 如果大家都在移动 那么在这样的情景下就无法正确的处理命中.    </p>\n<p>解决这个问题的方法就成为延迟补偿,  基本策略为服务器收到了玩家的开火请求后, 根据开火请求的时间,网络延迟和差值量, 把其他玩家拉回到该玩家看到这一刻所看到的位置, 然后执行命中判定, 最后再把相应的所有玩家恢复到当前的正确位置   </p>\n<p>步骤如下:  </p>\n<ul>\n<li>为玩家计算一个相当精确的延迟时间</li>\n<li>对每个玩家 从服务器历史信息中找一个已发送给这个玩家并且这个玩家已收到的的world update  这个world update是在这个玩家将要执行这个movement command之前的world update    </li>\n<li>对于每一个玩家 将其从上述的world update处拉回到这个玩家生成此user command的更新时间中执行用户命令  这个回退时间需要考虑到命令执行的时候的网络延时和插值量     </li>\n<li>执行玩家命令 包括武器开火等     </li>\n<li>将所有移动的、错位的玩家移动到他们当前正确位置</li>\n</ul>\n<h3 id=\"延迟补偿的局限\"><a href=\"#延迟补偿的局限\" class=\"headerlink\" title=\"延迟补偿的局限\"></a>延迟补偿的局限</h3><ol>\n<li>延迟补偿在延迟超过一定时间后开始失效.   </li>\n<li>对于像PUBG战场这样的超远距离, 延迟补偿也会失去预期的作用    </li>\n</ol>\n<h2 id=\"逻辑预演和客户端提交命中\"><a href=\"#逻辑预演和客户端提交命中\" class=\"headerlink\" title=\"逻辑预演和客户端提交命中\"></a>逻辑预演和客户端提交命中</h2><p>在PUBG这种100名玩家的绝地岛中 想达到CS一样的延迟补偿效果是不太可能的,  一个是人数众多难以提高帧率, 另外一个是场景开阔,  失之毫厘谬以千里.<br>同样类似的场景例如写实类实时动作游戏, 轻微的延迟和误差都会造成受击部位的不同, 受击时命中法线的不同, 以至于后续逻辑发生不同的分支..   </p>\n<p>对于这种情况, 一般来说权威服务器会进一步下放权限, 客户端预演并提交命中, 服务器进行后校验.  例如PUBG的命中完全由客户端来提交.    </p>\n<p>这样虽然解决了流畅性和精度问题, 但是也同时引出了其他的一些问题:   </p>\n<ul>\n<li>两个玩家在延迟不同,看到的位置都有误差的情况下都提交了命中,  相信哪一个?    </li>\n<li>预演失败的玩家如何进行状态纠正处理,  回滚?和解? 拉扯?  </li>\n<li>客户端作弊怎么办? </li>\n</ul>\n<h4 id=\"满足进攻者的精彩时刻\"><a href=\"#满足进攻者的精彩时刻\" class=\"headerlink\" title=\"满足进攻者的精彩时刻\"></a>满足进攻者的精彩时刻</h4><p>大部分时间都会优先满足进攻者 除非受害者做了什么事情缓和（mitigate）了这次进攻  </p>\n<h2 id=\"提高TickRate\"><a href=\"#提高TickRate\" class=\"headerlink\" title=\"提高TickRate\"></a>提高TickRate</h2><p>在PUBG的ServerTick中<br>前5分钟的的通信频率约12~24  之后会达到30帧并根据具体情况进行动态自适应调整 .  </p>\n<h2 id=\"回退-快播-和解\"><a href=\"#回退-快播-和解\" class=\"headerlink\" title=\"回退 快播 和解\"></a>回退 快播 和解</h2><p>对于帧同步而言, 一般来说会记录历史的状态切片和, 一旦出现预演失败则回退到之前的位置使用正确的输入进行快播追帧,然后进入新的预测状态<br>守望先锋中:   </p>\n<ul>\n<li>通过确定性的算法来提高预测的正确率</li>\n<li>预测失败后<br> 在守望先锋中采用和解方法而不是直接拉扯(覆盖), 即像帧同步一样 守望先锋中的移动代码是保证确定性的 , 一旦出现预测失败则会进行重算所有输入直到追上当前时刻 并做一个平滑的处理   </li>\n</ul>\n<h2 id=\"案例分析部分\"><a href=\"#案例分析部分\" class=\"headerlink\" title=\"案例分析部分\"></a>案例分析部分</h2><p>略</p>\n<h2 id=\"引用文献\"><a href=\"#引用文献\" class=\"headerlink\" title=\"引用文献\"></a>引用文献</h2><ul>\n<li><a href=\"https://zsummer.github.io/2020/07/24/2020-07-24-state_sync/\">多人游戏中的同步机制综述</a></li>\n<li><a href=\"https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_MRG/1.2/html/Realtime_Tuning_Guide/sect-Realtime_Tuning_Guide-Application_Tuning_and_Deployment-TCP_NODELAY_and_Small_Buffer_Writes.html\" target=\"_blank\" rel=\"noopener\">TCP_NODELAY and Small Buffer Writes</a></li>\n<li><a href=\"http://baus.net/on-tcp_cork\" target=\"_blank\" rel=\"noopener\">TCP_CORK: More than you ever wanted to know</a></li>\n<li><a href=\"http://www.techrepublic.com/article/tcp-ip-options-for-high-performance-data-transmission/\" target=\"_blank\" rel=\"noopener\">TCP/IP options for high-performance data transmission</a></li>\n<li><a href=\"https://t37.net/nginx-optimization-understanding-sendfile-tcp_nodelay-and-tcp_nopush.html\" target=\"_blank\" rel=\"noopener\">Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush</a></li>\n<li><a href=\"https://books.google.com/books?id=2SAQAQAAQBAJ&pg=PA1262&lpg=PA1262&dq=tcp_cork&source=bl&ots=qPy0egFGus&sig=Y3_IGgidMc7K8AceiHG0UVGMwmo&hl=ja&sa=X&ei=-bsWU_bbLqm2yAGKsYG4BQ&ved=0CGMQ6AEwCDgK#v=onepage&q=tcp_cork&f=false\" target=\"_blank\" rel=\"noopener\">The Linux Programming Interface Page 1262</a></li>\n<li><a href=\"http://stackoverflow.com/questions/10520182/linux-when-to-use-scatter-gather-io-readv-writev-vs-a-large-buffer-with-frea\" target=\"_blank\" rel=\"noopener\">Linux: When to use scatter/gather IO (readv, writev) vs a large buffer with fread</a></li>\n</ul>\n<ul>\n<li><a href=\"https://www.gamedevs.org/uploads/tribes-networking-model.pdf\" target=\"_blank\" rel=\"noopener\">Mark Frohnmayer, Tim Gift, “The TRIBES Engine Networking Model or How to Make the Internet Rock for Multi­player Games”, 1998. Available: </a> [Accessed: 2019-01-27]</li>\n<li><a href=\"https://gafferongames.com/post/state_synchronization/\" target=\"_blank\" rel=\"noopener\">Glenn Fiedler, “State Synchronization Keeping simulations in sync by sending state”, 2015, Available: </a> [Accessed: 2019-01-27]</li>\n<li>Joshua Glazer, Sanjay Madhav, “Multiplayer Game Programming”, Addison-Wesley, 2015.</li>\n<li>Tim Ford, “Overwatch Gameplay Architecture and Netcode”, GDC, 2017.</li>\n<li>Xavier Guilbeault, Frederic Doll, “Deterministic vs Replicated AI Building the Battlefield of For Honor”, GDC, 2017.</li>\n<li>Matt Delbosc, “Replicating Chaos Vehicle Replication in Watch Dogs 2”, GDC, 2017.</li>\n<li>Jared Cone, “It IS Rocket Science! The Physics of ‘Rocket League’ Detailed”, GDC, 2018.</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLfOoCUS0PSkXVGjhB63KMDTOT5sJ0vWy8\" target=\"_blank\" rel=\"noopener\">Battle(non)sense, “Netcode &amp; Input Lag Analyses”, 2017. Available: </a> [Accessed: 2019-02-08]</li>\n<li><a href=\"http://www.iis.sinica.edu.tw/~swc/pub/tcp_mmorpg.html\" target=\"_blank\" rel=\"noopener\">Chen-Chi Wu, Kuan-Ta Chen, Chih-Ming Chen, Polly Huang, and Chin-Laung Lei, “On the Challenge and Design of Transport Protocols for MMORPGs”. 2019. Available: </a> [Accessed: 2019-02-08]</li>\n<li><a href=\"https://www.youtube.com/watch?v=h47zZrqjgLc\" target=\"_blank\" rel=\"noopener\">David Aldridge, “I Shot You First: Networking the Gameplay of HALO: REACH”, GDC, 2011. Available: </a> [Accessed: 2016-07-02]</li>\n<li><a href=\"http://ds.cs.ut.ee/courses/course-files/Report%20-2.pdf\" target=\"_blank\" rel=\"noopener\">Maksym Kurylovych, “Lockstep protocol”, University of Tartu, 2008. Available: </a> [Accessed: 2019-02-11]</li>\n<li><a href=\"https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/\" target=\"_blank\" rel=\"noopener\">Glenn Fiedler, “What Every Programmer Needs To Know About Game Networking A short history of game networking techniques”, 2010. Available: </a> [Accessed: 2019-02-11]</li>\n<li><a href=\"https://www.cs.ubc.ca/~krasic/cpsc538a-2005/papers/diot99distributed.pdf\" target=\"_blank\" rel=\"noopener\">Christophe DIOT, Laurent GAUTIER, “A Distributed Architecture for Multiplayer Interactive Applications on the Internet”, IEEE, 1999. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"https://pdfs.semanticscholar.org/2301/a3f35845baf350f65e17f6056868791854fe.pdf\" target=\"_blank\" rel=\"noopener\">Nathaniel E. Baughman, Brian Neil Levine, “Cheat-Proof Playout for Centralized and Distributed Online Games”, IEEE INFOCOM, 2001. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php\" target=\"_blank\" rel=\"noopener\">Mark Terrano, Paul Bettner, “1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond”, 2001. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"http://www.ekozlowski.com/assets/multiplayer-game-cheating-prevention.pdf\" target=\"_blank\" rel=\"noopener\">Ho Lee, Eric Kozlowski, Scott Lenker, Sugih Jamin, “Multiplayer Game Cheating Prevention With Pipelined Lockstep Protocol”, 2003. Available: </a> [Accessed: 2019-02-12]</li>\n<li><a href=\"https://www.dotcom-tools.com/internet-backbone-latency.aspx\" target=\"_blank\" rel=\"noopener\">“Internet Backbone Network Latency”. Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://en.wikipedia.org/wiki/List_of_interface_bit_rates\" target=\"_blank\" rel=\"noopener\">“List of interface bit rates”. Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://en.wikipedia.org/wiki/5G#Performance_targets\" target=\"_blank\" rel=\"noopener\">“5G”, Available: </a> [Accessed: 2019-02-15]</li>\n<li><a href=\"https://www.jianshu.com/p/6ae1a6f81b01\" target=\"_blank\" rel=\"noopener\">网络游戏同步技术概述</a>   </li>\n<li><a href=\"https://www.jianshu.com/p/6ae1a6f81b01\" target=\"_blank\" rel=\"noopener\">实时对战游戏的同步——问题分析</a></li>\n<li><a href=\"http://www.skywind.me/blog/archives/131\" target=\"_blank\" rel=\"noopener\">帧锁定同步算法</a></li>\n<li><a href=\"https://www.raychase.net/5768\" target=\"_blank\" rel=\"noopener\">从物理时钟到逻辑时钟</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/130702310\" target=\"_blank\" rel=\"noopener\">细谈网络同步在游戏历史中的发展变化</a>  </li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/141681355\" target=\"_blank\" rel=\"noopener\">图像插值算法</a></li>\n<li><a href=\"http://www.skywind.me/blog/archives/1145\" target=\"_blank\" rel=\"noopener\">影子跟随算法</a></li>\n<li><a href=\"https://hulinhong.com/2016/01/06/latency_compensating_methods_in_client_server_in_game_protocol_design_and_optimization/\" target=\"_blank\" rel=\"noopener\">C/S游戏架构中延迟补偿的设计和优化方法</a></li>\n<li><a href=\"https://gameinstitute.qq.com/community/detail/114122\" target=\"_blank\" rel=\"noopener\">《守望先锋》中的网络脚本化的武器和技能系统</a></li>\n<li><a href=\"https://www.bilibili.com/video/av14551705/\" target=\"_blank\" rel=\"noopener\">《守望先锋》中的网络同步技术</a></li>\n<li><a href=\"https://gameinstitute.qq.com/community/detail/114516\" target=\"_blank\" rel=\"noopener\">《守望先锋》架构设计与网络同步 – GDC2017 精品分享实录</a></li>\n</ul>"},{"title":"数值模型 战斗属性和判定公式","date":"2020-07-20T16:00:00.000Z","author":"yawei.zhang","_content":"\n## 战斗属性 \n**战斗属性属于战斗单位的简单数据字段,  提供基础的数据读写操作(相对于magic state而言).**    \n在实践中 一般战斗属性还包含从配置文件中load数据, 一级战斗属性到二级战斗属性的封装, 以及按照功能,战斗单位层级的划分等.    \n\n## 战斗属性的设计和实现   \n\n### 字段表设计\n字段表在设计上隶属于'接口层'这个概念, 简单直接, 易于访问和同步处理时目的.    \n\n在C++中 通常考虑用一块静态数组的内存来表示   \n\n| A        | A   | A   | A   | A    | A           | A        | A         | A   |\n|----------|-----|-----|-----|------|-------------|----------|-----------|-----|\n| 字段名   | HP  | MP  | ATK | CRIT | RESIST CRIT | HIT RATE | MISS RATE | ... |\n| 转换类型 | INT | INT | INT | INT  | INT         | FLOAT    | FLOAT     | ... |\n\n\n这种字段表的设计有以下优点和特性:\n* 性能非常高   \n* 可以直接操作,遍历内存 方便统一管理  \n* 以数组下标完成ID的设计, 并使用BIT位进行脏数据标记辅助进行增量同步  \n* 初始化约定为0,  进行初始同步时只同步非0数据即可,  后续采用增量同步, 减少同步量   \n* 字段表中的数据修改可以由属性表进行托管结算 也可以直接set   \n  * 通常战斗属性均为属性表托管结算和刷新 不能直接set   \n  * 通常能量条类属性直接进行set \n  * 复杂的属性一般由多个属性功能完成 例如\n    * 血量上限 (战斗属性)   \n    * 当前血量 (属于能量条类, 则特殊条件下以'血量上限属性'为依据进行set  例如出生满血)   \n  \n<!-- more -->\n### 属性表设计     \n\n属性表是一个三维数组:  \n* 第一维数组的下标对应字段表的下标, 即ID一一对应完成属性表和字段表的映射关系       \n* 第二维数组对应具体属性层级, 层级按照功能划分, 例如基础数值层, 模块专属修饰层    \n* 第三位数组对应具体属性具体层级下的所有项,  例如基础值, 万分比加和修正, 万分比连乘修正,  值修正等    \n\n通常面板属性遵循基础的计算公式:   \n$$实际值=基础值\\*系数+修正值$$   \n然后根据具体的数值需求进行细化和扩展等    \n  \n可能的一种计算通用计算公式(能满足大多数属性计算的公式), 提供了系数加和修正 系数连乘修正 值修正:\n```\n基础系数加和修正 = 基础层.基础值*(1+Σ(基础系数修正))\n\n基础系数连乘修正=基础系数加和修正 * power(2, Σ(基础系数连乘修正指数))\n\n基础值值修正=基础系数连乘修正+Σ(BASE VALUE + VALUE)  \n\n总值系数加和修正  连乘修正 总值修正 ...\n\n```\n\n表如下:  \n\n| A           | BASE VALUE | BASE RATE | BASE EXP | VALUE | TOTAL RATE | TOTAL EXP | TOTAL VAL |\n|-------------|------------|-----------|----------|-------|------------|-----------|-----------|\n| BASE LAYER  | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n| ITEM LAYER  | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n| SKILL LAYER | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n\n\n功能设计:   \n* 面板属性指的是通过属性表计算的字段, 该类字段对外关闭修改权限, 只能通过修改对应的属性表中的项来进行修改. 外部只读.    \n* 字段表中的字段值不参与计算 值作为属性表的导出数据, 因此字段可以是float类型,  但是属性表中的项必须全是整数以保证属性在对称修改中时钟保证结果的确定性和正确性(精度满足需求即可)   \n* 需要保证每个项的值不会发生溢出, 来保证属性的对称修改过程中的正确性和可靠性.   \n\n\n### 对称计算的确定性和一致性保证   \n\n战斗面板属性一个很重要的特征就是在战斗对抗中会发生持续性的对称修改, 例如加攻击力 减速的BUFF等等.  \n而为了简化设计提高性能, 不能在每次战斗判定流程中遍历所有buff来完成属性计算, 常见的做法中, 我们会先修改属性(加/乘) 然后持续一段时间后再进行恢复(减/除).   \n\n例如:  加攻击力100持续1秒   减速40%持续3秒 减速30%持续2秒   \n\n然后问题就来了,  假如说我们其中一个项纪录的是float的值修正,  比如防御力+3, 然后来了一个超级防御(无敌的一种)+850万防御 然后再对称减去后,  其结果我们期望是0 但实际上可能为-1    \n\n#### 问题原因  \n\n计算机的浮点数通常并不满足结合律和分配率, 这就会带来计算结果的不确定性.   \n\n  结合律应该满足: \n  ```\n  (a + b) + c == a + (b + c) \n  ```\n  举例来说: 假如上述公式的单位类型是浮点数, 其中a和b是小数, c是大数,  a+b的和在c的最后一位精度上就可能会出现  \n  ```\n  (a + b) + c > b;  \n  a + (b + c) == b;\n  ```\n  单独的a和b都小于c的精度, 但a和b的和正好落在a+b的和在c的精度范围内可以被累加,  但是单独的a,b如果不在c的精度范围内累加的结果不会发生变化       \n  \n  造成浮点计算的不确定性原因:\n  * 因顺序不同带来的浮点变动导致计算结果不同   \n  * 因为精度损失并且这种损失未进行良好定义而导致的结果不同   \n    * 不同位宽的FPU的计算会导致最终输出的最后一个有效位的数字不同   \n    * 不同的浮点算法也会导致精度的不同  \n    * 小数部分在二进制表达上存储的精度丢失问题 (例如0.1的除不尽带来的轧差处理)    \n    * 精度末尾的舍入策略  \n\n#### 解决方法\n  \n* 基础策略  \n  * 用整数处理  \n  * 用定义良好的定点数处理    \n    * 一个简单的实现可能是*10000  或者* 2^N的大小 但是要保证放大倍数在有效的精度范围内并且不会溢出  \n  * 隔离浮点数, 一旦整数或者定点数转换为浮点数后, 就不应该参与原有需要保证重复计算一致性的流程   \n  * 三角函数可以通过查表或者泰勒级数求值   \n   \n\n* 实践方案  \n  * 能用整数的尽量用整数   \n  * 范围比较小的浮点数通过缩放为整数进行计算和存储  并保证不会(定义好)溢出   \n  * 对业务进行拆解, 把无法避免的浮点计算部分改成单向导出模式,  保证计算不会出现回溯影响.    \n  * 使用能保证计算确定性的浮点/定点数学库     \n\n\n\n### 使用Modifer完成对属性表中的项进行修改 并实现常见公式  \n\nModifier的核心是一个对称操作, 即在开始时进行修改操作,  在结束后保证复原, 为了保证这一点我们会采用整数存储所有项, 技术出来的面板属性值不会参与计算本身,  并通过对项的合理拆分与划分完成高阶的系数加和与系数连乘等公式 如下:    \n\n* 对属性进行加和修正    \n  * 直接对加和项进行加和,  修改器结束后减去加上的数字即可.   \n\n* 对属性进行系数加和修正   \n  * 抽出来独立的项保存系数的分子(分布可定位万分或者百分等),  在计算结果时使用该项的和带入分母后进行乘法修正:   \n    * BUFF A加攻击力30 %\n    * BUFF B加攻击力40 %\n    * BUFF A 和 B同时加攻击力是 攻击力 \\* (1 + 30 % + 40 %) = 攻击力 \\* 170%   \n    * BUFF A B生效后先移除A  则在项里减去30并重新计算:  攻击力 \\* (1+40%) = 攻击力 \\* 140%   \n\n* 对属性进行系数连乘修正  \n  * 抽出来独立的项进行累加该系数换算成的指数信息,  指数相加等于系数连乘   \n    1. 对于要修正的系数取其对数, 然后放大到满足需求的精度位数后 保存为整数.    \n    2. 使用时, 先把结果带入分母取得连乘的积, 然后用之前计算的底进行指数计算 即可得到连乘结果  \n    3. 对称恢复时候, 拿到的仍然是系数, 所以需要进行对数计算后得到保存时的数字, 这里需要保证一致性.   \n  * 例:\n    * BUFF A 减速20 %  \n    * BUFF B 减速40 %  \n    * BUFF A B同时生效, 结果为 基础移动 \\* (1-20%) \\* (1-40%) == > 基础移动 \\* 48%   \n    * 这里通常不用加和是因为需要一个平滑的收益递减的减速曲线而不是直接减到0 .    \n      * 例如两个减速50%用加法公式则减速到0   但是连乘公式则为基础的25%.   \n\n通常, (十进制描述) 游戏中配置的比例修饰的精度为 万分之一,  有效位数4个即够用,  float的有效位为23 \\* log10(2) 约等于 6.9个十进制位   \n\n\n\n### 一级二级属性   \n一级属性的结果不直接参与战斗, 一级属性的结果通过换算公式成为不同二级属性中的项  \n例如力量按比例加攻击力 加防御值  \n* 一级属性换算二级属性的公式应当保证确定性   \n* 在修改一级属性的任意项后 都应该用原有的结果进行反向恢复二级属性中的项  然后重新计算结果并带入二级属性进行重刷  \n\n\n### 非战斗属性字段   \n这里指的是能量条类,   或者程序记录的某些key  id  等 都可以使用字段表,  但是这些字段的来源是动态逻辑并非属性表,  因此这部分字段是不进行属性导出和刷新的    \n\n\n\n# 数值模型    \n一般来说游戏的数值分为上游和下游两大块 下游主要跟战斗系统有关 是上游的基础   \n\n* 上游数值模型   \n  * 成长线规划  \n  * 怪物数值  \n  * 产出和消耗  \n  * 商业化   \n  * \n* 下游数值模型   \n  * 伤害公式  \n  * 战斗力公式  \n  * 职业和属性  \n  * 属性量化和拆解   \n\n\n## 伤害公式     \n一般有减法,乘法, 除法等公式   \n根据这几种公式的效益和多人表现   \n一般来说多人游戏类似MMO MOBA会采用乘法或者除法来规避不破防问题   \n人数少对数值比较敏感对抗比较激烈的可能会采用减法公式  \n\n* **减法公式**  \n  $$damage = attack - defence$$   \n  * 等比缩放攻击力和防御力战斗结果不变  \n  * 攻击力边际收益递减, 防御力边际收益递增, 容易出现不破防   \n    * 假设一个单位输出是10点伤害 受到10点伤害\n      * 攻击力伤害加成每点分别是1/10,   1/11 ... 1/19  \n      * 防御加成每点分别是1/10 ,  1/9,  .... 1/1\n    * 同等战力下攻防每一点变化都会带来极大影响   \n    * 战斗力可能不传递  例如低攻高速不破高防, 但是打低防可以获得大量输出, 但是高防不一定能打过低防,  低防攻击高破防更多的情况下.    \n      * 虽然可以做一些循环克制, 但是群战时, 一个不破防可以秒大批低战力玩家.   \n      * 防御价值太高        \n\n* **乘法公式**  \n  $$damage = attack * (1-f(defence)); $$  \n  一般情况下\n  $$f(defence) = defence / (C + defence)  $$   \n\n  * 战斗力可以单独计算 ```hp*(1-f(defence))* attack```   \n  * 攻击和免伤的效益都是边际递减, 没有减法的不破防问题  \n  * 数值变化不明显  \n  * 引入暴击值暴击率来修饰边际递减和数值不敏感问题  \n  * 战力传递\n\n* **除法公式**  \n  模型如下 但一般不会直接用, 因为线性投放伤害不变:\n  $$ damage = attack/ defence $$\n  变种版本 方差版本,  伤害值可能大于攻击力 一般也不用:   \n  $$ damage = attack* attack / defence $$ \n  一般用的比较多问题比较少的版本:\n  $$ damage = attack \\* attack / (defence + attack)$$  \n  * 攻击价值递增  防御价值递减   \n  * 没有不破防的问题 \n  * 数值变化不敏感  \n\n\n\n## 攻击判定流程:瀑布判定和圆桌判定 \n------------------------  \n一般来说一个战斗单位会有多个进攻属性以及对应的多个防御属性形成多组判定和计算, 其中攻击判定指的是命中的类型分支判定:\n例如说通常攻击有 命中率 暴击率 ,  防御有闪避率, 格挡, 招架等, 分支有 MISS, 闪避, 招架, 格挡, 暴击, 普通, 这些分支区分优先级, 例如闪避判定肯定优于暴击判定    \n\n面板数据举例:   \n\n| 攻击方   | 受击方 | 面板期望 | 瀑布算法 | 事件概率 | 圆桌算法 | 事件概率 |\n|----------|--------|----------|----------|----------|----------|----------|\n| 命中率   | 90%    | 90%      | 90%      |          | 90%      |          |\n| 闪避率   | 20%    | 18.00%   | 72.00%   | 18.00%   | 72.00%   | 18.00%   |\n| 招架     | 15%    | 13.500%  | 61.200%  | 10.800%  | 58.500%  | 13.500%  |\n| 格挡     | 30%    | 27.00%   | 42.840%  | 18.3600% | 31.500%  | 27.000%  |\n| 暴击率   | 25%    | 22.500%  | 32.1300% | 10.7100% | 9.0000%  | 22.5000% |\n| 普通命中 |        | 9%       | 32.1300% |          |          | 9.0000%  |\n\n\n<font color=#C32>\n瀑布算法和圆桌算法的核心共同点都是对对抗组进行优先级划分, 并且高优先级在前 如果所有分支均为发生, 那么就是普通命中.\n\n区别在于瀑布判定会逐个分支判定, 因此越靠后的分支其发生概率的衰减越大, 但是都能生效 \n\n圆桌算法则是按照面板属性去逐个排好, 超过桌子大小的事件概率将会被截断和裁剪掉, 如果圆桌如果能放下 则和面板期望概率一致, 如果放不下 则已放入桌子的仍然能做到和面板期望一致, 但是被裁剪掉的讲不会有机会发生. \n</font>\n\n\n\n再举个例子来说:  \n> 假设: 命中率是90%, 闪避率是50%, 招架是40%, 格挡是30%.    \n> 以命中率为桌面重新计算分支概率则是  \n> 命中率90% * 闪避50% = 45%   \n> 命中率90% * 招架40% = 36%   \n> 命中率90% * 格挡30% = 27%   \n\n因此桌面依次是  \n\n| 闪避 | 招架 | 格挡 | 暴击 | 普通命中 |\n|------|------|------|------|----------|\n| 45%  | 36%  | 19%  | 0%   | 0%       |\n\n\n判定伪代码:\n```Lua\nlocal r = rand()%100  \nif r < 闪避 then \n  --闪避 \nelseif r < 闪避+招架 then\n  --招架\nelseif elseif r < 闪避+招架+暴击 then\n  --暴击\nend\n\n```\n\n","source":"_posts/2020-07-21-math_of_combat.md","raw":"---\ntitle: 数值模型 战斗属性和判定公式\ndate: 2020-07-21\ncategories: develop \nauthor: yawei.zhang \n---\n\n## 战斗属性 \n**战斗属性属于战斗单位的简单数据字段,  提供基础的数据读写操作(相对于magic state而言).**    \n在实践中 一般战斗属性还包含从配置文件中load数据, 一级战斗属性到二级战斗属性的封装, 以及按照功能,战斗单位层级的划分等.    \n\n## 战斗属性的设计和实现   \n\n### 字段表设计\n字段表在设计上隶属于'接口层'这个概念, 简单直接, 易于访问和同步处理时目的.    \n\n在C++中 通常考虑用一块静态数组的内存来表示   \n\n| A        | A   | A   | A   | A    | A           | A        | A         | A   |\n|----------|-----|-----|-----|------|-------------|----------|-----------|-----|\n| 字段名   | HP  | MP  | ATK | CRIT | RESIST CRIT | HIT RATE | MISS RATE | ... |\n| 转换类型 | INT | INT | INT | INT  | INT         | FLOAT    | FLOAT     | ... |\n\n\n这种字段表的设计有以下优点和特性:\n* 性能非常高   \n* 可以直接操作,遍历内存 方便统一管理  \n* 以数组下标完成ID的设计, 并使用BIT位进行脏数据标记辅助进行增量同步  \n* 初始化约定为0,  进行初始同步时只同步非0数据即可,  后续采用增量同步, 减少同步量   \n* 字段表中的数据修改可以由属性表进行托管结算 也可以直接set   \n  * 通常战斗属性均为属性表托管结算和刷新 不能直接set   \n  * 通常能量条类属性直接进行set \n  * 复杂的属性一般由多个属性功能完成 例如\n    * 血量上限 (战斗属性)   \n    * 当前血量 (属于能量条类, 则特殊条件下以'血量上限属性'为依据进行set  例如出生满血)   \n  \n<!-- more -->\n### 属性表设计     \n\n属性表是一个三维数组:  \n* 第一维数组的下标对应字段表的下标, 即ID一一对应完成属性表和字段表的映射关系       \n* 第二维数组对应具体属性层级, 层级按照功能划分, 例如基础数值层, 模块专属修饰层    \n* 第三位数组对应具体属性具体层级下的所有项,  例如基础值, 万分比加和修正, 万分比连乘修正,  值修正等    \n\n通常面板属性遵循基础的计算公式:   \n$$实际值=基础值\\*系数+修正值$$   \n然后根据具体的数值需求进行细化和扩展等    \n  \n可能的一种计算通用计算公式(能满足大多数属性计算的公式), 提供了系数加和修正 系数连乘修正 值修正:\n```\n基础系数加和修正 = 基础层.基础值*(1+Σ(基础系数修正))\n\n基础系数连乘修正=基础系数加和修正 * power(2, Σ(基础系数连乘修正指数))\n\n基础值值修正=基础系数连乘修正+Σ(BASE VALUE + VALUE)  \n\n总值系数加和修正  连乘修正 总值修正 ...\n\n```\n\n表如下:  \n\n| A           | BASE VALUE | BASE RATE | BASE EXP | VALUE | TOTAL RATE | TOTAL EXP | TOTAL VAL |\n|-------------|------------|-----------|----------|-------|------------|-----------|-----------|\n| BASE LAYER  | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n| ITEM LAYER  | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n| SKILL LAYER | ----       | ----      | ----     | ----  | ----       | ----      | -         |\n\n\n功能设计:   \n* 面板属性指的是通过属性表计算的字段, 该类字段对外关闭修改权限, 只能通过修改对应的属性表中的项来进行修改. 外部只读.    \n* 字段表中的字段值不参与计算 值作为属性表的导出数据, 因此字段可以是float类型,  但是属性表中的项必须全是整数以保证属性在对称修改中时钟保证结果的确定性和正确性(精度满足需求即可)   \n* 需要保证每个项的值不会发生溢出, 来保证属性的对称修改过程中的正确性和可靠性.   \n\n\n### 对称计算的确定性和一致性保证   \n\n战斗面板属性一个很重要的特征就是在战斗对抗中会发生持续性的对称修改, 例如加攻击力 减速的BUFF等等.  \n而为了简化设计提高性能, 不能在每次战斗判定流程中遍历所有buff来完成属性计算, 常见的做法中, 我们会先修改属性(加/乘) 然后持续一段时间后再进行恢复(减/除).   \n\n例如:  加攻击力100持续1秒   减速40%持续3秒 减速30%持续2秒   \n\n然后问题就来了,  假如说我们其中一个项纪录的是float的值修正,  比如防御力+3, 然后来了一个超级防御(无敌的一种)+850万防御 然后再对称减去后,  其结果我们期望是0 但实际上可能为-1    \n\n#### 问题原因  \n\n计算机的浮点数通常并不满足结合律和分配率, 这就会带来计算结果的不确定性.   \n\n  结合律应该满足: \n  ```\n  (a + b) + c == a + (b + c) \n  ```\n  举例来说: 假如上述公式的单位类型是浮点数, 其中a和b是小数, c是大数,  a+b的和在c的最后一位精度上就可能会出现  \n  ```\n  (a + b) + c > b;  \n  a + (b + c) == b;\n  ```\n  单独的a和b都小于c的精度, 但a和b的和正好落在a+b的和在c的精度范围内可以被累加,  但是单独的a,b如果不在c的精度范围内累加的结果不会发生变化       \n  \n  造成浮点计算的不确定性原因:\n  * 因顺序不同带来的浮点变动导致计算结果不同   \n  * 因为精度损失并且这种损失未进行良好定义而导致的结果不同   \n    * 不同位宽的FPU的计算会导致最终输出的最后一个有效位的数字不同   \n    * 不同的浮点算法也会导致精度的不同  \n    * 小数部分在二进制表达上存储的精度丢失问题 (例如0.1的除不尽带来的轧差处理)    \n    * 精度末尾的舍入策略  \n\n#### 解决方法\n  \n* 基础策略  \n  * 用整数处理  \n  * 用定义良好的定点数处理    \n    * 一个简单的实现可能是*10000  或者* 2^N的大小 但是要保证放大倍数在有效的精度范围内并且不会溢出  \n  * 隔离浮点数, 一旦整数或者定点数转换为浮点数后, 就不应该参与原有需要保证重复计算一致性的流程   \n  * 三角函数可以通过查表或者泰勒级数求值   \n   \n\n* 实践方案  \n  * 能用整数的尽量用整数   \n  * 范围比较小的浮点数通过缩放为整数进行计算和存储  并保证不会(定义好)溢出   \n  * 对业务进行拆解, 把无法避免的浮点计算部分改成单向导出模式,  保证计算不会出现回溯影响.    \n  * 使用能保证计算确定性的浮点/定点数学库     \n\n\n\n### 使用Modifer完成对属性表中的项进行修改 并实现常见公式  \n\nModifier的核心是一个对称操作, 即在开始时进行修改操作,  在结束后保证复原, 为了保证这一点我们会采用整数存储所有项, 技术出来的面板属性值不会参与计算本身,  并通过对项的合理拆分与划分完成高阶的系数加和与系数连乘等公式 如下:    \n\n* 对属性进行加和修正    \n  * 直接对加和项进行加和,  修改器结束后减去加上的数字即可.   \n\n* 对属性进行系数加和修正   \n  * 抽出来独立的项保存系数的分子(分布可定位万分或者百分等),  在计算结果时使用该项的和带入分母后进行乘法修正:   \n    * BUFF A加攻击力30 %\n    * BUFF B加攻击力40 %\n    * BUFF A 和 B同时加攻击力是 攻击力 \\* (1 + 30 % + 40 %) = 攻击力 \\* 170%   \n    * BUFF A B生效后先移除A  则在项里减去30并重新计算:  攻击力 \\* (1+40%) = 攻击力 \\* 140%   \n\n* 对属性进行系数连乘修正  \n  * 抽出来独立的项进行累加该系数换算成的指数信息,  指数相加等于系数连乘   \n    1. 对于要修正的系数取其对数, 然后放大到满足需求的精度位数后 保存为整数.    \n    2. 使用时, 先把结果带入分母取得连乘的积, 然后用之前计算的底进行指数计算 即可得到连乘结果  \n    3. 对称恢复时候, 拿到的仍然是系数, 所以需要进行对数计算后得到保存时的数字, 这里需要保证一致性.   \n  * 例:\n    * BUFF A 减速20 %  \n    * BUFF B 减速40 %  \n    * BUFF A B同时生效, 结果为 基础移动 \\* (1-20%) \\* (1-40%) == > 基础移动 \\* 48%   \n    * 这里通常不用加和是因为需要一个平滑的收益递减的减速曲线而不是直接减到0 .    \n      * 例如两个减速50%用加法公式则减速到0   但是连乘公式则为基础的25%.   \n\n通常, (十进制描述) 游戏中配置的比例修饰的精度为 万分之一,  有效位数4个即够用,  float的有效位为23 \\* log10(2) 约等于 6.9个十进制位   \n\n\n\n### 一级二级属性   \n一级属性的结果不直接参与战斗, 一级属性的结果通过换算公式成为不同二级属性中的项  \n例如力量按比例加攻击力 加防御值  \n* 一级属性换算二级属性的公式应当保证确定性   \n* 在修改一级属性的任意项后 都应该用原有的结果进行反向恢复二级属性中的项  然后重新计算结果并带入二级属性进行重刷  \n\n\n### 非战斗属性字段   \n这里指的是能量条类,   或者程序记录的某些key  id  等 都可以使用字段表,  但是这些字段的来源是动态逻辑并非属性表,  因此这部分字段是不进行属性导出和刷新的    \n\n\n\n# 数值模型    \n一般来说游戏的数值分为上游和下游两大块 下游主要跟战斗系统有关 是上游的基础   \n\n* 上游数值模型   \n  * 成长线规划  \n  * 怪物数值  \n  * 产出和消耗  \n  * 商业化   \n  * \n* 下游数值模型   \n  * 伤害公式  \n  * 战斗力公式  \n  * 职业和属性  \n  * 属性量化和拆解   \n\n\n## 伤害公式     \n一般有减法,乘法, 除法等公式   \n根据这几种公式的效益和多人表现   \n一般来说多人游戏类似MMO MOBA会采用乘法或者除法来规避不破防问题   \n人数少对数值比较敏感对抗比较激烈的可能会采用减法公式  \n\n* **减法公式**  \n  $$damage = attack - defence$$   \n  * 等比缩放攻击力和防御力战斗结果不变  \n  * 攻击力边际收益递减, 防御力边际收益递增, 容易出现不破防   \n    * 假设一个单位输出是10点伤害 受到10点伤害\n      * 攻击力伤害加成每点分别是1/10,   1/11 ... 1/19  \n      * 防御加成每点分别是1/10 ,  1/9,  .... 1/1\n    * 同等战力下攻防每一点变化都会带来极大影响   \n    * 战斗力可能不传递  例如低攻高速不破高防, 但是打低防可以获得大量输出, 但是高防不一定能打过低防,  低防攻击高破防更多的情况下.    \n      * 虽然可以做一些循环克制, 但是群战时, 一个不破防可以秒大批低战力玩家.   \n      * 防御价值太高        \n\n* **乘法公式**  \n  $$damage = attack * (1-f(defence)); $$  \n  一般情况下\n  $$f(defence) = defence / (C + defence)  $$   \n\n  * 战斗力可以单独计算 ```hp*(1-f(defence))* attack```   \n  * 攻击和免伤的效益都是边际递减, 没有减法的不破防问题  \n  * 数值变化不明显  \n  * 引入暴击值暴击率来修饰边际递减和数值不敏感问题  \n  * 战力传递\n\n* **除法公式**  \n  模型如下 但一般不会直接用, 因为线性投放伤害不变:\n  $$ damage = attack/ defence $$\n  变种版本 方差版本,  伤害值可能大于攻击力 一般也不用:   \n  $$ damage = attack* attack / defence $$ \n  一般用的比较多问题比较少的版本:\n  $$ damage = attack \\* attack / (defence + attack)$$  \n  * 攻击价值递增  防御价值递减   \n  * 没有不破防的问题 \n  * 数值变化不敏感  \n\n\n\n## 攻击判定流程:瀑布判定和圆桌判定 \n------------------------  \n一般来说一个战斗单位会有多个进攻属性以及对应的多个防御属性形成多组判定和计算, 其中攻击判定指的是命中的类型分支判定:\n例如说通常攻击有 命中率 暴击率 ,  防御有闪避率, 格挡, 招架等, 分支有 MISS, 闪避, 招架, 格挡, 暴击, 普通, 这些分支区分优先级, 例如闪避判定肯定优于暴击判定    \n\n面板数据举例:   \n\n| 攻击方   | 受击方 | 面板期望 | 瀑布算法 | 事件概率 | 圆桌算法 | 事件概率 |\n|----------|--------|----------|----------|----------|----------|----------|\n| 命中率   | 90%    | 90%      | 90%      |          | 90%      |          |\n| 闪避率   | 20%    | 18.00%   | 72.00%   | 18.00%   | 72.00%   | 18.00%   |\n| 招架     | 15%    | 13.500%  | 61.200%  | 10.800%  | 58.500%  | 13.500%  |\n| 格挡     | 30%    | 27.00%   | 42.840%  | 18.3600% | 31.500%  | 27.000%  |\n| 暴击率   | 25%    | 22.500%  | 32.1300% | 10.7100% | 9.0000%  | 22.5000% |\n| 普通命中 |        | 9%       | 32.1300% |          |          | 9.0000%  |\n\n\n<font color=#C32>\n瀑布算法和圆桌算法的核心共同点都是对对抗组进行优先级划分, 并且高优先级在前 如果所有分支均为发生, 那么就是普通命中.\n\n区别在于瀑布判定会逐个分支判定, 因此越靠后的分支其发生概率的衰减越大, 但是都能生效 \n\n圆桌算法则是按照面板属性去逐个排好, 超过桌子大小的事件概率将会被截断和裁剪掉, 如果圆桌如果能放下 则和面板期望概率一致, 如果放不下 则已放入桌子的仍然能做到和面板期望一致, 但是被裁剪掉的讲不会有机会发生. \n</font>\n\n\n\n再举个例子来说:  \n> 假设: 命中率是90%, 闪避率是50%, 招架是40%, 格挡是30%.    \n> 以命中率为桌面重新计算分支概率则是  \n> 命中率90% * 闪避50% = 45%   \n> 命中率90% * 招架40% = 36%   \n> 命中率90% * 格挡30% = 27%   \n\n因此桌面依次是  \n\n| 闪避 | 招架 | 格挡 | 暴击 | 普通命中 |\n|------|------|------|------|----------|\n| 45%  | 36%  | 19%  | 0%   | 0%       |\n\n\n判定伪代码:\n```Lua\nlocal r = rand()%100  \nif r < 闪避 then \n  --闪避 \nelseif r < 闪避+招架 then\n  --招架\nelseif elseif r < 闪避+招架+暴击 then\n  --暴击\nend\n\n```\n\n","slug":"2020-07-21-math_of_combat","published":1,"updated":"2020-07-24T02:41:07.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyejh001p7w5hf0jw0bsc","content":"<h2><span id=\"战斗属性\">战斗属性</span></h2><p><strong>战斗属性属于战斗单位的简单数据字段,  提供基础的数据读写操作(相对于magic state而言).</strong><br>在实践中 一般战斗属性还包含从配置文件中load数据, 一级战斗属性到二级战斗属性的封装, 以及按照功能,战斗单位层级的划分等.    </p>\n<h2><span id=\"战斗属性的设计和实现\">战斗属性的设计和实现</span></h2><h3><span id=\"字段表设计\">字段表设计</span></h3><p>字段表在设计上隶属于’接口层’这个概念, 简单直接, 易于访问和同步处理时目的.    </p>\n<p>在C++中 通常考虑用一块静态数组的内存来表示   </p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字段名</td>\n<td>HP</td>\n<td>MP</td>\n<td>ATK</td>\n<td>CRIT</td>\n<td>RESIST CRIT</td>\n<td>HIT RATE</td>\n<td>MISS RATE</td>\n<td>…</td>\n</tr>\n<tr>\n<td>转换类型</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>FLOAT</td>\n<td>FLOAT</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<p>这种字段表的设计有以下优点和特性:</p>\n<ul>\n<li>性能非常高   </li>\n<li>可以直接操作,遍历内存 方便统一管理  </li>\n<li>以数组下标完成ID的设计, 并使用BIT位进行脏数据标记辅助进行增量同步  </li>\n<li>初始化约定为0,  进行初始同步时只同步非0数据即可,  后续采用增量同步, 减少同步量   </li>\n<li>字段表中的数据修改可以由属性表进行托管结算 也可以直接set   <ul>\n<li>通常战斗属性均为属性表托管结算和刷新 不能直接set   </li>\n<li>通常能量条类属性直接进行set </li>\n<li>复杂的属性一般由多个属性功能完成 例如<ul>\n<li>血量上限 (战斗属性)   </li>\n<li>当前血量 (属于能量条类, 则特殊条件下以’血量上限属性’为依据进行set  例如出生满血)   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3><span id=\"属性表设计\">属性表设计</span></h3><p>属性表是一个三维数组:  </p>\n<ul>\n<li>第一维数组的下标对应字段表的下标, 即ID一一对应完成属性表和字段表的映射关系       </li>\n<li>第二维数组对应具体属性层级, 层级按照功能划分, 例如基础数值层, 模块专属修饰层    </li>\n<li>第三位数组对应具体属性具体层级下的所有项,  例如基础值, 万分比加和修正, 万分比连乘修正,  值修正等    </li>\n</ul>\n<p>通常面板属性遵循基础的计算公式:<br>$$实际值=基础值*系数+修正值$$<br>然后根据具体的数值需求进行细化和扩展等    </p>\n<p>可能的一种计算通用计算公式(能满足大多数属性计算的公式), 提供了系数加和修正 系数连乘修正 值修正:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基础系数加和修正 &#x3D; 基础层.基础值*(1+Σ(基础系数修正))</span><br><span class=\"line\"></span><br><span class=\"line\">基础系数连乘修正&#x3D;基础系数加和修正 * power(2, Σ(基础系数连乘修正指数))</span><br><span class=\"line\"></span><br><span class=\"line\">基础值值修正&#x3D;基础系数连乘修正+Σ(BASE VALUE + VALUE)  </span><br><span class=\"line\"></span><br><span class=\"line\">总值系数加和修正  连乘修正 总值修正 ...</span><br></pre></td></tr></table></figure>\n\n<p>表如下:  </p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>BASE VALUE</th>\n<th>BASE RATE</th>\n<th>BASE EXP</th>\n<th>VALUE</th>\n<th>TOTAL RATE</th>\n<th>TOTAL EXP</th>\n<th>TOTAL VAL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BASE LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ITEM LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SKILL LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>功能设计:   </p>\n<ul>\n<li>面板属性指的是通过属性表计算的字段, 该类字段对外关闭修改权限, 只能通过修改对应的属性表中的项来进行修改. 外部只读.    </li>\n<li>字段表中的字段值不参与计算 值作为属性表的导出数据, 因此字段可以是float类型,  但是属性表中的项必须全是整数以保证属性在对称修改中时钟保证结果的确定性和正确性(精度满足需求即可)   </li>\n<li>需要保证每个项的值不会发生溢出, 来保证属性的对称修改过程中的正确性和可靠性.   </li>\n</ul>\n<h3><span id=\"对称计算的确定性和一致性保证\">对称计算的确定性和一致性保证</span></h3><p>战斗面板属性一个很重要的特征就是在战斗对抗中会发生持续性的对称修改, 例如加攻击力 减速的BUFF等等.<br>而为了简化设计提高性能, 不能在每次战斗判定流程中遍历所有buff来完成属性计算, 常见的做法中, 我们会先修改属性(加/乘) 然后持续一段时间后再进行恢复(减/除).   </p>\n<p>例如:  加攻击力100持续1秒   减速40%持续3秒 减速30%持续2秒   </p>\n<p>然后问题就来了,  假如说我们其中一个项纪录的是float的值修正,  比如防御力+3, 然后来了一个超级防御(无敌的一种)+850万防御 然后再对称减去后,  其结果我们期望是0 但实际上可能为-1    </p>\n<h4><span id=\"问题原因\">问题原因</span></h4><p>计算机的浮点数通常并不满足结合律和分配率, 这就会带来计算结果的不确定性.   </p>\n<p>  结合律应该满足:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a + b) + c &#x3D;&#x3D; a + (b + c)</span><br></pre></td></tr></table></figure><br>  举例来说: 假如上述公式的单位类型是浮点数, 其中a和b是小数, c是大数,  a+b的和在c的最后一位精度上就可能会出现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a + b) + c &gt; b;  </span><br><span class=\"line\">a + (b + c) &#x3D;&#x3D; b;</span><br></pre></td></tr></table></figure><br>  单独的a和b都小于c的精度, 但a和b的和正好落在a+b的和在c的精度范围内可以被累加,  但是单独的a,b如果不在c的精度范围内累加的结果不会发生变化       </p>\n<p>  造成浮点计算的不确定性原因:</p>\n<ul>\n<li>因顺序不同带来的浮点变动导致计算结果不同   </li>\n<li>因为精度损失并且这种损失未进行良好定义而导致的结果不同   <ul>\n<li>不同位宽的FPU的计算会导致最终输出的最后一个有效位的数字不同   </li>\n<li>不同的浮点算法也会导致精度的不同  </li>\n<li>小数部分在二进制表达上存储的精度丢失问题 (例如0.1的除不尽带来的轧差处理)    </li>\n<li>精度末尾的舍入策略  </li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"解决方法\">解决方法</span></h4><ul>\n<li>基础策略  <ul>\n<li>用整数处理  </li>\n<li>用定义良好的定点数处理    <ul>\n<li>一个简单的实现可能是<em>10000  或者</em> 2^N的大小 但是要保证放大倍数在有效的精度范围内并且不会溢出  </li>\n</ul>\n</li>\n<li>隔离浮点数, 一旦整数或者定点数转换为浮点数后, 就不应该参与原有需要保证重复计算一致性的流程   </li>\n<li>三角函数可以通过查表或者泰勒级数求值   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实践方案  <ul>\n<li>能用整数的尽量用整数   </li>\n<li>范围比较小的浮点数通过缩放为整数进行计算和存储  并保证不会(定义好)溢出   </li>\n<li>对业务进行拆解, 把无法避免的浮点计算部分改成单向导出模式,  保证计算不会出现回溯影响.    </li>\n<li>使用能保证计算确定性的浮点/定点数学库     </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"使用modifer完成对属性表中的项进行修改-并实现常见公式\">使用Modifer完成对属性表中的项进行修改 并实现常见公式</span></h3><p>Modifier的核心是一个对称操作, 即在开始时进行修改操作,  在结束后保证复原, 为了保证这一点我们会采用整数存储所有项, 技术出来的面板属性值不会参与计算本身,  并通过对项的合理拆分与划分完成高阶的系数加和与系数连乘等公式 如下:    </p>\n<ul>\n<li><p>对属性进行加和修正    </p>\n<ul>\n<li>直接对加和项进行加和,  修改器结束后减去加上的数字即可.   </li>\n</ul>\n</li>\n<li><p>对属性进行系数加和修正   </p>\n<ul>\n<li>抽出来独立的项保存系数的分子(分布可定位万分或者百分等),  在计算结果时使用该项的和带入分母后进行乘法修正:   <ul>\n<li>BUFF A加攻击力30 %</li>\n<li>BUFF B加攻击力40 %</li>\n<li>BUFF A 和 B同时加攻击力是 攻击力 * (1 + 30 % + 40 %) = 攻击力 * 170%   </li>\n<li>BUFF A B生效后先移除A  则在项里减去30并重新计算:  攻击力 * (1+40%) = 攻击力 * 140%   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>对属性进行系数连乘修正  </p>\n<ul>\n<li>抽出来独立的项进行累加该系数换算成的指数信息,  指数相加等于系数连乘   <ol>\n<li>对于要修正的系数取其对数, 然后放大到满足需求的精度位数后 保存为整数.    </li>\n<li>使用时, 先把结果带入分母取得连乘的积, 然后用之前计算的底进行指数计算 即可得到连乘结果  </li>\n<li>对称恢复时候, 拿到的仍然是系数, 所以需要进行对数计算后得到保存时的数字, 这里需要保证一致性.   </li>\n</ol>\n</li>\n<li>例:<ul>\n<li>BUFF A 减速20 %  </li>\n<li>BUFF B 减速40 %  </li>\n<li>BUFF A B同时生效, 结果为 基础移动 * (1-20%) * (1-40%) == &gt; 基础移动 * 48%   </li>\n<li>这里通常不用加和是因为需要一个平滑的收益递减的减速曲线而不是直接减到0 .    <ul>\n<li>例如两个减速50%用加法公式则减速到0   但是连乘公式则为基础的25%.   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>通常, (十进制描述) 游戏中配置的比例修饰的精度为 万分之一,  有效位数4个即够用,  float的有效位为23 * log10(2) 约等于 6.9个十进制位   </p>\n<h3><span id=\"一级二级属性\">一级二级属性</span></h3><p>一级属性的结果不直接参与战斗, 一级属性的结果通过换算公式成为不同二级属性中的项<br>例如力量按比例加攻击力 加防御值  </p>\n<ul>\n<li>一级属性换算二级属性的公式应当保证确定性   </li>\n<li>在修改一级属性的任意项后 都应该用原有的结果进行反向恢复二级属性中的项  然后重新计算结果并带入二级属性进行重刷  </li>\n</ul>\n<h3><span id=\"非战斗属性字段\">非战斗属性字段</span></h3><p>这里指的是能量条类,   或者程序记录的某些key  id  等 都可以使用字段表,  但是这些字段的来源是动态逻辑并非属性表,  因此这部分字段是不进行属性导出和刷新的    </p>\n<h1><span id=\"数值模型\">数值模型</span></h1><p>一般来说游戏的数值分为上游和下游两大块 下游主要跟战斗系统有关 是上游的基础   </p>\n<ul>\n<li>上游数值模型   <ul>\n<li>成长线规划  </li>\n<li>怪物数值  </li>\n<li>产出和消耗  </li>\n<li>商业化   </li>\n<li></li>\n</ul>\n</li>\n<li>下游数值模型   <ul>\n<li>伤害公式  </li>\n<li>战斗力公式  </li>\n<li>职业和属性  </li>\n<li>属性量化和拆解   </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"伤害公式\">伤害公式</span></h2><p>一般有减法,乘法, 除法等公式<br>根据这几种公式的效益和多人表现<br>一般来说多人游戏类似MMO MOBA会采用乘法或者除法来规避不破防问题<br>人数少对数值比较敏感对抗比较激烈的可能会采用减法公式  </p>\n<ul>\n<li><p><strong>减法公式</strong><br>$$damage = attack - defence$$   </p>\n<ul>\n<li>等比缩放攻击力和防御力战斗结果不变  </li>\n<li>攻击力边际收益递减, 防御力边际收益递增, 容易出现不破防   <ul>\n<li>假设一个单位输出是10点伤害 受到10点伤害<ul>\n<li>攻击力伤害加成每点分别是1/10,   1/11 … 1/19  </li>\n<li>防御加成每点分别是1/10 ,  1/9,  …. 1/1</li>\n</ul>\n</li>\n<li>同等战力下攻防每一点变化都会带来极大影响   </li>\n<li>战斗力可能不传递  例如低攻高速不破高防, 但是打低防可以获得大量输出, 但是高防不一定能打过低防,  低防攻击高破防更多的情况下.    <ul>\n<li>虽然可以做一些循环克制, 但是群战时, 一个不破防可以秒大批低战力玩家.   </li>\n<li>防御价值太高        </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>乘法公式</strong><br>$$damage = attack * (1-f(defence)); $$<br>一般情况下<br>$$f(defence) = defence / (C + defence)  $$   </p>\n<ul>\n<li>战斗力可以单独计算 <code>hp*(1-f(defence))* attack</code>   </li>\n<li>攻击和免伤的效益都是边际递减, 没有减法的不破防问题  </li>\n<li>数值变化不明显  </li>\n<li>引入暴击值暴击率来修饰边际递减和数值不敏感问题  </li>\n<li>战力传递</li>\n</ul>\n</li>\n<li><p><strong>除法公式</strong><br>模型如下 但一般不会直接用, 因为线性投放伤害不变:<br>$$ damage = attack/ defence $$<br>变种版本 方差版本,  伤害值可能大于攻击力 一般也不用:<br>$$ damage = attack* attack / defence $$<br>一般用的比较多问题比较少的版本:<br>$$ damage = attack * attack / (defence + attack)$$  </p>\n<ul>\n<li>攻击价值递增  防御价值递减   </li>\n<li>没有不破防的问题 </li>\n<li>数值变化不敏感  </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"攻击判定流程瀑布判定和圆桌判定\">攻击判定流程:瀑布判定和圆桌判定</span></h2><hr>\n<p>一般来说一个战斗单位会有多个进攻属性以及对应的多个防御属性形成多组判定和计算, 其中攻击判定指的是命中的类型分支判定:<br>例如说通常攻击有 命中率 暴击率 ,  防御有闪避率, 格挡, 招架等, 分支有 MISS, 闪避, 招架, 格挡, 暴击, 普通, 这些分支区分优先级, 例如闪避判定肯定优于暴击判定    </p>\n<p>面板数据举例:   </p>\n<table>\n<thead>\n<tr>\n<th>攻击方</th>\n<th>受击方</th>\n<th>面板期望</th>\n<th>瀑布算法</th>\n<th>事件概率</th>\n<th>圆桌算法</th>\n<th>事件概率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命中率</td>\n<td>90%</td>\n<td>90%</td>\n<td>90%</td>\n<td></td>\n<td>90%</td>\n<td></td>\n</tr>\n<tr>\n<td>闪避率</td>\n<td>20%</td>\n<td>18.00%</td>\n<td>72.00%</td>\n<td>18.00%</td>\n<td>72.00%</td>\n<td>18.00%</td>\n</tr>\n<tr>\n<td>招架</td>\n<td>15%</td>\n<td>13.500%</td>\n<td>61.200%</td>\n<td>10.800%</td>\n<td>58.500%</td>\n<td>13.500%</td>\n</tr>\n<tr>\n<td>格挡</td>\n<td>30%</td>\n<td>27.00%</td>\n<td>42.840%</td>\n<td>18.3600%</td>\n<td>31.500%</td>\n<td>27.000%</td>\n</tr>\n<tr>\n<td>暴击率</td>\n<td>25%</td>\n<td>22.500%</td>\n<td>32.1300%</td>\n<td>10.7100%</td>\n<td>9.0000%</td>\n<td>22.5000%</td>\n</tr>\n<tr>\n<td>普通命中</td>\n<td></td>\n<td>9%</td>\n<td>32.1300%</td>\n<td></td>\n<td></td>\n<td>9.0000%</td>\n</tr>\n</tbody></table>\n<font color=\"#C32\">\n瀑布算法和圆桌算法的核心共同点都是对对抗组进行优先级划分, 并且高优先级在前 如果所有分支均为发生, 那么就是普通命中.\n\n<p>区别在于瀑布判定会逐个分支判定, 因此越靠后的分支其发生概率的衰减越大, 但是都能生效 </p>\n<p>圆桌算法则是按照面板属性去逐个排好, 超过桌子大小的事件概率将会被截断和裁剪掉, 如果圆桌如果能放下 则和面板期望概率一致, 如果放不下 则已放入桌子的仍然能做到和面板期望一致, 但是被裁剪掉的讲不会有机会发生.<br></p></font><p></p>\n<p>再举个例子来说:  </p>\n<blockquote>\n<p>假设: 命中率是90%, 闪避率是50%, 招架是40%, 格挡是30%.<br>以命中率为桌面重新计算分支概率则是<br>命中率90% * 闪避50% = 45%<br>命中率90% * 招架40% = 36%<br>命中率90% * 格挡30% = 27%   </p>\n</blockquote>\n<p>因此桌面依次是  </p>\n<table>\n<thead>\n<tr>\n<th>闪避</th>\n<th>招架</th>\n<th>格挡</th>\n<th>暴击</th>\n<th>普通命中</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>45%</td>\n<td>36%</td>\n<td>19%</td>\n<td>0%</td>\n<td>0%</td>\n</tr>\n</tbody></table>\n<p>判定伪代码:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> r = rand()%<span class=\"number\">100</span>  </span><br><span class=\"line\"><span class=\"keyword\">if</span> r &lt; 闪避 <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">--闪避 </span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> r &lt; 闪避+招架 <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">--招架</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> <span class=\"keyword\">elseif</span> r &lt; 闪避+招架+暴击 <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">--暴击</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"战斗属性\"><a href=\"#战斗属性\" class=\"headerlink\" title=\"战斗属性\"></a>战斗属性</h2><p><strong>战斗属性属于战斗单位的简单数据字段,  提供基础的数据读写操作(相对于magic state而言).</strong><br>在实践中 一般战斗属性还包含从配置文件中load数据, 一级战斗属性到二级战斗属性的封装, 以及按照功能,战斗单位层级的划分等.    </p>\n<h2 id=\"战斗属性的设计和实现\"><a href=\"#战斗属性的设计和实现\" class=\"headerlink\" title=\"战斗属性的设计和实现\"></a>战斗属性的设计和实现</h2><h3 id=\"字段表设计\"><a href=\"#字段表设计\" class=\"headerlink\" title=\"字段表设计\"></a>字段表设计</h3><p>字段表在设计上隶属于’接口层’这个概念, 简单直接, 易于访问和同步处理时目的.    </p>\n<p>在C++中 通常考虑用一块静态数组的内存来表示   </p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n<th>A</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字段名</td>\n<td>HP</td>\n<td>MP</td>\n<td>ATK</td>\n<td>CRIT</td>\n<td>RESIST CRIT</td>\n<td>HIT RATE</td>\n<td>MISS RATE</td>\n<td>…</td>\n</tr>\n<tr>\n<td>转换类型</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>INT</td>\n<td>FLOAT</td>\n<td>FLOAT</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<p>这种字段表的设计有以下优点和特性:</p>\n<ul>\n<li>性能非常高   </li>\n<li>可以直接操作,遍历内存 方便统一管理  </li>\n<li>以数组下标完成ID的设计, 并使用BIT位进行脏数据标记辅助进行增量同步  </li>\n<li>初始化约定为0,  进行初始同步时只同步非0数据即可,  后续采用增量同步, 减少同步量   </li>\n<li>字段表中的数据修改可以由属性表进行托管结算 也可以直接set   <ul>\n<li>通常战斗属性均为属性表托管结算和刷新 不能直接set   </li>\n<li>通常能量条类属性直接进行set </li>\n<li>复杂的属性一般由多个属性功能完成 例如<ul>\n<li>血量上限 (战斗属性)   </li>\n<li>当前血量 (属于能量条类, 则特殊条件下以’血量上限属性’为依据进行set  例如出生满血)   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"属性表设计\"><a href=\"#属性表设计\" class=\"headerlink\" title=\"属性表设计\"></a>属性表设计</h3><p>属性表是一个三维数组:  </p>\n<ul>\n<li>第一维数组的下标对应字段表的下标, 即ID一一对应完成属性表和字段表的映射关系       </li>\n<li>第二维数组对应具体属性层级, 层级按照功能划分, 例如基础数值层, 模块专属修饰层    </li>\n<li>第三位数组对应具体属性具体层级下的所有项,  例如基础值, 万分比加和修正, 万分比连乘修正,  值修正等    </li>\n</ul>\n<p>通常面板属性遵循基础的计算公式:<br>$$实际值=基础值*系数+修正值$$<br>然后根据具体的数值需求进行细化和扩展等    </p>\n<p>可能的一种计算通用计算公式(能满足大多数属性计算的公式), 提供了系数加和修正 系数连乘修正 值修正:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基础系数加和修正 &#x3D; 基础层.基础值*(1+Σ(基础系数修正))</span><br><span class=\"line\"></span><br><span class=\"line\">基础系数连乘修正&#x3D;基础系数加和修正 * power(2, Σ(基础系数连乘修正指数))</span><br><span class=\"line\"></span><br><span class=\"line\">基础值值修正&#x3D;基础系数连乘修正+Σ(BASE VALUE + VALUE)  </span><br><span class=\"line\"></span><br><span class=\"line\">总值系数加和修正  连乘修正 总值修正 ...</span><br></pre></td></tr></table></figure>\n\n<p>表如下:  </p>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>BASE VALUE</th>\n<th>BASE RATE</th>\n<th>BASE EXP</th>\n<th>VALUE</th>\n<th>TOTAL RATE</th>\n<th>TOTAL EXP</th>\n<th>TOTAL VAL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BASE LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ITEM LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SKILL LAYER</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>—-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>功能设计:   </p>\n<ul>\n<li>面板属性指的是通过属性表计算的字段, 该类字段对外关闭修改权限, 只能通过修改对应的属性表中的项来进行修改. 外部只读.    </li>\n<li>字段表中的字段值不参与计算 值作为属性表的导出数据, 因此字段可以是float类型,  但是属性表中的项必须全是整数以保证属性在对称修改中时钟保证结果的确定性和正确性(精度满足需求即可)   </li>\n<li>需要保证每个项的值不会发生溢出, 来保证属性的对称修改过程中的正确性和可靠性.   </li>\n</ul>\n<h3 id=\"对称计算的确定性和一致性保证\"><a href=\"#对称计算的确定性和一致性保证\" class=\"headerlink\" title=\"对称计算的确定性和一致性保证\"></a>对称计算的确定性和一致性保证</h3><p>战斗面板属性一个很重要的特征就是在战斗对抗中会发生持续性的对称修改, 例如加攻击力 减速的BUFF等等.<br>而为了简化设计提高性能, 不能在每次战斗判定流程中遍历所有buff来完成属性计算, 常见的做法中, 我们会先修改属性(加/乘) 然后持续一段时间后再进行恢复(减/除).   </p>\n<p>例如:  加攻击力100持续1秒   减速40%持续3秒 减速30%持续2秒   </p>\n<p>然后问题就来了,  假如说我们其中一个项纪录的是float的值修正,  比如防御力+3, 然后来了一个超级防御(无敌的一种)+850万防御 然后再对称减去后,  其结果我们期望是0 但实际上可能为-1    </p>\n<h4 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h4><p>计算机的浮点数通常并不满足结合律和分配率, 这就会带来计算结果的不确定性.   </p>\n<p>  结合律应该满足:<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a + b) + c &#x3D;&#x3D; a + (b + c)</span><br></pre></td></tr></table></figure><br>  举例来说: 假如上述公式的单位类型是浮点数, 其中a和b是小数, c是大数,  a+b的和在c的最后一位精度上就可能会出现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(a + b) + c &gt; b;  </span><br><span class=\"line\">a + (b + c) &#x3D;&#x3D; b;</span><br></pre></td></tr></table></figure><br>  单独的a和b都小于c的精度, 但a和b的和正好落在a+b的和在c的精度范围内可以被累加,  但是单独的a,b如果不在c的精度范围内累加的结果不会发生变化       </p>\n<p>  造成浮点计算的不确定性原因:</p>\n<ul>\n<li>因顺序不同带来的浮点变动导致计算结果不同   </li>\n<li>因为精度损失并且这种损失未进行良好定义而导致的结果不同   <ul>\n<li>不同位宽的FPU的计算会导致最终输出的最后一个有效位的数字不同   </li>\n<li>不同的浮点算法也会导致精度的不同  </li>\n<li>小数部分在二进制表达上存储的精度丢失问题 (例如0.1的除不尽带来的轧差处理)    </li>\n<li>精度末尾的舍入策略  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><ul>\n<li>基础策略  <ul>\n<li>用整数处理  </li>\n<li>用定义良好的定点数处理    <ul>\n<li>一个简单的实现可能是<em>10000  或者</em> 2^N的大小 但是要保证放大倍数在有效的精度范围内并且不会溢出  </li>\n</ul>\n</li>\n<li>隔离浮点数, 一旦整数或者定点数转换为浮点数后, 就不应该参与原有需要保证重复计算一致性的流程   </li>\n<li>三角函数可以通过查表或者泰勒级数求值   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>实践方案  <ul>\n<li>能用整数的尽量用整数   </li>\n<li>范围比较小的浮点数通过缩放为整数进行计算和存储  并保证不会(定义好)溢出   </li>\n<li>对业务进行拆解, 把无法避免的浮点计算部分改成单向导出模式,  保证计算不会出现回溯影响.    </li>\n<li>使用能保证计算确定性的浮点/定点数学库     </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用Modifer完成对属性表中的项进行修改-并实现常见公式\"><a href=\"#使用Modifer完成对属性表中的项进行修改-并实现常见公式\" class=\"headerlink\" title=\"使用Modifer完成对属性表中的项进行修改 并实现常见公式\"></a>使用Modifer完成对属性表中的项进行修改 并实现常见公式</h3><p>Modifier的核心是一个对称操作, 即在开始时进行修改操作,  在结束后保证复原, 为了保证这一点我们会采用整数存储所有项, 技术出来的面板属性值不会参与计算本身,  并通过对项的合理拆分与划分完成高阶的系数加和与系数连乘等公式 如下:    </p>\n<ul>\n<li><p>对属性进行加和修正    </p>\n<ul>\n<li>直接对加和项进行加和,  修改器结束后减去加上的数字即可.   </li>\n</ul>\n</li>\n<li><p>对属性进行系数加和修正   </p>\n<ul>\n<li>抽出来独立的项保存系数的分子(分布可定位万分或者百分等),  在计算结果时使用该项的和带入分母后进行乘法修正:   <ul>\n<li>BUFF A加攻击力30 %</li>\n<li>BUFF B加攻击力40 %</li>\n<li>BUFF A 和 B同时加攻击力是 攻击力 * (1 + 30 % + 40 %) = 攻击力 * 170%   </li>\n<li>BUFF A B生效后先移除A  则在项里减去30并重新计算:  攻击力 * (1+40%) = 攻击力 * 140%   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>对属性进行系数连乘修正  </p>\n<ul>\n<li>抽出来独立的项进行累加该系数换算成的指数信息,  指数相加等于系数连乘   <ol>\n<li>对于要修正的系数取其对数, 然后放大到满足需求的精度位数后 保存为整数.    </li>\n<li>使用时, 先把结果带入分母取得连乘的积, 然后用之前计算的底进行指数计算 即可得到连乘结果  </li>\n<li>对称恢复时候, 拿到的仍然是系数, 所以需要进行对数计算后得到保存时的数字, 这里需要保证一致性.   </li>\n</ol>\n</li>\n<li>例:<ul>\n<li>BUFF A 减速20 %  </li>\n<li>BUFF B 减速40 %  </li>\n<li>BUFF A B同时生效, 结果为 基础移动 * (1-20%) * (1-40%) == &gt; 基础移动 * 48%   </li>\n<li>这里通常不用加和是因为需要一个平滑的收益递减的减速曲线而不是直接减到0 .    <ul>\n<li>例如两个减速50%用加法公式则减速到0   但是连乘公式则为基础的25%.   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>通常, (十进制描述) 游戏中配置的比例修饰的精度为 万分之一,  有效位数4个即够用,  float的有效位为23 * log10(2) 约等于 6.9个十进制位   </p>\n<h3 id=\"一级二级属性\"><a href=\"#一级二级属性\" class=\"headerlink\" title=\"一级二级属性\"></a>一级二级属性</h3><p>一级属性的结果不直接参与战斗, 一级属性的结果通过换算公式成为不同二级属性中的项<br>例如力量按比例加攻击力 加防御值  </p>\n<ul>\n<li>一级属性换算二级属性的公式应当保证确定性   </li>\n<li>在修改一级属性的任意项后 都应该用原有的结果进行反向恢复二级属性中的项  然后重新计算结果并带入二级属性进行重刷  </li>\n</ul>\n<h3 id=\"非战斗属性字段\"><a href=\"#非战斗属性字段\" class=\"headerlink\" title=\"非战斗属性字段\"></a>非战斗属性字段</h3><p>这里指的是能量条类,   或者程序记录的某些key  id  等 都可以使用字段表,  但是这些字段的来源是动态逻辑并非属性表,  因此这部分字段是不进行属性导出和刷新的    </p>\n<h1 id=\"数值模型\"><a href=\"#数值模型\" class=\"headerlink\" title=\"数值模型\"></a>数值模型</h1><p>一般来说游戏的数值分为上游和下游两大块 下游主要跟战斗系统有关 是上游的基础   </p>\n<ul>\n<li>上游数值模型   <ul>\n<li>成长线规划  </li>\n<li>怪物数值  </li>\n<li>产出和消耗  </li>\n<li>商业化   </li>\n<li></li>\n</ul>\n</li>\n<li>下游数值模型   <ul>\n<li>伤害公式  </li>\n<li>战斗力公式  </li>\n<li>职业和属性  </li>\n<li>属性量化和拆解   </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"伤害公式\"><a href=\"#伤害公式\" class=\"headerlink\" title=\"伤害公式\"></a>伤害公式</h2><p>一般有减法,乘法, 除法等公式<br>根据这几种公式的效益和多人表现<br>一般来说多人游戏类似MMO MOBA会采用乘法或者除法来规避不破防问题<br>人数少对数值比较敏感对抗比较激烈的可能会采用减法公式  </p>\n<ul>\n<li><p><strong>减法公式</strong><br>$$damage = attack - defence$$   </p>\n<ul>\n<li>等比缩放攻击力和防御力战斗结果不变  </li>\n<li>攻击力边际收益递减, 防御力边际收益递增, 容易出现不破防   <ul>\n<li>假设一个单位输出是10点伤害 受到10点伤害<ul>\n<li>攻击力伤害加成每点分别是1/10,   1/11 … 1/19  </li>\n<li>防御加成每点分别是1/10 ,  1/9,  …. 1/1</li>\n</ul>\n</li>\n<li>同等战力下攻防每一点变化都会带来极大影响   </li>\n<li>战斗力可能不传递  例如低攻高速不破高防, 但是打低防可以获得大量输出, 但是高防不一定能打过低防,  低防攻击高破防更多的情况下.    <ul>\n<li>虽然可以做一些循环克制, 但是群战时, 一个不破防可以秒大批低战力玩家.   </li>\n<li>防御价值太高        </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>乘法公式</strong><br>$$damage = attack * (1-f(defence)); $$<br>一般情况下<br>$$f(defence) = defence / (C + defence)  $$   </p>\n<ul>\n<li>战斗力可以单独计算 <code>hp*(1-f(defence))* attack</code>   </li>\n<li>攻击和免伤的效益都是边际递减, 没有减法的不破防问题  </li>\n<li>数值变化不明显  </li>\n<li>引入暴击值暴击率来修饰边际递减和数值不敏感问题  </li>\n<li>战力传递</li>\n</ul>\n</li>\n<li><p><strong>除法公式</strong><br>模型如下 但一般不会直接用, 因为线性投放伤害不变:<br>$$ damage = attack/ defence $$<br>变种版本 方差版本,  伤害值可能大于攻击力 一般也不用:<br>$$ damage = attack* attack / defence $$<br>一般用的比较多问题比较少的版本:<br>$$ damage = attack * attack / (defence + attack)$$  </p>\n<ul>\n<li>攻击价值递增  防御价值递减   </li>\n<li>没有不破防的问题 </li>\n<li>数值变化不敏感  </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"攻击判定流程-瀑布判定和圆桌判定\"><a href=\"#攻击判定流程-瀑布判定和圆桌判定\" class=\"headerlink\" title=\"攻击判定流程:瀑布判定和圆桌判定\"></a>攻击判定流程:瀑布判定和圆桌判定</h2><hr>\n<p>一般来说一个战斗单位会有多个进攻属性以及对应的多个防御属性形成多组判定和计算, 其中攻击判定指的是命中的类型分支判定:<br>例如说通常攻击有 命中率 暴击率 ,  防御有闪避率, 格挡, 招架等, 分支有 MISS, 闪避, 招架, 格挡, 暴击, 普通, 这些分支区分优先级, 例如闪避判定肯定优于暴击判定    </p>\n<p>面板数据举例:   </p>\n<table>\n<thead>\n<tr>\n<th>攻击方</th>\n<th>受击方</th>\n<th>面板期望</th>\n<th>瀑布算法</th>\n<th>事件概率</th>\n<th>圆桌算法</th>\n<th>事件概率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>命中率</td>\n<td>90%</td>\n<td>90%</td>\n<td>90%</td>\n<td></td>\n<td>90%</td>\n<td></td>\n</tr>\n<tr>\n<td>闪避率</td>\n<td>20%</td>\n<td>18.00%</td>\n<td>72.00%</td>\n<td>18.00%</td>\n<td>72.00%</td>\n<td>18.00%</td>\n</tr>\n<tr>\n<td>招架</td>\n<td>15%</td>\n<td>13.500%</td>\n<td>61.200%</td>\n<td>10.800%</td>\n<td>58.500%</td>\n<td>13.500%</td>\n</tr>\n<tr>\n<td>格挡</td>\n<td>30%</td>\n<td>27.00%</td>\n<td>42.840%</td>\n<td>18.3600%</td>\n<td>31.500%</td>\n<td>27.000%</td>\n</tr>\n<tr>\n<td>暴击率</td>\n<td>25%</td>\n<td>22.500%</td>\n<td>32.1300%</td>\n<td>10.7100%</td>\n<td>9.0000%</td>\n<td>22.5000%</td>\n</tr>\n<tr>\n<td>普通命中</td>\n<td></td>\n<td>9%</td>\n<td>32.1300%</td>\n<td></td>\n<td></td>\n<td>9.0000%</td>\n</tr>\n</tbody></table>\n<font color=#C32>\n瀑布算法和圆桌算法的核心共同点都是对对抗组进行优先级划分, 并且高优先级在前 如果所有分支均为发生, 那么就是普通命中.\n\n<p>区别在于瀑布判定会逐个分支判定, 因此越靠后的分支其发生概率的衰减越大, 但是都能生效 </p>\n<p>圆桌算法则是按照面板属性去逐个排好, 超过桌子大小的事件概率将会被截断和裁剪掉, 如果圆桌如果能放下 则和面板期望概率一致, 如果放不下 则已放入桌子的仍然能做到和面板期望一致, 但是被裁剪掉的讲不会有机会发生.<br></font></p>\n<p>再举个例子来说:  </p>\n<blockquote>\n<p>假设: 命中率是90%, 闪避率是50%, 招架是40%, 格挡是30%.<br>以命中率为桌面重新计算分支概率则是<br>命中率90% * 闪避50% = 45%<br>命中率90% * 招架40% = 36%<br>命中率90% * 格挡30% = 27%   </p>\n</blockquote>\n<p>因此桌面依次是  </p>\n<table>\n<thead>\n<tr>\n<th>闪避</th>\n<th>招架</th>\n<th>格挡</th>\n<th>暴击</th>\n<th>普通命中</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>45%</td>\n<td>36%</td>\n<td>19%</td>\n<td>0%</td>\n<td>0%</td>\n</tr>\n</tbody></table>\n<p>判定伪代码:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> r = rand()%<span class=\"number\">100</span>  </span><br><span class=\"line\"><span class=\"keyword\">if</span> r &lt; 闪避 <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"comment\">--闪避 </span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> r &lt; 闪避+招架 <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">--招架</span></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> <span class=\"keyword\">elseif</span> r &lt; 闪避+招架+暴击 <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"comment\">--暴击</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>"},{"title":"静态链接过程","date":"2019-11-28T16:00:00.000Z","author":"yawei.zhang","_content":"\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [基本编译链接流程](#基本编译链接流程)\n- [静态链接过程概述](#静态链接过程概述)\n- [静态链接过程流程追踪和代码验证](#静态链接过程流程追踪和代码验证)\n  - [测试源代码](#测试源代码)\n  - [生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)](#生成汇编代码-从这里开始会有两个分支代码-non-pic-和-pic对照)\n    - [汇编代码 (相对位置版本)](#汇编代码-相对位置版本)\n    - [汇编代码 (位置无关版本)](#汇编代码-位置无关版本)\n  - [生成ELF的可重定位文件](#生成elf的可重定位文件)\n    - [可重定向文件和汇编指令 (相对位置版本)](#可重定向文件和汇编指令-相对位置版本)\n    - [可重定向文件和汇编指令 (位置无关版本)](#可重定向文件和汇编指令-位置无关版本)\n  - [链接为可执行文件(或者共享库)](#链接为可执行文件或者共享库)\n    - [可执行文件 (相对位置的非PIE(EXEC)版本)](#可执行文件-相对位置的非pieexec版本)\n    - [可执行文件 (相对位置的PIE(DYN)版本)](#可执行文件-相对位置的piedyn版本)\n    - [可执行文件 (位置无关的非PIE(EXEC)版本)](#可执行文件-位置无关的非pieexec版本)\n    - [可执行文件 (位置无关的PIE(DYN)版本)](#可执行文件-位置无关的piedyn版本)\n\n<!-- /TOC -->\n\n### 基本编译链接流程   \n* 编译并输出汇编代码  \n  * g++ -S lib.cpp -o lib.s \n* 打包成ELF可重定位文件 ELF TYPE= ET_REL  即.o文件  \n  * g++ -c lib.s -o lib.o \n* 链接到动态库或者可执行文件\n  * g++ lib.o -o a.out   \n  * g++ -shared lib.o -o a.out \n\n<!-- more -->\n\n### 静态链接过程概述  \n\n### 静态链接过程流程追踪和代码验证\n#### 测试源代码    \n``` C++\nint g_static_bss = 0;\nint g_static_data = 182;\nconst int g_static_text = 1987;\nint main_func(int a, int b)\n{\n   return a+b + g_static_text;\n}\n\n\nint main(int argc, char *argv[])\n{\n   int a = 0;\n   g_static_bss = argc;\n   a += main_func(g_static_bss, g_static_data);\n   return a;\n}\n```\n\n#### 生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)    \n\n在这段代码中 \n\n* g_static_bss  \n  * 为全局的符号(给链接器看到) \n  * 被放在.bss字段(未初始化数据段, Block Started by Symbol)中 \n  * 占用4个字节  类型是object 初始化为0   \n  * 4字节对齐  \n\n* g_static_data  \n  * 为全局的符号(给链接器看到) \n  * 被放在.data字段(数据段)中 \n  * 占用4个字节  类型是object 初始化为182   \n  * 4字节对齐  \n\n* _ZL13g_static_text  \n  * 为全局的符号(给链接器看到) \n  * 被放在.rodata字段(只读数据段)中 \n  * 占用4个字节  类型是object 初始化为1987   \n  * 4字节对齐  \n\n* _Z9main_funcii  \n  * 为全局的符号(给链接器看到) \n  * 被放在.text字段(代码段)中 \n  * 占用4个字节  类型是function  \n\n* main  \n  * 为全局的符号(给链接器看到) \n  * 被放在.text字段(代码段)中 \n  * 占用4个字节  类型是function  \n\n* GOTPCREL \n  * PC-REL是指的位置相对代码   \n  * 这里是指的走GOT表的位置相对代码   \n\n* 在下面的对照中  对于全局符号的访问有如下区别\n  * 访问全局对象时 PIC 版本会先从相对当前代码位置的GOT表中读取全局对象的地址到RAX 然后再读取其内容   \n  * 非PIC版本则直接用记录好的地址读取其内容  \n\n\n##### 汇编代码 (相对位置版本)\n``` ARMASM\n    .file    \"test.cpp\"\n    .globl    g_static_bss\n    .bss\n    .align 4\n    .type    g_static_bss, @object\n    .size    g_static_bss, 4\ng_static_bss:\n    .zero    4\n    .globl    g_static_data\n    .data\n    .align 4\n    .type    g_static_data, @object\n    .size    g_static_data, 4\ng_static_data:\n    .long    182\n    .section    .rodata\n    .align 4\n    .type    _ZL13g_static_text, @object\n    .size    _ZL13g_static_text, 4\n_ZL13g_static_text:\n    .long    1987\n    .text\n    .globl    _Z9main_funcii\n    .type    _Z9main_funcii, @function\n_Z9main_funcii:\n.LFB0:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %edx\n    movl    -8(%rbp), %eax\n    addl    %edx, %eax\n    addl    $1987, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    _Z9main_funcii, .-_Z9main_funcii\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movq    %rsi, -32(%rbp)\n    movl    $0, -4(%rbp)\n    movl    -20(%rbp), %eax\n    movl    %eax, g_static_bss(%rip)\n    movl    g_static_data(%rip), %edx\n    movl    g_static_bss(%rip), %eax\n    movl    %edx, %esi\n    movl    %eax, %edi\n    call    _Z9main_funcii\n    addl    %eax, -4(%rbp)\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    \"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"\n    .section    .note.GNU-stack,\"\",@progbits\n\n```\n\n##### 汇编代码 (位置无关版本) \n``` ARMASM\n    .file    \"test.cpp\"\n    .globl    g_static_bss\n    .bss\n    .align 4\n    .type    g_static_bss, @object\n    .size    g_static_bss, 4\ng_static_bss:\n    .zero    4\n    .globl    g_static_data\n    .data\n    .align 4\n    .type    g_static_data, @object\n    .size    g_static_data, 4\ng_static_data:\n    .long    182\n    .section    .rodata\n    .align 4\n    .type    _ZL13g_static_text, @object\n    .size    _ZL13g_static_text, 4\n_ZL13g_static_text:\n    .long    1987\n    .text\n    .globl    _Z9main_funcii\n    .type    _Z9main_funcii, @function\n_Z9main_funcii:\n.LFB0:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %edx\n    movl    -8(%rbp), %eax\n    addl    %edx, %eax\n    addl    $1987, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    _Z9main_funcii, .-_Z9main_funcii\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movq    %rsi, -32(%rbp)\n    movl    $0, -4(%rbp)\n    movq    g_static_bss@GOTPCREL(%rip), %rax\n    movl    -20(%rbp), %edx\n    movl    %edx, (%rax)\n    movq    g_static_data@GOTPCREL(%rip), %rax\n    movl    (%rax), %edx\n    movq    g_static_bss@GOTPCREL(%rip), %rax\n    movl    (%rax), %eax\n    movl    %edx, %esi\n    movl    %eax, %edi\n    call    _Z9main_funcii@PLT\n    addl    %eax, -4(%rbp)\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    \"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"\n    .section    .note.GNU-stack,\"\",@progbits\n```\n\n#### 生成ELF的可重定位文件\n\n* .rela.text 重定位section\n  * 包含了所有需要进行重定位的信息, 偏移量是相对于.text  类型则是注明了重定位的方式  \n\n\n* .rela.eh_frame 重定位section  \n* .symtab 符号表section  \n  * Value 标记了符号所在的偏移地址 \n  * SIZE 标记了代码或者变量占的大小  \n  * Ndx 如果不在本编译单元 类型为NOTYPE Ndx为UND   \n  * Bind 全局还是局部符号(是否链接器可见)  \n    * rodata的符号为local是因为直接被编译到了代码中 \n      * 例如g_static_text 1987 => ```add $0x7c3,%eax```\n\n* .rela.eh_frame Call Frame Information \n  * 提供了异常的Stack Unwind 支持  \n  * 这张表提供了'给定一个PC值, 可以查到上一个stack frame位置'\n  * Stack Unwind 指从最內层函数呼叫堆栈开始，找到最外层\n  \t```  \n    * _Unwind_Backtrace()   \n    * uw_frame_state_for() \n    * uw_update_context() \n    * uw_update_context_1()  \n    ```\n\n\n* PC32 的PC是指的 program counter   在本文的汇编中对应寄存器的RIP \n* PC32 在重定位类型中代表相对指令位置的重定位\n* PLT 则代表使用 过程链接表 进行重定位 (动态定位)   \n* GOT 是全局偏移表  \n* PGOT 是私有全局偏移表  \n\n在这个过程中 \n无论是PIC的PLT调用还是PC调用, 对于call 指令 他的操作数都是0 \n无论是GOTPCREL还是PC 对全局对象符号的访问中 操作数也都是0  \n在重定位节中标记了这些需要在链接过程中重建的具体位置和内容 \n\n\n##### 可重定向文件和汇编指令 (相对位置版本)\n``` ARMASM\n重定位节 '.rela.text' 位于偏移量 0x2c8 含有 4 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000034  000a00000002 R_X86_64_PC32     0000000000000000 g_static_bss - 4\n00000000003a  000b00000002 R_X86_64_PC32     0000000000000000 g_static_data - 4\n000000000040  000a00000002 R_X86_64_PC32     0000000000000000 g_static_bss - 4\n000000000049  000c00000002 R_X86_64_PC32     0000000000000000 _Z9main_funcii - 4\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x328 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 19\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 14 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    5 _ZL13g_static_text\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n    10: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 g_static_bss\n    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 g_static_data\n    12: 0000000000000000    25 FUNC    GLOBAL DEFAULT    1 _Z9main_funcii\n    13: 0000000000000019    60 FUNC    GLOBAL DEFAULT    1 main\n\n.text\n0000000000000000 <_Z9main_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   05 c3 07 00 00          add    $0x7c3,%eax\n  17:   5d                      pop    %rbp\n  18:   c3                      retq   \n\n0000000000000019 <main>:\n  19:   55                      push   %rbp\n  1a:   48 89 e5                mov    %rsp,%rbp\n  1d:   48 83 ec 20             sub    $0x20,%rsp\n  21:   89 7d ec                mov    %edi,-0x14(%rbp)\n  24:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  28:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  2f:   8b 45 ec                mov    -0x14(%rbp),%eax\n  32:   89 05 00 00 00 00       mov    %eax,0x0(%rip)        # 38 <main+0x1f>\n  38:   8b 15 00 00 00 00       mov    0x0(%rip),%edx        # 3e <main+0x25>\n  3e:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 44 <main+0x2b>\n  44:   89 d6                   mov    %edx,%esi\n  46:   89 c7                   mov    %eax,%edi\n  48:   e8 00 00 00 00          callq  4d <main+0x34>\n  4d:   01 45 fc                add    %eax,-0x4(%rbp)\n  50:   8b 45 fc                mov    -0x4(%rbp),%eax\n  53:   c9                      leaveq \n  54:   c3                      retq   \n```\n\n\n##### 可重定向文件和汇编指令 (位置无关版本)\n``` ARMASM\n重定位节 '.rela.text' 位于偏移量 0x300 含有 4 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000032  000a0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_bss - 4\n00000000003e  000b0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_data - 4\n000000000047  000a0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_bss - 4\n000000000052  000c00000004 R_X86_64_PLT32    0000000000000000 _Z9main_funcii - 4\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x360 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 19\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 15 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    5 _ZL13g_static_text\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n    10: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 g_static_bss\n    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 g_static_data\n    12: 0000000000000000    25 FUNC    GLOBAL DEFAULT    1 _Z9main_funcii\n    13: 0000000000000019    69 FUNC    GLOBAL DEFAULT    1 main\n    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n\n.text\n0000000000000000 <_Z9main_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   05 c3 07 00 00          add    $0x7c3,%eax\n  17:   5d                      pop    %rbp\n  18:   c3                      retq   \n\n0000000000000019 <main>:\n  19:   55                      push   %rbp\n  1a:   48 89 e5                mov    %rsp,%rbp\n  1d:   48 83 ec 20             sub    $0x20,%rsp\n  21:   89 7d ec                mov    %edi,-0x14(%rbp)\n  24:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  28:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  2f:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 36 <main+0x1d>\n  36:   8b 55 ec                mov    -0x14(%rbp),%edx\n  39:   89 10                   mov    %edx,(%rax)\n  3b:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 42 <main+0x29>\n  42:   8b 10                   mov    (%rax),%edx\n  44:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 4b <main+0x32>\n  4b:   8b 00                   mov    (%rax),%eax\n  4d:   89 d6                   mov    %edx,%esi\n  4f:   89 c7                   mov    %eax,%edi\n  51:   e8 00 00 00 00          callq  56 <main+0x3d>\n  56:   01 45 fc                add    %eax,-0x4(%rbp)\n  59:   8b 45 fc                mov    -0x4(%rbp),%eax\n  5c:   c9                      leaveq \n  5d:   c3                      retq \n```\n\n#### 链接为可执行文件(或者共享库)  \n\n在链接为目标文件时, 会合并处理每个目标文件, 生成plt代码 确定GOT(PGOT)的相对位置等  \n\n在相对位置的两个版本中均可以看到对全局符号的访问均正确填充了相对位移  \n\nPIE版本的区别主要是PIE使用了相对位置 连ELF类型都变成了DYN   \n非PIE版本则使用了绝对位置 \n测试代码没有调用外部函数符号 所以在PIC版本的汇编指令中并没有看到PLT指令\n\n##### 可执行文件 (相对位置的非PIE(EXEC)版本)\n``` ARMASM\n重定位节 '.rela.dyn' 位于偏移量 0x388 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000600ff0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000600ff8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 3 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\nSymbol table '.symtab' contains 65 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000400238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000400254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000400274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000400298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000004002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000400300     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000400360     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000400368     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000400388     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000004003b8     0 SECTION LOCAL  DEFAULT   10 \n    11: 00000000004003d0     0 SECTION LOCAL  DEFAULT   11 \n    12: 00000000004005a4     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000004005b0     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000004005b8     0 SECTION LOCAL  DEFAULT   14 \n    15: 00000000004005f8     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000600e18     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000600e20     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000600e28     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000600e30     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000600ff0     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000601000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000601018     0 SECTION LOCAL  DEFAULT   22 \n    23: 000000000060102c     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000400410     0 FUNC    LOCAL  DEFAULT   11 deregister_tm_clones\n    28: 0000000000400450     0 FUNC    LOCAL  DEFAULT   11 register_tm_clones\n    29: 0000000000400490     0 FUNC    LOCAL  DEFAULT   11 __do_global_dtors_aux\n    30: 000000000060102c     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000600e20     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000004004b0     0 FUNC    LOCAL  DEFAULT   11 frame_dummy\n    33: 0000000000600e18     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    35: 00000000004005b4     4 OBJECT  LOCAL  DEFAULT   13 _ZL13g_static_text\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    37: 00000000004006f8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    38: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    39: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    40: 00000000004005b8     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    41: 0000000000600e30     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    42: 0000000000600e20     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_end\n    43: 0000000000600e18     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_start\n    44: 0000000000601000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    45: 0000000000601028     4 OBJECT  GLOBAL DEFAULT   22 g_static_data\n    46: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000601018     0 NOTYPE  WEAK   DEFAULT   22 data_start\n    48: 00000000004005b0     4 OBJECT  GLOBAL DEFAULT   13 _IO_stdin_used\n    49: 00000000004004d6    25 FUNC    GLOBAL DEFAULT   11 _Z9main_funcii\n    50: 00000000004004ef    60 FUNC    GLOBAL DEFAULT   11 main\n    51: 0000000000601020     0 OBJECT  GLOBAL HIDDEN    22 __dso_handle\n    52: 00000000004005a4     0 FUNC    GLOBAL DEFAULT   12 _fini\n    53: 0000000000400400     2 FUNC    GLOBAL HIDDEN    11 _dl_relocate_static_pie\n    54: 00000000004003d0    43 FUNC    GLOBAL DEFAULT   11 _start\n    55: 00000000004003b8     0 FUNC    GLOBAL DEFAULT   10 _init\n    56: 0000000000601030     0 OBJECT  GLOBAL HIDDEN    22 __TMC_END__\n    57: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT   22 __data_start\n    58: 0000000000601038     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    59: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    60: 0000000000400530   101 FUNC    GLOBAL DEFAULT   11 __libc_csu_init\n    61: 0000000000601030     4 OBJECT  GLOBAL DEFAULT   23 g_static_bss\n    62: 00000000004005a0     2 FUNC    GLOBAL DEFAULT   11 __libc_csu_fini\n    63: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    64: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\n\n\n.text\n00000000004003b8 <_init>:\n  4003b8:       48 83 ec 08             sub    $0x8,%rsp\n  4003bc:       48 8b 05 35 0c 20 00    mov    0x200c35(%rip),%rax        # 600ff8 <__gmon_start__>\n  4003c3:       48 85 c0                test   %rax,%rax\n  4003c6:       74 02                   je     4003ca <_init+0x12>\n  4003c8:       ff d0                   callq  *%rax\n  4003ca:       48 83 c4 08             add    $0x8,%rsp\n  4003ce:       c3                      retq   \n\nDisassembly of section .text:\n\n00000000004003d0 <_start>:\n  4003d0:       31 ed                   xor    %ebp,%ebp\n  4003d2:       49 89 d1                mov    %rdx,%r9\n  4003d5:       5e                      pop    %rsi\n  4003d6:       48 89 e2                mov    %rsp,%rdx\n  4003d9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003dd:       50                      push   %rax\n  4003de:       54                      push   %rsp\n  4003df:       49 c7 c0 a0 05 40 00    mov    $0x4005a0,%r8\n  4003e6:       48 c7 c1 30 05 40 00    mov    $0x400530,%rcx\n  4003ed:       48 c7 c7 ef 04 40 00    mov    $0x4004ef,%rdi\n  4003f4:       ff 15 f6 0b 20 00       callq  *0x200bf6(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003fa:       f4                      hlt    \n  4003fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400400 <_dl_relocate_static_pie>:\n  400400:       f3 c3                   repz retq \n  400402:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  400409:       00 00 00 \n  40040c:       0f 1f 40 00             nopl   0x0(%rax)\n\n0000000000400410 <deregister_tm_clones>:\n  400410:       b8 37 10 60 00          mov    $0x601037,%eax\n  400415:       55                      push   %rbp\n  400416:       48 2d 30 10 60 00       sub    $0x601030,%rax\n  40041c:       48 83 f8 0e             cmp    $0xe,%rax\n  400420:       48 89 e5                mov    %rsp,%rbp\n  400423:       76 1b                   jbe    400440 <deregister_tm_clones+0x30>\n  400425:       b8 00 00 00 00          mov    $0x0,%eax\n  40042a:       48 85 c0                test   %rax,%rax\n  40042d:       74 11                   je     400440 <deregister_tm_clones+0x30>\n  40042f:       5d                      pop    %rbp\n  400430:       bf 30 10 60 00          mov    $0x601030,%edi\n  400435:       ff e0                   jmpq   *%rax\n  400437:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n  40043e:       00 00 \n  400440:       5d                      pop    %rbp\n  400441:       c3                      retq   \n  400442:       0f 1f 40 00             nopl   0x0(%rax)\n  400446:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40044d:       00 00 00 \n\n0000000000400450 <register_tm_clones>:\n  400450:       be 30 10 60 00          mov    $0x601030,%esi\n  400455:       55                      push   %rbp\n  400456:       48 81 ee 30 10 60 00    sub    $0x601030,%rsi\n  40045d:       48 c1 fe 03             sar    $0x3,%rsi\n  400461:       48 89 e5                mov    %rsp,%rbp\n  400464:       48 89 f0                mov    %rsi,%rax\n  400467:       48 c1 e8 3f             shr    $0x3f,%rax\n  40046b:       48 01 c6                add    %rax,%rsi\n  40046e:       48 d1 fe                sar    %rsi\n  400471:       74 15                   je     400488 <register_tm_clones+0x38>\n  400473:       b8 00 00 00 00          mov    $0x0,%eax\n  400478:       48 85 c0                test   %rax,%rax\n  40047b:       74 0b                   je     400488 <register_tm_clones+0x38>\n  40047d:       5d                      pop    %rbp\n  40047e:       bf 30 10 60 00          mov    $0x601030,%edi\n  400483:       ff e0                   jmpq   *%rax\n  400485:       0f 1f 00                nopl   (%rax)\n  400488:       5d                      pop    %rbp\n  400489:       c3                      retq   \n  40048a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n\n0000000000400490 <__do_global_dtors_aux>:\n  400490:       80 3d 95 0b 20 00 00    cmpb   $0x0,0x200b95(%rip)        # 60102c <_edata>\n  400497:       75 11                   jne    4004aa <__do_global_dtors_aux+0x1a>\n  400499:       55                      push   %rbp\n  40049a:       48 89 e5                mov    %rsp,%rbp\n  40049d:       e8 6e ff ff ff          callq  400410 <deregister_tm_clones>\n  4004a2:       5d                      pop    %rbp\n  4004a3:       c6 05 82 0b 20 00 01    movb   $0x1,0x200b82(%rip)        # 60102c <_edata>\n  4004aa:       f3 c3                   repz retq \n  4004ac:       0f 1f 40 00             nopl   0x0(%rax)\n\n00000000004004b0 <frame_dummy>:\n  4004b0:       bf 28 0e 60 00          mov    $0x600e28,%edi\n  4004b5:       48 83 3f 00             cmpq   $0x0,(%rdi)\n  4004b9:       75 05                   jne    4004c0 <frame_dummy+0x10>\n  4004bb:       eb 93                   jmp    400450 <register_tm_clones>\n  4004bd:       0f 1f 00                nopl   (%rax)\n  4004c0:       b8 00 00 00 00          mov    $0x0,%eax\n  4004c5:       48 85 c0                test   %rax,%rax\n  4004c8:       74 f1                   je     4004bb <frame_dummy+0xb>\n  4004ca:       55                      push   %rbp\n  4004cb:       48 89 e5                mov    %rsp,%rbp\n  4004ce:       ff d0                   callq  *%rax\n  4004d0:       5d                      pop    %rbp\n  4004d1:       e9 7a ff ff ff          jmpq   400450 <register_tm_clones>\n\n00000000004004d6 <_Z9main_funcii>:\n  4004d6:       55                      push   %rbp\n  4004d7:       48 89 e5                mov    %rsp,%rbp\n  4004da:       89 7d fc                mov    %edi,-0x4(%rbp)\n  4004dd:       89 75 f8                mov    %esi,-0x8(%rbp)\n  4004e0:       8b 55 fc                mov    -0x4(%rbp),%edx\n  4004e3:       8b 45 f8                mov    -0x8(%rbp),%eax\n  4004e6:       01 d0                   add    %edx,%eax\n  4004e8:       05 c3 07 00 00          add    $0x7c3,%eax\n  4004ed:       5d                      pop    %rbp\n  4004ee:       c3                      retq   \n\n00000000004004ef <main>:\n  4004ef:       55                      push   %rbp\n  4004f0:       48 89 e5                mov    %rsp,%rbp\n  4004f3:       48 83 ec 20             sub    $0x20,%rsp\n  4004f7:       89 7d ec                mov    %edi,-0x14(%rbp)\n  4004fa:       48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  4004fe:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  400505:       8b 45 ec                mov    -0x14(%rbp),%eax\n  400508:       89 05 22 0b 20 00       mov    %eax,0x200b22(%rip)        # 601030 <__TMC_END__>\n  40050e:       8b 15 14 0b 20 00       mov    0x200b14(%rip),%edx        # 601028 <g_static_data>\n  400514:       8b 05 16 0b 20 00       mov    0x200b16(%rip),%eax        # 601030 <__TMC_END__>\n  40051a:       89 d6                   mov    %edx,%esi\n  40051c:       89 c7                   mov    %eax,%edi\n  40051e:       e8 b3 ff ff ff          callq  4004d6 <_Z9main_funcii>\n  400523:       01 45 fc                add    %eax,-0x4(%rbp)\n  400526:       8b 45 fc                mov    -0x4(%rbp),%eax\n  400529:       c9                      leaveq \n  40052a:       c3                      retq   \n  40052b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400530 <__libc_csu_init>:\n  400530:       41 57                   push   %r15\n  400532:       41 56                   push   %r14\n  400534:       49 89 d7                mov    %rdx,%r15\n  400537:       41 55                   push   %r13\n  400539:       41 54                   push   %r12\n  40053b:       4c 8d 25 d6 08 20 00    lea    0x2008d6(%rip),%r12        # 600e18 <__frame_dummy_init_array_entry>\n  400542:       55                      push   %rbp\n  400543:       48 8d 2d d6 08 20 00    lea    0x2008d6(%rip),%rbp        # 600e20 <__init_array_end>\n  40054a:       53                      push   %rbx\n  40054b:       41 89 fd                mov    %edi,%r13d\n  40054e:       49 89 f6                mov    %rsi,%r14\n  400551:       4c 29 e5                sub    %r12,%rbp\n  400554:       48 83 ec 08             sub    $0x8,%rsp\n  400558:       48 c1 fd 03             sar    $0x3,%rbp\n  40055c:       e8 57 fe ff ff          callq  4003b8 <_init>\n  400561:       48 85 ed                test   %rbp,%rbp\n  400564:       74 20                   je     400586 <__libc_csu_init+0x56>\n  400566:       31 db                   xor    %ebx,%ebx\n  400568:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n  40056f:       00 \n  400570:       4c 89 fa                mov    %r15,%rdx\n  400573:       4c 89 f6                mov    %r14,%rsi\n  400576:       44 89 ef                mov    %r13d,%edi\n  400579:       41 ff 14 dc             callq  *(%r12,%rbx,8)\n  40057d:       48 83 c3 01             add    $0x1,%rbx\n  400581:       48 39 dd                cmp    %rbx,%rbp\n  400584:       75 ea                   jne    400570 <__libc_csu_init+0x40>\n  400586:       48 83 c4 08             add    $0x8,%rsp\n  40058a:       5b                      pop    %rbx\n  40058b:       5d                      pop    %rbp\n  40058c:       41 5c                   pop    %r12\n  40058e:       41 5d                   pop    %r13\n  400590:       41 5e                   pop    %r14\n  400592:       41 5f                   pop    %r15\n  400594:       c3                      retq   \n  400595:       90                      nop\n  400596:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40059d:       00 00 00 \n\n00000000004005a0 <__libc_csu_fini>:\n  4005a0:       f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n00000000004005a4 <_fini>:\n  4005a4:       48 83 ec 08             sub    $0x8,%rsp\n  4005a8:       48 83 c4 08             add    $0x8,%rsp\n  4005ac:       c3                      retq  \n```\n\n##### 可执行文件 (相对位置的PIE(DYN)版本)\n``` ARMASM\n\n重定位节 '.rela.dyn' 位于偏移量 0x448 含有 9 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200dd8  000000000008 R_X86_64_RELATIVE                    660\n000000200de0  000000000008 R_X86_64_RELATIVE                    620\n000000201020  000000000008 R_X86_64_RELATIVE                    201020\n000000200fd0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fd8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     6: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nSymbol table '.symtab' contains 70 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000000254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000000002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000360     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000418     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000428     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000448     0 SECTION LOCAL  DEFAULT    9 \n    10: 0000000000000520     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000540     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000550     0 SECTION LOCAL  DEFAULT   12 \n    13: 0000000000000560     0 SECTION LOCAL  DEFAULT   13 \n    14: 0000000000000764     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000000770     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000000778     0 SECTION LOCAL  DEFAULT   16 \n    17: 00000000000007c0     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dd8     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200de0     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200de8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000200df0     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000200fd0     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201000     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000201018     0 SECTION LOCAL  DEFAULT   24 \n    25: 000000000020102c     0 SECTION LOCAL  DEFAULT   25 \n    26: 0000000000000000     0 SECTION LOCAL  DEFAULT   26 \n    27: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    28: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_LIST__\n    29: 0000000000000590     0 FUNC    LOCAL  DEFAULT   13 deregister_tm_clones\n    30: 00000000000005d0     0 FUNC    LOCAL  DEFAULT   13 register_tm_clones\n    31: 0000000000000620     0 FUNC    LOCAL  DEFAULT   13 __do_global_dtors_aux\n    32: 000000000020102c     1 OBJECT  LOCAL  DEFAULT   25 completed.6972\n    33: 0000000000200de0     0 OBJECT  LOCAL  DEFAULT   19 __do_global_dtors_aux_fin\n    34: 0000000000000660     0 FUNC    LOCAL  DEFAULT   13 frame_dummy\n    35: 0000000000200dd8     0 OBJECT  LOCAL  DEFAULT   18 __frame_dummy_init_array_\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    37: 0000000000000774     4 OBJECT  LOCAL  DEFAULT   15 _ZL13g_static_text\n    38: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    39: 00000000000008e8     0 OBJECT  LOCAL  DEFAULT   17 __FRAME_END__\n    40: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_END__\n    41: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    42: 0000000000000778     0 NOTYPE  LOCAL  DEFAULT   16 __GNU_EH_FRAME_HDR\n    43: 0000000000200df0     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n    44: 0000000000200de0     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_end\n    45: 0000000000200dd8     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_start\n    46: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n    47: 0000000000201028     4 OBJECT  GLOBAL DEFAULT   24 g_static_data\n    48: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n    49: 0000000000201018     0 NOTYPE  WEAK   DEFAULT   24 data_start\n    50: 0000000000000770     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used\n    51: 0000000000000690    25 FUNC    GLOBAL DEFAULT   13 _Z9main_funcii\n    52: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    53: 00000000000006a9    60 FUNC    GLOBAL DEFAULT   13 main\n    54: 0000000000201020     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n    55: 0000000000000764     0 FUNC    GLOBAL DEFAULT   14 _fini\n    56: 0000000000000560    43 FUNC    GLOBAL DEFAULT   13 _start\n    57: 0000000000000520     0 FUNC    GLOBAL DEFAULT   10 _init\n    58: 0000000000201030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    60: 0000000000201018     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n    61: 0000000000201038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n    62: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n    63: 00000000000006f0   101 FUNC    GLOBAL DEFAULT   13 __libc_csu_init\n    64: 0000000000201030     4 OBJECT  GLOBAL DEFAULT   25 g_static_bss\n    65: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    66: 0000000000000760     2 FUNC    GLOBAL DEFAULT   13 __libc_csu_fini\n    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    68: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    69: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\n.text\n0000000000000520 <_init>:\n 520:   48 83 ec 08             sub    $0x8,%rsp\n 524:   48 8b 05 c5 0a 20 00    mov    0x200ac5(%rip),%rax        # 200ff0 <__gmon_start__>\n 52b:   48 85 c0                test   %rax,%rax\n 52e:   74 02                   je     532 <_init+0x12>\n 530:   ff d0                   callq  *%rax\n 532:   48 83 c4 08             add    $0x8,%rsp\n 536:   c3                      retq   \n\nDisassembly of section .plt:\n\n0000000000000540 <.plt>:\n 540:   ff 35 c2 0a 20 00       pushq  0x200ac2(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 546:   ff 25 c4 0a 20 00       jmpq   *0x200ac4(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 54c:   0f 1f 40 00             nopl   0x0(%rax)\n\nDisassembly of section .plt.got:\n\n0000000000000550 <.plt.got>:\n 550:   ff 25 7a 0a 20 00       jmpq   *0x200a7a(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 556:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000560 <_start>:\n 560:   31 ed                   xor    %ebp,%ebp\n 562:   49 89 d1                mov    %rdx,%r9\n 565:   5e                      pop    %rsi\n 566:   48 89 e2                mov    %rsp,%rdx\n 569:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n 56d:   50                      push   %rax\n 56e:   54                      push   %rsp\n 56f:   4c 8d 05 ea 01 00 00    lea    0x1ea(%rip),%r8        # 760 <__libc_csu_fini>\n 576:   48 8d 0d 73 01 00 00    lea    0x173(%rip),%rcx        # 6f0 <__libc_csu_init>\n 57d:   48 8d 3d 25 01 00 00    lea    0x125(%rip),%rdi        # 6a9 <main>\n 584:   ff 15 5e 0a 20 00       callq  *0x200a5e(%rip)        # 200fe8 <__libc_start_main@GLIBC_2.2.5>\n 58a:   f4                      hlt    \n 58b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000000590 <deregister_tm_clones>:\n 590:   48 8d 3d 99 0a 20 00    lea    0x200a99(%rip),%rdi        # 201030 <__TMC_END__>\n 597:   48 8d 05 99 0a 20 00    lea    0x200a99(%rip),%rax        # 201037 <__TMC_END__+0x7>\n 59e:   55                      push   %rbp\n 59f:   48 29 f8                sub    %rdi,%rax\n 5a2:   48 89 e5                mov    %rsp,%rbp\n 5a5:   48 83 f8 0e             cmp    $0xe,%rax\n 5a9:   76 15                   jbe    5c0 <deregister_tm_clones+0x30>\n 5ab:   48 8b 05 2e 0a 20 00    mov    0x200a2e(%rip),%rax        # 200fe0 <_ITM_deregisterTMCloneTable>\n 5b2:   48 85 c0                test   %rax,%rax\n 5b5:   74 09                   je     5c0 <deregister_tm_clones+0x30>\n 5b7:   5d                      pop    %rbp\n 5b8:   ff e0                   jmpq   *%rax\n 5ba:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 5c0:   5d                      pop    %rbp\n 5c1:   c3                      retq   \n 5c2:   0f 1f 40 00             nopl   0x0(%rax)\n 5c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 5cd:   00 00 00 \n\n00000000000005d0 <register_tm_clones>:\n 5d0:   48 8d 3d 59 0a 20 00    lea    0x200a59(%rip),%rdi        # 201030 <__TMC_END__>\n 5d7:   48 8d 35 52 0a 20 00    lea    0x200a52(%rip),%rsi        # 201030 <__TMC_END__>\n 5de:   55                      push   %rbp\n 5df:   48 29 fe                sub    %rdi,%rsi\n 5e2:   48 89 e5                mov    %rsp,%rbp\n 5e5:   48 c1 fe 03             sar    $0x3,%rsi\n 5e9:   48 89 f0                mov    %rsi,%rax\n 5ec:   48 c1 e8 3f             shr    $0x3f,%rax\n 5f0:   48 01 c6                add    %rax,%rsi\n 5f3:   48 d1 fe                sar    %rsi\n 5f6:   74 18                   je     610 <register_tm_clones+0x40>\n 5f8:   48 8b 05 f9 09 20 00    mov    0x2009f9(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 5ff:   48 85 c0                test   %rax,%rax\n 602:   74 0c                   je     610 <register_tm_clones+0x40>\n 604:   5d                      pop    %rbp\n 605:   ff e0                   jmpq   *%rax\n 607:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 60e:   00 00 \n 610:   5d                      pop    %rbp\n 611:   c3                      retq   \n 612:   0f 1f 40 00             nopl   0x0(%rax)\n 616:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 61d:   00 00 00 \n\n0000000000000620 <__do_global_dtors_aux>:\n 620:   80 3d 05 0a 20 00 00    cmpb   $0x0,0x200a05(%rip)        # 20102c <_edata>\n 627:   75 27                   jne    650 <__do_global_dtors_aux+0x30>\n 629:   48 83 3d 9f 09 20 00    cmpq   $0x0,0x20099f(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 630:   00 \n 631:   55                      push   %rbp\n 632:   48 89 e5                mov    %rsp,%rbp\n 635:   74 0c                   je     643 <__do_global_dtors_aux+0x23>\n 637:   48 8b 3d e2 09 20 00    mov    0x2009e2(%rip),%rdi        # 201020 <__dso_handle>\n 63e:   e8 0d ff ff ff          callq  550 <.plt.got>\n 643:   e8 48 ff ff ff          callq  590 <deregister_tm_clones>\n 648:   5d                      pop    %rbp\n 649:   c6 05 dc 09 20 00 01    movb   $0x1,0x2009dc(%rip)        # 20102c <_edata>\n 650:   f3 c3                   repz retq \n 652:   0f 1f 40 00             nopl   0x0(%rax)\n 656:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 65d:   00 00 00 \n\n0000000000000660 <frame_dummy>:\n 660:   48 8d 3d 81 07 20 00    lea    0x200781(%rip),%rdi        # 200de8 <__JCR_END__>\n 667:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 66b:   75 0b                   jne    678 <frame_dummy+0x18>\n 66d:   e9 5e ff ff ff          jmpq   5d0 <register_tm_clones>\n 672:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 678:   48 8b 05 59 09 20 00    mov    0x200959(%rip),%rax        # 200fd8 <_Jv_RegisterClasses>\n 67f:   48 85 c0                test   %rax,%rax\n 682:   74 e9                   je     66d <frame_dummy+0xd>\n 684:   55                      push   %rbp\n 685:   48 89 e5                mov    %rsp,%rbp\n 688:   ff d0                   callq  *%rax\n 68a:   5d                      pop    %rbp\n 68b:   e9 40 ff ff ff          jmpq   5d0 <register_tm_clones>\n\n0000000000000690 <_Z9main_funcii>:\n 690:   55                      push   %rbp\n 691:   48 89 e5                mov    %rsp,%rbp\n 694:   89 7d fc                mov    %edi,-0x4(%rbp)\n 697:   89 75 f8                mov    %esi,-0x8(%rbp)\n 69a:   8b 55 fc                mov    -0x4(%rbp),%edx\n 69d:   8b 45 f8                mov    -0x8(%rbp),%eax\n 6a0:   01 d0                   add    %edx,%eax\n 6a2:   05 c3 07 00 00          add    $0x7c3,%eax\n 6a7:   5d                      pop    %rbp\n 6a8:   c3                      retq   \n\n00000000000006a9 <main>:\n 6a9:   55                      push   %rbp\n 6aa:   48 89 e5                mov    %rsp,%rbp\n 6ad:   48 83 ec 20             sub    $0x20,%rsp\n 6b1:   89 7d ec                mov    %edi,-0x14(%rbp)\n 6b4:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n 6b8:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n 6bf:   8b 45 ec                mov    -0x14(%rbp),%eax\n 6c2:   89 05 68 09 20 00       mov    %eax,0x200968(%rip)        # 201030 <__TMC_END__>\n 6c8:   8b 15 5a 09 20 00       mov    0x20095a(%rip),%edx        # 201028 <g_static_data>\n 6ce:   8b 05 5c 09 20 00       mov    0x20095c(%rip),%eax        # 201030 <__TMC_END__>\n 6d4:   89 d6                   mov    %edx,%esi\n 6d6:   89 c7                   mov    %eax,%edi\n 6d8:   e8 b3 ff ff ff          callq  690 <_Z9main_funcii>\n 6dd:   01 45 fc                add    %eax,-0x4(%rbp)\n 6e0:   8b 45 fc                mov    -0x4(%rbp),%eax\n 6e3:   c9                      leaveq \n 6e4:   c3                      retq   \n 6e5:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 6ec:   00 00 00 \n 6ef:   90                      nop\n\n00000000000006f0 <__libc_csu_init>:\n 6f0:   41 57                   push   %r15\n 6f2:   41 56                   push   %r14\n 6f4:   49 89 d7                mov    %rdx,%r15\n 6f7:   41 55                   push   %r13\n 6f9:   41 54                   push   %r12\n 6fb:   4c 8d 25 d6 06 20 00    lea    0x2006d6(%rip),%r12        # 200dd8 <__frame_dummy_init_array_entry>\n 702:   55                      push   %rbp\n 703:   48 8d 2d d6 06 20 00    lea    0x2006d6(%rip),%rbp        # 200de0 <__init_array_end>\n 70a:   53                      push   %rbx\n 70b:   41 89 fd                mov    %edi,%r13d\n 70e:   49 89 f6                mov    %rsi,%r14\n 711:   4c 29 e5                sub    %r12,%rbp\n 714:   48 83 ec 08             sub    $0x8,%rsp\n 718:   48 c1 fd 03             sar    $0x3,%rbp\n 71c:   e8 ff fd ff ff          callq  520 <_init>\n 721:   48 85 ed                test   %rbp,%rbp\n 724:   74 20                   je     746 <__libc_csu_init+0x56>\n 726:   31 db                   xor    %ebx,%ebx\n 728:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n 72f:   00 \n 730:   4c 89 fa                mov    %r15,%rdx\n 733:   4c 89 f6                mov    %r14,%rsi\n 736:   44 89 ef                mov    %r13d,%edi\n 739:   41 ff 14 dc             callq  *(%r12,%rbx,8)\n 73d:   48 83 c3 01             add    $0x1,%rbx\n 741:   48 39 dd                cmp    %rbx,%rbp\n 744:   75 ea                   jne    730 <__libc_csu_init+0x40>\n 746:   48 83 c4 08             add    $0x8,%rsp\n 74a:   5b                      pop    %rbx\n 74b:   5d                      pop    %rbp\n 74c:   41 5c                   pop    %r12\n 74e:   41 5d                   pop    %r13\n 750:   41 5e                   pop    %r14\n 752:   41 5f                   pop    %r15\n 754:   c3                      retq   \n 755:   90                      nop\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <__libc_csu_fini>:\n 760:   f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n0000000000000764 <_fini>:\n 764:   48 83 ec 08             sub    $0x8,%rsp\n 768:   48 83 c4 08             add    $0x8,%rsp\n 76c:   c3                      retq   \n```\n\n\n##### 可执行文件 (位置无关的非PIE(EXEC)版本)  \n\n``` ARMASM\nDynamic section at offset 0xe30 contains 23 entries:\n  标记        类型                         名称/值\n 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]\n 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]\n 0x000000000000000c (INIT)               0x4003b8\n 0x000000000000000d (FINI)               0x4005b4\n 0x0000000000000019 (INIT_ARRAY)         0x600e18\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n 0x000000000000001a (FINI_ARRAY)         0x600e20\n 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n 0x000000006ffffef5 (GNU_HASH)           0x400298\n 0x0000000000000005 (STRTAB)             0x400300\n 0x0000000000000006 (SYMTAB)             0x4002b8\n 0x000000000000000a (STRSZ)              95 (bytes)\n 0x000000000000000b (SYMENT)             24 (bytes)\n 0x0000000000000015 (DEBUG)              0x0\n 0x0000000000000007 (RELA)               0x400388\n 0x0000000000000008 (RELASZ)             48 (bytes)\n 0x0000000000000009 (RELAENT)            24 (bytes)\n 0x000000006ffffffe (VERNEED)            0x400368\n 0x000000006fffffff (VERNEEDNUM)         1\n 0x000000006ffffff0 (VERSYM)             0x400360\n 0x0000000000000000 (NULL)               0x0\n\n重定位节 '.rela.dyn' 位于偏移量 0x388 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000600ff0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000600ff8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 3 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\nSymbol table '.symtab' contains 65 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000400238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000400254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000400274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000400298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000004002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000400300     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000400360     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000400368     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000400388     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000004003b8     0 SECTION LOCAL  DEFAULT   10 \n    11: 00000000004003d0     0 SECTION LOCAL  DEFAULT   11 \n    12: 00000000004005b4     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000004005c0     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000004005c8     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000400608     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000600e18     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000600e20     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000600e28     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000600e30     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000600ff0     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000601000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000601018     0 SECTION LOCAL  DEFAULT   22 \n    23: 000000000060102c     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000400410     0 FUNC    LOCAL  DEFAULT   11 deregister_tm_clones\n    28: 0000000000400450     0 FUNC    LOCAL  DEFAULT   11 register_tm_clones\n    29: 0000000000400490     0 FUNC    LOCAL  DEFAULT   11 __do_global_dtors_aux\n    30: 000000000060102c     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000600e20     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000004004b0     0 FUNC    LOCAL  DEFAULT   11 frame_dummy\n    33: 0000000000600e18     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    35: 00000000004005c4     4 OBJECT  LOCAL  DEFAULT   13 _ZL13g_static_text\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    37: 0000000000400708     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    38: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    39: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    40: 00000000004005c8     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    41: 0000000000600e30     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    42: 0000000000600e20     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_end\n    43: 0000000000600e18     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_start\n    44: 0000000000601000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    45: 0000000000601028     4 OBJECT  GLOBAL DEFAULT   22 g_static_data\n    46: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000601018     0 NOTYPE  WEAK   DEFAULT   22 data_start\n    48: 00000000004005c0     4 OBJECT  GLOBAL DEFAULT   13 _IO_stdin_used\n    49: 00000000004004d6    25 FUNC    GLOBAL DEFAULT   11 _Z9main_funcii\n    50: 00000000004004ef    69 FUNC    GLOBAL DEFAULT   11 main\n    51: 0000000000601020     0 OBJECT  GLOBAL HIDDEN    22 __dso_handle\n    52: 00000000004005b4     0 FUNC    GLOBAL DEFAULT   12 _fini\n    53: 0000000000400400     2 FUNC    GLOBAL HIDDEN    11 _dl_relocate_static_pie\n    54: 00000000004003d0    43 FUNC    GLOBAL DEFAULT   11 _start\n    55: 00000000004003b8     0 FUNC    GLOBAL DEFAULT   10 _init\n    56: 0000000000601030     0 OBJECT  GLOBAL HIDDEN    22 __TMC_END__\n    57: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT   22 __data_start\n    58: 0000000000601038     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    59: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    60: 0000000000400540   101 FUNC    GLOBAL DEFAULT   11 __libc_csu_init\n    61: 0000000000601030     4 OBJECT  GLOBAL DEFAULT   23 g_static_bss\n    62: 00000000004005b0     2 FUNC    GLOBAL DEFAULT   11 __libc_csu_fini\n    63: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    64: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\n\n.text\n00000000004003b8 <_init>:\n  4003b8:       48 83 ec 08             sub    $0x8,%rsp\n  4003bc:       48 8b 05 35 0c 20 00    mov    0x200c35(%rip),%rax        # 600ff8 <__gmon_start__>\n  4003c3:       48 85 c0                test   %rax,%rax\n  4003c6:       74 02                   je     4003ca <_init+0x12>\n  4003c8:       ff d0                   callq  *%rax\n  4003ca:       48 83 c4 08             add    $0x8,%rsp\n  4003ce:       c3                      retq   \n\nDisassembly of section .text:\n\n00000000004003d0 <_start>:\n  4003d0:       31 ed                   xor    %ebp,%ebp\n  4003d2:       49 89 d1                mov    %rdx,%r9\n  4003d5:       5e                      pop    %rsi\n  4003d6:       48 89 e2                mov    %rsp,%rdx\n  4003d9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003dd:       50                      push   %rax\n  4003de:       54                      push   %rsp\n  4003df:       49 c7 c0 b0 05 40 00    mov    $0x4005b0,%r8\n  4003e6:       48 c7 c1 40 05 40 00    mov    $0x400540,%rcx\n  4003ed:       48 c7 c7 ef 04 40 00    mov    $0x4004ef,%rdi\n  4003f4:       ff 15 f6 0b 20 00       callq  *0x200bf6(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003fa:       f4                      hlt    \n  4003fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400400 <_dl_relocate_static_pie>:\n  400400:       f3 c3                   repz retq \n  400402:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  400409:       00 00 00 \n  40040c:       0f 1f 40 00             nopl   0x0(%rax)\n\n0000000000400410 <deregister_tm_clones>:\n  400410:       b8 37 10 60 00          mov    $0x601037,%eax\n  400415:       55                      push   %rbp\n  400416:       48 2d 30 10 60 00       sub    $0x601030,%rax\n  40041c:       48 83 f8 0e             cmp    $0xe,%rax\n  400420:       48 89 e5                mov    %rsp,%rbp\n  400423:       76 1b                   jbe    400440 <deregister_tm_clones+0x30>\n  400425:       b8 00 00 00 00          mov    $0x0,%eax\n  40042a:       48 85 c0                test   %rax,%rax\n  40042d:       74 11                   je     400440 <deregister_tm_clones+0x30>\n  40042f:       5d                      pop    %rbp\n  400430:       bf 30 10 60 00          mov    $0x601030,%edi\n  400435:       ff e0                   jmpq   *%rax\n  400437:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n  40043e:       00 00 \n  400440:       5d                      pop    %rbp\n  400441:       c3                      retq   \n  400442:       0f 1f 40 00             nopl   0x0(%rax)\n  400446:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40044d:       00 00 00 \n\n0000000000400450 <register_tm_clones>:\n  400450:       be 30 10 60 00          mov    $0x601030,%esi\n  400455:       55                      push   %rbp\n  400456:       48 81 ee 30 10 60 00    sub    $0x601030,%rsi\n  40045d:       48 c1 fe 03             sar    $0x3,%rsi\n  400461:       48 89 e5                mov    %rsp,%rbp\n  400464:       48 89 f0                mov    %rsi,%rax\n  400467:       48 c1 e8 3f             shr    $0x3f,%rax\n  40046b:       48 01 c6                add    %rax,%rsi\n  40046e:       48 d1 fe                sar    %rsi\n  400471:       74 15                   je     400488 <register_tm_clones+0x38>\n  400473:       b8 00 00 00 00          mov    $0x0,%eax\n  400478:       48 85 c0                test   %rax,%rax\n  40047b:       74 0b                   je     400488 <register_tm_clones+0x38>\n  40047d:       5d                      pop    %rbp\n  40047e:       bf 30 10 60 00          mov    $0x601030,%edi\n  400483:       ff e0                   jmpq   *%rax\n  400485:       0f 1f 00                nopl   (%rax)\n  400488:       5d                      pop    %rbp\n  400489:       c3                      retq   \n  40048a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n\n0000000000400490 <__do_global_dtors_aux>:\n  400490:       80 3d 95 0b 20 00 00    cmpb   $0x0,0x200b95(%rip)        # 60102c <_edata>\n  400497:       75 11                   jne    4004aa <__do_global_dtors_aux+0x1a>\n  400499:       55                      push   %rbp\n  40049a:       48 89 e5                mov    %rsp,%rbp\n  40049d:       e8 6e ff ff ff          callq  400410 <deregister_tm_clones>\n  4004a2:       5d                      pop    %rbp\n  4004a3:       c6 05 82 0b 20 00 01    movb   $0x1,0x200b82(%rip)        # 60102c <_edata>\n  4004aa:       f3 c3                   repz retq \n  4004ac:       0f 1f 40 00             nopl   0x0(%rax)\n\n00000000004004b0 <frame_dummy>:\n  4004b0:       bf 28 0e 60 00          mov    $0x600e28,%edi\n  4004b5:       48 83 3f 00             cmpq   $0x0,(%rdi)\n  4004b9:       75 05                   jne    4004c0 <frame_dummy+0x10>\n  4004bb:       eb 93                   jmp    400450 <register_tm_clones>\n  4004bd:       0f 1f 00                nopl   (%rax)\n  4004c0:       b8 00 00 00 00          mov    $0x0,%eax\n  4004c5:       48 85 c0                test   %rax,%rax\n  4004c8:       74 f1                   je     4004bb <frame_dummy+0xb>\n  4004ca:       55                      push   %rbp\n  4004cb:       48 89 e5                mov    %rsp,%rbp\n  4004ce:       ff d0                   callq  *%rax\n  4004d0:       5d                      pop    %rbp\n  4004d1:       e9 7a ff ff ff          jmpq   400450 <register_tm_clones>\n\n00000000004004d6 <_Z9main_funcii>:\n  4004d6:       55                      push   %rbp\n  4004d7:       48 89 e5                mov    %rsp,%rbp\n  4004da:       89 7d fc                mov    %edi,-0x4(%rbp)\n  4004dd:       89 75 f8                mov    %esi,-0x8(%rbp)\n  4004e0:       8b 55 fc                mov    -0x4(%rbp),%edx\n  4004e3:       8b 45 f8                mov    -0x8(%rbp),%eax\n  4004e6:       01 d0                   add    %edx,%eax\n  4004e8:       05 c3 07 00 00          add    $0x7c3,%eax\n  4004ed:       5d                      pop    %rbp\n  4004ee:       c3                      retq   \n\n00000000004004ef <main>:\n  4004ef:       55                      push   %rbp\n  4004f0:       48 89 e5                mov    %rsp,%rbp\n  4004f3:       48 83 ec 20             sub    $0x20,%rsp\n  4004f7:       89 7d ec                mov    %edi,-0x14(%rbp)\n  4004fa:       48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  4004fe:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  400505:       48 c7 c0 30 10 60 00    mov    $0x601030,%rax\n  40050c:       8b 55 ec                mov    -0x14(%rbp),%edx\n  40050f:       89 10                   mov    %edx,(%rax)\n  400511:       48 c7 c0 28 10 60 00    mov    $0x601028,%rax\n  400518:       8b 10                   mov    (%rax),%edx\n  40051a:       48 c7 c0 30 10 60 00    mov    $0x601030,%rax\n  400521:       8b 00                   mov    (%rax),%eax\n  400523:       89 d6                   mov    %edx,%esi\n  400525:       89 c7                   mov    %eax,%edi\n  400527:       e8 aa ff ff ff          callq  4004d6 <_Z9main_funcii>\n  40052c:       01 45 fc                add    %eax,-0x4(%rbp)\n  40052f:       8b 45 fc                mov    -0x4(%rbp),%eax\n  400532:       c9                      leaveq \n  400533:       c3                      retq   \n  400534:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40053b:       00 00 00 \n  40053e:       66 90                   xchg   %ax,%ax\n\n0000000000400540 <__libc_csu_init>:\n  400540:       41 57                   push   %r15\n  400542:       41 56                   push   %r14\n  400544:       49 89 d7                mov    %rdx,%r15\n  400547:       41 55                   push   %r13\n  400549:       41 54                   push   %r12\n  40054b:       4c 8d 25 c6 08 20 00    lea    0x2008c6(%rip),%r12        # 600e18 <__frame_dummy_init_array_entry>\n  400552:       55                      push   %rbp\n  400553:       48 8d 2d c6 08 20 00    lea    0x2008c6(%rip),%rbp        # 600e20 <__init_array_end>\n  40055a:       53                      push   %rbx\n  40055b:       41 89 fd                mov    %edi,%r13d\n  40055e:       49 89 f6                mov    %rsi,%r14\n  400561:       4c 29 e5                sub    %r12,%rbp\n  400564:       48 83 ec 08             sub    $0x8,%rsp\n  400568:       48 c1 fd 03             sar    $0x3,%rbp\n  40056c:       e8 47 fe ff ff          callq  4003b8 <_init>\n  400571:       48 85 ed                test   %rbp,%rbp\n  400574:       74 20                   je     400596 <__libc_csu_init+0x56>\n  400576:       31 db                   xor    %ebx,%ebx\n  400578:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n  40057f:       00 \n  400580:       4c 89 fa                mov    %r15,%rdx\n  400583:       4c 89 f6                mov    %r14,%rsi\n  400586:       44 89 ef                mov    %r13d,%edi\n  400589:       41 ff 14 dc             callq  *(%r12,%rbx,8)\n  40058d:       48 83 c3 01             add    $0x1,%rbx\n  400591:       48 39 dd                cmp    %rbx,%rbp\n  400594:       75 ea                   jne    400580 <__libc_csu_init+0x40>\n  400596:       48 83 c4 08             add    $0x8,%rsp\n  40059a:       5b                      pop    %rbx\n  40059b:       5d                      pop    %rbp\n  40059c:       41 5c                   pop    %r12\n  40059e:       41 5d                   pop    %r13\n  4005a0:       41 5e                   pop    %r14\n  4005a2:       41 5f                   pop    %r15\n  4005a4:       c3                      retq   \n  4005a5:       90                      nop\n  4005a6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  4005ad:       00 00 00 \n\n00000000004005b0 <__libc_csu_fini>:\n  4005b0:       f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n00000000004005b4 <_fini>:\n  4005b4:       48 83 ec 08             sub    $0x8,%rsp\n  4005b8:       48 83 c4 08             add    $0x8,%rsp\n  4005bc:       c3                      retq  \n```\n\n\n##### 可执行文件 (位置无关的PIE(DYN)版本)  \n```ARMASM\n重定位节 '.rela.dyn' 位于偏移量 0x448 含有 9 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200dd8  000000000008 R_X86_64_RELATIVE                    660\n000000200de0  000000000008 R_X86_64_RELATIVE                    620\n000000201020  000000000008 R_X86_64_RELATIVE                    201020\n000000200fd0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fd8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     6: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nSymbol table '.symtab' contains 70 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000000254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000000002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000360     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000418     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000428     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000448     0 SECTION LOCAL  DEFAULT    9 \n    10: 0000000000000520     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000540     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000550     0 SECTION LOCAL  DEFAULT   12 \n    13: 0000000000000560     0 SECTION LOCAL  DEFAULT   13 \n    14: 0000000000000764     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000000770     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000000778     0 SECTION LOCAL  DEFAULT   16 \n    17: 00000000000007c0     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dd8     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200de0     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200de8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000200df0     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000200fd0     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201000     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000201018     0 SECTION LOCAL  DEFAULT   24 \n    25: 000000000020102c     0 SECTION LOCAL  DEFAULT   25 \n    26: 0000000000000000     0 SECTION LOCAL  DEFAULT   26 \n    27: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    28: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_LIST__\n    29: 0000000000000590     0 FUNC    LOCAL  DEFAULT   13 deregister_tm_clones\n    30: 00000000000005d0     0 FUNC    LOCAL  DEFAULT   13 register_tm_clones\n    31: 0000000000000620     0 FUNC    LOCAL  DEFAULT   13 __do_global_dtors_aux\n    32: 000000000020102c     1 OBJECT  LOCAL  DEFAULT   25 completed.6972\n    33: 0000000000200de0     0 OBJECT  LOCAL  DEFAULT   19 __do_global_dtors_aux_fin\n    34: 0000000000000660     0 FUNC    LOCAL  DEFAULT   13 frame_dummy\n    35: 0000000000200dd8     0 OBJECT  LOCAL  DEFAULT   18 __frame_dummy_init_array_\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    37: 0000000000000774     4 OBJECT  LOCAL  DEFAULT   15 _ZL13g_static_text\n    38: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    39: 00000000000008e8     0 OBJECT  LOCAL  DEFAULT   17 __FRAME_END__\n    40: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_END__\n    41: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    42: 0000000000000778     0 NOTYPE  LOCAL  DEFAULT   16 __GNU_EH_FRAME_HDR\n    43: 0000000000200df0     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n    44: 0000000000200de0     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_end\n    45: 0000000000200dd8     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_start\n    46: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n    47: 0000000000201028     4 OBJECT  GLOBAL DEFAULT   24 g_static_data\n    48: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n    49: 0000000000201018     0 NOTYPE  WEAK   DEFAULT   24 data_start\n    50: 0000000000000770     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used\n    51: 0000000000000690    25 FUNC    GLOBAL DEFAULT   13 _Z9main_funcii\n    52: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    53: 00000000000006a9    69 FUNC    GLOBAL DEFAULT   13 main\n    54: 0000000000201020     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n    55: 0000000000000764     0 FUNC    GLOBAL DEFAULT   14 _fini\n    56: 0000000000000560    43 FUNC    GLOBAL DEFAULT   13 _start\n    57: 0000000000000520     0 FUNC    GLOBAL DEFAULT   10 _init\n    58: 0000000000201030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    60: 0000000000201018     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n    61: 0000000000201038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n    62: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n    63: 00000000000006f0   101 FUNC    GLOBAL DEFAULT   13 __libc_csu_init\n    64: 0000000000201030     4 OBJECT  GLOBAL DEFAULT   25 g_static_bss\n    65: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    66: 0000000000000760     2 FUNC    GLOBAL DEFAULT   13 __libc_csu_fini\n    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    68: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    69: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\n\n.text\n0000000000000520 <_init>:\n 520:   48 83 ec 08             sub    $0x8,%rsp\n 524:   48 8b 05 c5 0a 20 00    mov    0x200ac5(%rip),%rax        # 200ff0 <__gmon_start__>\n 52b:   48 85 c0                test   %rax,%rax\n 52e:   74 02                   je     532 <_init+0x12>\n 530:   ff d0                   callq  *%rax\n 532:   48 83 c4 08             add    $0x8,%rsp\n 536:   c3                      retq   \n\nDisassembly of section .plt:\n\n0000000000000540 <.plt>:\n 540:   ff 35 c2 0a 20 00       pushq  0x200ac2(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 546:   ff 25 c4 0a 20 00       jmpq   *0x200ac4(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 54c:   0f 1f 40 00             nopl   0x0(%rax)\n\nDisassembly of section .plt.got:\n\n0000000000000550 <.plt.got>:\n 550:   ff 25 7a 0a 20 00       jmpq   *0x200a7a(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 556:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000560 <_start>:\n 560:   31 ed                   xor    %ebp,%ebp\n 562:   49 89 d1                mov    %rdx,%r9\n 565:   5e                      pop    %rsi\n 566:   48 89 e2                mov    %rsp,%rdx\n 569:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n 56d:   50                      push   %rax\n 56e:   54                      push   %rsp\n 56f:   4c 8d 05 ea 01 00 00    lea    0x1ea(%rip),%r8        # 760 <__libc_csu_fini>\n 576:   48 8d 0d 73 01 00 00    lea    0x173(%rip),%rcx        # 6f0 <__libc_csu_init>\n 57d:   48 8d 3d 25 01 00 00    lea    0x125(%rip),%rdi        # 6a9 <main>\n 584:   ff 15 5e 0a 20 00       callq  *0x200a5e(%rip)        # 200fe8 <__libc_start_main@GLIBC_2.2.5>\n 58a:   f4                      hlt    \n 58b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000000590 <deregister_tm_clones>:\n 590:   48 8d 3d 99 0a 20 00    lea    0x200a99(%rip),%rdi        # 201030 <__TMC_END__>\n 597:   48 8d 05 99 0a 20 00    lea    0x200a99(%rip),%rax        # 201037 <__TMC_END__+0x7>\n 59e:   55                      push   %rbp\n 59f:   48 29 f8                sub    %rdi,%rax\n 5a2:   48 89 e5                mov    %rsp,%rbp\n 5a5:   48 83 f8 0e             cmp    $0xe,%rax\n 5a9:   76 15                   jbe    5c0 <deregister_tm_clones+0x30>\n 5ab:   48 8b 05 2e 0a 20 00    mov    0x200a2e(%rip),%rax        # 200fe0 <_ITM_deregisterTMCloneTable>\n 5b2:   48 85 c0                test   %rax,%rax\n 5b5:   74 09                   je     5c0 <deregister_tm_clones+0x30>\n 5b7:   5d                      pop    %rbp\n 5b8:   ff e0                   jmpq   *%rax\n 5ba:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 5c0:   5d                      pop    %rbp\n 5c1:   c3                      retq   \n 5c2:   0f 1f 40 00             nopl   0x0(%rax)\n 5c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 5cd:   00 00 00 \n\n00000000000005d0 <register_tm_clones>:\n 5d0:   48 8d 3d 59 0a 20 00    lea    0x200a59(%rip),%rdi        # 201030 <__TMC_END__>\n 5d7:   48 8d 35 52 0a 20 00    lea    0x200a52(%rip),%rsi        # 201030 <__TMC_END__>\n 5de:   55                      push   %rbp\n 5df:   48 29 fe                sub    %rdi,%rsi\n 5e2:   48 89 e5                mov    %rsp,%rbp\n 5e5:   48 c1 fe 03             sar    $0x3,%rsi\n 5e9:   48 89 f0                mov    %rsi,%rax\n 5ec:   48 c1 e8 3f             shr    $0x3f,%rax\n 5f0:   48 01 c6                add    %rax,%rsi\n 5f3:   48 d1 fe                sar    %rsi\n 5f6:   74 18                   je     610 <register_tm_clones+0x40>\n 5f8:   48 8b 05 f9 09 20 00    mov    0x2009f9(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 5ff:   48 85 c0                test   %rax,%rax\n 602:   74 0c                   je     610 <register_tm_clones+0x40>\n 604:   5d                      pop    %rbp\n 605:   ff e0                   jmpq   *%rax\n 607:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 60e:   00 00 \n 610:   5d                      pop    %rbp\n 611:   c3                      retq   \n 612:   0f 1f 40 00             nopl   0x0(%rax)\n 616:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 61d:   00 00 00 \n\n0000000000000620 <__do_global_dtors_aux>:\n 620:   80 3d 05 0a 20 00 00    cmpb   $0x0,0x200a05(%rip)        # 20102c <_edata>\n 627:   75 27                   jne    650 <__do_global_dtors_aux+0x30>\n 629:   48 83 3d 9f 09 20 00    cmpq   $0x0,0x20099f(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 630:   00 \n 631:   55                      push   %rbp\n 632:   48 89 e5                mov    %rsp,%rbp\n 635:   74 0c                   je     643 <__do_global_dtors_aux+0x23>\n 637:   48 8b 3d e2 09 20 00    mov    0x2009e2(%rip),%rdi        # 201020 <__dso_handle>\n 63e:   e8 0d ff ff ff          callq  550 <.plt.got>\n 643:   e8 48 ff ff ff          callq  590 <deregister_tm_clones>\n 648:   5d                      pop    %rbp\n 649:   c6 05 dc 09 20 00 01    movb   $0x1,0x2009dc(%rip)        # 20102c <_edata>\n 650:   f3 c3                   repz retq \n 652:   0f 1f 40 00             nopl   0x0(%rax)\n 656:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 65d:   00 00 00 \n\n0000000000000660 <frame_dummy>:\n 660:   48 8d 3d 81 07 20 00    lea    0x200781(%rip),%rdi        # 200de8 <__JCR_END__>\n 667:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 66b:   75 0b                   jne    678 <frame_dummy+0x18>\n 66d:   e9 5e ff ff ff          jmpq   5d0 <register_tm_clones>\n 672:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 678:   48 8b 05 59 09 20 00    mov    0x200959(%rip),%rax        # 200fd8 <_Jv_RegisterClasses>\n 67f:   48 85 c0                test   %rax,%rax\n 682:   74 e9                   je     66d <frame_dummy+0xd>\n 684:   55                      push   %rbp\n 685:   48 89 e5                mov    %rsp,%rbp\n 688:   ff d0                   callq  *%rax\n 68a:   5d                      pop    %rbp\n 68b:   e9 40 ff ff ff          jmpq   5d0 <register_tm_clones>\n\n0000000000000690 <_Z9main_funcii>:\n 690:   55                      push   %rbp\n 691:   48 89 e5                mov    %rsp,%rbp\n 694:   89 7d fc                mov    %edi,-0x4(%rbp)\n 697:   89 75 f8                mov    %esi,-0x8(%rbp)\n 69a:   8b 55 fc                mov    -0x4(%rbp),%edx\n 69d:   8b 45 f8                mov    -0x8(%rbp),%eax\n 6a0:   01 d0                   add    %edx,%eax\n 6a2:   05 c3 07 00 00          add    $0x7c3,%eax\n 6a7:   5d                      pop    %rbp\n 6a8:   c3                      retq   \n\n00000000000006a9 <main>:\n 6a9:   55                      push   %rbp\n 6aa:   48 89 e5                mov    %rsp,%rbp\n 6ad:   48 83 ec 20             sub    $0x20,%rsp\n 6b1:   89 7d ec                mov    %edi,-0x14(%rbp)\n 6b4:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n 6b8:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n 6bf:   48 8d 05 6a 09 20 00    lea    0x20096a(%rip),%rax        # 201030 <__TMC_END__>\n 6c6:   8b 55 ec                mov    -0x14(%rbp),%edx\n 6c9:   89 10                   mov    %edx,(%rax)\n 6cb:   48 8d 05 56 09 20 00    lea    0x200956(%rip),%rax        # 201028 <g_static_data>\n 6d2:   8b 10                   mov    (%rax),%edx\n 6d4:   48 8d 05 55 09 20 00    lea    0x200955(%rip),%rax        # 201030 <__TMC_END__>\n 6db:   8b 00                   mov    (%rax),%eax\n 6dd:   89 d6                   mov    %edx,%esi\n 6df:   89 c7                   mov    %eax,%edi\n 6e1:   e8 aa ff ff ff          callq  690 <_Z9main_funcii>\n 6e6:   01 45 fc                add    %eax,-0x4(%rbp)\n 6e9:   8b 45 fc                mov    -0x4(%rbp),%eax\n 6ec:   c9                      leaveq \n 6ed:   c3                      retq   \n 6ee:   66 90                   xchg   %ax,%ax\n\n00000000000006f0 <__libc_csu_init>:\n 6f0:   41 57                   push   %r15\n 6f2:   41 56                   push   %r14\n 6f4:   49 89 d7                mov    %rdx,%r15\n 6f7:   41 55                   push   %r13\n 6f9:   41 54                   push   %r12\n 6fb:   4c 8d 25 d6 06 20 00    lea    0x2006d6(%rip),%r12        # 200dd8 <__frame_dummy_init_array_entry>\n 702:   55                      push   %rbp\n 703:   48 8d 2d d6 06 20 00    lea    0x2006d6(%rip),%rbp        # 200de0 <__init_array_end>\n 70a:   53                      push   %rbx\n 70b:   41 89 fd                mov    %edi,%r13d\n 70e:   49 89 f6                mov    %rsi,%r14\n 711:   4c 29 e5                sub    %r12,%rbp\n 714:   48 83 ec 08             sub    $0x8,%rsp\n 718:   48 c1 fd 03             sar    $0x3,%rbp\n 71c:   e8 ff fd ff ff          callq  520 <_init>\n 721:   48 85 ed                test   %rbp,%rbp\n 724:   74 20                   je     746 <__libc_csu_init+0x56>\n 726:   31 db                   xor    %ebx,%ebx\n 728:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n 72f:   00 \n 730:   4c 89 fa                mov    %r15,%rdx\n 733:   4c 89 f6                mov    %r14,%rsi\n 736:   44 89 ef                mov    %r13d,%edi\n 739:   41 ff 14 dc             callq  *(%r12,%rbx,8)\n 73d:   48 83 c3 01             add    $0x1,%rbx\n 741:   48 39 dd                cmp    %rbx,%rbp\n 744:   75 ea                   jne    730 <__libc_csu_init+0x40>\n 746:   48 83 c4 08             add    $0x8,%rsp\n 74a:   5b                      pop    %rbx\n 74b:   5d                      pop    %rbp\n 74c:   41 5c                   pop    %r12\n 74e:   41 5d                   pop    %r13\n 750:   41 5e                   pop    %r14\n 752:   41 5f                   pop    %r15\n 754:   c3                      retq   \n 755:   90                      nop\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <__libc_csu_fini>:\n 760:   f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n0000000000000764 <_fini>:\n 764:   48 83 ec 08             sub    $0x8,%rsp\n 768:   48 83 c4 08             add    $0x8,%rsp\n 76c:   c3                      retq   \n```","source":"_posts/2019-11-29-static-linking.md","raw":"---\ntitle: 静态链接过程    \ndate: 2019-11-29\ncategories: develop \nauthor: yawei.zhang \n---\n\n### 目录  \n\n---  \n\n<!-- TOC -->\n\n- [目录](#目录)\n- [基本编译链接流程](#基本编译链接流程)\n- [静态链接过程概述](#静态链接过程概述)\n- [静态链接过程流程追踪和代码验证](#静态链接过程流程追踪和代码验证)\n  - [测试源代码](#测试源代码)\n  - [生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)](#生成汇编代码-从这里开始会有两个分支代码-non-pic-和-pic对照)\n    - [汇编代码 (相对位置版本)](#汇编代码-相对位置版本)\n    - [汇编代码 (位置无关版本)](#汇编代码-位置无关版本)\n  - [生成ELF的可重定位文件](#生成elf的可重定位文件)\n    - [可重定向文件和汇编指令 (相对位置版本)](#可重定向文件和汇编指令-相对位置版本)\n    - [可重定向文件和汇编指令 (位置无关版本)](#可重定向文件和汇编指令-位置无关版本)\n  - [链接为可执行文件(或者共享库)](#链接为可执行文件或者共享库)\n    - [可执行文件 (相对位置的非PIE(EXEC)版本)](#可执行文件-相对位置的非pieexec版本)\n    - [可执行文件 (相对位置的PIE(DYN)版本)](#可执行文件-相对位置的piedyn版本)\n    - [可执行文件 (位置无关的非PIE(EXEC)版本)](#可执行文件-位置无关的非pieexec版本)\n    - [可执行文件 (位置无关的PIE(DYN)版本)](#可执行文件-位置无关的piedyn版本)\n\n<!-- /TOC -->\n\n### 基本编译链接流程   \n* 编译并输出汇编代码  \n  * g++ -S lib.cpp -o lib.s \n* 打包成ELF可重定位文件 ELF TYPE= ET_REL  即.o文件  \n  * g++ -c lib.s -o lib.o \n* 链接到动态库或者可执行文件\n  * g++ lib.o -o a.out   \n  * g++ -shared lib.o -o a.out \n\n<!-- more -->\n\n### 静态链接过程概述  \n\n### 静态链接过程流程追踪和代码验证\n#### 测试源代码    \n``` C++\nint g_static_bss = 0;\nint g_static_data = 182;\nconst int g_static_text = 1987;\nint main_func(int a, int b)\n{\n   return a+b + g_static_text;\n}\n\n\nint main(int argc, char *argv[])\n{\n   int a = 0;\n   g_static_bss = argc;\n   a += main_func(g_static_bss, g_static_data);\n   return a;\n}\n```\n\n#### 生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)    \n\n在这段代码中 \n\n* g_static_bss  \n  * 为全局的符号(给链接器看到) \n  * 被放在.bss字段(未初始化数据段, Block Started by Symbol)中 \n  * 占用4个字节  类型是object 初始化为0   \n  * 4字节对齐  \n\n* g_static_data  \n  * 为全局的符号(给链接器看到) \n  * 被放在.data字段(数据段)中 \n  * 占用4个字节  类型是object 初始化为182   \n  * 4字节对齐  \n\n* _ZL13g_static_text  \n  * 为全局的符号(给链接器看到) \n  * 被放在.rodata字段(只读数据段)中 \n  * 占用4个字节  类型是object 初始化为1987   \n  * 4字节对齐  \n\n* _Z9main_funcii  \n  * 为全局的符号(给链接器看到) \n  * 被放在.text字段(代码段)中 \n  * 占用4个字节  类型是function  \n\n* main  \n  * 为全局的符号(给链接器看到) \n  * 被放在.text字段(代码段)中 \n  * 占用4个字节  类型是function  \n\n* GOTPCREL \n  * PC-REL是指的位置相对代码   \n  * 这里是指的走GOT表的位置相对代码   \n\n* 在下面的对照中  对于全局符号的访问有如下区别\n  * 访问全局对象时 PIC 版本会先从相对当前代码位置的GOT表中读取全局对象的地址到RAX 然后再读取其内容   \n  * 非PIC版本则直接用记录好的地址读取其内容  \n\n\n##### 汇编代码 (相对位置版本)\n``` ARMASM\n    .file    \"test.cpp\"\n    .globl    g_static_bss\n    .bss\n    .align 4\n    .type    g_static_bss, @object\n    .size    g_static_bss, 4\ng_static_bss:\n    .zero    4\n    .globl    g_static_data\n    .data\n    .align 4\n    .type    g_static_data, @object\n    .size    g_static_data, 4\ng_static_data:\n    .long    182\n    .section    .rodata\n    .align 4\n    .type    _ZL13g_static_text, @object\n    .size    _ZL13g_static_text, 4\n_ZL13g_static_text:\n    .long    1987\n    .text\n    .globl    _Z9main_funcii\n    .type    _Z9main_funcii, @function\n_Z9main_funcii:\n.LFB0:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %edx\n    movl    -8(%rbp), %eax\n    addl    %edx, %eax\n    addl    $1987, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    _Z9main_funcii, .-_Z9main_funcii\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movq    %rsi, -32(%rbp)\n    movl    $0, -4(%rbp)\n    movl    -20(%rbp), %eax\n    movl    %eax, g_static_bss(%rip)\n    movl    g_static_data(%rip), %edx\n    movl    g_static_bss(%rip), %eax\n    movl    %edx, %esi\n    movl    %eax, %edi\n    call    _Z9main_funcii\n    addl    %eax, -4(%rbp)\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    \"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"\n    .section    .note.GNU-stack,\"\",@progbits\n\n```\n\n##### 汇编代码 (位置无关版本) \n``` ARMASM\n    .file    \"test.cpp\"\n    .globl    g_static_bss\n    .bss\n    .align 4\n    .type    g_static_bss, @object\n    .size    g_static_bss, 4\ng_static_bss:\n    .zero    4\n    .globl    g_static_data\n    .data\n    .align 4\n    .type    g_static_data, @object\n    .size    g_static_data, 4\ng_static_data:\n    .long    182\n    .section    .rodata\n    .align 4\n    .type    _ZL13g_static_text, @object\n    .size    _ZL13g_static_text, 4\n_ZL13g_static_text:\n    .long    1987\n    .text\n    .globl    _Z9main_funcii\n    .type    _Z9main_funcii, @function\n_Z9main_funcii:\n.LFB0:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    movl    %edi, -4(%rbp)\n    movl    %esi, -8(%rbp)\n    movl    -4(%rbp), %edx\n    movl    -8(%rbp), %eax\n    addl    %edx, %eax\n    addl    $1987, %eax\n    popq    %rbp\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE0:\n    .size    _Z9main_funcii, .-_Z9main_funcii\n    .globl    main\n    .type    main, @function\nmain:\n.LFB1:\n    .cfi_startproc\n    pushq    %rbp\n    .cfi_def_cfa_offset 16\n    .cfi_offset 6, -16\n    movq    %rsp, %rbp\n    .cfi_def_cfa_register 6\n    subq    $32, %rsp\n    movl    %edi, -20(%rbp)\n    movq    %rsi, -32(%rbp)\n    movl    $0, -4(%rbp)\n    movq    g_static_bss@GOTPCREL(%rip), %rax\n    movl    -20(%rbp), %edx\n    movl    %edx, (%rax)\n    movq    g_static_data@GOTPCREL(%rip), %rax\n    movl    (%rax), %edx\n    movq    g_static_bss@GOTPCREL(%rip), %rax\n    movl    (%rax), %eax\n    movl    %edx, %esi\n    movl    %eax, %edi\n    call    _Z9main_funcii@PLT\n    addl    %eax, -4(%rbp)\n    movl    -4(%rbp), %eax\n    leave\n    .cfi_def_cfa 7, 8\n    ret\n    .cfi_endproc\n.LFE1:\n    .size    main, .-main\n    .ident    \"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"\n    .section    .note.GNU-stack,\"\",@progbits\n```\n\n#### 生成ELF的可重定位文件\n\n* .rela.text 重定位section\n  * 包含了所有需要进行重定位的信息, 偏移量是相对于.text  类型则是注明了重定位的方式  \n\n\n* .rela.eh_frame 重定位section  \n* .symtab 符号表section  \n  * Value 标记了符号所在的偏移地址 \n  * SIZE 标记了代码或者变量占的大小  \n  * Ndx 如果不在本编译单元 类型为NOTYPE Ndx为UND   \n  * Bind 全局还是局部符号(是否链接器可见)  \n    * rodata的符号为local是因为直接被编译到了代码中 \n      * 例如g_static_text 1987 => ```add $0x7c3,%eax```\n\n* .rela.eh_frame Call Frame Information \n  * 提供了异常的Stack Unwind 支持  \n  * 这张表提供了'给定一个PC值, 可以查到上一个stack frame位置'\n  * Stack Unwind 指从最內层函数呼叫堆栈开始，找到最外层\n  \t```  \n    * _Unwind_Backtrace()   \n    * uw_frame_state_for() \n    * uw_update_context() \n    * uw_update_context_1()  \n    ```\n\n\n* PC32 的PC是指的 program counter   在本文的汇编中对应寄存器的RIP \n* PC32 在重定位类型中代表相对指令位置的重定位\n* PLT 则代表使用 过程链接表 进行重定位 (动态定位)   \n* GOT 是全局偏移表  \n* PGOT 是私有全局偏移表  \n\n在这个过程中 \n无论是PIC的PLT调用还是PC调用, 对于call 指令 他的操作数都是0 \n无论是GOTPCREL还是PC 对全局对象符号的访问中 操作数也都是0  \n在重定位节中标记了这些需要在链接过程中重建的具体位置和内容 \n\n\n##### 可重定向文件和汇编指令 (相对位置版本)\n``` ARMASM\n重定位节 '.rela.text' 位于偏移量 0x2c8 含有 4 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000034  000a00000002 R_X86_64_PC32     0000000000000000 g_static_bss - 4\n00000000003a  000b00000002 R_X86_64_PC32     0000000000000000 g_static_data - 4\n000000000040  000a00000002 R_X86_64_PC32     0000000000000000 g_static_bss - 4\n000000000049  000c00000002 R_X86_64_PC32     0000000000000000 _Z9main_funcii - 4\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x328 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 19\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 14 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    5 _ZL13g_static_text\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n    10: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 g_static_bss\n    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 g_static_data\n    12: 0000000000000000    25 FUNC    GLOBAL DEFAULT    1 _Z9main_funcii\n    13: 0000000000000019    60 FUNC    GLOBAL DEFAULT    1 main\n\n.text\n0000000000000000 <_Z9main_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   05 c3 07 00 00          add    $0x7c3,%eax\n  17:   5d                      pop    %rbp\n  18:   c3                      retq   \n\n0000000000000019 <main>:\n  19:   55                      push   %rbp\n  1a:   48 89 e5                mov    %rsp,%rbp\n  1d:   48 83 ec 20             sub    $0x20,%rsp\n  21:   89 7d ec                mov    %edi,-0x14(%rbp)\n  24:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  28:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  2f:   8b 45 ec                mov    -0x14(%rbp),%eax\n  32:   89 05 00 00 00 00       mov    %eax,0x0(%rip)        # 38 <main+0x1f>\n  38:   8b 15 00 00 00 00       mov    0x0(%rip),%edx        # 3e <main+0x25>\n  3e:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 44 <main+0x2b>\n  44:   89 d6                   mov    %edx,%esi\n  46:   89 c7                   mov    %eax,%edi\n  48:   e8 00 00 00 00          callq  4d <main+0x34>\n  4d:   01 45 fc                add    %eax,-0x4(%rbp)\n  50:   8b 45 fc                mov    -0x4(%rbp),%eax\n  53:   c9                      leaveq \n  54:   c3                      retq   \n```\n\n\n##### 可重定向文件和汇编指令 (位置无关版本)\n``` ARMASM\n重定位节 '.rela.text' 位于偏移量 0x300 含有 4 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000032  000a0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_bss - 4\n00000000003e  000b0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_data - 4\n000000000047  000a0000002a R_X86_64_REX_GOTP 0000000000000000 g_static_bss - 4\n000000000052  000c00000004 R_X86_64_PLT32    0000000000000000 _Z9main_funcii - 4\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x360 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 19\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 15 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000000     4 OBJECT  LOCAL  DEFAULT    5 _ZL13g_static_text\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n    10: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    4 g_static_bss\n    11: 0000000000000000     4 OBJECT  GLOBAL DEFAULT    3 g_static_data\n    12: 0000000000000000    25 FUNC    GLOBAL DEFAULT    1 _Z9main_funcii\n    13: 0000000000000019    69 FUNC    GLOBAL DEFAULT    1 main\n    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_\n\n.text\n0000000000000000 <_Z9main_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   05 c3 07 00 00          add    $0x7c3,%eax\n  17:   5d                      pop    %rbp\n  18:   c3                      retq   \n\n0000000000000019 <main>:\n  19:   55                      push   %rbp\n  1a:   48 89 e5                mov    %rsp,%rbp\n  1d:   48 83 ec 20             sub    $0x20,%rsp\n  21:   89 7d ec                mov    %edi,-0x14(%rbp)\n  24:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  28:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  2f:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 36 <main+0x1d>\n  36:   8b 55 ec                mov    -0x14(%rbp),%edx\n  39:   89 10                   mov    %edx,(%rax)\n  3b:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 42 <main+0x29>\n  42:   8b 10                   mov    (%rax),%edx\n  44:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 4b <main+0x32>\n  4b:   8b 00                   mov    (%rax),%eax\n  4d:   89 d6                   mov    %edx,%esi\n  4f:   89 c7                   mov    %eax,%edi\n  51:   e8 00 00 00 00          callq  56 <main+0x3d>\n  56:   01 45 fc                add    %eax,-0x4(%rbp)\n  59:   8b 45 fc                mov    -0x4(%rbp),%eax\n  5c:   c9                      leaveq \n  5d:   c3                      retq \n```\n\n#### 链接为可执行文件(或者共享库)  \n\n在链接为目标文件时, 会合并处理每个目标文件, 生成plt代码 确定GOT(PGOT)的相对位置等  \n\n在相对位置的两个版本中均可以看到对全局符号的访问均正确填充了相对位移  \n\nPIE版本的区别主要是PIE使用了相对位置 连ELF类型都变成了DYN   \n非PIE版本则使用了绝对位置 \n测试代码没有调用外部函数符号 所以在PIC版本的汇编指令中并没有看到PLT指令\n\n##### 可执行文件 (相对位置的非PIE(EXEC)版本)\n``` ARMASM\n重定位节 '.rela.dyn' 位于偏移量 0x388 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000600ff0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000600ff8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 3 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\nSymbol table '.symtab' contains 65 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000400238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000400254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000400274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000400298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000004002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000400300     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000400360     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000400368     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000400388     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000004003b8     0 SECTION LOCAL  DEFAULT   10 \n    11: 00000000004003d0     0 SECTION LOCAL  DEFAULT   11 \n    12: 00000000004005a4     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000004005b0     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000004005b8     0 SECTION LOCAL  DEFAULT   14 \n    15: 00000000004005f8     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000600e18     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000600e20     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000600e28     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000600e30     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000600ff0     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000601000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000601018     0 SECTION LOCAL  DEFAULT   22 \n    23: 000000000060102c     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000400410     0 FUNC    LOCAL  DEFAULT   11 deregister_tm_clones\n    28: 0000000000400450     0 FUNC    LOCAL  DEFAULT   11 register_tm_clones\n    29: 0000000000400490     0 FUNC    LOCAL  DEFAULT   11 __do_global_dtors_aux\n    30: 000000000060102c     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000600e20     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000004004b0     0 FUNC    LOCAL  DEFAULT   11 frame_dummy\n    33: 0000000000600e18     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    35: 00000000004005b4     4 OBJECT  LOCAL  DEFAULT   13 _ZL13g_static_text\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    37: 00000000004006f8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    38: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    39: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    40: 00000000004005b8     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    41: 0000000000600e30     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    42: 0000000000600e20     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_end\n    43: 0000000000600e18     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_start\n    44: 0000000000601000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    45: 0000000000601028     4 OBJECT  GLOBAL DEFAULT   22 g_static_data\n    46: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000601018     0 NOTYPE  WEAK   DEFAULT   22 data_start\n    48: 00000000004005b0     4 OBJECT  GLOBAL DEFAULT   13 _IO_stdin_used\n    49: 00000000004004d6    25 FUNC    GLOBAL DEFAULT   11 _Z9main_funcii\n    50: 00000000004004ef    60 FUNC    GLOBAL DEFAULT   11 main\n    51: 0000000000601020     0 OBJECT  GLOBAL HIDDEN    22 __dso_handle\n    52: 00000000004005a4     0 FUNC    GLOBAL DEFAULT   12 _fini\n    53: 0000000000400400     2 FUNC    GLOBAL HIDDEN    11 _dl_relocate_static_pie\n    54: 00000000004003d0    43 FUNC    GLOBAL DEFAULT   11 _start\n    55: 00000000004003b8     0 FUNC    GLOBAL DEFAULT   10 _init\n    56: 0000000000601030     0 OBJECT  GLOBAL HIDDEN    22 __TMC_END__\n    57: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT   22 __data_start\n    58: 0000000000601038     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    59: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    60: 0000000000400530   101 FUNC    GLOBAL DEFAULT   11 __libc_csu_init\n    61: 0000000000601030     4 OBJECT  GLOBAL DEFAULT   23 g_static_bss\n    62: 00000000004005a0     2 FUNC    GLOBAL DEFAULT   11 __libc_csu_fini\n    63: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    64: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\n\n\n.text\n00000000004003b8 <_init>:\n  4003b8:       48 83 ec 08             sub    $0x8,%rsp\n  4003bc:       48 8b 05 35 0c 20 00    mov    0x200c35(%rip),%rax        # 600ff8 <__gmon_start__>\n  4003c3:       48 85 c0                test   %rax,%rax\n  4003c6:       74 02                   je     4003ca <_init+0x12>\n  4003c8:       ff d0                   callq  *%rax\n  4003ca:       48 83 c4 08             add    $0x8,%rsp\n  4003ce:       c3                      retq   \n\nDisassembly of section .text:\n\n00000000004003d0 <_start>:\n  4003d0:       31 ed                   xor    %ebp,%ebp\n  4003d2:       49 89 d1                mov    %rdx,%r9\n  4003d5:       5e                      pop    %rsi\n  4003d6:       48 89 e2                mov    %rsp,%rdx\n  4003d9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003dd:       50                      push   %rax\n  4003de:       54                      push   %rsp\n  4003df:       49 c7 c0 a0 05 40 00    mov    $0x4005a0,%r8\n  4003e6:       48 c7 c1 30 05 40 00    mov    $0x400530,%rcx\n  4003ed:       48 c7 c7 ef 04 40 00    mov    $0x4004ef,%rdi\n  4003f4:       ff 15 f6 0b 20 00       callq  *0x200bf6(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003fa:       f4                      hlt    \n  4003fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400400 <_dl_relocate_static_pie>:\n  400400:       f3 c3                   repz retq \n  400402:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  400409:       00 00 00 \n  40040c:       0f 1f 40 00             nopl   0x0(%rax)\n\n0000000000400410 <deregister_tm_clones>:\n  400410:       b8 37 10 60 00          mov    $0x601037,%eax\n  400415:       55                      push   %rbp\n  400416:       48 2d 30 10 60 00       sub    $0x601030,%rax\n  40041c:       48 83 f8 0e             cmp    $0xe,%rax\n  400420:       48 89 e5                mov    %rsp,%rbp\n  400423:       76 1b                   jbe    400440 <deregister_tm_clones+0x30>\n  400425:       b8 00 00 00 00          mov    $0x0,%eax\n  40042a:       48 85 c0                test   %rax,%rax\n  40042d:       74 11                   je     400440 <deregister_tm_clones+0x30>\n  40042f:       5d                      pop    %rbp\n  400430:       bf 30 10 60 00          mov    $0x601030,%edi\n  400435:       ff e0                   jmpq   *%rax\n  400437:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n  40043e:       00 00 \n  400440:       5d                      pop    %rbp\n  400441:       c3                      retq   \n  400442:       0f 1f 40 00             nopl   0x0(%rax)\n  400446:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40044d:       00 00 00 \n\n0000000000400450 <register_tm_clones>:\n  400450:       be 30 10 60 00          mov    $0x601030,%esi\n  400455:       55                      push   %rbp\n  400456:       48 81 ee 30 10 60 00    sub    $0x601030,%rsi\n  40045d:       48 c1 fe 03             sar    $0x3,%rsi\n  400461:       48 89 e5                mov    %rsp,%rbp\n  400464:       48 89 f0                mov    %rsi,%rax\n  400467:       48 c1 e8 3f             shr    $0x3f,%rax\n  40046b:       48 01 c6                add    %rax,%rsi\n  40046e:       48 d1 fe                sar    %rsi\n  400471:       74 15                   je     400488 <register_tm_clones+0x38>\n  400473:       b8 00 00 00 00          mov    $0x0,%eax\n  400478:       48 85 c0                test   %rax,%rax\n  40047b:       74 0b                   je     400488 <register_tm_clones+0x38>\n  40047d:       5d                      pop    %rbp\n  40047e:       bf 30 10 60 00          mov    $0x601030,%edi\n  400483:       ff e0                   jmpq   *%rax\n  400485:       0f 1f 00                nopl   (%rax)\n  400488:       5d                      pop    %rbp\n  400489:       c3                      retq   \n  40048a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n\n0000000000400490 <__do_global_dtors_aux>:\n  400490:       80 3d 95 0b 20 00 00    cmpb   $0x0,0x200b95(%rip)        # 60102c <_edata>\n  400497:       75 11                   jne    4004aa <__do_global_dtors_aux+0x1a>\n  400499:       55                      push   %rbp\n  40049a:       48 89 e5                mov    %rsp,%rbp\n  40049d:       e8 6e ff ff ff          callq  400410 <deregister_tm_clones>\n  4004a2:       5d                      pop    %rbp\n  4004a3:       c6 05 82 0b 20 00 01    movb   $0x1,0x200b82(%rip)        # 60102c <_edata>\n  4004aa:       f3 c3                   repz retq \n  4004ac:       0f 1f 40 00             nopl   0x0(%rax)\n\n00000000004004b0 <frame_dummy>:\n  4004b0:       bf 28 0e 60 00          mov    $0x600e28,%edi\n  4004b5:       48 83 3f 00             cmpq   $0x0,(%rdi)\n  4004b9:       75 05                   jne    4004c0 <frame_dummy+0x10>\n  4004bb:       eb 93                   jmp    400450 <register_tm_clones>\n  4004bd:       0f 1f 00                nopl   (%rax)\n  4004c0:       b8 00 00 00 00          mov    $0x0,%eax\n  4004c5:       48 85 c0                test   %rax,%rax\n  4004c8:       74 f1                   je     4004bb <frame_dummy+0xb>\n  4004ca:       55                      push   %rbp\n  4004cb:       48 89 e5                mov    %rsp,%rbp\n  4004ce:       ff d0                   callq  *%rax\n  4004d0:       5d                      pop    %rbp\n  4004d1:       e9 7a ff ff ff          jmpq   400450 <register_tm_clones>\n\n00000000004004d6 <_Z9main_funcii>:\n  4004d6:       55                      push   %rbp\n  4004d7:       48 89 e5                mov    %rsp,%rbp\n  4004da:       89 7d fc                mov    %edi,-0x4(%rbp)\n  4004dd:       89 75 f8                mov    %esi,-0x8(%rbp)\n  4004e0:       8b 55 fc                mov    -0x4(%rbp),%edx\n  4004e3:       8b 45 f8                mov    -0x8(%rbp),%eax\n  4004e6:       01 d0                   add    %edx,%eax\n  4004e8:       05 c3 07 00 00          add    $0x7c3,%eax\n  4004ed:       5d                      pop    %rbp\n  4004ee:       c3                      retq   \n\n00000000004004ef <main>:\n  4004ef:       55                      push   %rbp\n  4004f0:       48 89 e5                mov    %rsp,%rbp\n  4004f3:       48 83 ec 20             sub    $0x20,%rsp\n  4004f7:       89 7d ec                mov    %edi,-0x14(%rbp)\n  4004fa:       48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  4004fe:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  400505:       8b 45 ec                mov    -0x14(%rbp),%eax\n  400508:       89 05 22 0b 20 00       mov    %eax,0x200b22(%rip)        # 601030 <__TMC_END__>\n  40050e:       8b 15 14 0b 20 00       mov    0x200b14(%rip),%edx        # 601028 <g_static_data>\n  400514:       8b 05 16 0b 20 00       mov    0x200b16(%rip),%eax        # 601030 <__TMC_END__>\n  40051a:       89 d6                   mov    %edx,%esi\n  40051c:       89 c7                   mov    %eax,%edi\n  40051e:       e8 b3 ff ff ff          callq  4004d6 <_Z9main_funcii>\n  400523:       01 45 fc                add    %eax,-0x4(%rbp)\n  400526:       8b 45 fc                mov    -0x4(%rbp),%eax\n  400529:       c9                      leaveq \n  40052a:       c3                      retq   \n  40052b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400530 <__libc_csu_init>:\n  400530:       41 57                   push   %r15\n  400532:       41 56                   push   %r14\n  400534:       49 89 d7                mov    %rdx,%r15\n  400537:       41 55                   push   %r13\n  400539:       41 54                   push   %r12\n  40053b:       4c 8d 25 d6 08 20 00    lea    0x2008d6(%rip),%r12        # 600e18 <__frame_dummy_init_array_entry>\n  400542:       55                      push   %rbp\n  400543:       48 8d 2d d6 08 20 00    lea    0x2008d6(%rip),%rbp        # 600e20 <__init_array_end>\n  40054a:       53                      push   %rbx\n  40054b:       41 89 fd                mov    %edi,%r13d\n  40054e:       49 89 f6                mov    %rsi,%r14\n  400551:       4c 29 e5                sub    %r12,%rbp\n  400554:       48 83 ec 08             sub    $0x8,%rsp\n  400558:       48 c1 fd 03             sar    $0x3,%rbp\n  40055c:       e8 57 fe ff ff          callq  4003b8 <_init>\n  400561:       48 85 ed                test   %rbp,%rbp\n  400564:       74 20                   je     400586 <__libc_csu_init+0x56>\n  400566:       31 db                   xor    %ebx,%ebx\n  400568:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n  40056f:       00 \n  400570:       4c 89 fa                mov    %r15,%rdx\n  400573:       4c 89 f6                mov    %r14,%rsi\n  400576:       44 89 ef                mov    %r13d,%edi\n  400579:       41 ff 14 dc             callq  *(%r12,%rbx,8)\n  40057d:       48 83 c3 01             add    $0x1,%rbx\n  400581:       48 39 dd                cmp    %rbx,%rbp\n  400584:       75 ea                   jne    400570 <__libc_csu_init+0x40>\n  400586:       48 83 c4 08             add    $0x8,%rsp\n  40058a:       5b                      pop    %rbx\n  40058b:       5d                      pop    %rbp\n  40058c:       41 5c                   pop    %r12\n  40058e:       41 5d                   pop    %r13\n  400590:       41 5e                   pop    %r14\n  400592:       41 5f                   pop    %r15\n  400594:       c3                      retq   \n  400595:       90                      nop\n  400596:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40059d:       00 00 00 \n\n00000000004005a0 <__libc_csu_fini>:\n  4005a0:       f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n00000000004005a4 <_fini>:\n  4005a4:       48 83 ec 08             sub    $0x8,%rsp\n  4005a8:       48 83 c4 08             add    $0x8,%rsp\n  4005ac:       c3                      retq  \n```\n\n##### 可执行文件 (相对位置的PIE(DYN)版本)\n``` ARMASM\n\n重定位节 '.rela.dyn' 位于偏移量 0x448 含有 9 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200dd8  000000000008 R_X86_64_RELATIVE                    660\n000000200de0  000000000008 R_X86_64_RELATIVE                    620\n000000201020  000000000008 R_X86_64_RELATIVE                    201020\n000000200fd0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fd8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     6: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nSymbol table '.symtab' contains 70 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000000254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000000002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000360     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000418     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000428     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000448     0 SECTION LOCAL  DEFAULT    9 \n    10: 0000000000000520     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000540     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000550     0 SECTION LOCAL  DEFAULT   12 \n    13: 0000000000000560     0 SECTION LOCAL  DEFAULT   13 \n    14: 0000000000000764     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000000770     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000000778     0 SECTION LOCAL  DEFAULT   16 \n    17: 00000000000007c0     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dd8     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200de0     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200de8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000200df0     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000200fd0     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201000     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000201018     0 SECTION LOCAL  DEFAULT   24 \n    25: 000000000020102c     0 SECTION LOCAL  DEFAULT   25 \n    26: 0000000000000000     0 SECTION LOCAL  DEFAULT   26 \n    27: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    28: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_LIST__\n    29: 0000000000000590     0 FUNC    LOCAL  DEFAULT   13 deregister_tm_clones\n    30: 00000000000005d0     0 FUNC    LOCAL  DEFAULT   13 register_tm_clones\n    31: 0000000000000620     0 FUNC    LOCAL  DEFAULT   13 __do_global_dtors_aux\n    32: 000000000020102c     1 OBJECT  LOCAL  DEFAULT   25 completed.6972\n    33: 0000000000200de0     0 OBJECT  LOCAL  DEFAULT   19 __do_global_dtors_aux_fin\n    34: 0000000000000660     0 FUNC    LOCAL  DEFAULT   13 frame_dummy\n    35: 0000000000200dd8     0 OBJECT  LOCAL  DEFAULT   18 __frame_dummy_init_array_\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    37: 0000000000000774     4 OBJECT  LOCAL  DEFAULT   15 _ZL13g_static_text\n    38: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    39: 00000000000008e8     0 OBJECT  LOCAL  DEFAULT   17 __FRAME_END__\n    40: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_END__\n    41: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    42: 0000000000000778     0 NOTYPE  LOCAL  DEFAULT   16 __GNU_EH_FRAME_HDR\n    43: 0000000000200df0     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n    44: 0000000000200de0     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_end\n    45: 0000000000200dd8     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_start\n    46: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n    47: 0000000000201028     4 OBJECT  GLOBAL DEFAULT   24 g_static_data\n    48: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n    49: 0000000000201018     0 NOTYPE  WEAK   DEFAULT   24 data_start\n    50: 0000000000000770     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used\n    51: 0000000000000690    25 FUNC    GLOBAL DEFAULT   13 _Z9main_funcii\n    52: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    53: 00000000000006a9    60 FUNC    GLOBAL DEFAULT   13 main\n    54: 0000000000201020     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n    55: 0000000000000764     0 FUNC    GLOBAL DEFAULT   14 _fini\n    56: 0000000000000560    43 FUNC    GLOBAL DEFAULT   13 _start\n    57: 0000000000000520     0 FUNC    GLOBAL DEFAULT   10 _init\n    58: 0000000000201030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    60: 0000000000201018     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n    61: 0000000000201038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n    62: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n    63: 00000000000006f0   101 FUNC    GLOBAL DEFAULT   13 __libc_csu_init\n    64: 0000000000201030     4 OBJECT  GLOBAL DEFAULT   25 g_static_bss\n    65: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    66: 0000000000000760     2 FUNC    GLOBAL DEFAULT   13 __libc_csu_fini\n    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    68: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    69: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\n.text\n0000000000000520 <_init>:\n 520:   48 83 ec 08             sub    $0x8,%rsp\n 524:   48 8b 05 c5 0a 20 00    mov    0x200ac5(%rip),%rax        # 200ff0 <__gmon_start__>\n 52b:   48 85 c0                test   %rax,%rax\n 52e:   74 02                   je     532 <_init+0x12>\n 530:   ff d0                   callq  *%rax\n 532:   48 83 c4 08             add    $0x8,%rsp\n 536:   c3                      retq   \n\nDisassembly of section .plt:\n\n0000000000000540 <.plt>:\n 540:   ff 35 c2 0a 20 00       pushq  0x200ac2(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 546:   ff 25 c4 0a 20 00       jmpq   *0x200ac4(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 54c:   0f 1f 40 00             nopl   0x0(%rax)\n\nDisassembly of section .plt.got:\n\n0000000000000550 <.plt.got>:\n 550:   ff 25 7a 0a 20 00       jmpq   *0x200a7a(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 556:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000560 <_start>:\n 560:   31 ed                   xor    %ebp,%ebp\n 562:   49 89 d1                mov    %rdx,%r9\n 565:   5e                      pop    %rsi\n 566:   48 89 e2                mov    %rsp,%rdx\n 569:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n 56d:   50                      push   %rax\n 56e:   54                      push   %rsp\n 56f:   4c 8d 05 ea 01 00 00    lea    0x1ea(%rip),%r8        # 760 <__libc_csu_fini>\n 576:   48 8d 0d 73 01 00 00    lea    0x173(%rip),%rcx        # 6f0 <__libc_csu_init>\n 57d:   48 8d 3d 25 01 00 00    lea    0x125(%rip),%rdi        # 6a9 <main>\n 584:   ff 15 5e 0a 20 00       callq  *0x200a5e(%rip)        # 200fe8 <__libc_start_main@GLIBC_2.2.5>\n 58a:   f4                      hlt    \n 58b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000000590 <deregister_tm_clones>:\n 590:   48 8d 3d 99 0a 20 00    lea    0x200a99(%rip),%rdi        # 201030 <__TMC_END__>\n 597:   48 8d 05 99 0a 20 00    lea    0x200a99(%rip),%rax        # 201037 <__TMC_END__+0x7>\n 59e:   55                      push   %rbp\n 59f:   48 29 f8                sub    %rdi,%rax\n 5a2:   48 89 e5                mov    %rsp,%rbp\n 5a5:   48 83 f8 0e             cmp    $0xe,%rax\n 5a9:   76 15                   jbe    5c0 <deregister_tm_clones+0x30>\n 5ab:   48 8b 05 2e 0a 20 00    mov    0x200a2e(%rip),%rax        # 200fe0 <_ITM_deregisterTMCloneTable>\n 5b2:   48 85 c0                test   %rax,%rax\n 5b5:   74 09                   je     5c0 <deregister_tm_clones+0x30>\n 5b7:   5d                      pop    %rbp\n 5b8:   ff e0                   jmpq   *%rax\n 5ba:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 5c0:   5d                      pop    %rbp\n 5c1:   c3                      retq   \n 5c2:   0f 1f 40 00             nopl   0x0(%rax)\n 5c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 5cd:   00 00 00 \n\n00000000000005d0 <register_tm_clones>:\n 5d0:   48 8d 3d 59 0a 20 00    lea    0x200a59(%rip),%rdi        # 201030 <__TMC_END__>\n 5d7:   48 8d 35 52 0a 20 00    lea    0x200a52(%rip),%rsi        # 201030 <__TMC_END__>\n 5de:   55                      push   %rbp\n 5df:   48 29 fe                sub    %rdi,%rsi\n 5e2:   48 89 e5                mov    %rsp,%rbp\n 5e5:   48 c1 fe 03             sar    $0x3,%rsi\n 5e9:   48 89 f0                mov    %rsi,%rax\n 5ec:   48 c1 e8 3f             shr    $0x3f,%rax\n 5f0:   48 01 c6                add    %rax,%rsi\n 5f3:   48 d1 fe                sar    %rsi\n 5f6:   74 18                   je     610 <register_tm_clones+0x40>\n 5f8:   48 8b 05 f9 09 20 00    mov    0x2009f9(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 5ff:   48 85 c0                test   %rax,%rax\n 602:   74 0c                   je     610 <register_tm_clones+0x40>\n 604:   5d                      pop    %rbp\n 605:   ff e0                   jmpq   *%rax\n 607:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 60e:   00 00 \n 610:   5d                      pop    %rbp\n 611:   c3                      retq   \n 612:   0f 1f 40 00             nopl   0x0(%rax)\n 616:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 61d:   00 00 00 \n\n0000000000000620 <__do_global_dtors_aux>:\n 620:   80 3d 05 0a 20 00 00    cmpb   $0x0,0x200a05(%rip)        # 20102c <_edata>\n 627:   75 27                   jne    650 <__do_global_dtors_aux+0x30>\n 629:   48 83 3d 9f 09 20 00    cmpq   $0x0,0x20099f(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 630:   00 \n 631:   55                      push   %rbp\n 632:   48 89 e5                mov    %rsp,%rbp\n 635:   74 0c                   je     643 <__do_global_dtors_aux+0x23>\n 637:   48 8b 3d e2 09 20 00    mov    0x2009e2(%rip),%rdi        # 201020 <__dso_handle>\n 63e:   e8 0d ff ff ff          callq  550 <.plt.got>\n 643:   e8 48 ff ff ff          callq  590 <deregister_tm_clones>\n 648:   5d                      pop    %rbp\n 649:   c6 05 dc 09 20 00 01    movb   $0x1,0x2009dc(%rip)        # 20102c <_edata>\n 650:   f3 c3                   repz retq \n 652:   0f 1f 40 00             nopl   0x0(%rax)\n 656:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 65d:   00 00 00 \n\n0000000000000660 <frame_dummy>:\n 660:   48 8d 3d 81 07 20 00    lea    0x200781(%rip),%rdi        # 200de8 <__JCR_END__>\n 667:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 66b:   75 0b                   jne    678 <frame_dummy+0x18>\n 66d:   e9 5e ff ff ff          jmpq   5d0 <register_tm_clones>\n 672:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 678:   48 8b 05 59 09 20 00    mov    0x200959(%rip),%rax        # 200fd8 <_Jv_RegisterClasses>\n 67f:   48 85 c0                test   %rax,%rax\n 682:   74 e9                   je     66d <frame_dummy+0xd>\n 684:   55                      push   %rbp\n 685:   48 89 e5                mov    %rsp,%rbp\n 688:   ff d0                   callq  *%rax\n 68a:   5d                      pop    %rbp\n 68b:   e9 40 ff ff ff          jmpq   5d0 <register_tm_clones>\n\n0000000000000690 <_Z9main_funcii>:\n 690:   55                      push   %rbp\n 691:   48 89 e5                mov    %rsp,%rbp\n 694:   89 7d fc                mov    %edi,-0x4(%rbp)\n 697:   89 75 f8                mov    %esi,-0x8(%rbp)\n 69a:   8b 55 fc                mov    -0x4(%rbp),%edx\n 69d:   8b 45 f8                mov    -0x8(%rbp),%eax\n 6a0:   01 d0                   add    %edx,%eax\n 6a2:   05 c3 07 00 00          add    $0x7c3,%eax\n 6a7:   5d                      pop    %rbp\n 6a8:   c3                      retq   \n\n00000000000006a9 <main>:\n 6a9:   55                      push   %rbp\n 6aa:   48 89 e5                mov    %rsp,%rbp\n 6ad:   48 83 ec 20             sub    $0x20,%rsp\n 6b1:   89 7d ec                mov    %edi,-0x14(%rbp)\n 6b4:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n 6b8:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n 6bf:   8b 45 ec                mov    -0x14(%rbp),%eax\n 6c2:   89 05 68 09 20 00       mov    %eax,0x200968(%rip)        # 201030 <__TMC_END__>\n 6c8:   8b 15 5a 09 20 00       mov    0x20095a(%rip),%edx        # 201028 <g_static_data>\n 6ce:   8b 05 5c 09 20 00       mov    0x20095c(%rip),%eax        # 201030 <__TMC_END__>\n 6d4:   89 d6                   mov    %edx,%esi\n 6d6:   89 c7                   mov    %eax,%edi\n 6d8:   e8 b3 ff ff ff          callq  690 <_Z9main_funcii>\n 6dd:   01 45 fc                add    %eax,-0x4(%rbp)\n 6e0:   8b 45 fc                mov    -0x4(%rbp),%eax\n 6e3:   c9                      leaveq \n 6e4:   c3                      retq   \n 6e5:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 6ec:   00 00 00 \n 6ef:   90                      nop\n\n00000000000006f0 <__libc_csu_init>:\n 6f0:   41 57                   push   %r15\n 6f2:   41 56                   push   %r14\n 6f4:   49 89 d7                mov    %rdx,%r15\n 6f7:   41 55                   push   %r13\n 6f9:   41 54                   push   %r12\n 6fb:   4c 8d 25 d6 06 20 00    lea    0x2006d6(%rip),%r12        # 200dd8 <__frame_dummy_init_array_entry>\n 702:   55                      push   %rbp\n 703:   48 8d 2d d6 06 20 00    lea    0x2006d6(%rip),%rbp        # 200de0 <__init_array_end>\n 70a:   53                      push   %rbx\n 70b:   41 89 fd                mov    %edi,%r13d\n 70e:   49 89 f6                mov    %rsi,%r14\n 711:   4c 29 e5                sub    %r12,%rbp\n 714:   48 83 ec 08             sub    $0x8,%rsp\n 718:   48 c1 fd 03             sar    $0x3,%rbp\n 71c:   e8 ff fd ff ff          callq  520 <_init>\n 721:   48 85 ed                test   %rbp,%rbp\n 724:   74 20                   je     746 <__libc_csu_init+0x56>\n 726:   31 db                   xor    %ebx,%ebx\n 728:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n 72f:   00 \n 730:   4c 89 fa                mov    %r15,%rdx\n 733:   4c 89 f6                mov    %r14,%rsi\n 736:   44 89 ef                mov    %r13d,%edi\n 739:   41 ff 14 dc             callq  *(%r12,%rbx,8)\n 73d:   48 83 c3 01             add    $0x1,%rbx\n 741:   48 39 dd                cmp    %rbx,%rbp\n 744:   75 ea                   jne    730 <__libc_csu_init+0x40>\n 746:   48 83 c4 08             add    $0x8,%rsp\n 74a:   5b                      pop    %rbx\n 74b:   5d                      pop    %rbp\n 74c:   41 5c                   pop    %r12\n 74e:   41 5d                   pop    %r13\n 750:   41 5e                   pop    %r14\n 752:   41 5f                   pop    %r15\n 754:   c3                      retq   \n 755:   90                      nop\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <__libc_csu_fini>:\n 760:   f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n0000000000000764 <_fini>:\n 764:   48 83 ec 08             sub    $0x8,%rsp\n 768:   48 83 c4 08             add    $0x8,%rsp\n 76c:   c3                      retq   \n```\n\n\n##### 可执行文件 (位置无关的非PIE(EXEC)版本)  \n\n``` ARMASM\nDynamic section at offset 0xe30 contains 23 entries:\n  标记        类型                         名称/值\n 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]\n 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]\n 0x000000000000000c (INIT)               0x4003b8\n 0x000000000000000d (FINI)               0x4005b4\n 0x0000000000000019 (INIT_ARRAY)         0x600e18\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n 0x000000000000001a (FINI_ARRAY)         0x600e20\n 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n 0x000000006ffffef5 (GNU_HASH)           0x400298\n 0x0000000000000005 (STRTAB)             0x400300\n 0x0000000000000006 (SYMTAB)             0x4002b8\n 0x000000000000000a (STRSZ)              95 (bytes)\n 0x000000000000000b (SYMENT)             24 (bytes)\n 0x0000000000000015 (DEBUG)              0x0\n 0x0000000000000007 (RELA)               0x400388\n 0x0000000000000008 (RELASZ)             48 (bytes)\n 0x0000000000000009 (RELAENT)            24 (bytes)\n 0x000000006ffffffe (VERNEED)            0x400368\n 0x000000006fffffff (VERNEEDNUM)         1\n 0x000000006ffffff0 (VERSYM)             0x400360\n 0x0000000000000000 (NULL)               0x0\n\n重定位节 '.rela.dyn' 位于偏移量 0x388 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000600ff0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000600ff8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 3 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\nSymbol table '.symtab' contains 65 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000400238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000400254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000400274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000400298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000004002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000400300     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000400360     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000400368     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000400388     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000004003b8     0 SECTION LOCAL  DEFAULT   10 \n    11: 00000000004003d0     0 SECTION LOCAL  DEFAULT   11 \n    12: 00000000004005b4     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000004005c0     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000004005c8     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000400608     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000600e18     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000600e20     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000600e28     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000600e30     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000600ff0     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000601000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000601018     0 SECTION LOCAL  DEFAULT   22 \n    23: 000000000060102c     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000400410     0 FUNC    LOCAL  DEFAULT   11 deregister_tm_clones\n    28: 0000000000400450     0 FUNC    LOCAL  DEFAULT   11 register_tm_clones\n    29: 0000000000400490     0 FUNC    LOCAL  DEFAULT   11 __do_global_dtors_aux\n    30: 000000000060102c     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000600e20     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000004004b0     0 FUNC    LOCAL  DEFAULT   11 frame_dummy\n    33: 0000000000600e18     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    35: 00000000004005c4     4 OBJECT  LOCAL  DEFAULT   13 _ZL13g_static_text\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    37: 0000000000400708     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    38: 0000000000600e28     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    39: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    40: 00000000004005c8     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    41: 0000000000600e30     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    42: 0000000000600e20     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_end\n    43: 0000000000600e18     0 NOTYPE  LOCAL  DEFAULT   16 __init_array_start\n    44: 0000000000601000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    45: 0000000000601028     4 OBJECT  GLOBAL DEFAULT   22 g_static_data\n    46: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000601018     0 NOTYPE  WEAK   DEFAULT   22 data_start\n    48: 00000000004005c0     4 OBJECT  GLOBAL DEFAULT   13 _IO_stdin_used\n    49: 00000000004004d6    25 FUNC    GLOBAL DEFAULT   11 _Z9main_funcii\n    50: 00000000004004ef    69 FUNC    GLOBAL DEFAULT   11 main\n    51: 0000000000601020     0 OBJECT  GLOBAL HIDDEN    22 __dso_handle\n    52: 00000000004005b4     0 FUNC    GLOBAL DEFAULT   12 _fini\n    53: 0000000000400400     2 FUNC    GLOBAL HIDDEN    11 _dl_relocate_static_pie\n    54: 00000000004003d0    43 FUNC    GLOBAL DEFAULT   11 _start\n    55: 00000000004003b8     0 FUNC    GLOBAL DEFAULT   10 _init\n    56: 0000000000601030     0 OBJECT  GLOBAL HIDDEN    22 __TMC_END__\n    57: 0000000000601018     0 NOTYPE  GLOBAL DEFAULT   22 __data_start\n    58: 0000000000601038     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    59: 000000000060102c     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    60: 0000000000400540   101 FUNC    GLOBAL DEFAULT   11 __libc_csu_init\n    61: 0000000000601030     4 OBJECT  GLOBAL DEFAULT   23 g_static_bss\n    62: 00000000004005b0     2 FUNC    GLOBAL DEFAULT   11 __libc_csu_fini\n    63: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    64: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n\n\n.text\n00000000004003b8 <_init>:\n  4003b8:       48 83 ec 08             sub    $0x8,%rsp\n  4003bc:       48 8b 05 35 0c 20 00    mov    0x200c35(%rip),%rax        # 600ff8 <__gmon_start__>\n  4003c3:       48 85 c0                test   %rax,%rax\n  4003c6:       74 02                   je     4003ca <_init+0x12>\n  4003c8:       ff d0                   callq  *%rax\n  4003ca:       48 83 c4 08             add    $0x8,%rsp\n  4003ce:       c3                      retq   \n\nDisassembly of section .text:\n\n00000000004003d0 <_start>:\n  4003d0:       31 ed                   xor    %ebp,%ebp\n  4003d2:       49 89 d1                mov    %rdx,%r9\n  4003d5:       5e                      pop    %rsi\n  4003d6:       48 89 e2                mov    %rsp,%rdx\n  4003d9:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n  4003dd:       50                      push   %rax\n  4003de:       54                      push   %rsp\n  4003df:       49 c7 c0 b0 05 40 00    mov    $0x4005b0,%r8\n  4003e6:       48 c7 c1 40 05 40 00    mov    $0x400540,%rcx\n  4003ed:       48 c7 c7 ef 04 40 00    mov    $0x4004ef,%rdi\n  4003f4:       ff 15 f6 0b 20 00       callq  *0x200bf6(%rip)        # 600ff0 <__libc_start_main@GLIBC_2.2.5>\n  4003fa:       f4                      hlt    \n  4003fb:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000400400 <_dl_relocate_static_pie>:\n  400400:       f3 c3                   repz retq \n  400402:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  400409:       00 00 00 \n  40040c:       0f 1f 40 00             nopl   0x0(%rax)\n\n0000000000400410 <deregister_tm_clones>:\n  400410:       b8 37 10 60 00          mov    $0x601037,%eax\n  400415:       55                      push   %rbp\n  400416:       48 2d 30 10 60 00       sub    $0x601030,%rax\n  40041c:       48 83 f8 0e             cmp    $0xe,%rax\n  400420:       48 89 e5                mov    %rsp,%rbp\n  400423:       76 1b                   jbe    400440 <deregister_tm_clones+0x30>\n  400425:       b8 00 00 00 00          mov    $0x0,%eax\n  40042a:       48 85 c0                test   %rax,%rax\n  40042d:       74 11                   je     400440 <deregister_tm_clones+0x30>\n  40042f:       5d                      pop    %rbp\n  400430:       bf 30 10 60 00          mov    $0x601030,%edi\n  400435:       ff e0                   jmpq   *%rax\n  400437:       66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n  40043e:       00 00 \n  400440:       5d                      pop    %rbp\n  400441:       c3                      retq   \n  400442:       0f 1f 40 00             nopl   0x0(%rax)\n  400446:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40044d:       00 00 00 \n\n0000000000400450 <register_tm_clones>:\n  400450:       be 30 10 60 00          mov    $0x601030,%esi\n  400455:       55                      push   %rbp\n  400456:       48 81 ee 30 10 60 00    sub    $0x601030,%rsi\n  40045d:       48 c1 fe 03             sar    $0x3,%rsi\n  400461:       48 89 e5                mov    %rsp,%rbp\n  400464:       48 89 f0                mov    %rsi,%rax\n  400467:       48 c1 e8 3f             shr    $0x3f,%rax\n  40046b:       48 01 c6                add    %rax,%rsi\n  40046e:       48 d1 fe                sar    %rsi\n  400471:       74 15                   je     400488 <register_tm_clones+0x38>\n  400473:       b8 00 00 00 00          mov    $0x0,%eax\n  400478:       48 85 c0                test   %rax,%rax\n  40047b:       74 0b                   je     400488 <register_tm_clones+0x38>\n  40047d:       5d                      pop    %rbp\n  40047e:       bf 30 10 60 00          mov    $0x601030,%edi\n  400483:       ff e0                   jmpq   *%rax\n  400485:       0f 1f 00                nopl   (%rax)\n  400488:       5d                      pop    %rbp\n  400489:       c3                      retq   \n  40048a:       66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n\n0000000000400490 <__do_global_dtors_aux>:\n  400490:       80 3d 95 0b 20 00 00    cmpb   $0x0,0x200b95(%rip)        # 60102c <_edata>\n  400497:       75 11                   jne    4004aa <__do_global_dtors_aux+0x1a>\n  400499:       55                      push   %rbp\n  40049a:       48 89 e5                mov    %rsp,%rbp\n  40049d:       e8 6e ff ff ff          callq  400410 <deregister_tm_clones>\n  4004a2:       5d                      pop    %rbp\n  4004a3:       c6 05 82 0b 20 00 01    movb   $0x1,0x200b82(%rip)        # 60102c <_edata>\n  4004aa:       f3 c3                   repz retq \n  4004ac:       0f 1f 40 00             nopl   0x0(%rax)\n\n00000000004004b0 <frame_dummy>:\n  4004b0:       bf 28 0e 60 00          mov    $0x600e28,%edi\n  4004b5:       48 83 3f 00             cmpq   $0x0,(%rdi)\n  4004b9:       75 05                   jne    4004c0 <frame_dummy+0x10>\n  4004bb:       eb 93                   jmp    400450 <register_tm_clones>\n  4004bd:       0f 1f 00                nopl   (%rax)\n  4004c0:       b8 00 00 00 00          mov    $0x0,%eax\n  4004c5:       48 85 c0                test   %rax,%rax\n  4004c8:       74 f1                   je     4004bb <frame_dummy+0xb>\n  4004ca:       55                      push   %rbp\n  4004cb:       48 89 e5                mov    %rsp,%rbp\n  4004ce:       ff d0                   callq  *%rax\n  4004d0:       5d                      pop    %rbp\n  4004d1:       e9 7a ff ff ff          jmpq   400450 <register_tm_clones>\n\n00000000004004d6 <_Z9main_funcii>:\n  4004d6:       55                      push   %rbp\n  4004d7:       48 89 e5                mov    %rsp,%rbp\n  4004da:       89 7d fc                mov    %edi,-0x4(%rbp)\n  4004dd:       89 75 f8                mov    %esi,-0x8(%rbp)\n  4004e0:       8b 55 fc                mov    -0x4(%rbp),%edx\n  4004e3:       8b 45 f8                mov    -0x8(%rbp),%eax\n  4004e6:       01 d0                   add    %edx,%eax\n  4004e8:       05 c3 07 00 00          add    $0x7c3,%eax\n  4004ed:       5d                      pop    %rbp\n  4004ee:       c3                      retq   \n\n00000000004004ef <main>:\n  4004ef:       55                      push   %rbp\n  4004f0:       48 89 e5                mov    %rsp,%rbp\n  4004f3:       48 83 ec 20             sub    $0x20,%rsp\n  4004f7:       89 7d ec                mov    %edi,-0x14(%rbp)\n  4004fa:       48 89 75 e0             mov    %rsi,-0x20(%rbp)\n  4004fe:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n  400505:       48 c7 c0 30 10 60 00    mov    $0x601030,%rax\n  40050c:       8b 55 ec                mov    -0x14(%rbp),%edx\n  40050f:       89 10                   mov    %edx,(%rax)\n  400511:       48 c7 c0 28 10 60 00    mov    $0x601028,%rax\n  400518:       8b 10                   mov    (%rax),%edx\n  40051a:       48 c7 c0 30 10 60 00    mov    $0x601030,%rax\n  400521:       8b 00                   mov    (%rax),%eax\n  400523:       89 d6                   mov    %edx,%esi\n  400525:       89 c7                   mov    %eax,%edi\n  400527:       e8 aa ff ff ff          callq  4004d6 <_Z9main_funcii>\n  40052c:       01 45 fc                add    %eax,-0x4(%rbp)\n  40052f:       8b 45 fc                mov    -0x4(%rbp),%eax\n  400532:       c9                      leaveq \n  400533:       c3                      retq   \n  400534:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  40053b:       00 00 00 \n  40053e:       66 90                   xchg   %ax,%ax\n\n0000000000400540 <__libc_csu_init>:\n  400540:       41 57                   push   %r15\n  400542:       41 56                   push   %r14\n  400544:       49 89 d7                mov    %rdx,%r15\n  400547:       41 55                   push   %r13\n  400549:       41 54                   push   %r12\n  40054b:       4c 8d 25 c6 08 20 00    lea    0x2008c6(%rip),%r12        # 600e18 <__frame_dummy_init_array_entry>\n  400552:       55                      push   %rbp\n  400553:       48 8d 2d c6 08 20 00    lea    0x2008c6(%rip),%rbp        # 600e20 <__init_array_end>\n  40055a:       53                      push   %rbx\n  40055b:       41 89 fd                mov    %edi,%r13d\n  40055e:       49 89 f6                mov    %rsi,%r14\n  400561:       4c 29 e5                sub    %r12,%rbp\n  400564:       48 83 ec 08             sub    $0x8,%rsp\n  400568:       48 c1 fd 03             sar    $0x3,%rbp\n  40056c:       e8 47 fe ff ff          callq  4003b8 <_init>\n  400571:       48 85 ed                test   %rbp,%rbp\n  400574:       74 20                   je     400596 <__libc_csu_init+0x56>\n  400576:       31 db                   xor    %ebx,%ebx\n  400578:       0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n  40057f:       00 \n  400580:       4c 89 fa                mov    %r15,%rdx\n  400583:       4c 89 f6                mov    %r14,%rsi\n  400586:       44 89 ef                mov    %r13d,%edi\n  400589:       41 ff 14 dc             callq  *(%r12,%rbx,8)\n  40058d:       48 83 c3 01             add    $0x1,%rbx\n  400591:       48 39 dd                cmp    %rbx,%rbp\n  400594:       75 ea                   jne    400580 <__libc_csu_init+0x40>\n  400596:       48 83 c4 08             add    $0x8,%rsp\n  40059a:       5b                      pop    %rbx\n  40059b:       5d                      pop    %rbp\n  40059c:       41 5c                   pop    %r12\n  40059e:       41 5d                   pop    %r13\n  4005a0:       41 5e                   pop    %r14\n  4005a2:       41 5f                   pop    %r15\n  4005a4:       c3                      retq   \n  4005a5:       90                      nop\n  4005a6:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n  4005ad:       00 00 00 \n\n00000000004005b0 <__libc_csu_fini>:\n  4005b0:       f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n00000000004005b4 <_fini>:\n  4005b4:       48 83 ec 08             sub    $0x8,%rsp\n  4005b8:       48 83 c4 08             add    $0x8,%rsp\n  4005bc:       c3                      retq  \n```\n\n\n##### 可执行文件 (位置无关的PIE(DYN)版本)  \n```ARMASM\n重定位节 '.rela.dyn' 位于偏移量 0x448 含有 9 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200dd8  000000000008 R_X86_64_RELATIVE                    660\n000000200de0  000000000008 R_X86_64_RELATIVE                    620\n000000201020  000000000008 R_X86_64_RELATIVE                    201020\n000000200fd0  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fd8  000200000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fe0  000300000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200fe8  000400000006 R_X86_64_GLOB_DAT 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0\n000000200ff0  000500000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000600000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 7 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     3: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     6: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nSymbol table '.symtab' contains 70 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000238     0 SECTION LOCAL  DEFAULT    1 \n     2: 0000000000000254     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000274     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000298     0 SECTION LOCAL  DEFAULT    4 \n     5: 00000000000002b8     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000360     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000418     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000428     0 SECTION LOCAL  DEFAULT    8 \n     9: 0000000000000448     0 SECTION LOCAL  DEFAULT    9 \n    10: 0000000000000520     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000540     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000550     0 SECTION LOCAL  DEFAULT   12 \n    13: 0000000000000560     0 SECTION LOCAL  DEFAULT   13 \n    14: 0000000000000764     0 SECTION LOCAL  DEFAULT   14 \n    15: 0000000000000770     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000000778     0 SECTION LOCAL  DEFAULT   16 \n    17: 00000000000007c0     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dd8     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200de0     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200de8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000200df0     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000200fd0     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201000     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000201018     0 SECTION LOCAL  DEFAULT   24 \n    25: 000000000020102c     0 SECTION LOCAL  DEFAULT   25 \n    26: 0000000000000000     0 SECTION LOCAL  DEFAULT   26 \n    27: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    28: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_LIST__\n    29: 0000000000000590     0 FUNC    LOCAL  DEFAULT   13 deregister_tm_clones\n    30: 00000000000005d0     0 FUNC    LOCAL  DEFAULT   13 register_tm_clones\n    31: 0000000000000620     0 FUNC    LOCAL  DEFAULT   13 __do_global_dtors_aux\n    32: 000000000020102c     1 OBJECT  LOCAL  DEFAULT   25 completed.6972\n    33: 0000000000200de0     0 OBJECT  LOCAL  DEFAULT   19 __do_global_dtors_aux_fin\n    34: 0000000000000660     0 FUNC    LOCAL  DEFAULT   13 frame_dummy\n    35: 0000000000200dd8     0 OBJECT  LOCAL  DEFAULT   18 __frame_dummy_init_array_\n    36: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp\n    37: 0000000000000774     4 OBJECT  LOCAL  DEFAULT   15 _ZL13g_static_text\n    38: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    39: 00000000000008e8     0 OBJECT  LOCAL  DEFAULT   17 __FRAME_END__\n    40: 0000000000200de8     0 OBJECT  LOCAL  DEFAULT   20 __JCR_END__\n    41: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    42: 0000000000000778     0 NOTYPE  LOCAL  DEFAULT   16 __GNU_EH_FRAME_HDR\n    43: 0000000000200df0     0 OBJECT  LOCAL  DEFAULT   21 _DYNAMIC\n    44: 0000000000200de0     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_end\n    45: 0000000000200dd8     0 NOTYPE  LOCAL  DEFAULT   18 __init_array_start\n    46: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   23 _GLOBAL_OFFSET_TABLE_\n    47: 0000000000201028     4 OBJECT  GLOBAL DEFAULT   24 g_static_data\n    48: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   24 _edata\n    49: 0000000000201018     0 NOTYPE  WEAK   DEFAULT   24 data_start\n    50: 0000000000000770     4 OBJECT  GLOBAL DEFAULT   15 _IO_stdin_used\n    51: 0000000000000690    25 FUNC    GLOBAL DEFAULT   13 _Z9main_funcii\n    52: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    53: 00000000000006a9    69 FUNC    GLOBAL DEFAULT   13 main\n    54: 0000000000201020     0 OBJECT  GLOBAL HIDDEN    24 __dso_handle\n    55: 0000000000000764     0 FUNC    GLOBAL DEFAULT   14 _fini\n    56: 0000000000000560    43 FUNC    GLOBAL DEFAULT   13 _start\n    57: 0000000000000520     0 FUNC    GLOBAL DEFAULT   10 _init\n    58: 0000000000201030     0 OBJECT  GLOBAL HIDDEN    24 __TMC_END__\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    60: 0000000000201018     0 NOTYPE  GLOBAL DEFAULT   24 __data_start\n    61: 0000000000201038     0 NOTYPE  GLOBAL DEFAULT   25 _end\n    62: 000000000020102c     0 NOTYPE  GLOBAL DEFAULT   25 __bss_start\n    63: 00000000000006f0   101 FUNC    GLOBAL DEFAULT   13 __libc_csu_init\n    64: 0000000000201030     4 OBJECT  GLOBAL DEFAULT   25 g_static_bss\n    65: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    66: 0000000000000760     2 FUNC    GLOBAL DEFAULT   13 __libc_csu_fini\n    67: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@@GLIBC_\n    68: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    69: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\n\n.text\n0000000000000520 <_init>:\n 520:   48 83 ec 08             sub    $0x8,%rsp\n 524:   48 8b 05 c5 0a 20 00    mov    0x200ac5(%rip),%rax        # 200ff0 <__gmon_start__>\n 52b:   48 85 c0                test   %rax,%rax\n 52e:   74 02                   je     532 <_init+0x12>\n 530:   ff d0                   callq  *%rax\n 532:   48 83 c4 08             add    $0x8,%rsp\n 536:   c3                      retq   \n\nDisassembly of section .plt:\n\n0000000000000540 <.plt>:\n 540:   ff 35 c2 0a 20 00       pushq  0x200ac2(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 546:   ff 25 c4 0a 20 00       jmpq   *0x200ac4(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 54c:   0f 1f 40 00             nopl   0x0(%rax)\n\nDisassembly of section .plt.got:\n\n0000000000000550 <.plt.got>:\n 550:   ff 25 7a 0a 20 00       jmpq   *0x200a7a(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 556:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000560 <_start>:\n 560:   31 ed                   xor    %ebp,%ebp\n 562:   49 89 d1                mov    %rdx,%r9\n 565:   5e                      pop    %rsi\n 566:   48 89 e2                mov    %rsp,%rdx\n 569:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n 56d:   50                      push   %rax\n 56e:   54                      push   %rsp\n 56f:   4c 8d 05 ea 01 00 00    lea    0x1ea(%rip),%r8        # 760 <__libc_csu_fini>\n 576:   48 8d 0d 73 01 00 00    lea    0x173(%rip),%rcx        # 6f0 <__libc_csu_init>\n 57d:   48 8d 3d 25 01 00 00    lea    0x125(%rip),%rdi        # 6a9 <main>\n 584:   ff 15 5e 0a 20 00       callq  *0x200a5e(%rip)        # 200fe8 <__libc_start_main@GLIBC_2.2.5>\n 58a:   f4                      hlt    \n 58b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)\n\n0000000000000590 <deregister_tm_clones>:\n 590:   48 8d 3d 99 0a 20 00    lea    0x200a99(%rip),%rdi        # 201030 <__TMC_END__>\n 597:   48 8d 05 99 0a 20 00    lea    0x200a99(%rip),%rax        # 201037 <__TMC_END__+0x7>\n 59e:   55                      push   %rbp\n 59f:   48 29 f8                sub    %rdi,%rax\n 5a2:   48 89 e5                mov    %rsp,%rbp\n 5a5:   48 83 f8 0e             cmp    $0xe,%rax\n 5a9:   76 15                   jbe    5c0 <deregister_tm_clones+0x30>\n 5ab:   48 8b 05 2e 0a 20 00    mov    0x200a2e(%rip),%rax        # 200fe0 <_ITM_deregisterTMCloneTable>\n 5b2:   48 85 c0                test   %rax,%rax\n 5b5:   74 09                   je     5c0 <deregister_tm_clones+0x30>\n 5b7:   5d                      pop    %rbp\n 5b8:   ff e0                   jmpq   *%rax\n 5ba:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 5c0:   5d                      pop    %rbp\n 5c1:   c3                      retq   \n 5c2:   0f 1f 40 00             nopl   0x0(%rax)\n 5c6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 5cd:   00 00 00 \n\n00000000000005d0 <register_tm_clones>:\n 5d0:   48 8d 3d 59 0a 20 00    lea    0x200a59(%rip),%rdi        # 201030 <__TMC_END__>\n 5d7:   48 8d 35 52 0a 20 00    lea    0x200a52(%rip),%rsi        # 201030 <__TMC_END__>\n 5de:   55                      push   %rbp\n 5df:   48 29 fe                sub    %rdi,%rsi\n 5e2:   48 89 e5                mov    %rsp,%rbp\n 5e5:   48 c1 fe 03             sar    $0x3,%rsi\n 5e9:   48 89 f0                mov    %rsi,%rax\n 5ec:   48 c1 e8 3f             shr    $0x3f,%rax\n 5f0:   48 01 c6                add    %rax,%rsi\n 5f3:   48 d1 fe                sar    %rsi\n 5f6:   74 18                   je     610 <register_tm_clones+0x40>\n 5f8:   48 8b 05 f9 09 20 00    mov    0x2009f9(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 5ff:   48 85 c0                test   %rax,%rax\n 602:   74 0c                   je     610 <register_tm_clones+0x40>\n 604:   5d                      pop    %rbp\n 605:   ff e0                   jmpq   *%rax\n 607:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 60e:   00 00 \n 610:   5d                      pop    %rbp\n 611:   c3                      retq   \n 612:   0f 1f 40 00             nopl   0x0(%rax)\n 616:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 61d:   00 00 00 \n\n0000000000000620 <__do_global_dtors_aux>:\n 620:   80 3d 05 0a 20 00 00    cmpb   $0x0,0x200a05(%rip)        # 20102c <_edata>\n 627:   75 27                   jne    650 <__do_global_dtors_aux+0x30>\n 629:   48 83 3d 9f 09 20 00    cmpq   $0x0,0x20099f(%rip)        # 200fd0 <__cxa_finalize@GLIBC_2.2.5>\n 630:   00 \n 631:   55                      push   %rbp\n 632:   48 89 e5                mov    %rsp,%rbp\n 635:   74 0c                   je     643 <__do_global_dtors_aux+0x23>\n 637:   48 8b 3d e2 09 20 00    mov    0x2009e2(%rip),%rdi        # 201020 <__dso_handle>\n 63e:   e8 0d ff ff ff          callq  550 <.plt.got>\n 643:   e8 48 ff ff ff          callq  590 <deregister_tm_clones>\n 648:   5d                      pop    %rbp\n 649:   c6 05 dc 09 20 00 01    movb   $0x1,0x2009dc(%rip)        # 20102c <_edata>\n 650:   f3 c3                   repz retq \n 652:   0f 1f 40 00             nopl   0x0(%rax)\n 656:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 65d:   00 00 00 \n\n0000000000000660 <frame_dummy>:\n 660:   48 8d 3d 81 07 20 00    lea    0x200781(%rip),%rdi        # 200de8 <__JCR_END__>\n 667:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 66b:   75 0b                   jne    678 <frame_dummy+0x18>\n 66d:   e9 5e ff ff ff          jmpq   5d0 <register_tm_clones>\n 672:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 678:   48 8b 05 59 09 20 00    mov    0x200959(%rip),%rax        # 200fd8 <_Jv_RegisterClasses>\n 67f:   48 85 c0                test   %rax,%rax\n 682:   74 e9                   je     66d <frame_dummy+0xd>\n 684:   55                      push   %rbp\n 685:   48 89 e5                mov    %rsp,%rbp\n 688:   ff d0                   callq  *%rax\n 68a:   5d                      pop    %rbp\n 68b:   e9 40 ff ff ff          jmpq   5d0 <register_tm_clones>\n\n0000000000000690 <_Z9main_funcii>:\n 690:   55                      push   %rbp\n 691:   48 89 e5                mov    %rsp,%rbp\n 694:   89 7d fc                mov    %edi,-0x4(%rbp)\n 697:   89 75 f8                mov    %esi,-0x8(%rbp)\n 69a:   8b 55 fc                mov    -0x4(%rbp),%edx\n 69d:   8b 45 f8                mov    -0x8(%rbp),%eax\n 6a0:   01 d0                   add    %edx,%eax\n 6a2:   05 c3 07 00 00          add    $0x7c3,%eax\n 6a7:   5d                      pop    %rbp\n 6a8:   c3                      retq   \n\n00000000000006a9 <main>:\n 6a9:   55                      push   %rbp\n 6aa:   48 89 e5                mov    %rsp,%rbp\n 6ad:   48 83 ec 20             sub    $0x20,%rsp\n 6b1:   89 7d ec                mov    %edi,-0x14(%rbp)\n 6b4:   48 89 75 e0             mov    %rsi,-0x20(%rbp)\n 6b8:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)\n 6bf:   48 8d 05 6a 09 20 00    lea    0x20096a(%rip),%rax        # 201030 <__TMC_END__>\n 6c6:   8b 55 ec                mov    -0x14(%rbp),%edx\n 6c9:   89 10                   mov    %edx,(%rax)\n 6cb:   48 8d 05 56 09 20 00    lea    0x200956(%rip),%rax        # 201028 <g_static_data>\n 6d2:   8b 10                   mov    (%rax),%edx\n 6d4:   48 8d 05 55 09 20 00    lea    0x200955(%rip),%rax        # 201030 <__TMC_END__>\n 6db:   8b 00                   mov    (%rax),%eax\n 6dd:   89 d6                   mov    %edx,%esi\n 6df:   89 c7                   mov    %eax,%edi\n 6e1:   e8 aa ff ff ff          callq  690 <_Z9main_funcii>\n 6e6:   01 45 fc                add    %eax,-0x4(%rbp)\n 6e9:   8b 45 fc                mov    -0x4(%rbp),%eax\n 6ec:   c9                      leaveq \n 6ed:   c3                      retq   \n 6ee:   66 90                   xchg   %ax,%ax\n\n00000000000006f0 <__libc_csu_init>:\n 6f0:   41 57                   push   %r15\n 6f2:   41 56                   push   %r14\n 6f4:   49 89 d7                mov    %rdx,%r15\n 6f7:   41 55                   push   %r13\n 6f9:   41 54                   push   %r12\n 6fb:   4c 8d 25 d6 06 20 00    lea    0x2006d6(%rip),%r12        # 200dd8 <__frame_dummy_init_array_entry>\n 702:   55                      push   %rbp\n 703:   48 8d 2d d6 06 20 00    lea    0x2006d6(%rip),%rbp        # 200de0 <__init_array_end>\n 70a:   53                      push   %rbx\n 70b:   41 89 fd                mov    %edi,%r13d\n 70e:   49 89 f6                mov    %rsi,%r14\n 711:   4c 29 e5                sub    %r12,%rbp\n 714:   48 83 ec 08             sub    $0x8,%rsp\n 718:   48 c1 fd 03             sar    $0x3,%rbp\n 71c:   e8 ff fd ff ff          callq  520 <_init>\n 721:   48 85 ed                test   %rbp,%rbp\n 724:   74 20                   je     746 <__libc_csu_init+0x56>\n 726:   31 db                   xor    %ebx,%ebx\n 728:   0f 1f 84 00 00 00 00    nopl   0x0(%rax,%rax,1)\n 72f:   00 \n 730:   4c 89 fa                mov    %r15,%rdx\n 733:   4c 89 f6                mov    %r14,%rsi\n 736:   44 89 ef                mov    %r13d,%edi\n 739:   41 ff 14 dc             callq  *(%r12,%rbx,8)\n 73d:   48 83 c3 01             add    $0x1,%rbx\n 741:   48 39 dd                cmp    %rbx,%rbp\n 744:   75 ea                   jne    730 <__libc_csu_init+0x40>\n 746:   48 83 c4 08             add    $0x8,%rsp\n 74a:   5b                      pop    %rbx\n 74b:   5d                      pop    %rbp\n 74c:   41 5c                   pop    %r12\n 74e:   41 5d                   pop    %r13\n 750:   41 5e                   pop    %r14\n 752:   41 5f                   pop    %r15\n 754:   c3                      retq   \n 755:   90                      nop\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <__libc_csu_fini>:\n 760:   f3 c3                   repz retq \n\nDisassembly of section .fini:\n\n0000000000000764 <_fini>:\n 764:   48 83 ec 08             sub    $0x8,%rsp\n 768:   48 83 c4 08             add    $0x8,%rsp\n 76c:   c3                      retq   \n```","slug":"2019-11-29-static-linking","published":1,"updated":"2020-03-09T03:25:56.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyeku001v7w5h5juc5go5","content":"<h3><span id=\"目录\">目录</span></h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#基本编译链接流程\">基本编译链接流程</a></li>\n<li><a href=\"#静态链接过程概述\">静态链接过程概述</a></li>\n<li><a href=\"#静态链接过程流程追踪和代码验证\">静态链接过程流程追踪和代码验证</a><ul>\n<li><a href=\"#测试源代码\">测试源代码</a></li>\n<li><a href=\"#生成汇编代码-从这里开始会有两个分支代码-non-pic-和-pic对照\">生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)</a><ul>\n<li><a href=\"#汇编代码-相对位置版本\">汇编代码 (相对位置版本)</a></li>\n<li><a href=\"#汇编代码-位置无关版本\">汇编代码 (位置无关版本)</a></li>\n</ul>\n</li>\n<li><a href=\"#生成elf的可重定位文件\">生成ELF的可重定位文件</a><ul>\n<li><a href=\"#可重定向文件和汇编指令-相对位置版本\">可重定向文件和汇编指令 (相对位置版本)</a></li>\n<li><a href=\"#可重定向文件和汇编指令-位置无关版本\">可重定向文件和汇编指令 (位置无关版本)</a></li>\n</ul>\n</li>\n<li><a href=\"#链接为可执行文件或者共享库\">链接为可执行文件(或者共享库)</a><ul>\n<li><a href=\"#可执行文件-相对位置的非pieexec版本\">可执行文件 (相对位置的非PIE(EXEC)版本)</a></li>\n<li><a href=\"#可执行文件-相对位置的piedyn版本\">可执行文件 (相对位置的PIE(DYN)版本)</a></li>\n<li><a href=\"#可执行文件-位置无关的非pieexec版本\">可执行文件 (位置无关的非PIE(EXEC)版本)</a></li>\n<li><a href=\"#可执行文件-位置无关的piedyn版本\">可执行文件 (位置无关的PIE(DYN)版本)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3><span id=\"基本编译链接流程\">基本编译链接流程</span></h3><ul>\n<li>编译并输出汇编代码  <ul>\n<li>g++ -S lib.cpp -o lib.s </li>\n</ul>\n</li>\n<li>打包成ELF可重定位文件 ELF TYPE= ET_REL  即.o文件  <ul>\n<li>g++ -c lib.s -o lib.o </li>\n</ul>\n</li>\n<li>链接到动态库或者可执行文件<ul>\n<li>g++ lib.o -o a.out   </li>\n<li>g++ -shared lib.o -o a.out </li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3><span id=\"静态链接过程概述\">静态链接过程概述</span></h3><h3><span id=\"静态链接过程流程追踪和代码验证\">静态链接过程流程追踪和代码验证</span></h3><h4><span id=\"测试源代码\">测试源代码</span></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g_static_bss = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_static_data = <span class=\"number\">182</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> g_static_text = <span class=\"number\">1987</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main_func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a+b + g_static_text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">   g_static_bss = argc;</span><br><span class=\"line\">   a += main_func(g_static_bss, g_static_data);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"生成汇编代码-从这里开始会有两个分支代码-non-pic-和-pic对照\">生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)</span></h4><p>在这段代码中 </p>\n<ul>\n<li><p>g_static_bss  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.bss字段(未初始化数据段, Block Started by Symbol)中 </li>\n<li>占用4个字节  类型是object 初始化为0   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>g_static_data  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.data字段(数据段)中 </li>\n<li>占用4个字节  类型是object 初始化为182   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>_ZL13g_static_text  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.rodata字段(只读数据段)中 </li>\n<li>占用4个字节  类型是object 初始化为1987   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>_Z9main_funcii  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.text字段(代码段)中 </li>\n<li>占用4个字节  类型是function  </li>\n</ul>\n</li>\n<li><p>main  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.text字段(代码段)中 </li>\n<li>占用4个字节  类型是function  </li>\n</ul>\n</li>\n<li><p>GOTPCREL </p>\n<ul>\n<li>PC-REL是指的位置相对代码   </li>\n<li>这里是指的走GOT表的位置相对代码   </li>\n</ul>\n</li>\n<li><p>在下面的对照中  对于全局符号的访问有如下区别</p>\n<ul>\n<li>访问全局对象时 PIC 版本会先从相对当前代码位置的GOT表中读取全局对象的地址到RAX 然后再读取其内容   </li>\n<li>非PIC版本则直接用记录好的地址读取其内容  </li>\n</ul>\n</li>\n</ul>\n<h5><span id=\"汇编代码-相对位置版本\">汇编代码 (相对位置版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .file    <span class=\"string\">\"test.cpp\"</span></span><br><span class=\"line\">    .globl    g_static_bss</span><br><span class=\"line\">    .<span class=\"keyword\">bss</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_bss, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_bss, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_bss</span>:</span><br><span class=\"line\">    .zero    <span class=\"number\">4</span></span><br><span class=\"line\">    .globl    g_static_data</span><br><span class=\"line\">    <span class=\"meta\">.data</span></span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_data, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_data, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_data</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">182</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .rodata</span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    _ZL13g_static_text, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    _ZL13g_static_text, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">_ZL13g_static_text</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">1987</span></span><br><span class=\"line\">    <span class=\"meta\">.text</span></span><br><span class=\"line\">    .globl    _Z9main_funcii</span><br><span class=\"line\">    .type    _Z9main_funcii, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">_Z9main_funcii</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB0</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %esi, -<span class=\"number\">8</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">8</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %edx, %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   <span class=\"number\">$1987</span>, %eax</span><br><span class=\"line\">    <span class=\"keyword\">popq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE0</span>:</span><br><span class=\"line\">    .size    _Z9main_funcii, .-_Z9main_funcii</span><br><span class=\"line\">    .globl    main</span><br><span class=\"line\">    .type    main, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">main</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB1</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">subq </span>   <span class=\"number\">$32</span>, %rsp</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">20</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsi, -<span class=\"number\">32</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   <span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">20</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, g_static_bss(%rip)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   g_static_data(%rip), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   g_static_bss(%rip), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, %esi</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, %edi</span><br><span class=\"line\">    call    _Z9main_funcii</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %eax, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %eax</span><br><span class=\"line\">    leave</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE1</span>:</span><br><span class=\"line\">    .size    main, .-main</span><br><span class=\"line\">    .ident    <span class=\"string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .note.GNU-stack,<span class=\"string\">\"\"</span>,<span class=\"comment\">@progbits</span></span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"汇编代码-位置无关版本\">汇编代码 (位置无关版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .file    <span class=\"string\">\"test.cpp\"</span></span><br><span class=\"line\">    .globl    g_static_bss</span><br><span class=\"line\">    .<span class=\"keyword\">bss</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_bss, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_bss, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_bss</span>:</span><br><span class=\"line\">    .zero    <span class=\"number\">4</span></span><br><span class=\"line\">    .globl    g_static_data</span><br><span class=\"line\">    <span class=\"meta\">.data</span></span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_data, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_data, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_data</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">182</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .rodata</span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    _ZL13g_static_text, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    _ZL13g_static_text, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">_ZL13g_static_text</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">1987</span></span><br><span class=\"line\">    <span class=\"meta\">.text</span></span><br><span class=\"line\">    .globl    _Z9main_funcii</span><br><span class=\"line\">    .type    _Z9main_funcii, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">_Z9main_funcii</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB0</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %esi, -<span class=\"number\">8</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">8</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %edx, %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   <span class=\"number\">$1987</span>, %eax</span><br><span class=\"line\">    <span class=\"keyword\">popq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE0</span>:</span><br><span class=\"line\">    .size    _Z9main_funcii, .-_Z9main_funcii</span><br><span class=\"line\">    .globl    main</span><br><span class=\"line\">    .type    main, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">main</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB1</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">subq </span>   <span class=\"number\">$32</span>, %rsp</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">20</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsi, -<span class=\"number\">32</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   <span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_bss<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">20</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, (%rax)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_data<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   (%rax), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_bss<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   (%rax), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, %esi</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, %edi</span><br><span class=\"line\">    call    _Z9main_funcii<span class=\"comment\">@PLT</span></span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %eax, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %eax</span><br><span class=\"line\">    leave</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE1</span>:</span><br><span class=\"line\">    .size    main, .-main</span><br><span class=\"line\">    .ident    <span class=\"string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .note.GNU-stack,<span class=\"string\">\"\"</span>,<span class=\"comment\">@progbits</span></span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"生成elf的可重定位文件\">生成ELF的可重定位文件</span></h4><ul>\n<li>.rela.text 重定位section<ul>\n<li>包含了所有需要进行重定位的信息, 偏移量是相对于.text  类型则是注明了重定位的方式  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>.rela.eh_frame 重定位section  </p>\n</li>\n<li><p>.symtab 符号表section  </p>\n<ul>\n<li>Value 标记了符号所在的偏移地址 </li>\n<li>SIZE 标记了代码或者变量占的大小  </li>\n<li>Ndx 如果不在本编译单元 类型为NOTYPE Ndx为UND   </li>\n<li>Bind 全局还是局部符号(是否链接器可见)  <ul>\n<li>rodata的符号为local是因为直接被编译到了代码中 <ul>\n<li>例如g_static_text 1987 =&gt; <code>add $0x7c3,%eax</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>.rela.eh_frame Call Frame Information </p>\n<ul>\n<li>提供了异常的Stack Unwind 支持  </li>\n<li>这张表提供了’给定一个PC值, 可以查到上一个stack frame位置’</li>\n<li>Stack Unwind 指从最內层函数呼叫堆栈开始，找到最外层  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* _Unwind_Backtrace()   </span><br><span class=\"line\">* uw_frame_state_for() </span><br><span class=\"line\">* uw_update_context() </span><br><span class=\"line\">* uw_update_context_1()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>PC32 的PC是指的 program counter   在本文的汇编中对应寄存器的RIP </li>\n<li>PC32 在重定位类型中代表相对指令位置的重定位</li>\n<li>PLT 则代表使用 过程链接表 进行重定位 (动态定位)   </li>\n<li>GOT 是全局偏移表  </li>\n<li>PGOT 是私有全局偏移表  </li>\n</ul>\n<p>在这个过程中<br>无论是PIC的PLT调用还是PC调用, 对于call 指令 他的操作数都是0<br>无论是GOTPCREL还是PC 对全局对象符号的访问中 操作数也都是0<br>在重定位节中标记了这些需要在链接过程中重建的具体位置和内容 </p>\n<h5><span id=\"可重定向文件和汇编指令-相对位置版本\">可重定向文件和汇编指令 (相对位置版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.text'</span> 位于偏移量 <span class=\"number\">0x2c8</span> 含有 <span class=\"number\">4</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000034</span>  <span class=\"number\">000</span>a00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">00000000003</span>a  <span class=\"number\">000</span>b00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_data - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000</span>a00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000049</span>  <span class=\"number\">000</span>c00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> _Z9main_funcii - <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.eh_frame'</span> 位于偏移量 <span class=\"number\">0x328</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000020</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">14</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT    <span class=\"number\">5</span> _ZL13g_static_text</span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">4</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">3</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000000</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000019</span>    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">   <span class=\"number\">1</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">   <span class=\"number\">4</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">   <span class=\"number\">7</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">   a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">   d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">10</span>:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">12</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">17</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">18</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000019</span> &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">19</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>a:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">21</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">24</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">28</span>:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">2</span>f:   <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">32</span>:   <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x0</span>(%rip)        # <span class=\"number\">38</span> &lt;main+<span class=\"number\">0x1f</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">38</span>:   <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%edx        # <span class=\"number\">3</span>e &lt;main+<span class=\"number\">0x25</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">3</span>e:   <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%eax        # <span class=\"number\">44</span> &lt;main+<span class=\"number\">0x2b</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">44</span>:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">46</span>:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">48</span>:   e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          callq  <span class=\"number\">4</span>d &lt;main+<span class=\"number\">0x34</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4</span>d:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">50</span>:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">53</span>:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">54</span>:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"可重定向文件和汇编指令-位置无关版本\">可重定向文件和汇编指令 (位置无关版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.text'</span> 位于偏移量 <span class=\"number\">0x300</span> 含有 <span class=\"number\">4</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000032</span>  <span class=\"number\">000</span>a0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">00000000003</span>e  <span class=\"number\">000</span>b0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_data - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000047</span>  <span class=\"number\">000</span>a0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000052</span>  <span class=\"number\">000</span>c00000004 R_X86_64_PLT32    <span class=\"number\">0000000000000000</span> _Z9main_funcii - <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.eh_frame'</span> 位于偏移量 <span class=\"number\">0x360</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000020</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">15</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT    <span class=\"number\">5</span> _ZL13g_static_text</span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">4</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">3</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000000</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000019</span>    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> main</span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">   <span class=\"number\">1</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">   <span class=\"number\">4</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">   <span class=\"number\">7</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">   a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">   d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">10</span>:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">12</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">17</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">18</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000019</span> &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">19</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>a:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">21</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">24</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">28</span>:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">2</span>f:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">36</span> &lt;main+<span class=\"number\">0x1d</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">36</span>:   <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">39</span>:   <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\">  <span class=\"number\">3</span>b:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">42</span> &lt;main+<span class=\"number\">0x29</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">42</span>:   <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\">  <span class=\"number\">44</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">4</span>b &lt;main+<span class=\"number\">0x32</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4</span>b:   <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\">  <span class=\"number\">4</span>d:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">4</span>f:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">51</span>:   e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          callq  <span class=\"number\">56</span> &lt;main+<span class=\"number\">0x3d</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">56</span>:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">59</span>:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">5</span>c:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">5</span>d:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"链接为可执行文件或者共享库\">链接为可执行文件(或者共享库)</span></h4><p>在链接为目标文件时, 会合并处理每个目标文件, 生成plt代码 确定GOT(PGOT)的相对位置等  </p>\n<p>在相对位置的两个版本中均可以看到对全局符号的访问均正确填充了相对位移  </p>\n<p>PIE版本的区别主要是PIE使用了相对位置 连ELF类型都变成了DYN<br>非PIE版本则使用了绝对位置<br>测试代码没有调用外部函数符号 所以在PIC版本的汇编指令中并没有看到PLT指令</p>\n<h5><span id=\"可执行文件-相对位置的非pieexec版本\">可执行文件 (相对位置的非PIE(EXEC)版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x388</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000600</span>ff0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000600</span>ff8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">3</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">65</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000400238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000400254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000400274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000400298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000004002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000400300</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000400360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000400368</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000400388</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">00000000004005</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">00000000004005</span>f8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000600</span>ff0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000400410</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000400450</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000400490</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">00000000004004</span>b0     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">16</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">13</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">00000000004006</span>f8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">00000000004005</span>b8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">14</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000601028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> _edata</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">22</span> data_start</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">00000000004004</span>ef    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> main</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000601020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">12</span> _fini</span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">0000000000400400</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">11</span> _dl_relocate_static_pie</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _start</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000601038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000400530</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">00000000004005</span>a0     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">00000000004003</span>b8 &lt;_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>bc:       <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">35</span> <span class=\"number\">0</span>c <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200c35</span>(%rip),%rax        # <span class=\"number\">600</span>ff8 &lt;__gmon_start__&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c3</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c6</span>:       <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">4003</span>ca &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c8</span>:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>ca:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>ce:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span> &lt;_start&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d0</span>:       <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d2</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d5</span>:       <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d6</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d9</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>dd:       <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>de:       <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>df:       <span class=\"number\">49</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> a0 <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4005a0</span>,%<span class=\"built_in\">r8</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>e6:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c1</span> <span class=\"number\">30</span> <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x400530</span>,%rcx</span><br><span class=\"line\">  <span class=\"number\">4003</span>ed:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c7</span> ef <span class=\"number\">04</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4004ef</span>,%rdi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">f4</span>:       ff <span class=\"number\">15</span> <span class=\"built_in\">f6</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200bf6</span>(%rip)        # <span class=\"number\">600</span>ff0 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>fa:       <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\">  <span class=\"number\">4003</span>fb:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400400</span> &lt;_dl_relocate_static_pie&gt;:</span><br><span class=\"line\">  <span class=\"number\">400400</span>:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">400402</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">400409</span>:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40040</span>c:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400410</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400410</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">37</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601037</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400415</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400416</span>:       <span class=\"number\">48</span> <span class=\"number\">2</span>d <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>       <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40041</span>c:       <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400420</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400423</span>:       <span class=\"number\">76</span> <span class=\"number\">1</span>b                   jbe    <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400425</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">40042</span>a:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40042</span>d:       <span class=\"number\">74</span> <span class=\"number\">11</span>                   je     <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40042</span>f:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400430</span>:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400435</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400437</span>:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40043</span>e:       <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400440</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400441</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400442</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\">  <span class=\"number\">400446</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40044</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400450</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400450</span>:       <span class=\"keyword\">be </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%esi</span><br><span class=\"line\">  <span class=\"number\">400455</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400456</span>:       <span class=\"number\">48</span> <span class=\"number\">81</span> ee <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">40045</span>d:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400461</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400464</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\">  <span class=\"number\">400467</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40046</span>b:       <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\">  <span class=\"number\">40046</span>e:       <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\">  <span class=\"number\">400471</span>:       <span class=\"number\">74</span> <span class=\"number\">15</span>                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400473</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400478</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40047</span>b:       <span class=\"number\">74</span> <span class=\"number\">0</span>b                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40047</span>d:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40047</span>e:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400483</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400485</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">400488</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400489</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40048</span>a:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400490</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\">  <span class=\"number\">400490</span>:       <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">95</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200b95</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">400497</span>:       <span class=\"number\">75</span> <span class=\"number\">11</span>                   jne    <span class=\"number\">4004</span>aa &lt;__do_global_dtors_aux+<span class=\"number\">0x1a</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400499</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>a:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>d:       e8 <span class=\"number\">6</span>e ff ff ff          callq  <span class=\"number\">400410</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a2</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a3</span>:       <span class=\"built_in\">c6</span> <span class=\"number\">05</span> <span class=\"number\">82</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x200b82</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>aa:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">4004</span>ac:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>b0 &lt;frame_dummy&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>b0:       <span class=\"keyword\">bf </span><span class=\"number\">28</span> <span class=\"number\">0</span>e <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x600e28</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">4004</span>b5:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\">  <span class=\"number\">4004</span>b9:       <span class=\"number\">75</span> <span class=\"number\">05</span>                   jne    <span class=\"number\">4004</span><span class=\"built_in\">c0</span> &lt;frame_dummy+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bb:       eb <span class=\"number\">93</span>                   jmp    <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bd:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c0</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c5</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c8</span>:       <span class=\"number\">74</span> <span class=\"built_in\">f1</span>                   je     <span class=\"number\">4004</span>bb &lt;frame_dummy+<span class=\"number\">0xb</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>ca:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>cb:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ce:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d0</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d1</span>:       e9 <span class=\"number\">7</span>a ff ff ff          jmpq   <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d6</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d7</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>da:       <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>dd:       <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>e0:       <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">4004</span>e3:       <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e6:       <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e8:       <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>ed:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ee:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>ef &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>ef:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f0</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f3</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f7</span>:       <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fa:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fe:       <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400505</span>:       <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400508</span>:       <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">22</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x200b22</span>(%rip)        # <span class=\"number\">601030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\">  <span class=\"number\">40050</span>e:       <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">14</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x200b14</span>(%rip),%edx        # <span class=\"number\">601028</span> &lt;g_static_data&gt;</span><br><span class=\"line\">  <span class=\"number\">400514</span>:       <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">16</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x200b16</span>(%rip),%eax        # <span class=\"number\">601030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\">  <span class=\"number\">40051</span>a:       <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">40051</span>c:       <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">40051</span>e:       e8 <span class=\"keyword\">b3 </span>ff ff ff          callq  <span class=\"number\">4004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\">  <span class=\"number\">400523</span>:       <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400526</span>:       <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400529</span>:       <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">40052</span>a:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40052</span>b:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400530</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">400530</span>:       <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400532</span>:       <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400534</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400537</span>:       <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400539</span>:       <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40053</span>b:       <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">600</span>e18 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\">  <span class=\"number\">400542</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400543</span>:       <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008d6</span>(%rip),%rbp        # <span class=\"number\">600</span>e20 &lt;__init_array_end&gt;</span><br><span class=\"line\">  <span class=\"number\">40054</span>a:       <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\">  <span class=\"number\">40054</span>b:       <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\">  <span class=\"number\">40054</span>e:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400551</span>:       <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">400554</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">400558</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">40055</span>c:       e8 <span class=\"number\">57</span> fe ff ff          callq  <span class=\"number\">4003</span>b8 &lt;_init&gt;</span><br><span class=\"line\">  <span class=\"number\">400561</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400564</span>:       <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">400586</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400566</span>:       <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\">  <span class=\"number\">400568</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40056</span>f:       <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400570</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\">  <span class=\"number\">400573</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400576</span>:       <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\">  <span class=\"number\">400579</span>:       <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\">  <span class=\"number\">40057</span>d:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\">  <span class=\"number\">400581</span>:       <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\">  <span class=\"number\">400584</span>:       <span class=\"number\">75</span> ea                   jne    <span class=\"number\">400570</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400586</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">40058</span>a:       <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\">  <span class=\"number\">40058</span>b:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40058</span>c:       <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40058</span>e:       <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400590</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400592</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400594</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400595</span>:       <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span> <span class=\"number\">400596</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40059</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>a0 &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>a0:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span> &lt;_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a4</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>a8:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>ac:       <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"可执行文件-相对位置的piedyn版本\">可执行文件 (相对位置的PIE(DYN)版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x448</span> 含有 <span class=\"number\">9</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000200</span>dd8  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">660</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>de0  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">620</span></span><br><span class=\"line\"><span class=\"number\">000000201020</span>  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">201020</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _Jv_RegisterClasses + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe0  <span class=\"number\">000300000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_deregisterTMClone + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe8  <span class=\"number\">000400000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff0  <span class=\"number\">000500000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff8  <span class=\"number\">000600000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_registerTMCloneTa + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">7</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">70</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000000002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000418</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000428</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000448</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000540</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000550</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000560</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">00000000000007</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000200</span>fd0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">25</span> </span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">26</span> </span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000000590</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000000620</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">25</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000660</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000000774</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">00000000000008</span>e8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000201028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> _edata</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">24</span> data_start</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">15</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000000690</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@@GLIBC_2.2</span></span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">00000000000006</span>a9    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> main</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">0000000000201020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">14</span> _fini</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000000560</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _start</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000201038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">65</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">    <span class=\"number\">66</span>: <span class=\"number\">0000000000000760</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">67</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">68</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">    <span class=\"number\">69</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000520</span> &lt;_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">520</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">524</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"built_in\">c5</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200ac5</span>(%rip),%rax        # <span class=\"number\">200</span>ff0 &lt;__gmon_start__&gt;</span><br><span class=\"line\"> <span class=\"number\">52</span>b:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">52</span>e:   <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">532</span> &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">530</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">532</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">536</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000540</span> &lt;.plt&gt;:</span><br><span class=\"line\"> <span class=\"number\">540</span>:   ff <span class=\"number\">35</span> <span class=\"built_in\">c2</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">pushq </span> <span class=\"number\">0x200ac2</span>(%rip)        # <span class=\"number\">201008</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x8</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">546</span>:   ff <span class=\"number\">25</span> <span class=\"built_in\">c4</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200ac4</span>(%rip)        # <span class=\"number\">201010</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">54</span>c:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt.got:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000550</span> &lt;.plt.got&gt;:</span><br><span class=\"line\"> <span class=\"number\">550</span>:   ff <span class=\"number\">25</span> <span class=\"number\">7</span>a <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200a7a</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">556</span>:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000560</span> &lt;_start&gt;:</span><br><span class=\"line\"> <span class=\"number\">560</span>:   <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\"> <span class=\"number\">562</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\"> <span class=\"number\">565</span>:   <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\"> <span class=\"number\">566</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\"> <span class=\"number\">569</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>d:   <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\"> <span class=\"number\">56</span>e:   <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>f:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">05</span> ea <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x1ea</span>(%rip),%<span class=\"built_in\">r8</span>        # <span class=\"number\">760</span> &lt;__libc_csu_fini&gt;</span><br><span class=\"line\"> <span class=\"number\">576</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">0</span>d <span class=\"number\">73</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x173</span>(%rip),%rcx        # <span class=\"number\">6</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;</span><br><span class=\"line\"> <span class=\"number\">57</span>d:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">25</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x125</span>(%rip),%rdi        # <span class=\"number\">6</span>a9 &lt;main&gt;</span><br><span class=\"line\"> <span class=\"number\">584</span>:   ff <span class=\"number\">15</span> <span class=\"number\">5</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200a5e</span>(%rip)        # <span class=\"number\">200</span>fe8 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">58</span>a:   <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\"> <span class=\"number\">58</span>b:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000590</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">590</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">597</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rax        # <span class=\"number\">201037</span> &lt;__TMC_END__+<span class=\"number\">0x7</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">59</span>e:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">59</span>f:   <span class=\"number\">48</span> <span class=\"number\">29</span> f8                <span class=\"keyword\">sub </span>   %rdi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">a2</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>a5:   <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>a9:   <span class=\"number\">76</span> <span class=\"number\">15</span>                   jbe    <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ab:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200a2e</span>(%rip),%rax        # <span class=\"number\">200</span>fe0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b2:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>b5:   <span class=\"number\">74</span> <span class=\"number\">09</span>                   je     <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>b8:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ba:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c0</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c1</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c2</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c6</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span>cd:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d0</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">59</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a59</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d7</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">35</span> <span class=\"number\">52</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a52</span>(%rip),%rsi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>de:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>df:   <span class=\"number\">48</span> <span class=\"number\">29</span> fe                <span class=\"keyword\">sub </span>   %rdi,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e2:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>e5:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e9:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ec:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f0</span>:   <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f3</span>:   <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f6</span>:   <span class=\"number\">74</span> <span class=\"number\">18</span>                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>f8:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> f9 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009f9</span>(%rip),%rax        # <span class=\"number\">200</span>ff8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ff:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">602</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">604</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">605</span>:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">607</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">60</span>e:   <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">610</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">611</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">612</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">616</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">61</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000620</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\"> <span class=\"number\">620</span>:   <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">05</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200a05</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">627</span>:   <span class=\"number\">75</span> <span class=\"number\">27</span>                   jne    <span class=\"number\">650</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">629</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>d <span class=\"number\">9</span>f <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x20099f</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">630</span>:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">631</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">632</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">635</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">643</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x23</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">637</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">3</span>d e2 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009e2</span>(%rip),%rdi        # <span class=\"number\">201020</span> &lt;__dso_handle&gt;</span><br><span class=\"line\"> <span class=\"number\">63</span>e:   e8 <span class=\"number\">0</span>d ff ff ff          callq  <span class=\"number\">550</span> &lt;.plt.got&gt;</span><br><span class=\"line\"> <span class=\"number\">643</span>:   e8 <span class=\"number\">48</span> ff ff ff          callq  <span class=\"number\">590</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">648</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">649</span>:   <span class=\"built_in\">c6</span> <span class=\"number\">05</span> dc <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x2009dc</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">650</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"> <span class=\"number\">652</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">656</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">65</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000660</span> &lt;frame_dummy&gt;:</span><br><span class=\"line\"> <span class=\"number\">660</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">81</span> <span class=\"number\">07</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200781</span>(%rip),%rdi        # <span class=\"number\">200</span>de8 &lt;__JCR_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">667</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\"> <span class=\"number\">66</span>b:   <span class=\"number\">75</span> <span class=\"number\">0</span>b                   jne    <span class=\"number\">678</span> &lt;frame_dummy+<span class=\"number\">0x18</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">66</span>d:   e9 <span class=\"number\">5</span>e ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">672</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">678</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">59</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200959</span>(%rip),%rax        # <span class=\"number\">200</span>fd8 &lt;_Jv_RegisterClasses&gt;</span><br><span class=\"line\"> <span class=\"number\">67</span>f:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">682</span>:   <span class=\"number\">74</span> e9                   je     <span class=\"number\">66</span>d &lt;frame_dummy+<span class=\"number\">0xd</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">684</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">685</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">688</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">68</span>a:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">68</span>b:   e9 <span class=\"number\">40</span> ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000690</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\"> <span class=\"number\">690</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">691</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">694</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">697</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">69</span>a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">69</span>d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a0:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">a2</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>a8:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span>a9 &lt;main&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span>a9:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>aa:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>ad:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">6</span>b1:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b4:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b8:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>bf:   <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c2</span>:   <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">68</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x200968</span>(%rip)        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c8</span>:   <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">5</span>a <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x20095a</span>(%rip),%edx        # <span class=\"number\">201028</span> &lt;g_static_data&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>ce:   <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">5</span>c <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x20095c</span>(%rip),%eax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d4</span>:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d6</span>:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d8</span>:   e8 <span class=\"keyword\">b3 </span>ff ff ff          callq  <span class=\"number\">690</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>dd:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>e0:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>e3:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\"> <span class=\"number\">6</span>e4:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">6</span>e5:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">6</span>ec:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">6</span>ef:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">00000000000006f0 </span>&lt;__libc_csu_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f0</span>:   <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f2</span>:   <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f4</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f7</span>:   <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">6</span>f9:   <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">6</span>fb:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">200</span>dd8 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\"> <span class=\"number\">702</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">703</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%rbp        # <span class=\"number\">200</span>de0 &lt;__init_array_end&gt;</span><br><span class=\"line\"> <span class=\"number\">70</span>a:   <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\"> <span class=\"number\">70</span>b:   <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\"> <span class=\"number\">70</span>e:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">711</span>:   <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">714</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">718</span>:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">71</span>c:   e8 ff fd ff ff          callq  <span class=\"number\">520</span> &lt;_init&gt;</span><br><span class=\"line\"> <span class=\"number\">721</span>:   <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\"> <span class=\"number\">724</span>:   <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">746</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">726</span>:   <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\"> <span class=\"number\">728</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">72</span>f:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">730</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\"> <span class=\"number\">733</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">736</span>:   <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\"> <span class=\"number\">739</span>:   <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\"> <span class=\"number\">73</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\"> <span class=\"number\">741</span>:   <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\"> <span class=\"number\">744</span>:   <span class=\"number\">75</span> ea                   jne    <span class=\"number\">730</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">746</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">74</span>a:   <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\"> <span class=\"number\">74</span>b:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">74</span>c:   <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">74</span>e:   <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">750</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">752</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">754</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">755</span>:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">756</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">75</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000760</span> &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">760</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000764</span> &lt;_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">764</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">768</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">76</span>c:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"可执行文件-位置无关的非pieexec版本\">可执行文件 (位置无关的非PIE(EXEC)版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Dynamic</span> section at offset <span class=\"number\">0xe30</span> contains <span class=\"number\">23</span> entries:</span><br><span class=\"line\">  标记        类型                         名称/值</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libstdc++.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libm.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libgcc_s.so.<span class=\"number\">1</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libc.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x000000000000000c</span> (INIT)               <span class=\"number\">0x4003b8</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000000d</span> (FINI)               <span class=\"number\">0x4005b4</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000019</span> (INIT_ARRAY)         <span class=\"number\">0x600e18</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000001b</span> (INIT_ARRAYSZ)       <span class=\"number\">8</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000000000001a</span> (FINI_ARRAY)         <span class=\"number\">0x600e20</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000001c</span> (FINI_ARRAYSZ)       <span class=\"number\">8</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000006ffffef5</span> (GNU_HASH)           <span class=\"number\">0x400298</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000005</span> (<span class=\"keyword\">STRTAB) </span>            <span class=\"number\">0x400300</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000006</span> (SYMTAB)             <span class=\"number\">0x4002b8</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000000a</span> (<span class=\"keyword\">STRSZ) </span>             <span class=\"number\">95</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000000000000b</span> (SYMENT)             <span class=\"number\">24</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x0000000000000015</span> (DEBUG)              <span class=\"number\">0x0</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000007</span> (RELA)               <span class=\"number\">0x400388</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000008</span> (RELASZ)             <span class=\"number\">48</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x0000000000000009</span> (RELAENT)            <span class=\"number\">24</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000006ffffffe</span> (VERNEED)            <span class=\"number\">0x400368</span></span><br><span class=\"line\"> <span class=\"number\">0x000000006fffffff</span> (VERNEEDNUM)         <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"number\">0x000000006ffffff0</span> (VERSYM)             <span class=\"number\">0x400360</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000000</span> (NULL)               <span class=\"number\">0x0</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x388</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000600</span>ff0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000600</span>ff8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">3</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">65</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000400238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000400254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000400274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000400298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000004002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000400300</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000400360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000400368</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000400388</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c8</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000400608</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000600</span>ff0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000400410</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000400450</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000400490</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">00000000004004</span>b0     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">16</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c4</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">13</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000400708</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c8</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">14</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000601028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> _edata</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">22</span> data_start</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c0</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">00000000004004</span>ef    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> main</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000601020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">12</span> _fini</span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">0000000000400400</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">11</span> _dl_relocate_static_pie</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _start</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000601038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000400540</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">00000000004003</span>b8 &lt;_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>bc:       <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">35</span> <span class=\"number\">0</span>c <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200c35</span>(%rip),%rax        # <span class=\"number\">600</span>ff8 &lt;__gmon_start__&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c3</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c6</span>:       <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">4003</span>ca &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c8</span>:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>ca:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>ce:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span> &lt;_start&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d0</span>:       <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d2</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d5</span>:       <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d6</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d9</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>dd:       <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>de:       <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>df:       <span class=\"number\">49</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"keyword\">b0 </span><span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4005b0</span>,%<span class=\"built_in\">r8</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>e6:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c1</span> <span class=\"number\">40</span> <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x400540</span>,%rcx</span><br><span class=\"line\">  <span class=\"number\">4003</span>ed:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c7</span> ef <span class=\"number\">04</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4004ef</span>,%rdi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">f4</span>:       ff <span class=\"number\">15</span> <span class=\"built_in\">f6</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200bf6</span>(%rip)        # <span class=\"number\">600</span>ff0 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>fa:       <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\">  <span class=\"number\">4003</span>fb:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400400</span> &lt;_dl_relocate_static_pie&gt;:</span><br><span class=\"line\">  <span class=\"number\">400400</span>:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">400402</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">400409</span>:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40040</span>c:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400410</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400410</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">37</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601037</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400415</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400416</span>:       <span class=\"number\">48</span> <span class=\"number\">2</span>d <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>       <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40041</span>c:       <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400420</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400423</span>:       <span class=\"number\">76</span> <span class=\"number\">1</span>b                   jbe    <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400425</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">40042</span>a:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40042</span>d:       <span class=\"number\">74</span> <span class=\"number\">11</span>                   je     <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40042</span>f:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400430</span>:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400435</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400437</span>:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40043</span>e:       <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400440</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400441</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400442</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\">  <span class=\"number\">400446</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40044</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400450</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400450</span>:       <span class=\"keyword\">be </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%esi</span><br><span class=\"line\">  <span class=\"number\">400455</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400456</span>:       <span class=\"number\">48</span> <span class=\"number\">81</span> ee <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">40045</span>d:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400461</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400464</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\">  <span class=\"number\">400467</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40046</span>b:       <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\">  <span class=\"number\">40046</span>e:       <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\">  <span class=\"number\">400471</span>:       <span class=\"number\">74</span> <span class=\"number\">15</span>                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400473</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400478</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40047</span>b:       <span class=\"number\">74</span> <span class=\"number\">0</span>b                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40047</span>d:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40047</span>e:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400483</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400485</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">400488</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400489</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40048</span>a:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400490</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\">  <span class=\"number\">400490</span>:       <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">95</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200b95</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">400497</span>:       <span class=\"number\">75</span> <span class=\"number\">11</span>                   jne    <span class=\"number\">4004</span>aa &lt;__do_global_dtors_aux+<span class=\"number\">0x1a</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400499</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>a:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>d:       e8 <span class=\"number\">6</span>e ff ff ff          callq  <span class=\"number\">400410</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a2</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a3</span>:       <span class=\"built_in\">c6</span> <span class=\"number\">05</span> <span class=\"number\">82</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x200b82</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>aa:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">4004</span>ac:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>b0 &lt;frame_dummy&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>b0:       <span class=\"keyword\">bf </span><span class=\"number\">28</span> <span class=\"number\">0</span>e <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x600e28</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">4004</span>b5:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\">  <span class=\"number\">4004</span>b9:       <span class=\"number\">75</span> <span class=\"number\">05</span>                   jne    <span class=\"number\">4004</span><span class=\"built_in\">c0</span> &lt;frame_dummy+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bb:       eb <span class=\"number\">93</span>                   jmp    <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bd:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c0</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c5</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c8</span>:       <span class=\"number\">74</span> <span class=\"built_in\">f1</span>                   je     <span class=\"number\">4004</span>bb &lt;frame_dummy+<span class=\"number\">0xb</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>ca:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>cb:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ce:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d0</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d1</span>:       e9 <span class=\"number\">7</span>a ff ff ff          jmpq   <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d6</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d7</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>da:       <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>dd:       <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>e0:       <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">4004</span>e3:       <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e6:       <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e8:       <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>ed:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ee:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>ef &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>ef:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f0</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f3</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f7</span>:       <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fa:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fe:       <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400505</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40050</span>c:       <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">40050</span>f:       <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\">  <span class=\"number\">400511</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">28</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601028</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400518</span>:       <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\">  <span class=\"number\">40051</span>a:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400521</span>:       <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\">  <span class=\"number\">400523</span>:       <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">400525</span>:       <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">400527</span>:       e8 aa ff ff ff          callq  <span class=\"number\">4004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\">  <span class=\"number\">40052</span>c:       <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">40052</span>f:       <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400532</span>:       <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">400533</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400534</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40053</span>b:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40053</span>e:       <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400540</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">400540</span>:       <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400542</span>:       <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400544</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400547</span>:       <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400549</span>:       <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40054</span>b:       <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">c6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008c6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">600</span>e18 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\">  <span class=\"number\">400552</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400553</span>:       <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">c6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008c6</span>(%rip),%rbp        # <span class=\"number\">600</span>e20 &lt;__init_array_end&gt;</span><br><span class=\"line\">  <span class=\"number\">40055</span>a:       <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\">  <span class=\"number\">40055</span>b:       <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\">  <span class=\"number\">40055</span>e:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400561</span>:       <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">400564</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">400568</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">40056</span>c:       e8 <span class=\"number\">47</span> fe ff ff          callq  <span class=\"number\">4003</span>b8 &lt;_init&gt;</span><br><span class=\"line\">  <span class=\"number\">400571</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400574</span>:       <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">400596</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400576</span>:       <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\">  <span class=\"number\">400578</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40057</span>f:       <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400580</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\">  <span class=\"number\">400583</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400586</span>:       <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\">  <span class=\"number\">400589</span>:       <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\">  <span class=\"number\">40058</span>d:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\">  <span class=\"number\">400591</span>:       <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\">  <span class=\"number\">400594</span>:       <span class=\"number\">75</span> ea                   jne    <span class=\"number\">400580</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400596</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">40059</span>a:       <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\">  <span class=\"number\">40059</span>b:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40059</span>c:       <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40059</span>e:       <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">4005</span>a0:       <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a2</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a4</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">4005</span>a5:       <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span> <span class=\"number\">4005</span>a6:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">4005</span>ad:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>b0 &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>b0:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>b4 &lt;_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>b4:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>bc:       <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"可执行文件-位置无关的piedyn版本\">可执行文件 (位置无关的PIE(DYN)版本)</span></h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x448</span> 含有 <span class=\"number\">9</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000200</span>dd8  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">660</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>de0  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">620</span></span><br><span class=\"line\"><span class=\"number\">000000201020</span>  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">201020</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _Jv_RegisterClasses + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe0  <span class=\"number\">000300000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_deregisterTMClone + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe8  <span class=\"number\">000400000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff0  <span class=\"number\">000500000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff8  <span class=\"number\">000600000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_registerTMCloneTa + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">7</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">70</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000000002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000418</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000428</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000448</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000540</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000550</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000560</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">00000000000007</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000200</span>fd0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">25</span> </span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">26</span> </span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000000590</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000000620</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">25</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000660</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000000774</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">00000000000008</span>e8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000201028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> _edata</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">24</span> data_start</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">15</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000000690</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@@GLIBC_2.2</span></span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">00000000000006</span>a9    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> main</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">0000000000201020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">14</span> _fini</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000000560</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _start</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000201038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">65</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">    <span class=\"number\">66</span>: <span class=\"number\">0000000000000760</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">67</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">68</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">    <span class=\"number\">69</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000520</span> &lt;_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">520</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">524</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"built_in\">c5</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200ac5</span>(%rip),%rax        # <span class=\"number\">200</span>ff0 &lt;__gmon_start__&gt;</span><br><span class=\"line\"> <span class=\"number\">52</span>b:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">52</span>e:   <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">532</span> &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">530</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">532</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">536</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000540</span> &lt;.plt&gt;:</span><br><span class=\"line\"> <span class=\"number\">540</span>:   ff <span class=\"number\">35</span> <span class=\"built_in\">c2</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">pushq </span> <span class=\"number\">0x200ac2</span>(%rip)        # <span class=\"number\">201008</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x8</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">546</span>:   ff <span class=\"number\">25</span> <span class=\"built_in\">c4</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200ac4</span>(%rip)        # <span class=\"number\">201010</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">54</span>c:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt.got:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000550</span> &lt;.plt.got&gt;:</span><br><span class=\"line\"> <span class=\"number\">550</span>:   ff <span class=\"number\">25</span> <span class=\"number\">7</span>a <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200a7a</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">556</span>:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000560</span> &lt;_start&gt;:</span><br><span class=\"line\"> <span class=\"number\">560</span>:   <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\"> <span class=\"number\">562</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\"> <span class=\"number\">565</span>:   <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\"> <span class=\"number\">566</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\"> <span class=\"number\">569</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>d:   <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\"> <span class=\"number\">56</span>e:   <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>f:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">05</span> ea <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x1ea</span>(%rip),%<span class=\"built_in\">r8</span>        # <span class=\"number\">760</span> &lt;__libc_csu_fini&gt;</span><br><span class=\"line\"> <span class=\"number\">576</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">0</span>d <span class=\"number\">73</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x173</span>(%rip),%rcx        # <span class=\"number\">6</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;</span><br><span class=\"line\"> <span class=\"number\">57</span>d:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">25</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x125</span>(%rip),%rdi        # <span class=\"number\">6</span>a9 &lt;main&gt;</span><br><span class=\"line\"> <span class=\"number\">584</span>:   ff <span class=\"number\">15</span> <span class=\"number\">5</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200a5e</span>(%rip)        # <span class=\"number\">200</span>fe8 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">58</span>a:   <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\"> <span class=\"number\">58</span>b:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000590</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">590</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">597</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rax        # <span class=\"number\">201037</span> &lt;__TMC_END__+<span class=\"number\">0x7</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">59</span>e:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">59</span>f:   <span class=\"number\">48</span> <span class=\"number\">29</span> f8                <span class=\"keyword\">sub </span>   %rdi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">a2</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>a5:   <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>a9:   <span class=\"number\">76</span> <span class=\"number\">15</span>                   jbe    <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ab:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200a2e</span>(%rip),%rax        # <span class=\"number\">200</span>fe0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b2:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>b5:   <span class=\"number\">74</span> <span class=\"number\">09</span>                   je     <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>b8:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ba:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c0</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c1</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c2</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c6</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span>cd:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d0</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">59</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a59</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d7</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">35</span> <span class=\"number\">52</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a52</span>(%rip),%rsi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>de:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>df:   <span class=\"number\">48</span> <span class=\"number\">29</span> fe                <span class=\"keyword\">sub </span>   %rdi,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e2:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>e5:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e9:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ec:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f0</span>:   <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f3</span>:   <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f6</span>:   <span class=\"number\">74</span> <span class=\"number\">18</span>                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>f8:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> f9 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009f9</span>(%rip),%rax        # <span class=\"number\">200</span>ff8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ff:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">602</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">604</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">605</span>:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">607</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">60</span>e:   <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">610</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">611</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">612</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">616</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">61</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000620</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\"> <span class=\"number\">620</span>:   <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">05</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200a05</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">627</span>:   <span class=\"number\">75</span> <span class=\"number\">27</span>                   jne    <span class=\"number\">650</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">629</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>d <span class=\"number\">9</span>f <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x20099f</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">630</span>:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">631</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">632</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">635</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">643</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x23</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">637</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">3</span>d e2 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009e2</span>(%rip),%rdi        # <span class=\"number\">201020</span> &lt;__dso_handle&gt;</span><br><span class=\"line\"> <span class=\"number\">63</span>e:   e8 <span class=\"number\">0</span>d ff ff ff          callq  <span class=\"number\">550</span> &lt;.plt.got&gt;</span><br><span class=\"line\"> <span class=\"number\">643</span>:   e8 <span class=\"number\">48</span> ff ff ff          callq  <span class=\"number\">590</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">648</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">649</span>:   <span class=\"built_in\">c6</span> <span class=\"number\">05</span> dc <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x2009dc</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">650</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"> <span class=\"number\">652</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">656</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">65</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000660</span> &lt;frame_dummy&gt;:</span><br><span class=\"line\"> <span class=\"number\">660</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">81</span> <span class=\"number\">07</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200781</span>(%rip),%rdi        # <span class=\"number\">200</span>de8 &lt;__JCR_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">667</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\"> <span class=\"number\">66</span>b:   <span class=\"number\">75</span> <span class=\"number\">0</span>b                   jne    <span class=\"number\">678</span> &lt;frame_dummy+<span class=\"number\">0x18</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">66</span>d:   e9 <span class=\"number\">5</span>e ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">672</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">678</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">59</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200959</span>(%rip),%rax        # <span class=\"number\">200</span>fd8 &lt;_Jv_RegisterClasses&gt;</span><br><span class=\"line\"> <span class=\"number\">67</span>f:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">682</span>:   <span class=\"number\">74</span> e9                   je     <span class=\"number\">66</span>d &lt;frame_dummy+<span class=\"number\">0xd</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">684</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">685</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">688</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">68</span>a:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">68</span>b:   e9 <span class=\"number\">40</span> ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000690</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\"> <span class=\"number\">690</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">691</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">694</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">697</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">69</span>a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">69</span>d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a0:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">a2</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>a8:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span>a9 &lt;main&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span>a9:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>aa:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>ad:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">6</span>b1:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b4:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b8:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>bf:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">6</span>a <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x20096a</span>(%rip),%rax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c6</span>:   <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c9</span>:   <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\"> <span class=\"number\">6</span>cb:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">56</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200956</span>(%rip),%rax        # <span class=\"number\">201028</span> &lt;g_static_data&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d2</span>:   <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d4</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">55</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200955</span>(%rip),%rax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>db:   <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>dd:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\"> <span class=\"number\">6</span>df:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\"> <span class=\"number\">6</span>e1:   e8 aa ff ff ff          callq  <span class=\"number\">690</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>e6:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>e9:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>ec:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\"> <span class=\"number\">6</span>ed:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">6</span>ee:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f0</span>:   <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f2</span>:   <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f4</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f7</span>:   <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">6</span>f9:   <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">6</span>fb:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">200</span>dd8 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\"> <span class=\"number\">702</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">703</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%rbp        # <span class=\"number\">200</span>de0 &lt;__init_array_end&gt;</span><br><span class=\"line\"> <span class=\"number\">70</span>a:   <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\"> <span class=\"number\">70</span>b:   <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\"> <span class=\"number\">70</span>e:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">711</span>:   <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">714</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">718</span>:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">71</span>c:   e8 ff fd ff ff          callq  <span class=\"number\">520</span> &lt;_init&gt;</span><br><span class=\"line\"> <span class=\"number\">721</span>:   <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\"> <span class=\"number\">724</span>:   <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">746</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">726</span>:   <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\"> <span class=\"number\">728</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">72</span>f:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">730</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\"> <span class=\"number\">733</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">736</span>:   <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\"> <span class=\"number\">739</span>:   <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\"> <span class=\"number\">73</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\"> <span class=\"number\">741</span>:   <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\"> <span class=\"number\">744</span>:   <span class=\"number\">75</span> ea                   jne    <span class=\"number\">730</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">746</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">74</span>a:   <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\"> <span class=\"number\">74</span>b:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">74</span>c:   <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">74</span>e:   <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">750</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">752</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">754</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">755</span>:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">756</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">75</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000760</span> &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">760</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000764</span> &lt;_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">764</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">768</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">76</span>c:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><hr>\n<!-- TOC -->\n\n<ul>\n<li><a href=\"#目录\">目录</a></li>\n<li><a href=\"#基本编译链接流程\">基本编译链接流程</a></li>\n<li><a href=\"#静态链接过程概述\">静态链接过程概述</a></li>\n<li><a href=\"#静态链接过程流程追踪和代码验证\">静态链接过程流程追踪和代码验证</a><ul>\n<li><a href=\"#测试源代码\">测试源代码</a></li>\n<li><a href=\"#生成汇编代码-从这里开始会有两个分支代码-non-pic-和-pic对照\">生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)</a><ul>\n<li><a href=\"#汇编代码-相对位置版本\">汇编代码 (相对位置版本)</a></li>\n<li><a href=\"#汇编代码-位置无关版本\">汇编代码 (位置无关版本)</a></li>\n</ul>\n</li>\n<li><a href=\"#生成elf的可重定位文件\">生成ELF的可重定位文件</a><ul>\n<li><a href=\"#可重定向文件和汇编指令-相对位置版本\">可重定向文件和汇编指令 (相对位置版本)</a></li>\n<li><a href=\"#可重定向文件和汇编指令-位置无关版本\">可重定向文件和汇编指令 (位置无关版本)</a></li>\n</ul>\n</li>\n<li><a href=\"#链接为可执行文件或者共享库\">链接为可执行文件(或者共享库)</a><ul>\n<li><a href=\"#可执行文件-相对位置的非pieexec版本\">可执行文件 (相对位置的非PIE(EXEC)版本)</a></li>\n<li><a href=\"#可执行文件-相对位置的piedyn版本\">可执行文件 (相对位置的PIE(DYN)版本)</a></li>\n<li><a href=\"#可执行文件-位置无关的非pieexec版本\">可执行文件 (位置无关的非PIE(EXEC)版本)</a></li>\n<li><a href=\"#可执行文件-位置无关的piedyn版本\">可执行文件 (位置无关的PIE(DYN)版本)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3 id=\"基本编译链接流程\"><a href=\"#基本编译链接流程\" class=\"headerlink\" title=\"基本编译链接流程\"></a>基本编译链接流程</h3><ul>\n<li>编译并输出汇编代码  <ul>\n<li>g++ -S lib.cpp -o lib.s </li>\n</ul>\n</li>\n<li>打包成ELF可重定位文件 ELF TYPE= ET_REL  即.o文件  <ul>\n<li>g++ -c lib.s -o lib.o </li>\n</ul>\n</li>\n<li>链接到动态库或者可执行文件<ul>\n<li>g++ lib.o -o a.out   </li>\n<li>g++ -shared lib.o -o a.out </li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"静态链接过程概述\"><a href=\"#静态链接过程概述\" class=\"headerlink\" title=\"静态链接过程概述\"></a>静态链接过程概述</h3><h3 id=\"静态链接过程流程追踪和代码验证\"><a href=\"#静态链接过程流程追踪和代码验证\" class=\"headerlink\" title=\"静态链接过程流程追踪和代码验证\"></a>静态链接过程流程追踪和代码验证</h3><h4 id=\"测试源代码\"><a href=\"#测试源代码\" class=\"headerlink\" title=\"测试源代码\"></a>测试源代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g_static_bss = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_static_data = <span class=\"number\">182</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> g_static_text = <span class=\"number\">1987</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main_func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a+b + g_static_text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">   g_static_bss = argc;</span><br><span class=\"line\">   a += main_func(g_static_bss, g_static_data);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成汇编代码-从这里开始会有两个分支代码-NON-PIC-和-PIC对照\"><a href=\"#生成汇编代码-从这里开始会有两个分支代码-NON-PIC-和-PIC对照\" class=\"headerlink\" title=\"生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)\"></a>生成汇编代码 (从这里开始会有两个分支代码 NON-PIC 和 PIC对照)</h4><p>在这段代码中 </p>\n<ul>\n<li><p>g_static_bss  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.bss字段(未初始化数据段, Block Started by Symbol)中 </li>\n<li>占用4个字节  类型是object 初始化为0   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>g_static_data  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.data字段(数据段)中 </li>\n<li>占用4个字节  类型是object 初始化为182   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>_ZL13g_static_text  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.rodata字段(只读数据段)中 </li>\n<li>占用4个字节  类型是object 初始化为1987   </li>\n<li>4字节对齐  </li>\n</ul>\n</li>\n<li><p>_Z9main_funcii  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.text字段(代码段)中 </li>\n<li>占用4个字节  类型是function  </li>\n</ul>\n</li>\n<li><p>main  </p>\n<ul>\n<li>为全局的符号(给链接器看到) </li>\n<li>被放在.text字段(代码段)中 </li>\n<li>占用4个字节  类型是function  </li>\n</ul>\n</li>\n<li><p>GOTPCREL </p>\n<ul>\n<li>PC-REL是指的位置相对代码   </li>\n<li>这里是指的走GOT表的位置相对代码   </li>\n</ul>\n</li>\n<li><p>在下面的对照中  对于全局符号的访问有如下区别</p>\n<ul>\n<li>访问全局对象时 PIC 版本会先从相对当前代码位置的GOT表中读取全局对象的地址到RAX 然后再读取其内容   </li>\n<li>非PIC版本则直接用记录好的地址读取其内容  </li>\n</ul>\n</li>\n</ul>\n<h5 id=\"汇编代码-相对位置版本\"><a href=\"#汇编代码-相对位置版本\" class=\"headerlink\" title=\"汇编代码 (相对位置版本)\"></a>汇编代码 (相对位置版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .file    <span class=\"string\">\"test.cpp\"</span></span><br><span class=\"line\">    .globl    g_static_bss</span><br><span class=\"line\">    .<span class=\"keyword\">bss</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_bss, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_bss, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_bss</span>:</span><br><span class=\"line\">    .zero    <span class=\"number\">4</span></span><br><span class=\"line\">    .globl    g_static_data</span><br><span class=\"line\">    <span class=\"meta\">.data</span></span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_data, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_data, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_data</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">182</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .rodata</span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    _ZL13g_static_text, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    _ZL13g_static_text, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">_ZL13g_static_text</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">1987</span></span><br><span class=\"line\">    <span class=\"meta\">.text</span></span><br><span class=\"line\">    .globl    _Z9main_funcii</span><br><span class=\"line\">    .type    _Z9main_funcii, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">_Z9main_funcii</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB0</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %esi, -<span class=\"number\">8</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">8</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %edx, %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   <span class=\"number\">$1987</span>, %eax</span><br><span class=\"line\">    <span class=\"keyword\">popq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE0</span>:</span><br><span class=\"line\">    .size    _Z9main_funcii, .-_Z9main_funcii</span><br><span class=\"line\">    .globl    main</span><br><span class=\"line\">    .type    main, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">main</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB1</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">subq </span>   <span class=\"number\">$32</span>, %rsp</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">20</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsi, -<span class=\"number\">32</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   <span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">20</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, g_static_bss(%rip)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   g_static_data(%rip), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   g_static_bss(%rip), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, %esi</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, %edi</span><br><span class=\"line\">    call    _Z9main_funcii</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %eax, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %eax</span><br><span class=\"line\">    leave</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE1</span>:</span><br><span class=\"line\">    .size    main, .-main</span><br><span class=\"line\">    .ident    <span class=\"string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .note.GNU-stack,<span class=\"string\">\"\"</span>,<span class=\"comment\">@progbits</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"汇编代码-位置无关版本\"><a href=\"#汇编代码-位置无关版本\" class=\"headerlink\" title=\"汇编代码 (位置无关版本)\"></a>汇编代码 (位置无关版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    .file    <span class=\"string\">\"test.cpp\"</span></span><br><span class=\"line\">    .globl    g_static_bss</span><br><span class=\"line\">    .<span class=\"keyword\">bss</span></span><br><span class=\"line\"><span class=\"keyword\"> </span>   <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_bss, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_bss, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_bss</span>:</span><br><span class=\"line\">    .zero    <span class=\"number\">4</span></span><br><span class=\"line\">    .globl    g_static_data</span><br><span class=\"line\">    <span class=\"meta\">.data</span></span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    g_static_data, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    g_static_data, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">g_static_data</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">182</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .rodata</span><br><span class=\"line\">    <span class=\"meta\">.align</span> <span class=\"number\">4</span></span><br><span class=\"line\">    .type    _ZL13g_static_text, <span class=\"comment\">@object</span></span><br><span class=\"line\">    .size    _ZL13g_static_text, <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"symbol\">_ZL13g_static_text</span>:</span><br><span class=\"line\">    <span class=\"meta\">.long</span>    <span class=\"number\">1987</span></span><br><span class=\"line\">    <span class=\"meta\">.text</span></span><br><span class=\"line\">    .globl    _Z9main_funcii</span><br><span class=\"line\">    .type    _Z9main_funcii, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">_Z9main_funcii</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB0</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %esi, -<span class=\"number\">8</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">8</span>(%rbp), %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %edx, %eax</span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   <span class=\"number\">$1987</span>, %eax</span><br><span class=\"line\">    <span class=\"keyword\">popq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE0</span>:</span><br><span class=\"line\">    .size    _Z9main_funcii, .-_Z9main_funcii</span><br><span class=\"line\">    .globl    main</span><br><span class=\"line\">    .type    main, <span class=\"comment\">@function</span></span><br><span class=\"line\"><span class=\"symbol\">main</span>:</span><br><span class=\"line\"><span class=\"symbol\">.LFB1</span>:</span><br><span class=\"line\">    .cfi_startproc</span><br><span class=\"line\">    <span class=\"keyword\">pushq </span>   %rbp</span><br><span class=\"line\">    .cfi_def_cfa_offset <span class=\"number\">16</span></span><br><span class=\"line\">    .cfi_offset <span class=\"number\">6</span>, -<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsp, %rbp</span><br><span class=\"line\">    .cfi_def_cfa_register <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">subq </span>   <span class=\"number\">$32</span>, %rsp</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edi, -<span class=\"number\">20</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   %rsi, -<span class=\"number\">32</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   <span class=\"number\">$0</span>, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_bss<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">20</span>(%rbp), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, (%rax)</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_data<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   (%rax), %edx</span><br><span class=\"line\">    <span class=\"keyword\">movq </span>   g_static_bss<span class=\"comment\">@GOTPCREL(%rip), %rax</span></span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   (%rax), %eax</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %edx, %esi</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   %eax, %edi</span><br><span class=\"line\">    call    _Z9main_funcii<span class=\"comment\">@PLT</span></span><br><span class=\"line\">    <span class=\"keyword\">addl </span>   %eax, -<span class=\"number\">4</span>(%rbp)</span><br><span class=\"line\">    <span class=\"keyword\">movl </span>   -<span class=\"number\">4</span>(%rbp), %eax</span><br><span class=\"line\">    leave</span><br><span class=\"line\">    .cfi_def_cfa <span class=\"number\">7</span>, <span class=\"number\">8</span></span><br><span class=\"line\">    ret</span><br><span class=\"line\">    .cfi_endproc</span><br><span class=\"line\"><span class=\"symbol\">.LFE1</span>:</span><br><span class=\"line\">    .size    main, .-main</span><br><span class=\"line\">    .ident    <span class=\"string\">\"GCC: (Debian 6.3.0-18+deb9u1) 6.3.0 20170516\"</span></span><br><span class=\"line\">    <span class=\"meta\">.section</span>    .note.GNU-stack,<span class=\"string\">\"\"</span>,<span class=\"comment\">@progbits</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成ELF的可重定位文件\"><a href=\"#生成ELF的可重定位文件\" class=\"headerlink\" title=\"生成ELF的可重定位文件\"></a>生成ELF的可重定位文件</h4><ul>\n<li>.rela.text 重定位section<ul>\n<li>包含了所有需要进行重定位的信息, 偏移量是相对于.text  类型则是注明了重定位的方式  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>.rela.eh_frame 重定位section  </p>\n</li>\n<li><p>.symtab 符号表section  </p>\n<ul>\n<li>Value 标记了符号所在的偏移地址 </li>\n<li>SIZE 标记了代码或者变量占的大小  </li>\n<li>Ndx 如果不在本编译单元 类型为NOTYPE Ndx为UND   </li>\n<li>Bind 全局还是局部符号(是否链接器可见)  <ul>\n<li>rodata的符号为local是因为直接被编译到了代码中 <ul>\n<li>例如g_static_text 1987 =&gt; <code>add $0x7c3,%eax</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>.rela.eh_frame Call Frame Information </p>\n<ul>\n<li>提供了异常的Stack Unwind 支持  </li>\n<li>这张表提供了’给定一个PC值, 可以查到上一个stack frame位置’</li>\n<li>Stack Unwind 指从最內层函数呼叫堆栈开始，找到最外层  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* _Unwind_Backtrace()   </span><br><span class=\"line\">* uw_frame_state_for() </span><br><span class=\"line\">* uw_update_context() </span><br><span class=\"line\">* uw_update_context_1()</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>PC32 的PC是指的 program counter   在本文的汇编中对应寄存器的RIP </li>\n<li>PC32 在重定位类型中代表相对指令位置的重定位</li>\n<li>PLT 则代表使用 过程链接表 进行重定位 (动态定位)   </li>\n<li>GOT 是全局偏移表  </li>\n<li>PGOT 是私有全局偏移表  </li>\n</ul>\n<p>在这个过程中<br>无论是PIC的PLT调用还是PC调用, 对于call 指令 他的操作数都是0<br>无论是GOTPCREL还是PC 对全局对象符号的访问中 操作数也都是0<br>在重定位节中标记了这些需要在链接过程中重建的具体位置和内容 </p>\n<h5 id=\"可重定向文件和汇编指令-相对位置版本\"><a href=\"#可重定向文件和汇编指令-相对位置版本\" class=\"headerlink\" title=\"可重定向文件和汇编指令 (相对位置版本)\"></a>可重定向文件和汇编指令 (相对位置版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.text'</span> 位于偏移量 <span class=\"number\">0x2c8</span> 含有 <span class=\"number\">4</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000034</span>  <span class=\"number\">000</span>a00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">00000000003</span>a  <span class=\"number\">000</span>b00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_data - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000</span>a00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000049</span>  <span class=\"number\">000</span>c00000002 R_X86_64_PC32     <span class=\"number\">0000000000000000</span> _Z9main_funcii - <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.eh_frame'</span> 位于偏移量 <span class=\"number\">0x328</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000020</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">14</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT    <span class=\"number\">5</span> _ZL13g_static_text</span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">4</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">3</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000000</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000019</span>    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">   <span class=\"number\">1</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">   <span class=\"number\">4</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">   <span class=\"number\">7</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">   a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">   d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">10</span>:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">12</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">17</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">18</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000019</span> &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">19</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>a:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">21</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">24</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">28</span>:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">2</span>f:   <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">32</span>:   <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x0</span>(%rip)        # <span class=\"number\">38</span> &lt;main+<span class=\"number\">0x1f</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">38</span>:   <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%edx        # <span class=\"number\">3</span>e &lt;main+<span class=\"number\">0x25</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">3</span>e:   <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%eax        # <span class=\"number\">44</span> &lt;main+<span class=\"number\">0x2b</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">44</span>:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">46</span>:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">48</span>:   e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          callq  <span class=\"number\">4</span>d &lt;main+<span class=\"number\">0x34</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4</span>d:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">50</span>:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">53</span>:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">54</span>:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"可重定向文件和汇编指令-位置无关版本\"><a href=\"#可重定向文件和汇编指令-位置无关版本\" class=\"headerlink\" title=\"可重定向文件和汇编指令 (位置无关版本)\"></a>可重定向文件和汇编指令 (位置无关版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.text'</span> 位于偏移量 <span class=\"number\">0x300</span> 含有 <span class=\"number\">4</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000032</span>  <span class=\"number\">000</span>a0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">00000000003</span>e  <span class=\"number\">000</span>b0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_data - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000047</span>  <span class=\"number\">000</span>a0000002a R_X86_64_REX_GOTP <span class=\"number\">0000000000000000</span> g_static_bss - <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">000000000052</span>  <span class=\"number\">000</span>c00000004 R_X86_64_PLT32    <span class=\"number\">0000000000000000</span> _Z9main_funcii - <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.eh_frame'</span> 位于偏移量 <span class=\"number\">0x360</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000000020</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000000040</span>  <span class=\"number\">000200000002</span> R_X86_64_PC32     <span class=\"number\">0000000000000000</span> <span class=\"meta\">.text</span> + <span class=\"number\">19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">15</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT    <span class=\"number\">5</span> _ZL13g_static_text</span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">4</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">3</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000000</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000019</span>    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT    <span class=\"number\">1</span> main</span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000000</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">   <span class=\"number\">0</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">   <span class=\"number\">1</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">   <span class=\"number\">4</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">   <span class=\"number\">7</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">   a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">   d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">10</span>:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">12</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">17</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">18</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000019</span> &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">19</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>a:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">1</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">21</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">24</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">28</span>:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">2</span>f:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">36</span> &lt;main+<span class=\"number\">0x1d</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">36</span>:   <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">39</span>:   <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\">  <span class=\"number\">3</span>b:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">42</span> &lt;main+<span class=\"number\">0x29</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">42</span>:   <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\">  <span class=\"number\">44</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x0</span>(%rip),%rax        # <span class=\"number\">4</span>b &lt;main+<span class=\"number\">0x32</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4</span>b:   <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\">  <span class=\"number\">4</span>d:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">4</span>f:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">51</span>:   e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          callq  <span class=\"number\">56</span> &lt;main+<span class=\"number\">0x3d</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">56</span>:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">59</span>:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">5</span>c:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">5</span>d:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接为可执行文件-或者共享库\"><a href=\"#链接为可执行文件-或者共享库\" class=\"headerlink\" title=\"链接为可执行文件(或者共享库)\"></a>链接为可执行文件(或者共享库)</h4><p>在链接为目标文件时, 会合并处理每个目标文件, 生成plt代码 确定GOT(PGOT)的相对位置等  </p>\n<p>在相对位置的两个版本中均可以看到对全局符号的访问均正确填充了相对位移  </p>\n<p>PIE版本的区别主要是PIE使用了相对位置 连ELF类型都变成了DYN<br>非PIE版本则使用了绝对位置<br>测试代码没有调用外部函数符号 所以在PIC版本的汇编指令中并没有看到PLT指令</p>\n<h5 id=\"可执行文件-相对位置的非PIE-EXEC-版本\"><a href=\"#可执行文件-相对位置的非PIE-EXEC-版本\" class=\"headerlink\" title=\"可执行文件 (相对位置的非PIE(EXEC)版本)\"></a>可执行文件 (相对位置的非PIE(EXEC)版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x388</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000600</span>ff0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000600</span>ff8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">3</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">65</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000400238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000400254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000400274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000400298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000004002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000400300</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000400360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000400368</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000400388</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">00000000004005</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">00000000004005</span>f8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000600</span>ff0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000400410</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000400450</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000400490</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">00000000004004</span>b0     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">16</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">13</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">00000000004006</span>f8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">00000000004005</span>b8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">14</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000601028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> _edata</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">22</span> data_start</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">00000000004004</span>ef    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> main</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000601020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">12</span> _fini</span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">0000000000400400</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">11</span> _dl_relocate_static_pie</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _start</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000601038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000400530</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">00000000004005</span>a0     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">00000000004003</span>b8 &lt;_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>bc:       <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">35</span> <span class=\"number\">0</span>c <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200c35</span>(%rip),%rax        # <span class=\"number\">600</span>ff8 &lt;__gmon_start__&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c3</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c6</span>:       <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">4003</span>ca &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c8</span>:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>ca:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>ce:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span> &lt;_start&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d0</span>:       <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d2</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d5</span>:       <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d6</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d9</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>dd:       <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>de:       <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>df:       <span class=\"number\">49</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> a0 <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4005a0</span>,%<span class=\"built_in\">r8</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>e6:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c1</span> <span class=\"number\">30</span> <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x400530</span>,%rcx</span><br><span class=\"line\">  <span class=\"number\">4003</span>ed:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c7</span> ef <span class=\"number\">04</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4004ef</span>,%rdi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">f4</span>:       ff <span class=\"number\">15</span> <span class=\"built_in\">f6</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200bf6</span>(%rip)        # <span class=\"number\">600</span>ff0 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>fa:       <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\">  <span class=\"number\">4003</span>fb:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400400</span> &lt;_dl_relocate_static_pie&gt;:</span><br><span class=\"line\">  <span class=\"number\">400400</span>:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">400402</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">400409</span>:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40040</span>c:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400410</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400410</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">37</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601037</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400415</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400416</span>:       <span class=\"number\">48</span> <span class=\"number\">2</span>d <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>       <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40041</span>c:       <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400420</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400423</span>:       <span class=\"number\">76</span> <span class=\"number\">1</span>b                   jbe    <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400425</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">40042</span>a:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40042</span>d:       <span class=\"number\">74</span> <span class=\"number\">11</span>                   je     <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40042</span>f:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400430</span>:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400435</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400437</span>:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40043</span>e:       <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400440</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400441</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400442</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\">  <span class=\"number\">400446</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40044</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400450</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400450</span>:       <span class=\"keyword\">be </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%esi</span><br><span class=\"line\">  <span class=\"number\">400455</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400456</span>:       <span class=\"number\">48</span> <span class=\"number\">81</span> ee <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">40045</span>d:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400461</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400464</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\">  <span class=\"number\">400467</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40046</span>b:       <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\">  <span class=\"number\">40046</span>e:       <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\">  <span class=\"number\">400471</span>:       <span class=\"number\">74</span> <span class=\"number\">15</span>                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400473</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400478</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40047</span>b:       <span class=\"number\">74</span> <span class=\"number\">0</span>b                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40047</span>d:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40047</span>e:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400483</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400485</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">400488</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400489</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40048</span>a:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400490</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\">  <span class=\"number\">400490</span>:       <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">95</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200b95</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">400497</span>:       <span class=\"number\">75</span> <span class=\"number\">11</span>                   jne    <span class=\"number\">4004</span>aa &lt;__do_global_dtors_aux+<span class=\"number\">0x1a</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400499</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>a:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>d:       e8 <span class=\"number\">6</span>e ff ff ff          callq  <span class=\"number\">400410</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a2</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a3</span>:       <span class=\"built_in\">c6</span> <span class=\"number\">05</span> <span class=\"number\">82</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x200b82</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>aa:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">4004</span>ac:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>b0 &lt;frame_dummy&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>b0:       <span class=\"keyword\">bf </span><span class=\"number\">28</span> <span class=\"number\">0</span>e <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x600e28</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">4004</span>b5:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\">  <span class=\"number\">4004</span>b9:       <span class=\"number\">75</span> <span class=\"number\">05</span>                   jne    <span class=\"number\">4004</span><span class=\"built_in\">c0</span> &lt;frame_dummy+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bb:       eb <span class=\"number\">93</span>                   jmp    <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bd:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c0</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c5</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c8</span>:       <span class=\"number\">74</span> <span class=\"built_in\">f1</span>                   je     <span class=\"number\">4004</span>bb &lt;frame_dummy+<span class=\"number\">0xb</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>ca:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>cb:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ce:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d0</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d1</span>:       e9 <span class=\"number\">7</span>a ff ff ff          jmpq   <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d6</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d7</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>da:       <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>dd:       <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>e0:       <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">4004</span>e3:       <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e6:       <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e8:       <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>ed:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ee:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>ef &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>ef:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f0</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f3</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f7</span>:       <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fa:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fe:       <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400505</span>:       <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400508</span>:       <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">22</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x200b22</span>(%rip)        # <span class=\"number\">601030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\">  <span class=\"number\">40050</span>e:       <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">14</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x200b14</span>(%rip),%edx        # <span class=\"number\">601028</span> &lt;g_static_data&gt;</span><br><span class=\"line\">  <span class=\"number\">400514</span>:       <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">16</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x200b16</span>(%rip),%eax        # <span class=\"number\">601030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\">  <span class=\"number\">40051</span>a:       <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">40051</span>c:       <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">40051</span>e:       e8 <span class=\"keyword\">b3 </span>ff ff ff          callq  <span class=\"number\">4004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\">  <span class=\"number\">400523</span>:       <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400526</span>:       <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400529</span>:       <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">40052</span>a:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40052</span>b:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400530</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">400530</span>:       <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400532</span>:       <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400534</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400537</span>:       <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400539</span>:       <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40053</span>b:       <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">600</span>e18 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\">  <span class=\"number\">400542</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400543</span>:       <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008d6</span>(%rip),%rbp        # <span class=\"number\">600</span>e20 &lt;__init_array_end&gt;</span><br><span class=\"line\">  <span class=\"number\">40054</span>a:       <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\">  <span class=\"number\">40054</span>b:       <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\">  <span class=\"number\">40054</span>e:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400551</span>:       <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">400554</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">400558</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">40055</span>c:       e8 <span class=\"number\">57</span> fe ff ff          callq  <span class=\"number\">4003</span>b8 &lt;_init&gt;</span><br><span class=\"line\">  <span class=\"number\">400561</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400564</span>:       <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">400586</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400566</span>:       <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\">  <span class=\"number\">400568</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40056</span>f:       <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400570</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\">  <span class=\"number\">400573</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400576</span>:       <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\">  <span class=\"number\">400579</span>:       <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\">  <span class=\"number\">40057</span>d:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\">  <span class=\"number\">400581</span>:       <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\">  <span class=\"number\">400584</span>:       <span class=\"number\">75</span> ea                   jne    <span class=\"number\">400570</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400586</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">40058</span>a:       <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\">  <span class=\"number\">40058</span>b:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40058</span>c:       <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40058</span>e:       <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400590</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400592</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400594</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400595</span>:       <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span> <span class=\"number\">400596</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40059</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>a0 &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>a0:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span><span class=\"built_in\">a4</span> &lt;_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a4</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>a8:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>ac:       <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可执行文件-相对位置的PIE-DYN-版本\"><a href=\"#可执行文件-相对位置的PIE-DYN-版本\" class=\"headerlink\" title=\"可执行文件 (相对位置的PIE(DYN)版本)\"></a>可执行文件 (相对位置的PIE(DYN)版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x448</span> 含有 <span class=\"number\">9</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000200</span>dd8  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">660</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>de0  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">620</span></span><br><span class=\"line\"><span class=\"number\">000000201020</span>  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">201020</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _Jv_RegisterClasses + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe0  <span class=\"number\">000300000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_deregisterTMClone + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe8  <span class=\"number\">000400000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff0  <span class=\"number\">000500000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff8  <span class=\"number\">000600000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_registerTMCloneTa + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">7</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">70</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000000002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000418</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000428</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000448</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000540</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000550</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000560</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">00000000000007</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000200</span>fd0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">25</span> </span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">26</span> </span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000000590</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000000620</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">25</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000660</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000000774</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">00000000000008</span>e8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000201028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> _edata</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">24</span> data_start</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">15</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000000690</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@@GLIBC_2.2</span></span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">00000000000006</span>a9    <span class=\"number\">60</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> main</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">0000000000201020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">14</span> _fini</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000000560</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _start</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000201038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">65</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">    <span class=\"number\">66</span>: <span class=\"number\">0000000000000760</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">67</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">68</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">    <span class=\"number\">69</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000520</span> &lt;_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">520</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">524</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"built_in\">c5</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200ac5</span>(%rip),%rax        # <span class=\"number\">200</span>ff0 &lt;__gmon_start__&gt;</span><br><span class=\"line\"> <span class=\"number\">52</span>b:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">52</span>e:   <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">532</span> &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">530</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">532</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">536</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000540</span> &lt;.plt&gt;:</span><br><span class=\"line\"> <span class=\"number\">540</span>:   ff <span class=\"number\">35</span> <span class=\"built_in\">c2</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">pushq </span> <span class=\"number\">0x200ac2</span>(%rip)        # <span class=\"number\">201008</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x8</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">546</span>:   ff <span class=\"number\">25</span> <span class=\"built_in\">c4</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200ac4</span>(%rip)        # <span class=\"number\">201010</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">54</span>c:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt.got:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000550</span> &lt;.plt.got&gt;:</span><br><span class=\"line\"> <span class=\"number\">550</span>:   ff <span class=\"number\">25</span> <span class=\"number\">7</span>a <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200a7a</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">556</span>:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000560</span> &lt;_start&gt;:</span><br><span class=\"line\"> <span class=\"number\">560</span>:   <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\"> <span class=\"number\">562</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\"> <span class=\"number\">565</span>:   <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\"> <span class=\"number\">566</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\"> <span class=\"number\">569</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>d:   <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\"> <span class=\"number\">56</span>e:   <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>f:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">05</span> ea <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x1ea</span>(%rip),%<span class=\"built_in\">r8</span>        # <span class=\"number\">760</span> &lt;__libc_csu_fini&gt;</span><br><span class=\"line\"> <span class=\"number\">576</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">0</span>d <span class=\"number\">73</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x173</span>(%rip),%rcx        # <span class=\"number\">6</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;</span><br><span class=\"line\"> <span class=\"number\">57</span>d:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">25</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x125</span>(%rip),%rdi        # <span class=\"number\">6</span>a9 &lt;main&gt;</span><br><span class=\"line\"> <span class=\"number\">584</span>:   ff <span class=\"number\">15</span> <span class=\"number\">5</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200a5e</span>(%rip)        # <span class=\"number\">200</span>fe8 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">58</span>a:   <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\"> <span class=\"number\">58</span>b:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000590</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">590</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">597</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rax        # <span class=\"number\">201037</span> &lt;__TMC_END__+<span class=\"number\">0x7</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">59</span>e:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">59</span>f:   <span class=\"number\">48</span> <span class=\"number\">29</span> f8                <span class=\"keyword\">sub </span>   %rdi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">a2</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>a5:   <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>a9:   <span class=\"number\">76</span> <span class=\"number\">15</span>                   jbe    <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ab:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200a2e</span>(%rip),%rax        # <span class=\"number\">200</span>fe0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b2:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>b5:   <span class=\"number\">74</span> <span class=\"number\">09</span>                   je     <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>b8:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ba:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c0</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c1</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c2</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c6</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span>cd:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d0</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">59</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a59</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d7</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">35</span> <span class=\"number\">52</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a52</span>(%rip),%rsi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>de:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>df:   <span class=\"number\">48</span> <span class=\"number\">29</span> fe                <span class=\"keyword\">sub </span>   %rdi,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e2:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>e5:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e9:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ec:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f0</span>:   <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f3</span>:   <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f6</span>:   <span class=\"number\">74</span> <span class=\"number\">18</span>                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>f8:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> f9 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009f9</span>(%rip),%rax        # <span class=\"number\">200</span>ff8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ff:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">602</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">604</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">605</span>:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">607</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">60</span>e:   <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">610</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">611</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">612</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">616</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">61</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000620</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\"> <span class=\"number\">620</span>:   <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">05</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200a05</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">627</span>:   <span class=\"number\">75</span> <span class=\"number\">27</span>                   jne    <span class=\"number\">650</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">629</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>d <span class=\"number\">9</span>f <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x20099f</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">630</span>:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">631</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">632</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">635</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">643</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x23</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">637</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">3</span>d e2 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009e2</span>(%rip),%rdi        # <span class=\"number\">201020</span> &lt;__dso_handle&gt;</span><br><span class=\"line\"> <span class=\"number\">63</span>e:   e8 <span class=\"number\">0</span>d ff ff ff          callq  <span class=\"number\">550</span> &lt;.plt.got&gt;</span><br><span class=\"line\"> <span class=\"number\">643</span>:   e8 <span class=\"number\">48</span> ff ff ff          callq  <span class=\"number\">590</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">648</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">649</span>:   <span class=\"built_in\">c6</span> <span class=\"number\">05</span> dc <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x2009dc</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">650</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"> <span class=\"number\">652</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">656</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">65</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000660</span> &lt;frame_dummy&gt;:</span><br><span class=\"line\"> <span class=\"number\">660</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">81</span> <span class=\"number\">07</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200781</span>(%rip),%rdi        # <span class=\"number\">200</span>de8 &lt;__JCR_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">667</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\"> <span class=\"number\">66</span>b:   <span class=\"number\">75</span> <span class=\"number\">0</span>b                   jne    <span class=\"number\">678</span> &lt;frame_dummy+<span class=\"number\">0x18</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">66</span>d:   e9 <span class=\"number\">5</span>e ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">672</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">678</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">59</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200959</span>(%rip),%rax        # <span class=\"number\">200</span>fd8 &lt;_Jv_RegisterClasses&gt;</span><br><span class=\"line\"> <span class=\"number\">67</span>f:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">682</span>:   <span class=\"number\">74</span> e9                   je     <span class=\"number\">66</span>d &lt;frame_dummy+<span class=\"number\">0xd</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">684</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">685</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">688</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">68</span>a:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">68</span>b:   e9 <span class=\"number\">40</span> ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000690</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\"> <span class=\"number\">690</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">691</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">694</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">697</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">69</span>a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">69</span>d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a0:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">a2</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>a8:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span>a9 &lt;main&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span>a9:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>aa:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>ad:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">6</span>b1:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b4:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b8:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>bf:   <span class=\"number\">8</span>b <span class=\"number\">45</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c2</span>:   <span class=\"number\">89</span> <span class=\"number\">05</span> <span class=\"number\">68</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   %eax,<span class=\"number\">0x200968</span>(%rip)        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c8</span>:   <span class=\"number\">8</span>b <span class=\"number\">15</span> <span class=\"number\">5</span>a <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x20095a</span>(%rip),%edx        # <span class=\"number\">201028</span> &lt;g_static_data&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>ce:   <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">5</span>c <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">mov </span>   <span class=\"number\">0x20095c</span>(%rip),%eax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d4</span>:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d6</span>:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d8</span>:   e8 <span class=\"keyword\">b3 </span>ff ff ff          callq  <span class=\"number\">690</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>dd:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>e0:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>e3:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\"> <span class=\"number\">6</span>e4:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">6</span>e5:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">6</span>ec:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">6</span>ef:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">00000000000006f0 </span>&lt;__libc_csu_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f0</span>:   <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f2</span>:   <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f4</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f7</span>:   <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">6</span>f9:   <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">6</span>fb:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">200</span>dd8 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\"> <span class=\"number\">702</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">703</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%rbp        # <span class=\"number\">200</span>de0 &lt;__init_array_end&gt;</span><br><span class=\"line\"> <span class=\"number\">70</span>a:   <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\"> <span class=\"number\">70</span>b:   <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\"> <span class=\"number\">70</span>e:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">711</span>:   <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">714</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">718</span>:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">71</span>c:   e8 ff fd ff ff          callq  <span class=\"number\">520</span> &lt;_init&gt;</span><br><span class=\"line\"> <span class=\"number\">721</span>:   <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\"> <span class=\"number\">724</span>:   <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">746</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">726</span>:   <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\"> <span class=\"number\">728</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">72</span>f:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">730</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\"> <span class=\"number\">733</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">736</span>:   <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\"> <span class=\"number\">739</span>:   <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\"> <span class=\"number\">73</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\"> <span class=\"number\">741</span>:   <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\"> <span class=\"number\">744</span>:   <span class=\"number\">75</span> ea                   jne    <span class=\"number\">730</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">746</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">74</span>a:   <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\"> <span class=\"number\">74</span>b:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">74</span>c:   <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">74</span>e:   <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">750</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">752</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">754</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">755</span>:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">756</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">75</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000760</span> &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">760</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000764</span> &lt;_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">764</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">768</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">76</span>c:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"可执行文件-位置无关的非PIE-EXEC-版本\"><a href=\"#可执行文件-位置无关的非PIE-EXEC-版本\" class=\"headerlink\" title=\"可执行文件 (位置无关的非PIE(EXEC)版本)\"></a>可执行文件 (位置无关的非PIE(EXEC)版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Dynamic</span> section at offset <span class=\"number\">0xe30</span> contains <span class=\"number\">23</span> entries:</span><br><span class=\"line\">  标记        类型                         名称/值</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libstdc++.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libm.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libgcc_s.so.<span class=\"number\">1</span>]</span><br><span class=\"line\"> <span class=\"number\">0x0000000000000001</span> (NEEDED)             共享库：[libc.so.<span class=\"number\">6</span>]</span><br><span class=\"line\"> <span class=\"number\">0x000000000000000c</span> (INIT)               <span class=\"number\">0x4003b8</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000000d</span> (FINI)               <span class=\"number\">0x4005b4</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000019</span> (INIT_ARRAY)         <span class=\"number\">0x600e18</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000001b</span> (INIT_ARRAYSZ)       <span class=\"number\">8</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000000000001a</span> (FINI_ARRAY)         <span class=\"number\">0x600e20</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000001c</span> (FINI_ARRAYSZ)       <span class=\"number\">8</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000006ffffef5</span> (GNU_HASH)           <span class=\"number\">0x400298</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000005</span> (<span class=\"keyword\">STRTAB) </span>            <span class=\"number\">0x400300</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000006</span> (SYMTAB)             <span class=\"number\">0x4002b8</span></span><br><span class=\"line\"> <span class=\"number\">0x000000000000000a</span> (<span class=\"keyword\">STRSZ) </span>             <span class=\"number\">95</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000000000000b</span> (SYMENT)             <span class=\"number\">24</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x0000000000000015</span> (DEBUG)              <span class=\"number\">0x0</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000007</span> (RELA)               <span class=\"number\">0x400388</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000008</span> (RELASZ)             <span class=\"number\">48</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x0000000000000009</span> (RELAENT)            <span class=\"number\">24</span> (<span class=\"keyword\">bytes)</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">0x000000006ffffffe</span> (VERNEED)            <span class=\"number\">0x400368</span></span><br><span class=\"line\"> <span class=\"number\">0x000000006fffffff</span> (VERNEEDNUM)         <span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"number\">0x000000006ffffff0</span> (VERSYM)             <span class=\"number\">0x400360</span></span><br><span class=\"line\"> <span class=\"number\">0x0000000000000000</span> (NULL)               <span class=\"number\">0x0</span></span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x388</span> 含有 <span class=\"number\">2</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000600</span>ff0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000600</span>ff8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">3</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">65</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000400238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000400254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000400274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000400298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000004002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000400300</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000400360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000400368</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000400388</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c8</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000400608</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000600</span>ff0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000400410</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000400450</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000400490</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">00000000004004</span>b0     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">11</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">16</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c4</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">13</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000400708</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000600</span>e28     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c8</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">14</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000600</span>e30     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000600</span>e20     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000600</span>e18     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000601000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000601028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> _edata</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">22</span> data_start</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">00000000004005</span><span class=\"built_in\">c0</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">00000000004004</span>ef    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> main</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000601020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">00000000004005</span>b4     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">12</span> _fini</span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">0000000000400400</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">11</span> _dl_relocate_static_pie</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> _start</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">00000000004003</span>b8     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">22</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000601018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">22</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000601038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">000000000060102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000400540</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000601030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">23</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">00000000004005</span>b0     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">11</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">00000000004003</span>b8 &lt;_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>bc:       <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">35</span> <span class=\"number\">0</span>c <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200c35</span>(%rip),%rax        # <span class=\"number\">600</span>ff8 &lt;__gmon_start__&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c3</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c6</span>:       <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">4003</span>ca &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">c8</span>:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>ca:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>ce:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004003</span><span class=\"built_in\">d0</span> &lt;_start&gt;:</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d0</span>:       <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d2</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d5</span>:       <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d6</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">d9</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>dd:       <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\">  <span class=\"number\">4003</span>de:       <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\">  <span class=\"number\">4003</span>df:       <span class=\"number\">49</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"keyword\">b0 </span><span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4005b0</span>,%<span class=\"built_in\">r8</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>e6:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c1</span> <span class=\"number\">40</span> <span class=\"number\">05</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x400540</span>,%rcx</span><br><span class=\"line\">  <span class=\"number\">4003</span>ed:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c7</span> ef <span class=\"number\">04</span> <span class=\"number\">40</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x4004ef</span>,%rdi</span><br><span class=\"line\">  <span class=\"number\">4003</span><span class=\"built_in\">f4</span>:       ff <span class=\"number\">15</span> <span class=\"built_in\">f6</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200bf6</span>(%rip)        # <span class=\"number\">600</span>ff0 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\">  <span class=\"number\">4003</span>fa:       <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\">  <span class=\"number\">4003</span>fb:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400400</span> &lt;_dl_relocate_static_pie&gt;:</span><br><span class=\"line\">  <span class=\"number\">400400</span>:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">400402</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">400409</span>:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40040</span>c:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400410</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400410</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">37</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601037</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400415</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400416</span>:       <span class=\"number\">48</span> <span class=\"number\">2</span>d <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>       <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40041</span>c:       <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400420</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400423</span>:       <span class=\"number\">76</span> <span class=\"number\">1</span>b                   jbe    <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400425</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">40042</span>a:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40042</span>d:       <span class=\"number\">74</span> <span class=\"number\">11</span>                   je     <span class=\"number\">400440</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40042</span>f:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400430</span>:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400435</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400437</span>:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40043</span>e:       <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400440</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400441</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400442</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\">  <span class=\"number\">400446</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40044</span>d:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400450</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\">  <span class=\"number\">400450</span>:       <span class=\"keyword\">be </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%esi</span><br><span class=\"line\">  <span class=\"number\">400455</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400456</span>:       <span class=\"number\">48</span> <span class=\"number\">81</span> ee <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">sub </span>   <span class=\"number\">$0x601030</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">40045</span>d:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400461</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400464</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\">  <span class=\"number\">400467</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40046</span>b:       <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\">  <span class=\"number\">40046</span>e:       <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\">  <span class=\"number\">400471</span>:       <span class=\"number\">74</span> <span class=\"number\">15</span>                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400473</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">400478</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">40047</span>b:       <span class=\"number\">74</span> <span class=\"number\">0</span>b                   je     <span class=\"number\">400488</span> &lt;register_tm_clones+<span class=\"number\">0x38</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">40047</span>d:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40047</span>e:       <span class=\"keyword\">bf </span><span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">400483</span>:       ff e0                   jmpq   *%rax</span><br><span class=\"line\">  <span class=\"number\">400485</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">400488</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">400489</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">40048</span>a:       <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400490</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\">  <span class=\"number\">400490</span>:       <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">95</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200b95</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">400497</span>:       <span class=\"number\">75</span> <span class=\"number\">11</span>                   jne    <span class=\"number\">4004</span>aa &lt;__do_global_dtors_aux+<span class=\"number\">0x1a</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400499</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>a:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">40049</span>d:       e8 <span class=\"number\">6</span>e ff ff ff          callq  <span class=\"number\">400410</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a2</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">a3</span>:       <span class=\"built_in\">c6</span> <span class=\"number\">05</span> <span class=\"number\">82</span> <span class=\"number\">0</span>b <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x200b82</span>(%rip)        # <span class=\"number\">60102</span>c &lt;_edata&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>aa:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\">  <span class=\"number\">4004</span>ac:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>b0 &lt;frame_dummy&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>b0:       <span class=\"keyword\">bf </span><span class=\"number\">28</span> <span class=\"number\">0</span>e <span class=\"number\">60</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x600e28</span>,%edi</span><br><span class=\"line\">  <span class=\"number\">4004</span>b5:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\">  <span class=\"number\">4004</span>b9:       <span class=\"number\">75</span> <span class=\"number\">05</span>                   jne    <span class=\"number\">4004</span><span class=\"built_in\">c0</span> &lt;frame_dummy+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bb:       eb <span class=\"number\">93</span>                   jmp    <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>bd:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">00</span>                <span class=\"keyword\">nopl </span>  (%rax)</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c0</span>:       <span class=\"keyword\">b8 </span><span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">mov </span>   <span class=\"number\">$0x0</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c5</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">c8</span>:       <span class=\"number\">74</span> <span class=\"built_in\">f1</span>                   je     <span class=\"number\">4004</span>bb &lt;frame_dummy+<span class=\"number\">0xb</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">4004</span>ca:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>cb:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ce:       ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d0</span>:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d1</span>:       e9 <span class=\"number\">7</span>a ff ff ff          jmpq   <span class=\"number\">400450</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d6</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">d7</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>da:       <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>dd:       <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>e0:       <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">4004</span>e3:       <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e6:       <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>e8:       <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\">  <span class=\"number\">4004</span>ed:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span>ee:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004004</span>ef &lt;main&gt;:</span><br><span class=\"line\">  <span class=\"number\">4004</span>ef:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f0</span>:       <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f3</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4004</span><span class=\"built_in\">f7</span>:       <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fa:       <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">4004</span>fe:       <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">400505</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">40050</span>c:       <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\">  <span class=\"number\">40050</span>f:       <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\">  <span class=\"number\">400511</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">28</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601028</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400518</span>:       <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\">  <span class=\"number\">40051</span>a:       <span class=\"number\">48</span> <span class=\"built_in\">c7</span> <span class=\"built_in\">c0</span> <span class=\"number\">30</span> <span class=\"number\">10</span> <span class=\"number\">60</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">$0x601030</span>,%rax</span><br><span class=\"line\">  <span class=\"number\">400521</span>:       <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\">  <span class=\"number\">400523</span>:       <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\">  <span class=\"number\">400525</span>:       <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\">  <span class=\"number\">400527</span>:       e8 aa ff ff ff          callq  <span class=\"number\">4004</span><span class=\"built_in\">d6</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\">  <span class=\"number\">40052</span>c:       <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\">  <span class=\"number\">40052</span>f:       <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\">  <span class=\"number\">400532</span>:       <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\">  <span class=\"number\">400533</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">400534</span>:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40053</span>b:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">40053</span>e:       <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000400540</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\">  <span class=\"number\">400540</span>:       <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400542</span>:       <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400544</span>:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">400547</span>:       <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">400549</span>:       <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40054</span>b:       <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">c6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008c6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">600</span>e18 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\">  <span class=\"number\">400552</span>:       <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\">  <span class=\"number\">400553</span>:       <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">c6</span> <span class=\"number\">08</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2008c6</span>(%rip),%rbp        # <span class=\"number\">600</span>e20 &lt;__init_array_end&gt;</span><br><span class=\"line\">  <span class=\"number\">40055</span>a:       <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\">  <span class=\"number\">40055</span>b:       <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\">  <span class=\"number\">40055</span>e:       <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">400561</span>:       <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">400564</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">400568</span>:       <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\">  <span class=\"number\">40056</span>c:       e8 <span class=\"number\">47</span> fe ff ff          callq  <span class=\"number\">4003</span>b8 &lt;_init&gt;</span><br><span class=\"line\">  <span class=\"number\">400571</span>:       <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\">  <span class=\"number\">400574</span>:       <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">400596</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400576</span>:       <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\">  <span class=\"number\">400578</span>:       <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">40057</span>f:       <span class=\"number\">00</span> </span><br><span class=\"line\">  <span class=\"number\">400580</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\">  <span class=\"number\">400583</span>:       <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\">  <span class=\"number\">400586</span>:       <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\">  <span class=\"number\">400589</span>:       <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\">  <span class=\"number\">40058</span>d:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\">  <span class=\"number\">400591</span>:       <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\">  <span class=\"number\">400594</span>:       <span class=\"number\">75</span> ea                   jne    <span class=\"number\">400580</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\">  <span class=\"number\">400596</span>:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">40059</span>a:       <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\">  <span class=\"number\">40059</span>b:       <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\">  <span class=\"number\">40059</span>c:       <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\">  <span class=\"number\">40059</span>e:       <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\">  <span class=\"number\">4005</span>a0:       <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a2</span>:       <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\">  <span class=\"number\">4005</span><span class=\"built_in\">a4</span>:       <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\">  <span class=\"number\">4005</span>a5:       <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span> <span class=\"number\">4005</span>a6:       <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"number\">4005</span>ad:       <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>b0 &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>b0:       <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000004005</span>b4 &lt;_fini&gt;:</span><br><span class=\"line\">  <span class=\"number\">4005</span>b4:       <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>b8:       <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\">  <span class=\"number\">4005</span>bc:       <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"可执行文件-位置无关的PIE-DYN-版本\"><a href=\"#可执行文件-位置无关的PIE-DYN-版本\" class=\"headerlink\" title=\"可执行文件 (位置无关的PIE(DYN)版本)\"></a>可执行文件 (位置无关的PIE(DYN)版本)</h5><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">重定位节 <span class=\"string\">'.rela.dyn'</span> 位于偏移量 <span class=\"number\">0x448</span> 含有 <span class=\"number\">9</span> 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\"><span class=\"number\">000000200</span>dd8  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">660</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>de0  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">620</span></span><br><span class=\"line\"><span class=\"number\">000000201020</span>  <span class=\"number\">000000000008</span> R_X86_64_RELATIVE                    <span class=\"number\">201020</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd0  <span class=\"number\">000100000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fd8  <span class=\"number\">000200000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _Jv_RegisterClasses + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe0  <span class=\"number\">000300000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_deregisterTMClone + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>fe8  <span class=\"number\">000400000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 + 0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff0  <span class=\"number\">000500000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> __gmon_start__ + <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">000000200</span>ff8  <span class=\"number\">000600000006</span> R_X86_64_GLOB_DAT <span class=\"number\">0000000000000000</span> _ITM_registerTMCloneTa + <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">The</span> decoding of unwind sections for machine type Advanced Micro Devices X86-<span class=\"number\">64</span> is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.dynsym'</span> contains <span class=\"number\">7</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@GLIBC_2.2.5 (2)</span></span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Symbol</span> table <span class=\"string\">'.symtab'</span> contains <span class=\"number\">70</span> entries:</span><br><span class=\"line\"><span class=\"symbol\">   Num:</span>    Value          Size Type    <span class=\"keyword\">Bind </span>  Vis      Ndx Name</span><br><span class=\"line\">     <span class=\"number\">0</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     <span class=\"number\">1</span>: <span class=\"number\">0000000000000238</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">1</span> </span><br><span class=\"line\">     <span class=\"number\">2</span>: <span class=\"number\">0000000000000254</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">2</span> </span><br><span class=\"line\">     <span class=\"number\">3</span>: <span class=\"number\">0000000000000274</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">3</span> </span><br><span class=\"line\">     <span class=\"number\">4</span>: <span class=\"number\">0000000000000298</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">4</span> </span><br><span class=\"line\">     <span class=\"number\">5</span>: <span class=\"number\">00000000000002</span>b8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">5</span> </span><br><span class=\"line\">     <span class=\"number\">6</span>: <span class=\"number\">0000000000000360</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">6</span> </span><br><span class=\"line\">     <span class=\"number\">7</span>: <span class=\"number\">0000000000000418</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">7</span> </span><br><span class=\"line\">     <span class=\"number\">8</span>: <span class=\"number\">0000000000000428</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">8</span> </span><br><span class=\"line\">     <span class=\"number\">9</span>: <span class=\"number\">0000000000000448</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT    <span class=\"number\">9</span> </span><br><span class=\"line\">    <span class=\"number\">10</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">10</span> </span><br><span class=\"line\">    <span class=\"number\">11</span>: <span class=\"number\">0000000000000540</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">11</span> </span><br><span class=\"line\">    <span class=\"number\">12</span>: <span class=\"number\">0000000000000550</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">12</span> </span><br><span class=\"line\">    <span class=\"number\">13</span>: <span class=\"number\">0000000000000560</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">13</span> </span><br><span class=\"line\">    <span class=\"number\">14</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">14</span> </span><br><span class=\"line\">    <span class=\"number\">15</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">15</span> </span><br><span class=\"line\">    <span class=\"number\">16</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">16</span> </span><br><span class=\"line\">    <span class=\"number\">17</span>: <span class=\"number\">00000000000007</span><span class=\"built_in\">c0</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">17</span> </span><br><span class=\"line\">    <span class=\"number\">18</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">18</span> </span><br><span class=\"line\">    <span class=\"number\">19</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">19</span> </span><br><span class=\"line\">    <span class=\"number\">20</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">20</span> </span><br><span class=\"line\">    <span class=\"number\">21</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">21</span> </span><br><span class=\"line\">    <span class=\"number\">22</span>: <span class=\"number\">0000000000200</span>fd0     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">22</span> </span><br><span class=\"line\">    <span class=\"number\">23</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">23</span> </span><br><span class=\"line\">    <span class=\"number\">24</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">24</span> </span><br><span class=\"line\">    <span class=\"number\">25</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">25</span> </span><br><span class=\"line\">    <span class=\"number\">26</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> SECTION LOCAL  DEFAULT   <span class=\"number\">26</span> </span><br><span class=\"line\">    <span class=\"number\">27</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">28</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_LIST__</span><br><span class=\"line\">    <span class=\"number\">29</span>: <span class=\"number\">0000000000000590</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> deregister_tm_clones</span><br><span class=\"line\">    <span class=\"number\">30</span>: <span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> register_tm_clones</span><br><span class=\"line\">    <span class=\"number\">31</span>: <span class=\"number\">0000000000000620</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> __do_global_dtors_aux</span><br><span class=\"line\">    <span class=\"number\">32</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">1</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">25</span> completed.<span class=\"number\">6972</span></span><br><span class=\"line\">    <span class=\"number\">33</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">19</span> __do_global_dtors_aux_fin</span><br><span class=\"line\">    <span class=\"number\">34</span>: <span class=\"number\">0000000000000660</span>     <span class=\"number\">0</span> FUNC    LOCAL  DEFAULT   <span class=\"number\">13</span> frame_dummy</span><br><span class=\"line\">    <span class=\"number\">35</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">18</span> __frame_dummy_init_array_</span><br><span class=\"line\">    <span class=\"number\">36</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class=\"line\">    <span class=\"number\">37</span>: <span class=\"number\">0000000000000774</span>     <span class=\"number\">4</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">15</span> _ZL13g_static_text</span><br><span class=\"line\">    <span class=\"number\">38</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS crtstuff.c</span><br><span class=\"line\">    <span class=\"number\">39</span>: <span class=\"number\">00000000000008</span>e8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">17</span> __FRAME_END__</span><br><span class=\"line\">    <span class=\"number\">40</span>: <span class=\"number\">0000000000200</span>de8     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">20</span> __JCR_END__</span><br><span class=\"line\">    <span class=\"number\">41</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FILE    LOCAL  DEFAULT  ABS </span><br><span class=\"line\">    <span class=\"number\">42</span>: <span class=\"number\">0000000000000778</span>     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">16</span> __GNU_EH_FRAME_HDR</span><br><span class=\"line\">    <span class=\"number\">43</span>: <span class=\"number\">0000000000200</span>df0     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">21</span> _DYNAMIC</span><br><span class=\"line\">    <span class=\"number\">44</span>: <span class=\"number\">0000000000200</span>de0     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_end</span><br><span class=\"line\">    <span class=\"number\">45</span>: <span class=\"number\">0000000000200</span>dd8     <span class=\"number\">0</span> NOTYPE  LOCAL  DEFAULT   <span class=\"number\">18</span> __init_array_start</span><br><span class=\"line\">    <span class=\"number\">46</span>: <span class=\"number\">0000000000201000</span>     <span class=\"number\">0</span> OBJECT  LOCAL  DEFAULT   <span class=\"number\">23</span> _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    <span class=\"number\">47</span>: <span class=\"number\">0000000000201028</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> g_static_data</span><br><span class=\"line\">    <span class=\"number\">48</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> _edata</span><br><span class=\"line\">    <span class=\"number\">49</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT   <span class=\"number\">24</span> data_start</span><br><span class=\"line\">    <span class=\"number\">50</span>: <span class=\"number\">0000000000000770</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">15</span> _IO_stdin_used</span><br><span class=\"line\">    <span class=\"number\">51</span>: <span class=\"number\">0000000000000690</span>    <span class=\"number\">25</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _Z9main_funcii</span><br><span class=\"line\">    <span class=\"number\">52</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    WEAK   DEFAULT  UND __cxa_finalize<span class=\"comment\">@@GLIBC_2.2</span></span><br><span class=\"line\">    <span class=\"number\">53</span>: <span class=\"number\">00000000000006</span>a9    <span class=\"number\">69</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> main</span><br><span class=\"line\">    <span class=\"number\">54</span>: <span class=\"number\">0000000000201020</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __dso_handle</span><br><span class=\"line\">    <span class=\"number\">55</span>: <span class=\"number\">0000000000000764</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">14</span> _fini</span><br><span class=\"line\">    <span class=\"number\">56</span>: <span class=\"number\">0000000000000560</span>    <span class=\"number\">43</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> _start</span><br><span class=\"line\">    <span class=\"number\">57</span>: <span class=\"number\">0000000000000520</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">10</span> _init</span><br><span class=\"line\">    <span class=\"number\">58</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">0</span> OBJECT  <span class=\"meta\">GLOBAL</span> HIDDEN    <span class=\"number\">24</span> __TMC_END__</span><br><span class=\"line\">    <span class=\"number\">59</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses</span><br><span class=\"line\">    <span class=\"number\">60</span>: <span class=\"number\">0000000000201018</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">24</span> __data_start</span><br><span class=\"line\">    <span class=\"number\">61</span>: <span class=\"number\">0000000000201038</span>     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> _<span class=\"meta\">end</span></span><br><span class=\"line\">    <span class=\"number\">62</span>: <span class=\"number\">000000000020102</span>c     <span class=\"number\">0</span> NOTYPE  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> __bss_start</span><br><span class=\"line\">    <span class=\"number\">63</span>: <span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span>   <span class=\"number\">101</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_init</span><br><span class=\"line\">    <span class=\"number\">64</span>: <span class=\"number\">0000000000201030</span>     <span class=\"number\">4</span> OBJECT  <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">25</span> g_static_bss</span><br><span class=\"line\">    <span class=\"number\">65</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab</span><br><span class=\"line\">    <span class=\"number\">66</span>: <span class=\"number\">0000000000000760</span>     <span class=\"number\">2</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT   <span class=\"number\">13</span> __libc_csu_fini</span><br><span class=\"line\">    <span class=\"number\">67</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> FUNC    <span class=\"meta\">GLOBAL</span> DEFAULT  UND __libc_start_main<span class=\"comment\">@@GLIBC_</span></span><br><span class=\"line\">    <span class=\"number\">68</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND __gmon_start__</span><br><span class=\"line\">    <span class=\"number\">69</span>: <span class=\"number\">0000000000000000</span>     <span class=\"number\">0</span> NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">.text</span></span><br><span class=\"line\"><span class=\"number\">0000000000000520</span> &lt;_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">520</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">524</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"built_in\">c5</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200ac5</span>(%rip),%rax        # <span class=\"number\">200</span>ff0 &lt;__gmon_start__&gt;</span><br><span class=\"line\"> <span class=\"number\">52</span>b:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">52</span>e:   <span class=\"number\">74</span> <span class=\"number\">02</span>                   je     <span class=\"number\">532</span> &lt;_init+<span class=\"number\">0x12</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">530</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">532</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">536</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000540</span> &lt;.plt&gt;:</span><br><span class=\"line\"> <span class=\"number\">540</span>:   ff <span class=\"number\">35</span> <span class=\"built_in\">c2</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       <span class=\"keyword\">pushq </span> <span class=\"number\">0x200ac2</span>(%rip)        # <span class=\"number\">201008</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x8</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">546</span>:   ff <span class=\"number\">25</span> <span class=\"built_in\">c4</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200ac4</span>(%rip)        # <span class=\"number\">201010</span> &lt;_GLOBAL_OFFSET_TABLE_+<span class=\"number\">0x10</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">54</span>c:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .plt.got:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000550</span> &lt;.plt.got&gt;:</span><br><span class=\"line\"> <span class=\"number\">550</span>:   ff <span class=\"number\">25</span> <span class=\"number\">7</span>a <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       jmpq   *<span class=\"number\">0x200a7a</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">556</span>:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section <span class=\"meta\">.text</span>:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000560</span> &lt;_start&gt;:</span><br><span class=\"line\"> <span class=\"number\">560</span>:   <span class=\"number\">31</span> ed                   xor    %ebp,%ebp</span><br><span class=\"line\"> <span class=\"number\">562</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d1</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r9</span></span><br><span class=\"line\"> <span class=\"number\">565</span>:   <span class=\"number\">5</span>e                      <span class=\"keyword\">pop </span>   %rsi</span><br><span class=\"line\"> <span class=\"number\">566</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e2                <span class=\"keyword\">mov </span>   %rsp,%rdx</span><br><span class=\"line\"> <span class=\"number\">569</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> e4 <span class=\"built_in\">f0</span>             <span class=\"keyword\">and </span>   <span class=\"number\">$0xfffffffffffffff0</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>d:   <span class=\"number\">50</span>                      <span class=\"keyword\">push </span>  %rax</span><br><span class=\"line\"> <span class=\"number\">56</span>e:   <span class=\"number\">54</span>                      <span class=\"keyword\">push </span>  %rsp</span><br><span class=\"line\"> <span class=\"number\">56</span>f:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">05</span> ea <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x1ea</span>(%rip),%<span class=\"built_in\">r8</span>        # <span class=\"number\">760</span> &lt;__libc_csu_fini&gt;</span><br><span class=\"line\"> <span class=\"number\">576</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">0</span>d <span class=\"number\">73</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x173</span>(%rip),%rcx        # <span class=\"number\">6</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;</span><br><span class=\"line\"> <span class=\"number\">57</span>d:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">25</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x125</span>(%rip),%rdi        # <span class=\"number\">6</span>a9 &lt;main&gt;</span><br><span class=\"line\"> <span class=\"number\">584</span>:   ff <span class=\"number\">15</span> <span class=\"number\">5</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>       callq  *<span class=\"number\">0x200a5e</span>(%rip)        # <span class=\"number\">200</span>fe8 &lt;__libc_start_main<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">58</span>a:   <span class=\"built_in\">f4</span>                      hlt    </span><br><span class=\"line\"> <span class=\"number\">58</span>b:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000590</span> &lt;deregister_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">590</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">597</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">99</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a99</span>(%rip),%rax        # <span class=\"number\">201037</span> &lt;__TMC_END__+<span class=\"number\">0x7</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">59</span>e:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">59</span>f:   <span class=\"number\">48</span> <span class=\"number\">29</span> f8                <span class=\"keyword\">sub </span>   %rdi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">a2</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>a5:   <span class=\"number\">48</span> <span class=\"number\">83</span> f8 <span class=\"number\">0</span>e             <span class=\"keyword\">cmp </span>   <span class=\"number\">$0xe</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>a9:   <span class=\"number\">76</span> <span class=\"number\">15</span>                   jbe    <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ab:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200a2e</span>(%rip),%rax        # <span class=\"number\">200</span>fe0 &lt;_ITM_deregisterTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b2:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>b5:   <span class=\"number\">74</span> <span class=\"number\">09</span>                   je     <span class=\"number\">5</span><span class=\"built_in\">c0</span> &lt;deregister_tm_clones+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>b7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>b8:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ba:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c0</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c1</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c2</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">c6</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">5</span>cd:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000005</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;:</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d0</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">59</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a59</span>(%rip),%rdi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">d7</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">35</span> <span class=\"number\">52</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200a52</span>(%rip),%rsi        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>de:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>df:   <span class=\"number\">48</span> <span class=\"number\">29</span> fe                <span class=\"keyword\">sub </span>   %rdi,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e2:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">5</span>e5:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fe <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span>e9:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"built_in\">f0</span>                <span class=\"keyword\">mov </span>   %rsi,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span>ec:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> e8 <span class=\"number\">3</span>f             shr    <span class=\"number\">$0x3f</span>,%rax</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f0</span>:   <span class=\"number\">48</span> <span class=\"number\">01</span> <span class=\"built_in\">c6</span>                <span class=\"keyword\">add </span>   %rax,%rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f3</span>:   <span class=\"number\">48</span> <span class=\"built_in\">d1</span> fe                sar    %rsi</span><br><span class=\"line\"> <span class=\"number\">5</span><span class=\"built_in\">f6</span>:   <span class=\"number\">74</span> <span class=\"number\">18</span>                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>f8:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> f9 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009f9</span>(%rip),%rax        # <span class=\"number\">200</span>ff8 &lt;_ITM_registerTMCloneTable&gt;</span><br><span class=\"line\"> <span class=\"number\">5</span>ff:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">602</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">610</span> &lt;register_tm_clones+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">604</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">605</span>:   ff e0                   jmpq   *%rax</span><br><span class=\"line\"> <span class=\"number\">607</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">60</span>e:   <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">610</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">611</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">612</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">616</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">61</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000620</span> &lt;__do_global_dtors_aux&gt;:</span><br><span class=\"line\"> <span class=\"number\">620</span>:   <span class=\"number\">80</span> <span class=\"number\">3</span>d <span class=\"number\">05</span> <span class=\"number\">0</span>a <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpb </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x200a05</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">627</span>:   <span class=\"number\">75</span> <span class=\"number\">27</span>                   jne    <span class=\"number\">650</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x30</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">629</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>d <span class=\"number\">9</span>f <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,<span class=\"number\">0x20099f</span>(%rip)        # <span class=\"number\">200</span>fd0 &lt;__cxa_finalize<span class=\"comment\">@GLIBC_2.2.5&gt;</span></span><br><span class=\"line\"> <span class=\"number\">630</span>:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">631</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">632</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">635</span>:   <span class=\"number\">74</span> <span class=\"number\">0</span>c                   je     <span class=\"number\">643</span> &lt;__do_global_dtors_aux+<span class=\"number\">0x23</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">637</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">3</span>d e2 <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x2009e2</span>(%rip),%rdi        # <span class=\"number\">201020</span> &lt;__dso_handle&gt;</span><br><span class=\"line\"> <span class=\"number\">63</span>e:   e8 <span class=\"number\">0</span>d ff ff ff          callq  <span class=\"number\">550</span> &lt;.plt.got&gt;</span><br><span class=\"line\"> <span class=\"number\">643</span>:   e8 <span class=\"number\">48</span> ff ff ff          callq  <span class=\"number\">590</span> &lt;deregister_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">648</span>:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">649</span>:   <span class=\"built_in\">c6</span> <span class=\"number\">05</span> dc <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span> <span class=\"number\">01</span>    <span class=\"keyword\">movb </span>  <span class=\"number\">$0x1</span>,<span class=\"number\">0x2009dc</span>(%rip)        # <span class=\"number\">20102</span>c &lt;_edata&gt;</span><br><span class=\"line\"> <span class=\"number\">650</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"> <span class=\"number\">652</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">40</span> <span class=\"number\">00</span>             <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax)</span><br><span class=\"line\"> <span class=\"number\">656</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">65</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000660</span> &lt;frame_dummy&gt;:</span><br><span class=\"line\"> <span class=\"number\">660</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">3</span>d <span class=\"number\">81</span> <span class=\"number\">07</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200781</span>(%rip),%rdi        # <span class=\"number\">200</span>de8 &lt;__JCR_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">667</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"number\">3</span>f <span class=\"number\">00</span>             <span class=\"keyword\">cmpq </span>  <span class=\"number\">$0x0</span>,(%rdi)</span><br><span class=\"line\"> <span class=\"number\">66</span>b:   <span class=\"number\">75</span> <span class=\"number\">0</span>b                   jne    <span class=\"number\">678</span> &lt;frame_dummy+<span class=\"number\">0x18</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">66</span>d:   e9 <span class=\"number\">5</span>e ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"> <span class=\"number\">672</span>:   <span class=\"number\">66</span> <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">44</span> <span class=\"number\">00</span> <span class=\"number\">00</span>       <span class=\"keyword\">nopw </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">678</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>b <span class=\"number\">05</span> <span class=\"number\">59</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    <span class=\"keyword\">mov </span>   <span class=\"number\">0x200959</span>(%rip),%rax        # <span class=\"number\">200</span>fd8 &lt;_Jv_RegisterClasses&gt;</span><br><span class=\"line\"> <span class=\"number\">67</span>f:   <span class=\"number\">48</span> <span class=\"number\">85</span> <span class=\"built_in\">c0</span>                test   %rax,%rax</span><br><span class=\"line\"> <span class=\"number\">682</span>:   <span class=\"number\">74</span> e9                   je     <span class=\"number\">66</span>d &lt;frame_dummy+<span class=\"number\">0xd</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">684</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">685</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">688</span>:   ff <span class=\"built_in\">d0</span>                   callq  *%rax</span><br><span class=\"line\"> <span class=\"number\">68</span>a:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">68</span>b:   e9 <span class=\"number\">40</span> ff ff ff          jmpq   <span class=\"number\">5</span><span class=\"built_in\">d0</span> &lt;register_tm_clones&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000690</span> &lt;_Z9main_funcii&gt;:</span><br><span class=\"line\"> <span class=\"number\">690</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">691</span>:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">694</span>:   <span class=\"number\">89</span> <span class=\"number\">7</span>d fc                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">697</span>:   <span class=\"number\">89</span> <span class=\"number\">75</span> f8                <span class=\"keyword\">mov </span>   %esi,-<span class=\"number\">0x8</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">69</span>a:   <span class=\"number\">8</span>b <span class=\"number\">55</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">69</span>d:   <span class=\"number\">8</span>b <span class=\"number\">45</span> f8                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x8</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a0:   <span class=\"number\">01</span> <span class=\"built_in\">d0</span>                   <span class=\"keyword\">add </span>   %edx,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">a2</span>:   <span class=\"number\">05</span> <span class=\"built_in\">c3</span> <span class=\"number\">07</span> <span class=\"number\">00</span> <span class=\"number\">00</span>          <span class=\"keyword\">add </span>   <span class=\"number\">$0x7c3</span>,%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>a7:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>a8:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span>a9 &lt;main&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span>a9:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>aa:   <span class=\"number\">48</span> <span class=\"number\">89</span> e5                <span class=\"keyword\">mov </span>   %rsp,%rbp</span><br><span class=\"line\"> <span class=\"number\">6</span>ad:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">20</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x20</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">6</span>b1:   <span class=\"number\">89</span> <span class=\"number\">7</span>d ec                <span class=\"keyword\">mov </span>   %edi,-<span class=\"number\">0x14</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b4:   <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">75</span> e0             <span class=\"keyword\">mov </span>   %rsi,-<span class=\"number\">0x20</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>b8:   <span class=\"built_in\">c7</span> <span class=\"number\">45</span> fc <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">movl </span>  <span class=\"number\">$0x0</span>,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>bf:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">6</span>a <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x20096a</span>(%rip),%rax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c6</span>:   <span class=\"number\">8</span>b <span class=\"number\">55</span> ec                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x14</span>(%rbp),%edx</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">c9</span>:   <span class=\"number\">89</span> <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   %edx,(%rax)</span><br><span class=\"line\"> <span class=\"number\">6</span>cb:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">56</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200956</span>(%rip),%rax        # <span class=\"number\">201028</span> &lt;g_static_data&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d2</span>:   <span class=\"number\">8</span>b <span class=\"number\">10</span>                   <span class=\"keyword\">mov </span>   (%rax),%edx</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">d4</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">05</span> <span class=\"number\">55</span> <span class=\"number\">09</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x200955</span>(%rip),%rax        # <span class=\"number\">201030</span> &lt;__TMC_END__&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>db:   <span class=\"number\">8</span>b <span class=\"number\">00</span>                   <span class=\"keyword\">mov </span>   (%rax),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>dd:   <span class=\"number\">89</span> <span class=\"built_in\">d6</span>                   <span class=\"keyword\">mov </span>   %edx,%esi</span><br><span class=\"line\"> <span class=\"number\">6</span>df:   <span class=\"number\">89</span> <span class=\"built_in\">c7</span>                   <span class=\"keyword\">mov </span>   %eax,%edi</span><br><span class=\"line\"> <span class=\"number\">6</span>e1:   e8 aa ff ff ff          callq  <span class=\"number\">690</span> &lt;_Z9main_funcii&gt;</span><br><span class=\"line\"> <span class=\"number\">6</span>e6:   <span class=\"number\">01</span> <span class=\"number\">45</span> fc                <span class=\"keyword\">add </span>   %eax,-<span class=\"number\">0x4</span>(%rbp)</span><br><span class=\"line\"> <span class=\"number\">6</span>e9:   <span class=\"number\">8</span>b <span class=\"number\">45</span> fc                <span class=\"keyword\">mov </span>   -<span class=\"number\">0x4</span>(%rbp),%eax</span><br><span class=\"line\"> <span class=\"number\">6</span>ec:   <span class=\"built_in\">c9</span>                      leaveq </span><br><span class=\"line\"> <span class=\"number\">6</span>ed:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">6</span>ee:   <span class=\"number\">66</span> <span class=\"number\">90</span>                   xchg   %ax,%ax</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00000000000006</span><span class=\"built_in\">f0</span> &lt;__libc_csu_init&gt;:</span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f0</span>:   <span class=\"number\">41</span> <span class=\"number\">57</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f2</span>:   <span class=\"number\">41</span> <span class=\"number\">56</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f4</span>:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">d7</span>                <span class=\"keyword\">mov </span>   %rdx,%<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">6</span><span class=\"built_in\">f7</span>:   <span class=\"number\">41</span> <span class=\"number\">55</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">6</span>f9:   <span class=\"number\">41</span> <span class=\"number\">54</span>                   <span class=\"keyword\">push </span>  %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">6</span>fb:   <span class=\"number\">4</span>c <span class=\"number\">8</span>d <span class=\"number\">25</span> <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%<span class=\"built_in\">r12</span>        # <span class=\"number\">200</span>dd8 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class=\"line\"> <span class=\"number\">702</span>:   <span class=\"number\">55</span>                      <span class=\"keyword\">push </span>  %rbp</span><br><span class=\"line\"> <span class=\"number\">703</span>:   <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">2</span>d <span class=\"built_in\">d6</span> <span class=\"number\">06</span> <span class=\"number\">20</span> <span class=\"number\">00</span>    lea    <span class=\"number\">0x2006d6</span>(%rip),%rbp        # <span class=\"number\">200</span>de0 &lt;__init_array_end&gt;</span><br><span class=\"line\"> <span class=\"number\">70</span>a:   <span class=\"number\">53</span>                      <span class=\"keyword\">push </span>  %rbx</span><br><span class=\"line\"> <span class=\"number\">70</span>b:   <span class=\"number\">41</span> <span class=\"number\">89</span> fd                <span class=\"keyword\">mov </span>   %edi,%r13d</span><br><span class=\"line\"> <span class=\"number\">70</span>e:   <span class=\"number\">49</span> <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %rsi,%<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">711</span>:   <span class=\"number\">4</span>c <span class=\"number\">29</span> e5                <span class=\"keyword\">sub </span>   %<span class=\"built_in\">r12</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">714</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">718</span>:   <span class=\"number\">48</span> <span class=\"built_in\">c1</span> fd <span class=\"number\">03</span>             sar    <span class=\"number\">$0x3</span>,%rbp</span><br><span class=\"line\"> <span class=\"number\">71</span>c:   e8 ff fd ff ff          callq  <span class=\"number\">520</span> &lt;_init&gt;</span><br><span class=\"line\"> <span class=\"number\">721</span>:   <span class=\"number\">48</span> <span class=\"number\">85</span> ed                test   %rbp,%rbp</span><br><span class=\"line\"> <span class=\"number\">724</span>:   <span class=\"number\">74</span> <span class=\"number\">20</span>                   je     <span class=\"number\">746</span> &lt;__libc_csu_init+<span class=\"number\">0x56</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">726</span>:   <span class=\"number\">31</span> db                   xor    %ebx,%ebx</span><br><span class=\"line\"> <span class=\"number\">728</span>:   <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopl </span>  <span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">72</span>f:   <span class=\"number\">00</span> </span><br><span class=\"line\"> <span class=\"number\">730</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> fa                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r15</span>,%rdx</span><br><span class=\"line\"> <span class=\"number\">733</span>:   <span class=\"number\">4</span>c <span class=\"number\">89</span> <span class=\"built_in\">f6</span>                <span class=\"keyword\">mov </span>   %<span class=\"built_in\">r14</span>,%rsi</span><br><span class=\"line\"> <span class=\"number\">736</span>:   <span class=\"number\">44</span> <span class=\"number\">89</span> ef                <span class=\"keyword\">mov </span>   %r13d,%edi</span><br><span class=\"line\"> <span class=\"number\">739</span>:   <span class=\"number\">41</span> ff <span class=\"number\">14</span> dc             callq  *(%<span class=\"built_in\">r12</span>,%rbx,<span class=\"number\">8</span>)</span><br><span class=\"line\"> <span class=\"number\">73</span>d:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c3</span> <span class=\"number\">01</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x1</span>,%rbx</span><br><span class=\"line\"> <span class=\"number\">741</span>:   <span class=\"number\">48</span> <span class=\"number\">39</span> dd                <span class=\"keyword\">cmp </span>   %rbx,%rbp</span><br><span class=\"line\"> <span class=\"number\">744</span>:   <span class=\"number\">75</span> ea                   jne    <span class=\"number\">730</span> &lt;__libc_csu_init+<span class=\"number\">0x40</span>&gt;</span><br><span class=\"line\"> <span class=\"number\">746</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">74</span>a:   <span class=\"number\">5</span>b                      <span class=\"keyword\">pop </span>   %rbx</span><br><span class=\"line\"> <span class=\"number\">74</span>b:   <span class=\"number\">5</span>d                      <span class=\"keyword\">pop </span>   %rbp</span><br><span class=\"line\"> <span class=\"number\">74</span>c:   <span class=\"number\">41</span> <span class=\"number\">5</span>c                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r12</span></span><br><span class=\"line\"> <span class=\"number\">74</span>e:   <span class=\"number\">41</span> <span class=\"number\">5</span>d                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r13</span></span><br><span class=\"line\"> <span class=\"number\">750</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>e                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r14</span></span><br><span class=\"line\"> <span class=\"number\">752</span>:   <span class=\"number\">41</span> <span class=\"number\">5</span>f                   <span class=\"keyword\">pop </span>   %<span class=\"built_in\">r15</span></span><br><span class=\"line\"> <span class=\"number\">754</span>:   <span class=\"built_in\">c3</span>                      retq   </span><br><span class=\"line\"> <span class=\"number\">755</span>:   <span class=\"number\">90</span>                      <span class=\"keyword\">nop</span></span><br><span class=\"line\"><span class=\"keyword\"> </span><span class=\"number\">756</span>:   <span class=\"number\">66</span> <span class=\"number\">2</span>e <span class=\"number\">0</span>f <span class=\"number\">1</span>f <span class=\"number\">84</span> <span class=\"number\">00</span> <span class=\"number\">00</span>    <span class=\"keyword\">nopw </span>  %cs:<span class=\"number\">0x0</span>(%rax,%rax,<span class=\"number\">1</span>)</span><br><span class=\"line\"> <span class=\"number\">75</span>d:   <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000760</span> &lt;__libc_csu_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">760</span>:   <span class=\"built_in\">f3</span> <span class=\"built_in\">c3</span>                   repz retq </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">Disassembly</span> of section .fini:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">0000000000000764</span> &lt;_fini&gt;:</span><br><span class=\"line\"> <span class=\"number\">764</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">08</span>             <span class=\"keyword\">sub </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">768</span>:   <span class=\"number\">48</span> <span class=\"number\">83</span> <span class=\"built_in\">c4</span> <span class=\"number\">08</span>             <span class=\"keyword\">add </span>   <span class=\"number\">$0x8</span>,%rsp</span><br><span class=\"line\"> <span class=\"number\">76</span>c:   <span class=\"built_in\">c3</span>                      retq</span><br></pre></td></tr></table></figure>"},{"title":"ELF静态链接过程和动态链接过程中的GOT表的作用","date":"2019-12-15T16:00:00.000Z","author":"yawei.zhang","_content":"<font color=#ff6688>  \n\n### ..1. 目录  \n\n<!-- TOC -->\n\n- [..1. 目录](#1-目录)\n- [..2. 准备工具和基础汇编知识](#2-准备工具和基础汇编知识)\n- [..3. 编译链接过程的基本原理和流程](#3-编译链接过程的基本原理和流程)\n  - [..3.1. gcc中编译一个源文件可以拆分为4个部分](#31-gcc中编译一个源文件可以拆分为4个部分)\n  - [..3.2. 编译单元(Translation environment), 编译的转换阶段 :](#32-编译单元translation-environment-编译的转换阶段-)\n  - [..3.3. PIC PIE 位置无关代码](#33-pic-pie-位置无关代码)\n  - [..3.4. GOT PLT 全局偏移表 链接过程表](#34-got-plt-全局偏移表-链接过程表)\n  - [..3.5. 符号表和符号](#35-符号表和符号)\n    - [..3.5.1. 全局符号和局部符号](#351-全局符号和局部符号)\n    - [..3.5.2. 外部符号和内部符号](#352-外部符号和内部符号)\n    - [..3.5.3. 和字符串表的关系](#353-和字符串表的关系)\n  - [..3.6. 静态链接过程](#36-静态链接过程)\n  - [..3.7. 动态链接过程](#37-动态链接过程)\n- [..4. 跟踪调测](#4-跟踪调测)\n  - [..4.1. 测试源码](#41-测试源码)\n  - [..4.2. 位置有关的重定位分析](#42-位置有关的重定位分析)\n    - [..4.2.1. 分析结论如下:](#421-分析结论如下)\n    - [..4.2.2. 系统源码参考:](#422-系统源码参考)\n    - [..4.2.3. 字符串数据](#423-字符串数据)\n    - [..4.2.4. 节信息](#424-节信息)\n    - [..4.2.5. text数据](#425-text数据)\n  - [..4.3. 位置无关的重定位分析](#43-位置无关的重定位分析)\n    - [..4.3.1. 分析说明](#431-分析说明)\n    - [..4.3.2. 全局数据访问代码分析](#432-全局数据访问代码分析)\n    - [..4.3.3. 全局函数访问代码分析](#433-全局函数访问代码分析)\n- [动态库装载过程](#动态库装载过程)\n  - [ELF的辅助向量 AUXV](#elf的辅助向量-auxv)\n  - [load_elf_binary函数](#load_elf_binary函数)\n\n<!-- /TOC -->\n\n### ..2. 准备工具和基础汇编知识\n  \n* readelf -a  查看elf信息  \n* objdump -S 查看汇编指令  \n* ldd 查看动态加载   \n* xxd - make a hexdump or do the reverse.\n* gdb  \n  * gdb 通过```  layout regs  ```打开寄存器显示, 通过```set disassemble-next-line on```打开汇编  \n  * gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可    \n  * gdb关闭ASLR：\n    * set disable-randomization on\n  * 开启ASLR：\n    * set disable-randomization off\n  * 查看ASLR状态：\n    * show disable-randomization\n  * disas反汇编命令，直接disas是反汇编当前函数\n    * disas /r (显示汇编指令对应十六进制值)   \n    * disas /m (如果有源码，显示对应行源码)   \n  * intel语法\n    * set disassembly-flavor intel\n    * set disassembly-flavor att  \n* 详细工具和汇编的基础知识见上一篇文章: [汇编语法/寻址/寄存器/代码模型(GNU assembler) ](https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/)  \n  \n<!-- more -->\n\n### ..3. 编译链接过程的基本原理和流程  \nC和C++均使用分离编译来支持多源文件模块化机制, 因此也带来了静态和动态的链接问题, 本文主要梳理了静态库的链接过程和动态链接过程.    \n\n#### ..3.1. gcc中编译一个源文件可以拆分为4个部分  \n1. 预处理 -E\n2. 编译器 -S\n3. 目标文件 -C\n4. 链接为共享库或者可执行程序   \n\n\n#### ..3.2. 编译单元(Translation environment), 编译的转换阶段 :  \n> [ISO/IEC 9899:1999]A C program need not all be translated at the same time.The text of the program is kept in units called source files, (or preprocessing files) in this International Standard.A source file together with all the headers and source files included via the preprocessing directive #include is known as a preprocessing translation unit. After preprocessing, a preprocessing translation unit is called a translation unit.\nPreviously translated translation units may be preserved individually or in libraries. The separate translation units of a program communicate by (for example) calls to functions whose identifiers have external linkage, manipulation of objects whose identifiers have external linkage, or manipulation of data files. Translation units may be separately translated and then later linked to produce an executable program.  \n\n> C语言的程序不需要一同时间翻译, 在这个国际标准中, 程序的文本内容以源文件(或者预处理文件)为单位保存, 一个源文件连同所有通过预处理指令#include包含的头文件和源文件被称为预处理翻译单元, 经过预处理后的翻译单元称为翻译单元.  翻译单位可以单独保存，也可以打包在程序库里. 程序的独立翻译单元通过(例如) 调用具有外部链接标识的函数, 处理具有外部链接标识的对象完成连接过程.  翻译单元可以独立翻译然后通过链接生成可执行程序.   \n\n\n\n#### ..3.3. PIC PIE 位置无关代码    \n编译出的二进制指令不使用绝对地址而使用相对地址称为PIC 技术  \nPIE和PIC的区别在于PIE假定了代码最终会被直接链接为可执行程序    \n\n\n#### ..3.4. GOT PLT 全局偏移表 链接过程表   \n这两个表完成了上面[编译单元](#编译单元translation-environment-编译的转换阶段-)中所说的处理过程  \n\n\n#### ..3.5. 符号表和符号   \n\n##### ..3.5.1. 全局符号和局部符号  \n符号的全局和局部是相对于编译单元而言的,  例如添加了static前缀的全局变量或者函数只在当前的编译单元可见, 因此是局部的 .  \n重定位不关心局部符号,  而对于在函数内声明的局部变量的名字并不会存储到符号表 完全由运行时栈来维护,(-g选项可以在.debug中找到符号).   \n符号表是为了编译单元之间建立联系使用的, 比如重定位.   \n\n##### ..3.5.2. 外部符号和内部符号  \n外部符号是指的当前编译单元使用但是却不在当前编译单元定义的符号.   \n\n\n##### ..3.5.3. 和字符串表的关系   \n符号表的name字段是字符串表的索引,  也就是说, 符号表本身并不存储符号的'字符串'名.  \n字符串表除了保存符号名外, 还保存常量字符串的值  \n\n\n#### ..3.6. 静态链接过程   \n\n1. 编译阶段  \n   1. 建立字符串表,符号表, 保存符号对应的声明信息.  \n   2. 建立重定位表, 对全局符号的访问都标记出准确的偏移地址  \n2. 链接生成阶段  \n  1. 合并目标文件中相同的节, 确定虚拟内存地址(pic技术只确定相对地址)  \n  2. 重建重定位表和符号表   \n  3. 使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   \n3. 运行时  \n   1. 所有地址已经完成重定位 对全局符号的访问不存在中间过程   \n   2. 如果未非位置无关代码, 则对全局符号的访问为立即数即为分配好的实际地址  \n   3. 如果是位置无关代码, 则对全局符号的访问需要用rip计算相对偏移.  \n   \n#### ..3.7. 动态链接过程  \n动态链接和静态链接的区别在于, 动态链接把重定位的时机放在了动态库被加载到内存之后.    \n\n1. 编译阶段  \n   1. 建立字符串表,符号表, 保存符号对应的声明信息.  \n   2. 建立重定位表, 对全局符号的访问都标记出准确的偏移地址  \n2. 链接生成阶段  \n  1. 合并目标文件中相同的节  确定虚拟内存地址(pic技术只确定相对地址)  \n  2. 重建重定位表和符号表   \n  3. 使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   \n  4. 保存全局符号到动态符号表(符号表中有全部符号数据 此为优化)   \n  5. 建立动态重定位表, 对全局变量的访问走GOT表, 动态重定位表记录了符号名和对应数据段中的编号(该数据段被标记为.got节).  \n  6. 建立链接过程表, 对全局函数的访问生成plt代码(.plt), 链接过程重定位表(.rela.plt)记录了每个全局函数的符号名以及在保存实际函数地址的数据段的地址. (.got.plt节), .got.plt表中存储的指针默认是   \n     1. .got.plt中所有函数的地址都会默认保存为第 个元素的内容, 该地址为_dl_runtime_resolve , 通过符号表找到真正的函数地址后填充.got.plt并执行函数.    \n  7. 对于内部符号的访问是否会进行优化 取决于代码模型,  例如对于小型代码模型中, 可执行程序中会直接访问全局变量的地址(被优化,但仍然保留GOT机制的有效性). 但是共享库中对全局变量的访问即使是当前库中的也一定会走got表.   \n3. 运行时  \n   1. 加载共享库   \n      1. 完成got, got.plt的填充   \n      2. 如果有repolr技术则设置内存段的只读  \n   2. 运行过程中  \n      1. 对全局变量的访问需要通过got表找到真正的地址   \n      2. 对函数的访问每次都会走plt, 第一次访问会跳转到符号解析函数找到真正的函数地址, 后续plt则会省略解析流程, 此为惰性加载机制.  \n\n\n<!-- more -->\n\n### ..4. 跟踪调测  \n编译选项为\n* 位置无关代码   \n* 禁止优化   \n* 禁止假设代码模型   \n\n#### ..4.1. 测试源码  \n\nlib.cpp  \n```\nint g_static_lib_bss = 0;\nint g_static_lib_data = 100;\nint lib_func(int a, int b)\n{\n  return a+b + g_static_lib_bss + g_static_lib_data;\n}\n```\n\nso.cpp  \n```\nint lib_func(int a, int b);\nextern long long g_static_lib_bss;\nextern long long g_static_lib_data;\nlong long g_static_so_bss = 0;\nlong long g_static_so_data = 100000;\n\nstatic long long g_local_so_data = 0xff00ff00;\n\nint so_child_func(int a, int b)\n{\n  return a+b + g_static_so_bss + g_static_so_data;\n}\n\nstatic int so_local_func()\n{\n  return g_local_so_data;\n}\n\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n  g_static_so_data ++;\n  int ret = lib_func(g_static_so_bss, g_static_so_data);\n  ret += so_child_func(g_static_lib_data, g_static_lib_bss);\n  ret += so_local_func();\n  return ret;\n}\n```\n\nmain.cpp  \n```\nint so_child_func(int a, int b);\nint so_func(int a, int b);\nextern int g_static_so_bss;\nextern int g_static_so_data;\n\nint g_main_static[128*1024] = {2,1};\n\nint main_func(int a, int b)\n{\n   int c = a+b;\n   c += g_static_so_bss;\n   c += g_static_so_data;\n   c += g_main_static[0];\n   c += so_func(a, b);\n   return c;\n}\n\nint main(int argc, char *argv[])\n{\n   int a = 0;\n   g_static_so_bss = 1000000;\n   a += main_func(argc, 1);\n   return a;\n}\n```\n\n#### ..4.2. 位置有关的重定位分析  \n```\ng++ -c so.cpp  -O0 -mcmodel=large  -fno-pic  \ng++ -c lib.cpp  -O0 -mcmodel=large  -fno-pic \ng++ -c main.cpp  -O0 -mcmodel=large  -fno-pic \ng++ so.o lib.o main.o -O0 -mcmodel=large -no-pie   \n```\n\n##### ..4.2.1. 分析结论如下:   \n\n* so.cpp中所有非static的全局变量和函数都存在符号表中  \n  * 符号表的起始偏移为00000200 大小为198\n  * 字符串表的起始偏移为00000398 大小为a4  \n\n* 通过xxd命令可以观察到存储所有所有符号名的位置为 0x398处开始分别是字符串:\n  * null\n  * so.cpp\n  * _ZL15g_local_so_data\n  * ...\n* 字符串表中的字符串均为标准的c-style风格的null为结尾(0x00)的字符串   \n* 符号表的所在位置0x00000200则为规整的数组 没有字符串信息  \n* 局部变量出现在目标对象的符号表中但对其访问的代码位置未出现在重定位表中  \n* 局部变量在符号中的类型是LOCAL  \n* 无论外部符号还是内部符号, 对于全局符号的访问均在重定位表中指明了具体的符号和偏移数据    \n* R_X86_64_64类型或者PC类型均为直接修改访问代码来完成重定位  \n* 对于外部的符号 无论是函数还是数据 在符号表中 均为`NOTYPE  GLOBAL UND`的一行占位数据  \n* 对于内部定义的全局函数, 则记录了再文本节中的具体的地址偏移,大小,类型等信息.   \n* 对于内部定义的全局变量, 则记录了该变量的序号, 大小, 类型信息.   \n\n* .data字段为16字节 内容分别是 a086 0100 0000 0000, 00ff 00ff 0000 0000\n  * 对应为long long g_static_so_data = 100000; 和static long long g_local_so_data = 0xff00ff00;\n\n访问全局数据  \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n```\n这里的g_static_so_bss 对应的汇编为:  \n```\n  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  5c:   00 00 00 \n  5f:   48 8b 00                mov    (%rax),%rax\n  62:   48 8d 50 01             lea    0x1(%rax),%rdx\n```\n其意思是  \n* 用64位立即数0来设置rax寄存器  \n* 解引用rax 并把内容保存到rax寄存器   \n* rax的内容+1 (这里利用了lea寻址完成++)并保存到rdx寄存器    \n这里问题就来了, 用C语言来描述就是  我们对地址 为0的的指针当做真实的全局变量的地址进行了解引用.   \n\n那么我们看下经过链接后的该汇编代码:  \n```\n  4005d3:       48 b8 60 10 68 00 00    movabs $0x681060,%rax\n  4005da:       00 00 00 \n  4005dd:       48 8b 00                mov    (%rax),%rax\n  4005e0:       48 8d 50 01             lea    0x1(%rax),%rdx\n```\n在这里, 这个立即数已经变成了合并完.data后, g_static_so_bss的真实地址.   \n这个立即数指令所在的地址偏移为0x57 然后我们查看重定位表即可发现完成该过程所需要的重定位信息:  \n```\n000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0  \n```\n\n备注:  \n这里我们看到最终链接出的地址4005da: 说明该程序并非pic代码, 对全局变量的访问没有任何相对计算以及读表过程.    \n\n\n\n\n##### ..4.2.2. 系统源码参考:  \n\n```\n/* $begin elfsymbol */\ntypedef struct { \n    int   name;      /* String table offset */ \n    char  type:4,    /* Function or data (4 bits) */ \n    binding:4; /* Local or global (4 bits) */ \n    char  reserved;  /* Unused */  \n    short section;   /* Section header index */\n    long  value;     /* Section offset or absolute address */ \n    long  size;      /* Object size in bytes */ \n} Elf64_Symbol; \n/* $end elfsymbol */\n\n/* $begin elfrelo */\ntypedef struct { \n    long offset;    /* Offset of the reference to relocate */ \n    long type:32,   /* Relocation type */ \n    symbol:32; /* Symbol table index */ \n    long addend;    /* Constant part of relocation expression */\n} Elf64_Rela; \n/* $end elfrelo */\n```\n\n  \n##### ..4.2.3. 字符串数据  \n\n```\n00000390: 0000 0000 0000 0000 0073 6f2e 6370 7000  .........so.cpp.\n000003a0: 5f5a 4c31 3567 5f6c 6f63 616c 5f73 6f5f  _ZL15g_local_so_\n000003b0: 6461 7461 005f 5a4c 3133 736f 5f6c 6f63  data._ZL13so_loc\n000003c0: 616c 5f66 756e 6376 0067 5f73 7461 7469  al_funcv.g_stati\n000003d0: 635f 736f 5f62 7373 0067 5f73 7461 7469  c_so_bss.g_stati\n000003e0: 635f 736f 5f64 6174 6100 5f5a 3133 736f  c_so_data._Z13so\n000003f0: 5f63 6869 6c64 5f66 756e 6369 6900 5f5a  _child_funcii._Z\n00000400: 3773 6f5f 6675 6e63 6969 005f 5a38 6c69  7so_funcii._Z8li\n00000410: 625f 6675 6e63 6969 0067 5f73 7461 7469  b_funcii.g_stati\n00000420: 635f 6c69 625f 6273 7300 675f 7374 6174  c_lib_bss.g_stat\n00000430: 6963 5f6c 6962 5f64 6174 6100 0000 0000  ic_lib_data.....\n```\n\n\n##### ..4.2.4. 节信息  \n\n```\nELF 头：\n  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  类别:                              ELF64\n  数据:                              2 补码，小端序 (little endian)\n  版本:                              1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI 版本:                          0\n  类型:                              REL (可重定位文件)\n  系统架构:                          Advanced Micro Devices X86-64\n  版本:                              0x1\n  入口点地址：              0x0\n  程序头起点：              0 (bytes into file)\n  Start of section headers:          1592 (bytes into file)\n  标志：             0x0\n  本头的大小：       64 (字节)\n  程序头大小：       0 (字节)\n  Number of program headers:         0\n  节头大小：         64 (字节)\n  节头数量：         12\n  字符串表索引节头： 11\n\n节头：\n  [号] 名称              类型             地址              偏移量\n       大小              全体大小          旗标   链接   信息   对齐\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       0000000000000103  0000000000000000  AX       0     0     1\n  [ 2] .rela.text        RELA             0000000000000000  00000440\n       0000000000000150  0000000000000018   I       9     1     8\n  [ 3] .data             PROGBITS         0000000000000000  00000148\n       0000000000000010  0000000000000000  WA       0     0     8\n  [ 4] .bss              NOBITS           0000000000000000  00000158\n       0000000000000008  0000000000000000  WA       0     0     8\n  [ 5] .comment          PROGBITS         0000000000000000  00000158\n       000000000000002e  0000000000000001  MS       0     0     1\n  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  00000186\n       0000000000000000  0000000000000000           0     0     1\n  [ 7] .eh_frame         PROGBITS         0000000000000000  00000188\n       0000000000000078  0000000000000000   A       0     0     8\n  [ 8] .rela.eh_frame    RELA             0000000000000000  00000590\n       0000000000000048  0000000000000018   I       9     7     8\n  [ 9] .symtab           SYMTAB           0000000000000000  00000200\n       0000000000000198  0000000000000018          10    10     8\n  [10] .strtab           STRTAB           0000000000000000  00000398\n       00000000000000a4  0000000000000000           0     0     1\n  [11] .shstrtab         STRTAB           0000000000000000  000005d8\n       0000000000000059  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\n本文件中没有程序头。\n\n重定位节 '.rela.text' 位于偏移量 0x440 含有 14 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000016  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000025  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n00000000003a  000300000001 R_X86_64_64       0000000000000000 .data + 8\n000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000068  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000075  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n000000000086  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n000000000093  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n0000000000a2  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n0000000000b3  000e00000001 R_X86_64_64       0000000000000000 _Z8lib_funcii + 0\n0000000000c2  000f00000001 R_X86_64_64       0000000000000000 g_static_lib_bss + 0\n0000000000d1  001000000001 R_X86_64_64       0000000000000000 g_static_lib_data + 0\n0000000000e2  000c00000001 R_X86_64_64       0000000000000000 _Z13so_child_funcii + 0\n0000000000f1  000200000001 R_X86_64_64       0000000000000000 .text + 34\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x590 含有 3 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 34\n000000000060  000200000002 R_X86_64_PC32     0000000000000000 .text + 47\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 17 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000008     8 OBJECT  LOCAL  DEFAULT    3 _ZL15g_local_so_data\n     6: 0000000000000034    19 FUNC    LOCAL  DEFAULT    1 _ZL13so_local_funcv\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n    10: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    4 g_static_so_bss\n    11: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 g_static_so_data\n    12: 0000000000000000    52 FUNC    GLOBAL DEFAULT    1 _Z13so_child_funcii\n    13: 0000000000000047   188 FUNC    GLOBAL DEFAULT    1 _Z7so_funcii\n    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n\nNo version information found in this file.   \n```\n\n##### ..4.2.5. text数据   \n```\nso.o：     文件格式 elf64-x86-64   \n\n\nDisassembly of section .text:    \n\n0000000000000000 <_Z13so_child_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   89 c2                   mov    %eax,%edx\n  14:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  1b:   00 00 00 \n  1e:   48 8b 00                mov    (%rax),%rax\n  21:   01 c2                   add    %eax,%edx\n  23:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  2a:   00 00 00 \n  2d:   48 8b 00                mov    (%rax),%rax\n  30:   01 d0                   add    %edx,%eax\n  32:   5d                      pop    %rbp\n  33:   c3                      retq   \n\n0000000000000034 <_ZL13so_local_funcv>:\n  34:   55                      push   %rbp\n  35:   48 89 e5                mov    %rsp,%rbp\n  38:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  3f:   00 00 00 \n  42:   48 8b 00                mov    (%rax),%rax\n  45:   5d                      pop    %rbp\n  46:   c3                      retq   \n\n0000000000000047 <_Z7so_funcii>:\n  47:   55                      push   %rbp\n  48:   48 89 e5                mov    %rsp,%rbp\n  4b:   48 83 ec 20             sub    $0x20,%rsp\n  4f:   89 7d ec                mov    %edi,-0x14(%rbp)\n  52:   89 75 e8                mov    %esi,-0x18(%rbp)\n  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  5c:   00 00 00 \n  5f:   48 8b 00                mov    (%rax),%rax\n  62:   48 8d 50 01             lea    0x1(%rax),%rdx\n  66:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  6d:   00 00 00 \n  70:   48 89 10                mov    %rdx,(%rax)\n  73:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  7a:   00 00 00 \n  7d:   48 8b 00                mov    (%rax),%rax\n  80:   48 8d 50 01             lea    0x1(%rax),%rdx\n  84:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  8b:   00 00 00 \n  8e:   48 89 10                mov    %rdx,(%rax)\n  91:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  98:   00 00 00 \n  9b:   48 8b 00                mov    (%rax),%rax\n  9e:   89 c2                   mov    %eax,%edx\n  a0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  a7:   00 00 00 \n  aa:   48 8b 00                mov    (%rax),%rax\n  ad:   89 d6                   mov    %edx,%esi\n  af:   89 c7                   mov    %eax,%edi\n  b1:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  b8:   00 00 00 \n  bb:   ff d0                   callq  *%rax\n  bd:   89 45 fc                mov    %eax,-0x4(%rbp)\n  c0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  c7:   00 00 00 \n  ca:   48 8b 00                mov    (%rax),%rax\n  cd:   89 c2                   mov    %eax,%edx\n  cf:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  d6:   00 00 00 \n  d9:   48 8b 00                mov    (%rax),%rax\n  dc:   89 d6                   mov    %edx,%esi\n  de:   89 c7                   mov    %eax,%edi\n  e0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  e7:   00 00 00 \n  ea:   ff d0                   callq  *%rax\n  ec:   01 45 fc                add    %eax,-0x4(%rbp)\n  ef:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  f6:   00 00 00 \n  f9:   ff d0                   callq  *%rax\n  fb:   01 45 fc                add    %eax,-0x4(%rbp)\n  fe:   8b 45 fc                mov    -0x4(%rbp),%eax\n 101:   c9                      leaveq \n 102:   c3                      retq   \n```\n\n\n\n\n\n#### ..4.3. 位置无关的重定位分析   \n```\ng++ -c so.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -c lib.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -c main.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -shared so.o  -O0 -mcmodel=large  -fPIC  \ng++ so.so lib.o main.o -O0 -mcmodel=large -pie -fPIE    \nexport  LD_LIBRARY_PATH=LD_LIBRARY_PATH:./\n```\n\n```\ng++-6 -c so.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -c lib.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -c main.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -shared so.o -oso.so  -O0 -mcmodel=large  -fPIC  \ng++-6 so.so lib.o main.o -O0 -mcmodel=large -pie -fPIE    \nexport  LD_LIBRARY_PATH=LD_LIBRARY_PATH:./\n```\n\n##### ..4.3.1. 分析说明   \n\nPIC的代码在编译为目标对象时, 所用的重定位方法和非PIC在方法上并没有差别  \n> 指明代码段中访问全局符号的操作数位置   \n> 在编译阶段用正确的地址替换掉占位用的空地址     \n> 与非PIC的差别我们会看到访问所有数据最终最终都会通过GOT表, 所以这部分的立即数会首先被替换成GOT表的地址  \n> 本段分析中主要分析动态链接的关键部分GOT/PLT/LOAD/FIXSYMBO部分分析, 对上述部分不再贴细节分析代码.   \n\n* so中的重定位表分别是.rela.dyn .rela.plt, 和目标文件中的记录格式类似但有明显不同  \n  * 无论是对全局数据的访问还是对全局函数的访问, 其重定位的地址都不在是代码段中的位置, 而是位于数据段   \n    * 对全局变量的访问, 重定位地址在.got段 数据段  \n    * 对全局函数的访问, 重定位地址在.got.plt段 数据段  \n* 重定位不在涉及修改.txt段中的内容, 所以共享库的文本段是可以跨进程安全共享的  \n\n\n\n##### ..4.3.2. 全局数据访问代码分析   \n\n访问全局数据  \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n```\n这里的g_static_so_bss++ 对应的汇编为:  \n```\n 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 <_Z7so_funcii+0xb>\n 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11\n 8b1:   00 00 00 \n 8b4:   4c 01 db                add    %r11,%rbx\n 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)\n 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)\n 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8c4:   ff ff ff \n 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8cb:   48 8b 00                mov    (%rax),%rax\n 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx\n```\n其意思是  \n* 8a3这行指令+0x20075d偏移保存到%rbx  \n* 计算出最终地址(%rbx + xffffffffffffffe0 (-20) * 1)并取值到rax  \n  * rbx的值为0x201000该地址对应的是节.got.plt 也是.got + sizeof(.got)的位置  \n  * -20位则表示在.got中  最终的地址为0x200fe0  \n  * 查找.dyn表可以知道该位置为000000200fe0  g_static_so_bss + 0   \n  * 查看该位置的内存为0  \n  * 那么如果在运行时没有进行动态填充, 则这里会出现对地址0进行解引用的操作.   \n  * rbx寄存器会复用 专门用来保存got表的入口偏移, 也就是浪费了一个通用寄存器来实现地址无关代码  \n* 我们进入gdb调试  \n  \n```\n0x7ffff7bd68a3    lea    -0x7(%rip),%rbx        # 0x7ffff7bd68a3 <_Z7so_funcii+11>   \n0x7ffff7bd68aa    movabs $0x20075d,%r11                 \n0x7ffff7bd68b4    add    %r11,%rbx                      \n0x7ffff7bd68b7    mov    %edi,-0x24(%rbp)               \n0x7ffff7bd68ba    mov    %esi,-0x28(%rbp)               \n0x7ffff7bd68bd    movabs $0xffffffffffffffe0,%rax       \n0x7ffff7bd68c7    mov    (%rbx,%rax,1),%rax             \n0x7ffff7bd68cb    mov    (%rax),%rax                    \n0x7ffff7bd68ce    lea    0x1(%rax),%rdx  \n```\n带入计算:  \n```0x7ffff7bd68a3 + 0x20075d + -20*1 = 0x7FFFF7DD6FE0```  \n该位置位于加载so.so的内存中, 对应为只读的got表  \n```\n00007ffff7bd6000      4K r-x-- so.so\n00007ffff7bd7000   2044K ----- so.so\n00007ffff7dd6000      4K r---- so.so\n00007ffff7dd7000      4K rw--- so.so\n```\n推算got表在内存中的实际位置为 0x7FFFF7DD6FE0 - 28 =  0x7FFFF7DD6FB8  \n那么查看该got实际的内存如下:  \n```\n(gdb) x /9ag 0x7FFFF7DD6FB8\n0x7ffff7dd6fb8: 0x7ffff6f27c30 <__cxa_finalize> \n0x7ffff7dd6fc0: 0x555555755030 <g_static_lib_data>\n0x7ffff7dd6fc8: 0x5555557d5044 <g_static_lib_bss>       \n0x7ffff7dd6fd0: 0x0\n0x7ffff7dd6fd8: 0x7ffff7dd7030 <g_static_so_data>       \n0x7ffff7dd6fe0: 0x7ffff7dd7048 <g_static_so_bss>\n0x7ffff7dd6fe8: 0x0     \n0x7ffff7dd6ff0: 0x0\n0x7ffff7dd6ff8: 0x0\n```\n\n对应0x7FFFF7DD6FE0的位置已经保存了正确的g_static_so_bss的地址.  \n再进一步读取变量的值:  \n```\n0x7ffff7dd7048 <g_static_so_bss>:       0xf4240  (1000000)\n0x7ffff7dd7030 <g_static_so_data>:      0x186a0   (100000)  \n```\n值也正确.   \n全局变量实际保存的位置对应so.so的可读写数据段   \n\n\n\n\n##### ..4.3.3. 全局函数访问代码分析   \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n  g_static_so_data ++;\n  int ret = lib_func(g_static_so_bss, g_static_so_data);\n  ret += so_child_func(g_static_lib_data, g_static_lib_bss);\n  ret += so_local_func();\n  return ret;\n}\n```\n对应的汇编码如下:  \n%esi保存了g_static_lib_data  %edi 保存了g_static_lib_bss   \n%rbx保存了base 偏移 8a3 + 0x20075d   \n```\n 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax\n 93b:   ff ff ff \n 93e:   48 01 d8                add    %rbx,%rax\n 941:   ff d0                   callq  *%rax\n```\n这里callq的实际地址为 8a3 + 0x20075d -0x900 = 0x200700   \n该地址位于.plt中  其偏移相对于.plt为:  0x200700-0x00000000000206e0 = 0x20  偏移地址为700  \n我们找到代码位置 \n```\n\n00000000000006e0 <.plt>:\n 6e0:   ff 35 22 09 20 00   pushq  0x200922(%rip)  # 201008 <GOT_+0x8> link_map\n 6e6:   ff 25 24 09 20 00   jmpq   *0x200924(%rip) # 201010 <GOT+0x10> _dl_runtime_resolve_xsavec\n 6ec:   0f 1f 40 00             nopl   0x0(%rax)\n\n00000000000006f0 <_Z13so_child_funcii@plt>:\n 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 <_Z13so_child_funcii@@Base+0x2007f8>\n 6f6:   68 00 00 00 00          pushq  $0x0\n 6fb:   e9 e0 ff ff ff          jmpq   6e0 <.plt>\n\n0000000000000700 <_Z8lib_funcii@plt>:\n 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 <_Z8lib_funcii>\n 706:   68 01 00 00 00          pushq  $0x1\n 70b:   e9 d0 ff ff ff          jmpq   6e0 <.plt>\n```\n\n700跳转到 (706+0x20091a) 这个地址保存的内存   \n这个地址为  0x201020  即.got.plt的第5项\n在elf文件中.got.plt是有5个值的, 第五项保存的值为706  也就是jmpq的下一行代码   \n```pushq $0x1```   意思是把当前的plt序号(.rela.plt的项)保存到栈上(传参)  \n在装载后, 相对偏移706会被替换成实际分配好的地址   \n因此第一次jmpq会跳转到偏移6e0处  \n再把got+8的位置压栈, (这个指针是link_map 后文会继续讲)   \n然后跳转到函数  ```_dl_runtime_resolve_xsavec```   \n\ngot+8 和got+10 将会完成符号的解析工作并找到真正的目标函数地址, 然后回写plt 执行目标函数.   \n这两项程序装载时会完成填充, 而后续的plt的其他函数会基于该机制以惰性加载机制调用时解析.  \n\n\n\nGDB调试内容如下:   \n```\n0x7ffff7bd6700 <_Z8lib_funcii@plt>              jmpq   *0x20091a(%rip)        # 0x7ffff7dd7020    \n0x7ffff7bd6706 <_Z8lib_funcii@plt+6>            pushq  $0x1                          \n0x7ffff7bd670b <_Z8lib_funcii@plt+11>           jmpq   0x7ffff7bd66e0                 \n0x7ffff7bd6710                                  jmpq   *0x2008a2(%rip)        # 0x7ffff7dd6fb8  \n\n(gdb) x /1ag 0x7ffff7dd7020\n0x7ffff7dd7020: 0x7ffff7bd6706 <_Z8lib_funcii@plt+6>  \n\n\n(gdb) x /5ag 0x7ffff7dd7000\n0x7ffff7dd7000: 0x200dc8        \n0x7ffff7dd7008: 0x7ffff7ff6000\n0x7ffff7dd7010: 0x7ffff7ded310 <_dl_runtime_resolve_xsavec>     \n0x7ffff7dd7018: 0x7ffff7bd66f6 <_Z13so_child_funcii@plt+6>\n0x7ffff7dd7020: 0x7ffff7bd6706 <_Z8lib_funcii@plt+6>\n```\n\n```_dl_runtime_resolve_xsavec```  \nrbx+8为符号表链表指针   \nrbx+16为压到栈上的目标函数编号 存储在plt的下标从第四项开始, 前三项分别是offset, link_map, 解析函数  \n```_dl_fixup``` 返回了查找到的真实地址 ```bnd jmpq *%r11```  跳转到实际地址  \n\n``` \n0x7ffff7ded310   push   %rbx                                                                \n0x7ffff7ded311   mov    %rsp,%rbx                                                           \n0x7ffff7ded314   and    $0xffffffffffffffc0,%rsp                                            \n0x7ffff7ded318   sub    0x20f4e9(%rip),%rsp        # 0x7ffff7ffc808 <_rtld_global_ro+168>   \n0x7ffff7ded31f   mov    %rax,(%rsp)                                                         \n0x7ffff7ded323   mov    %rcx,0x8(%rsp)                                                      \n0x7ffff7ded328   mov    %rdx,0x10(%rsp)                                                     \n0x7ffff7ded32d   mov    %rsi,0x18(%rsp)                                                     \n0x7ffff7ded332   mov    %rdi,0x20(%rsp)                                                     \n0x7ffff7ded337   mov    %r8,0x28(%rsp)                                                      \n0x7ffff7ded33c   mov    %r9,0x30(%rsp)                                                      \n0x7ffff7ded341   mov    $0xee,%eax                                                          \n0x7ffff7ded346   xor    %edx,%edx                                                           \n0x7ffff7ded348   mov    %rdx,0x250(%rsp)           \n0x7ffff7ded350   mov    %rdx,0x258(%rsp)           \n0x7ffff7ded358   mov    %rdx,0x260(%rsp)           \n0x7ffff7ded360   mov    %rdx,0x268(%rsp)           \n0x7ffff7ded368   mov    %rdx,0x270(%rsp)           \n0x7ffff7ded370   mov    %rdx,0x278(%rsp)           \n0x7ffff7ded378   xsavec 0x40(%rsp)                 \n0x7ffff7ded37d   mov    0x10(%rbx),%rsi            \n0x7ffff7ded381   mov    0x8(%rbx),%rdi             \n0x7ffff7ded385   callq  0x7ffff7de6630 <_dl_fixup> \n0x7ffff7ded38a   mov    %rax,%r11                  \n0x7ffff7ded38d   mov    $0xee,%eax                 \n0x7ffff7ded392   xor    %edx,%edx                  \n0x7ffff7ded394   xrstor 0x40(%rsp)         \n0x7ffff7ded399   mov    0x30(%rsp),%r9     \n0x7ffff7ded39e   mov    0x28(%rsp),%r8     \n0x7ffff7ded3a3   mov    0x20(%rsp),%rdi    \n0x7ffff7ded3a8   mov    0x18(%rsp),%rsi    \n0x7ffff7ded3ad   mov    0x10(%rsp),%rdx    \n0x7ffff7ded3b2   mov    0x8(%rsp),%rcx     \n0x7ffff7ded3b7   mov    (%rsp),%rax        \n0x7ffff7ded3bb   mov    %rbx,%rsp          \n0x7ffff7ded3be   mov    (%rsp),%rbx        \n0x7ffff7ded3c2   add    $0x18,%rsp         \n0x7ffff7ded3c6   bnd jmpq *%r11            \n\n```\n\n```_dl_fixup```及其相关源码   \n```C++\n// Elf64_Rela\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\ntypedef int64_t  Elf64_Sxword;\n \ntypedef struct\n{\n  Elf64_Addr        r_offset;                /* Address */\n  Elf64_Xword        r_info;                 /* Relocation type and symbol index */\n  Elf64_Sxword        r_addend;              /* Addend */\n} Elf64_Rela;\n```\n  \n```C++\n/Elf64_Sym\ntypedef uint32_t Elf64_Word;\ntypedef uint16_t Elf64_Section;\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\n \ntypedef struct\n{\n  Elf64_Word        st_name;                /* Symbol name (string tbl index), 4 bytes */\n  unsigned char        st_info;             /* Symbol type and binding, 1 byte */\n  unsigned char st_other;                   /* Symbol visibility, 1 byte */\n  Elf64_Section        st_shndx;            /* Section index, 2 bytes */\n  Elf64_Addr        st_value;               /* Symbol value, 8 bytes */\n  Elf64_Xword        st_size;               /* Symbol size, 8 bytes */\n} Elf64_Sym;\n```\nlibc/elf/dl-runtime.c  \n```C++\n__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (\n   /* GKM FIXME: Fix trampoline to pass bounds so we can do\n      without the `__unbounded' qualifier.  */\n     struct link_map *__unbounded l, ElfW(Word) reloc_offset)\n{\n  const ElfW(Sym) *const symtab\n    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);\n  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);\n\n  const PLTREL *const reloc\n    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);\n  const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];\n  void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);\n  lookup_t result;\n  DL_FIXUP_VALUE_TYPE value;\n\n  /* Sanity check that we're really looking at a PLT relocation.  */\n  assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);\n\n   /* Look up the target symbol.  If the normal lookup rules are not\n      used don't look in the global scope.  */\n  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)\n    {\n      const struct r_found_version *version = NULL;\n\n      if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)\n      {\n        const ElfW(Half) *vernum =\n          (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);\n        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;\n        version = &l->l_versions[ndx];\n        if (version->hash == 0)\n          version = NULL;\n      }\n\n      /* We need to keep the scope around so do some locking.  This is\n       not necessary for objects which cannot be unloaded or when\n       we are not using any threads (yet).  */\n      int flags = DL_LOOKUP_ADD_DEPENDENCY;\n      if (!RTLD_SINGLE_THREAD_P)\n      {\n        THREAD_GSCOPE_SET_FLAG ();\n        flags |= DL_LOOKUP_GSCOPE_LOCK;\n      }\n\n      result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,\n                            version, ELF_RTYPE_CLASS_PLT, flags, NULL);\n\n      /* We are done with the global scope.  */\n      if (!RTLD_SINGLE_THREAD_P)\n      THREAD_GSCOPE_RESET_FLAG ();\n\n      /* Currently result contains the base load address (or link map)\n       of the object that defines sym.  Now add in the symbol\n       offset.  */\n      value = DL_FIXUP_MAKE_VALUE (result,\n                           sym ? (LOOKUP_VALUE_ADDRESS (result)\n                                + sym->st_value) : 0);\n    }\n  else\n    {\n      /* We already found the symbol.  The module (and therefore its load\n       address) is also known.  */\n      value = DL_FIXUP_MAKE_VALUE (l, l->l_addr + sym->st_value);\n      result = l;\n    }\n\n  /* And now perhaps the relocation addend.  */\n  value = elf_machine_plt_value (l, reloc, value);\n\n  /* Finally, fix up the plt itself.  */\n  if (__builtin_expect (GLRO(dl_bind_not), 0))\n    return value;\n\n  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);\n}\n```\n\nelf/dl-lookup.c  \n```C++\n/* Search loaded objects' symbol tables for a definition of the symbol\n   UNDEF_NAME, perhaps with a requested version for the symbol.\n   We must never have calls to the audit functions inside this function\n   or in any function which gets called.  If this would happen the audit\n   code might create a thread which can throw off all the scope locking.  */\nlookup_t\n_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,\n                     const ElfW(Sym) **ref,\n                     struct r_scope_elem *symbol_scope[],\n                     const struct r_found_version *version,\n                     int type_class, int flags, struct link_map *skip_map);\n\n```\n\n\n\n```_dl_fixup```函数首先通过宏D_PTR从link_map结构中获得符号表symtab 字符串表strtab   \n\nreloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   \nreloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  \n\nst_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  \n\n其他情况 会进入if语句   \n首先获得符号的version信息 然后调用 ```_dl_lookup_symbol_x``` 函数从已装载的共享库中查找最终的符号地址 查找到符号sym后 对其进行重定位 即加上装载地址 保存在value中      \n最后调用```elf_machine_fixup_plt```函数进行修正    \n\n\nfixup plt  回写.got.plt的项   \n```\nstatic inline Elf64_Addr\nelf_machine_fixup_plt (struct link_map *map, lookup_t t,\n               const Elf64_Rela *reloc,\n               Elf64_Addr *reloc_addr, Elf64_Addr value)\n{\n  return *reloc_addr = value;\n}\n```\n\n```_dl_lookup_symbol_x```   \n...   \n\n\n\ngot表和plt表在代码中是直接根据代码行的偏移获取的, 因此这里并无随机化过程   \n\n\n\n\n\n\n##### .got节内容  \n未填充任何数据  \n```\nzsummer@debian:~/symbo$ xxd -s+0x00000fb8 -l0x0000000000000048  so.so  \n00000fb8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fc8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fd8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fe8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000ff8: 0000 0000 0000 0000                      ........\n```\n\n\n##### .got.plt节  \n0x200dc8  \n0x0  \n0x0  \n0x6f6  \n0x706  \n\n```\nzsummer@debian:~/symbo$ xxd -s+0x00001000 -l0x0000000000000028  so.so          \n00001000: c80d 2000 0000 0000 0000 0000 0000 0000  .. .............\n00001010: 0000 0000 0000 0000 f606 0000 0000 0000  ................\n00001020: 0607 0000 0000 0000                      ........\n```\n\n##### .data节  \n2101288  \n100000  \n0xff00ff00\n\n```\nzsummer@debian:~/symbo$ xxd -s+0x00001028 -l0x0000000000000018  so.so      \n00001028: 2810 2000 0000 0000 a086 0100 0000 0000  (. .............\n00001038: 00ff 00ff 0000 0000                      ........\n```\n\n##### pmap信息  \n```\nzsummer@debian:~/symbo$ pmap 9208\n9208:   /home/zsummer/symbo/a.out\n0000555555554000      4K r-x-- a.out\n0000555555754000      4K r---- a.out\n0000555555755000    516K rw--- a.out\n00005555557d6000    132K rw---   [ anon ]\n00007ffff6ef0000   1732K r-x-- libc-2.27.so\n00007ffff70a1000   2044K ----- libc-2.27.so\n00007ffff72a0000     16K r---- libc-2.27.so\n00007ffff72a4000      8K rw--- libc-2.27.so\n00007ffff72a6000     16K rw---   [ anon ]\n00007ffff72aa000     92K r-x-- libgcc_s.so.1\n00007ffff72c1000   2044K ----- libgcc_s.so.1\n00007ffff74c0000      4K r---- libgcc_s.so.1\n00007ffff74c1000      4K rw--- libgcc_s.so.1\n00007ffff74c2000   1608K r-x-- libm-2.27.so\n00007ffff7654000   2044K ----- libm-2.27.so\n00007ffff7853000      4K r---- libm-2.27.so\n00007ffff7854000      4K rw--- libm-2.27.so\n00007ffff7855000   1480K r-x-- libstdc++.so.6.0.25\n00007ffff79c7000   2048K ----- libstdc++.so.6.0.25\n00007ffff7bc7000     40K r---- libstdc++.so.6.0.25\n00007ffff7bd1000      8K rw--- libstdc++.so.6.0.25\n00007ffff7bd3000     12K rw---   [ anon ]\n00007ffff7bd6000      4K r-x-- so.so\n00007ffff7bd7000   2044K ----- so.so\n00007ffff7dd6000      4K r---- so.so\n00007ffff7dd7000      4K rw--- so.so\n00007ffff7dd8000    148K r-x-- ld-2.27.so\n00007ffff7fd6000     20K rw---   [ anon ]\n00007ffff7ff6000      8K rw---   [ anon ]\n00007ffff7ff8000      8K r----   [ anon ]\n00007ffff7ffa000      8K r-x--   [ anon ]\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n total            16260K\n```\n\n\n##### 节信息  \n```\nELF 头：\n  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  类别:                              ELF64\n  数据:                              2 补码，小端序 (little endian)\n  版本:                              1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI 版本:                          0\n  类型:                              DYN (共享目标文件)\n  系统架构:                          Advanced Micro Devices X86-64\n  版本:                              0x1\n  入口点地址：              0x720\n  程序头起点：              64 (bytes into file)\n  Start of section headers:          6544 (bytes into file)\n  标志：             0x0\n  本头的大小：       64 (字节)\n  程序头大小：       56 (字节)\n  Number of program headers:         7\n  节头大小：         64 (字节)\n  节头数量：         28\n  字符串表索引节头： 27\n\n节头：\n  [号] 名称              类型             地址              偏移量\n       大小              全体大小          旗标   链接   信息   对齐\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0\n       0000000000000048  0000000000000000   A       3     0     8\n  [ 3] .dynsym           DYNSYM           0000000000000238  00000238\n       00000000000001b0  0000000000000018   A       4     1     8\n  [ 4] .dynstr           STRTAB           00000000000003e8  000003e8\n       000000000000013d  0000000000000000   A       0     0     1\n  [ 5] .gnu.version      VERSYM           0000000000000526  00000526\n       0000000000000024  0000000000000002   A       3     0     2\n  [ 6] .gnu.version_r    VERNEED          0000000000000550  00000550\n       0000000000000020  0000000000000000   A       4     1     8\n  [ 7] .rela.dyn         RELA             0000000000000570  00000570\n       0000000000000120  0000000000000018   A       3     0     8\n  [ 8] .rela.plt         RELA             0000000000000690  00000690\n       0000000000000030  0000000000000018  AI       3    21     8\n  [ 9] .init             PROGBITS         00000000000006c0  000006c0\n       0000000000000017  0000000000000000  AX       0     0     4\n  [10] .plt              PROGBITS         00000000000006e0  000006e0\n       0000000000000030  0000000000000010  AX       0     0     16\n  [11] .plt.got          PROGBITS         0000000000000710  00000710\n       0000000000000008  0000000000000000  AX       0     0     8\n  [12] .text             PROGBITS         0000000000000720  00000720\n       0000000000000282  0000000000000000  AX       0     0     16\n  [13] .fini             PROGBITS         00000000000009a4  000009a4\n       0000000000000009  0000000000000000  AX       0     0     4\n  [14] .eh_frame_hdr     PROGBITS         00000000000009b0  000009b0\n       0000000000000034  0000000000000000   A       0     0     4\n  [15] .eh_frame         PROGBITS         00000000000009e8  000009e8\n       00000000000000c4  0000000000000000   A       0     0     8\n  [16] .init_array       INIT_ARRAY       0000000000200db0  00000db0\n       0000000000000008  0000000000000008  WA       0     0     8\n  [17] .fini_array       FINI_ARRAY       0000000000200db8  00000db8\n       0000000000000008  0000000000000008  WA       0     0     8\n  [18] .jcr              PROGBITS         0000000000200dc0  00000dc0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [19] .dynamic          DYNAMIC          0000000000200dc8  00000dc8\n       00000000000001f0  0000000000000010  WA       4     0     8\n  [20] .got              PROGBITS         0000000000200fb8  00000fb8\n       0000000000000048  0000000000000008  WA       0     0     8\n  [21] .got.plt          PROGBITS         0000000000201000  00001000\n       0000000000000028  0000000000000008  WA       0     0     8\n  [22] .data             PROGBITS         0000000000201028  00001028\n       0000000000000018  0000000000000000  WA       0     0     8\n  [23] .bss              NOBITS           0000000000201040  00001040\n       0000000000000010  0000000000000000  WA       0     0     8\n  [24] .comment          PROGBITS         0000000000000000  00001040\n       000000000000002d  0000000000000001  MS       0     0     1\n  [25] .symtab           SYMTAB           0000000000000000  00001070\n       00000000000005e8  0000000000000018          26    46     8\n  [26] .strtab           STRTAB           0000000000000000  00001658\n       0000000000000246  0000000000000000           0     0     1\n  [27] .shstrtab         STRTAB           0000000000000000  0000189e\n       00000000000000ee  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\n程序头：\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000aac 0x0000000000000aac  R E    0x200000\n  LOAD           0x0000000000000db0 0x0000000000200db0 0x0000000000200db0\n                 0x0000000000000290 0x00000000000002a0  RW     0x200000\n  DYNAMIC        0x0000000000000dc8 0x0000000000200dc8 0x0000000000200dc8\n                 0x00000000000001f0 0x00000000000001f0  RW     0x8\n  NOTE           0x00000000000001c8 0x00000000000001c8 0x00000000000001c8\n                 0x0000000000000024 0x0000000000000024  R      0x4\n  GNU_EH_FRAME   0x00000000000009b0 0x00000000000009b0 0x00000000000009b0\n                 0x0000000000000034 0x0000000000000034  R      0x4\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     0x10\n  GNU_RELRO      0x0000000000000db0 0x0000000000200db0 0x0000000000200db0\n                 0x0000000000000250 0x0000000000000250  R      0x1\n\n Section to Segment mapping:\n  段节...\n   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .eh_frame_hdr .eh_frame \n   01     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss \n   02     .dynamic \n   03     .note.gnu.build-id \n   04     .eh_frame_hdr \n   05     \n   06     .init_array .fini_array .jcr .dynamic .got \n\nDynamic section at offset 0xdc8 contains 27 entries:\n  标记        类型                         名称/值\n 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]\n 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]\n 0x000000000000000c (INIT)               0x6c0\n 0x000000000000000d (FINI)               0x9a4\n 0x0000000000000019 (INIT_ARRAY)         0x200db0\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n 0x000000000000001a (FINI_ARRAY)         0x200db8\n 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n 0x000000006ffffef5 (GNU_HASH)           0x1f0\n 0x0000000000000005 (STRTAB)             0x3e8\n 0x0000000000000006 (SYMTAB)             0x238\n 0x000000000000000a (STRSZ)              317 (bytes)\n 0x000000000000000b (SYMENT)             24 (bytes)\n 0x0000000000000003 (PLTGOT)             0x201000\n 0x0000000000000002 (PLTRELSZ)           48 (bytes)\n 0x0000000000000014 (PLTREL)             RELA\n 0x0000000000000017 (JMPREL)             0x690\n 0x0000000000000007 (RELA)               0x570\n 0x0000000000000008 (RELASZ)             288 (bytes)\n 0x0000000000000009 (RELAENT)            24 (bytes)\n 0x000000006ffffffe (VERNEED)            0x550\n 0x000000006fffffff (VERNEEDNUM)         1\n 0x000000006ffffff0 (VERSYM)             0x526\n 0x000000006ffffff9 (RELACOUNT)          3\n 0x0000000000000000 (NULL)               0x0\n\n重定位节 '.rela.dyn' 位于偏移量 0x570 含有 12 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200db0  000000000008 R_X86_64_RELATIVE                    7f0\n000000200db8  000000000008 R_X86_64_RELATIVE                    7b0\n000000201028  000000000008 R_X86_64_RELATIVE                    201028\n000000200fb8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fc0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_data + 0\n000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_bss + 0\n000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fd8  001100000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0\n000000200fe0  000d00000006 R_X86_64_GLOB_DAT 0000000000201048 g_static_so_bss + 0\n000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\n重定位节 '.rela.plt' 位于偏移量 0x690 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000201018  001000000007 R_X86_64_JUMP_SLO 0000000000000820 _Z13so_child_funcii + 0\n000000201020  000600000007 R_X86_64_JUMP_SLO 0000000000000000 _Z8lib_funcii + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 18 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n     3: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n     7: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     8: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n     9: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    10: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    11: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init\n    12: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    13: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss\n    14: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii\n    15: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini\n    16: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii\n    17: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data\n\nSymbol table '.symtab' contains 63 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 00000000000001c8     0 SECTION LOCAL  DEFAULT    1 \n     2: 00000000000001f0     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000238     0 SECTION LOCAL  DEFAULT    3 \n     4: 00000000000003e8     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000526     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000550     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000570     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000690     0 SECTION LOCAL  DEFAULT    8 \n     9: 00000000000006c0     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000000006e0     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000710     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000720     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000000009a4     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000000009b0     0 SECTION LOCAL  DEFAULT   14 \n    15: 00000000000009e8     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000200db0     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000200db8     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dc0     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200dc8     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200fb8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000201000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000201028     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201040     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000000720     0 FUNC    LOCAL  DEFAULT   12 deregister_tm_clones\n    28: 0000000000000760     0 FUNC    LOCAL  DEFAULT   12 register_tm_clones\n    29: 00000000000007b0     0 FUNC    LOCAL  DEFAULT   12 __do_global_dtors_aux\n    30: 0000000000201040     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000200db8     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000000007f0     0 FUNC    LOCAL  DEFAULT   12 frame_dummy\n    33: 0000000000200db0     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp\n    35: 0000000000201038     8 OBJECT  LOCAL  DEFAULT   22 _ZL15g_local_so_data\n    36: 0000000000000870    40 FUNC    LOCAL  DEFAULT   12 _ZL13so_local_funcv\n    37: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    38: 0000000000000aa8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    39: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    40: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    41: 00000000000009b0     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    42: 0000000000201028     0 OBJECT  LOCAL  DEFAULT   22 __dso_handle\n    43: 0000000000200dc8     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    44: 0000000000201040     0 OBJECT  LOCAL  DEFAULT   22 __TMC_END__\n    45: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    46: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    48: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n    49: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini\n    50: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii\n    51: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n    52: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init\n    53: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    54: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data\n    55: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    56: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    57: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss\n    58: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    60: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n    61: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    62: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nHistogram for `.gnu.hash' bucket list length (total of 3 buckets):\n Length  Number     % of total  Coverage\n      0  0          (  0.0%)\n      1  0          (  0.0%)      0.0%\n      2  1          ( 33.3%)     22.2%\n      3  1          ( 33.3%)     55.6%\n      4  1          ( 33.3%)    100.0%\n\nVersion symbols section '.gnu.version' contains 18 entries:\n 地址：0000000000000526  Offset: 0x000526  Link: 3 (.dynsym)\n  000:   0 (*本地*)       2 (GLIBC_2.2.5)   0 (*本地*)       0 (*本地*)    \n  004:   0 (*本地*)       0 (*本地*)       0 (*本地*)       0 (*本地*)    \n  008:   0 (*本地*)       1 (*全局*)      1 (*全局*)      1 (*全局*)   \n  00c:   1 (*全局*)      1 (*全局*)      1 (*全局*)      1 (*全局*)   \n  010:   1 (*全局*)      1 (*全局*)   \n\nVersion needs section '.gnu.version_r' contains 1 entries:\n 地址：0x0000000000000550  Offset: 0x000550  Link: 4 (.dynstr)\n  000000: 版本: 1  文件：libc.so.6  计数：1\n  0x0010：名称：GLIBC_2.2.5  标志：无  版本：2\n\nDisplaying notes found in: .note.gnu.build-id\n  所有者             Data size  Description\n  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)\n    Build ID: 09ce242e3867431b496a7f5928e9817fa91d242a\n```\n\n\n##### 代码节   \n```\nso.so：     文件格式 elf64-x86-64\n\n\nDisassembly of section .init:\n\n00000000000006c0 <_init>:\n 6c0:   48 83 ec 08             sub    $0x8,%rsp\n 6c4:   48 8b 05 25 09 20 00    mov    0x200925(%rip),%rax        # 200ff0 <__gmon_start__>\n 6cb:   48 85 c0                test   %rax,%rax\n 6ce:   74 02                   je     6d2 <_init+0x12>\n 6d0:   ff d0                   callq  *%rax\n 6d2:   48 83 c4 08             add    $0x8,%rsp\n 6d6:   c3                      retq   \n\nDisassembly of section .plt:\n\n00000000000006e0 <.plt>:\n 6e0:   ff 35 22 09 20 00       pushq  0x200922(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 6e6:   ff 25 24 09 20 00       jmpq   *0x200924(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 6ec:   0f 1f 40 00             nopl   0x0(%rax)\n\n00000000000006f0 <_Z13so_child_funcii@plt>:\n 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 <_Z13so_child_funcii@@Base+0x2007f8>\n 6f6:   68 00 00 00 00          pushq  $0x0\n 6fb:   e9 e0 ff ff ff          jmpq   6e0 <.plt>\n\n0000000000000700 <_Z8lib_funcii@plt>:\n 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 <_Z8lib_funcii>\n 706:   68 01 00 00 00          pushq  $0x1\n 70b:   e9 d0 ff ff ff          jmpq   6e0 <.plt>\n\nDisassembly of section .plt.got:\n\n0000000000000710 <.plt.got>:\n 710:   ff 25 a2 08 20 00       jmpq   *0x2008a2(%rip)        # 200fb8 <__cxa_finalize@GLIBC_2.2.5>\n 716:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000720 <deregister_tm_clones>:\n 720:   48 8d 3d 19 09 20 00    lea    0x200919(%rip),%rdi        # 201040 <_edata>\n 727:   48 8d 05 19 09 20 00    lea    0x200919(%rip),%rax        # 201047 <_edata+0x7>\n 72e:   55                      push   %rbp\n 72f:   48 29 f8                sub    %rdi,%rax\n 732:   48 89 e5                mov    %rsp,%rbp\n 735:   48 83 f8 0e             cmp    $0xe,%rax\n 739:   76 15                   jbe    750 <deregister_tm_clones+0x30>\n 73b:   48 8b 05 a6 08 20 00    mov    0x2008a6(%rip),%rax        # 200fe8 <_ITM_deregisterTMCloneTable>\n 742:   48 85 c0                test   %rax,%rax\n 745:   74 09                   je     750 <deregister_tm_clones+0x30>\n 747:   5d                      pop    %rbp\n 748:   ff e0                   jmpq   *%rax\n 74a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 750:   5d                      pop    %rbp\n 751:   c3                      retq   \n 752:   0f 1f 40 00             nopl   0x0(%rax)\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <register_tm_clones>:\n 760:   48 8d 3d d9 08 20 00    lea    0x2008d9(%rip),%rdi        # 201040 <_edata>\n 767:   48 8d 35 d2 08 20 00    lea    0x2008d2(%rip),%rsi        # 201040 <_edata>\n 76e:   55                      push   %rbp\n 76f:   48 29 fe                sub    %rdi,%rsi\n 772:   48 89 e5                mov    %rsp,%rbp\n 775:   48 c1 fe 03             sar    $0x3,%rsi\n 779:   48 89 f0                mov    %rsi,%rax\n 77c:   48 c1 e8 3f             shr    $0x3f,%rax\n 780:   48 01 c6                add    %rax,%rsi\n 783:   48 d1 fe                sar    %rsi\n 786:   74 18                   je     7a0 <register_tm_clones+0x40>\n 788:   48 8b 05 69 08 20 00    mov    0x200869(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 78f:   48 85 c0                test   %rax,%rax\n 792:   74 0c                   je     7a0 <register_tm_clones+0x40>\n 794:   5d                      pop    %rbp\n 795:   ff e0                   jmpq   *%rax\n 797:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 79e:   00 00 \n 7a0:   5d                      pop    %rbp\n 7a1:   c3                      retq   \n 7a2:   0f 1f 40 00             nopl   0x0(%rax)\n 7a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 7ad:   00 00 00 \n\n00000000000007b0 <__do_global_dtors_aux>:\n 7b0:   80 3d 89 08 20 00 00    cmpb   $0x0,0x200889(%rip)        # 201040 <_edata>\n 7b7:   75 27                   jne    7e0 <__do_global_dtors_aux+0x30>\n 7b9:   48 83 3d f7 07 20 00    cmpq   $0x0,0x2007f7(%rip)        # 200fb8 <__cxa_finalize@GLIBC_2.2.5>\n 7c0:   00 \n 7c1:   55                      push   %rbp\n 7c2:   48 89 e5                mov    %rsp,%rbp\n 7c5:   74 0c                   je     7d3 <__do_global_dtors_aux+0x23>\n 7c7:   48 8b 3d 5a 08 20 00    mov    0x20085a(%rip),%rdi        # 201028 <__dso_handle>\n 7ce:   e8 3d ff ff ff          callq  710 <.plt.got>\n 7d3:   e8 48 ff ff ff          callq  720 <deregister_tm_clones>\n 7d8:   5d                      pop    %rbp\n 7d9:   c6 05 60 08 20 00 01    movb   $0x1,0x200860(%rip)        # 201040 <_edata>\n 7e0:   f3 c3                   repz retq \n 7e2:   0f 1f 40 00             nopl   0x0(%rax)\n 7e6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 7ed:   00 00 00 \n\n00000000000007f0 <frame_dummy>:\n 7f0:   48 8d 3d c9 05 20 00    lea    0x2005c9(%rip),%rdi        # 200dc0 <__JCR_END__>\n 7f7:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 7fb:   75 0b                   jne    808 <frame_dummy+0x18>\n 7fd:   e9 5e ff ff ff          jmpq   760 <register_tm_clones>\n 802:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 808:   48 8b 05 c1 07 20 00    mov    0x2007c1(%rip),%rax        # 200fd0 <_Jv_RegisterClasses>\n 80f:   48 85 c0                test   %rax,%rax\n 812:   74 e9                   je     7fd <frame_dummy+0xd>\n 814:   55                      push   %rbp\n 815:   48 89 e5                mov    %rsp,%rbp\n 818:   ff d0                   callq  *%rax\n 81a:   5d                      pop    %rbp\n 81b:   e9 40 ff ff ff          jmpq   760 <register_tm_clones>\n\n0000000000000820 <_Z13so_child_funcii>:\n 820:   55                      push   %rbp\n 821:   48 89 e5                mov    %rsp,%rbp\n 824:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 824 <_Z13so_child_funcii+0x4>\n 82b:   49 bb dc 07 20 00 00    movabs $0x2007dc,%r11\n 832:   00 00 00 \n 835:   4c 01 d8                add    %r11,%rax\n 838:   89 7d fc                mov    %edi,-0x4(%rbp)\n 83b:   89 75 f8                mov    %esi,-0x8(%rbp)\n 83e:   8b 4d fc                mov    -0x4(%rbp),%ecx\n 841:   8b 55 f8                mov    -0x8(%rbp),%edx\n 844:   01 ca                   add    %ecx,%edx\n 846:   89 d1                   mov    %edx,%ecx\n 848:   48 ba e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rdx\n 84f:   ff ff ff \n 852:   48 8b 14 10             mov    (%rax,%rdx,1),%rdx\n 856:   48 8b 12                mov    (%rdx),%rdx\n 859:   01 d1                   add    %edx,%ecx\n 85b:   48 ba d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rdx\n 862:   ff ff ff \n 865:   48 8b 04 10             mov    (%rax,%rdx,1),%rax\n 869:   48 8b 00                mov    (%rax),%rax\n 86c:   01 c8                   add    %ecx,%eax\n 86e:   5d                      pop    %rbp\n 86f:   c3                      retq   \n\n0000000000000870 <_ZL13so_local_funcv>:\n 870:   55                      push   %rbp\n 871:   48 89 e5                mov    %rsp,%rbp\n 874:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 874 <_ZL13so_local_funcv+0x4>\n 87b:   49 bb 8c 07 20 00 00    movabs $0x20078c,%r11\n 882:   00 00 00 \n 885:   4c 01 d8                add    %r11,%rax\n 888:   48 ba 38 00 00 00 00    movabs $0x38,%rdx\n 88f:   00 00 00 \n 892:   48 8b 04 10             mov    (%rax,%rdx,1),%rax\n 896:   5d                      pop    %rbp\n 897:   c3                      retq   \n\n0000000000000898 <_Z7so_funcii>:\n 898:   55                      push   %rbp\n 899:   48 89 e5                mov    %rsp,%rbp\n 89c:   41 57                   push   %r15\n 89e:   53                      push   %rbx\n 89f:   48 83 ec 20             sub    $0x20,%rsp\n 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 <_Z7so_funcii+0xb>\n 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11\n 8b1:   00 00 00 \n 8b4:   4c 01 db                add    %r11,%rbx\n 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)\n 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)\n 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8c4:   ff ff ff \n 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8cb:   48 8b 00                mov    (%rax),%rax\n 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx\n 8d2:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8d9:   ff ff ff \n 8dc:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8e0:   48 89 10                mov    %rdx,(%rax)\n 8e3:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 8ea:   ff ff ff \n 8ed:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8f1:   48 8b 00                mov    (%rax),%rax\n 8f4:   48 8d 50 01             lea    0x1(%rax),%rdx\n 8f8:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 8ff:   ff ff ff \n 902:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 906:   48 89 10                mov    %rdx,(%rax)\n 909:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 910:   ff ff ff \n 913:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 917:   48 8b 00                mov    (%rax),%rax\n 91a:   89 c2                   mov    %eax,%edx\n 91c:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 923:   ff ff ff \n 926:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 92a:   48 8b 00                mov    (%rax),%rax\n 92d:   89 d6                   mov    %edx,%esi\n 92f:   89 c7                   mov    %eax,%edi\n 931:   49 89 df                mov    %rbx,%r15\n 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax\n 93b:   ff ff ff \n 93e:   48 01 d8                add    %rbx,%rax\n 941:   ff d0                   callq  *%rax\n 943:   89 45 ec                mov    %eax,-0x14(%rbp)\n 946:   48 b8 c8 ff ff ff ff    movabs $0xffffffffffffffc8,%rax\n 94d:   ff ff ff \n 950:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 954:   48 8b 00                mov    (%rax),%rax\n 957:   89 c2                   mov    %eax,%edx\n 959:   48 b8 c0 ff ff ff ff    movabs $0xffffffffffffffc0,%rax\n 960:   ff ff ff \n 963:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 967:   48 8b 00                mov    (%rax),%rax\n 96a:   89 d6                   mov    %edx,%esi\n 96c:   89 c7                   mov    %eax,%edi\n 96e:   49 89 df                mov    %rbx,%r15\n 971:   48 b8 f0 f6 df ff ff    movabs $0xffffffffffdff6f0,%rax\n 978:   ff ff ff \n 97b:   48 01 d8                add    %rbx,%rax\n 97e:   ff d0                   callq  *%rax\n 980:   01 45 ec                add    %eax,-0x14(%rbp)\n 983:   48 b8 70 f8 df ff ff    movabs $0xffffffffffdff870,%rax\n 98a:   ff ff ff \n 98d:   48 8d 04 03             lea    (%rbx,%rax,1),%rax\n 991:   ff d0                   callq  *%rax\n 993:   01 45 ec                add    %eax,-0x14(%rbp)\n 996:   8b 45 ec                mov    -0x14(%rbp),%eax\n 999:   48 83 c4 20             add    $0x20,%rsp\n 99d:   5b                      pop    %rbx\n 99e:   41 5f                   pop    %r15\n 9a0:   5d                      pop    %rbp\n 9a1:   c3                      retq   \n\nDisassembly of section .fini:\n\n00000000000009a4 <_fini>:\n 9a4:   48 83 ec 08             sub    $0x8,%rsp\n 9a8:   48 83 c4 08             add    $0x8,%rsp\n 9ac:   c3                      retq   \n```\n\n### 动态库装载过程  \n[linux kernel 源码](https://elixir.bootlin.com/linux/latest/source)  \n\n#### ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\nLD_SHOW_AUXV=1 whoami \n\n#### load_elf_binary函数  \n* 填充并且检查目标程序ELF头部\n* load_elf_phdrs加载目标程序的程序头表\n* 如果需要动态链接, 则寻找和处理解释器段\n* 检查并读取解释器的程序表头\n* 装入目标程序的段segment\n* create_elf_tables填写目标文件的参数环境变量等必要信息\n* start_kernel宏准备进入新的程序入口\n\n\n\n\n\n\n\n\n\n</font>  \n","source":"_posts/2019-12-16-elf-link.md","raw":"---\ntitle: ELF静态链接过程和动态链接过程中的GOT表的作用    \ndate: 2019-12-16\ncategories: develop \nauthor: yawei.zhang \n---\n<font color=#ff6688>  \n\n### ..1. 目录  \n\n<!-- TOC -->\n\n- [..1. 目录](#1-目录)\n- [..2. 准备工具和基础汇编知识](#2-准备工具和基础汇编知识)\n- [..3. 编译链接过程的基本原理和流程](#3-编译链接过程的基本原理和流程)\n  - [..3.1. gcc中编译一个源文件可以拆分为4个部分](#31-gcc中编译一个源文件可以拆分为4个部分)\n  - [..3.2. 编译单元(Translation environment), 编译的转换阶段 :](#32-编译单元translation-environment-编译的转换阶段-)\n  - [..3.3. PIC PIE 位置无关代码](#33-pic-pie-位置无关代码)\n  - [..3.4. GOT PLT 全局偏移表 链接过程表](#34-got-plt-全局偏移表-链接过程表)\n  - [..3.5. 符号表和符号](#35-符号表和符号)\n    - [..3.5.1. 全局符号和局部符号](#351-全局符号和局部符号)\n    - [..3.5.2. 外部符号和内部符号](#352-外部符号和内部符号)\n    - [..3.5.3. 和字符串表的关系](#353-和字符串表的关系)\n  - [..3.6. 静态链接过程](#36-静态链接过程)\n  - [..3.7. 动态链接过程](#37-动态链接过程)\n- [..4. 跟踪调测](#4-跟踪调测)\n  - [..4.1. 测试源码](#41-测试源码)\n  - [..4.2. 位置有关的重定位分析](#42-位置有关的重定位分析)\n    - [..4.2.1. 分析结论如下:](#421-分析结论如下)\n    - [..4.2.2. 系统源码参考:](#422-系统源码参考)\n    - [..4.2.3. 字符串数据](#423-字符串数据)\n    - [..4.2.4. 节信息](#424-节信息)\n    - [..4.2.5. text数据](#425-text数据)\n  - [..4.3. 位置无关的重定位分析](#43-位置无关的重定位分析)\n    - [..4.3.1. 分析说明](#431-分析说明)\n    - [..4.3.2. 全局数据访问代码分析](#432-全局数据访问代码分析)\n    - [..4.3.3. 全局函数访问代码分析](#433-全局函数访问代码分析)\n- [动态库装载过程](#动态库装载过程)\n  - [ELF的辅助向量 AUXV](#elf的辅助向量-auxv)\n  - [load_elf_binary函数](#load_elf_binary函数)\n\n<!-- /TOC -->\n\n### ..2. 准备工具和基础汇编知识\n  \n* readelf -a  查看elf信息  \n* objdump -S 查看汇编指令  \n* ldd 查看动态加载   \n* xxd - make a hexdump or do the reverse.\n* gdb  \n  * gdb 通过```  layout regs  ```打开寄存器显示, 通过```set disassemble-next-line on```打开汇编  \n  * gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可    \n  * gdb关闭ASLR：\n    * set disable-randomization on\n  * 开启ASLR：\n    * set disable-randomization off\n  * 查看ASLR状态：\n    * show disable-randomization\n  * disas反汇编命令，直接disas是反汇编当前函数\n    * disas /r (显示汇编指令对应十六进制值)   \n    * disas /m (如果有源码，显示对应行源码)   \n  * intel语法\n    * set disassembly-flavor intel\n    * set disassembly-flavor att  \n* 详细工具和汇编的基础知识见上一篇文章: [汇编语法/寻址/寄存器/代码模型(GNU assembler) ](https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/)  \n  \n<!-- more -->\n\n### ..3. 编译链接过程的基本原理和流程  \nC和C++均使用分离编译来支持多源文件模块化机制, 因此也带来了静态和动态的链接问题, 本文主要梳理了静态库的链接过程和动态链接过程.    \n\n#### ..3.1. gcc中编译一个源文件可以拆分为4个部分  \n1. 预处理 -E\n2. 编译器 -S\n3. 目标文件 -C\n4. 链接为共享库或者可执行程序   \n\n\n#### ..3.2. 编译单元(Translation environment), 编译的转换阶段 :  \n> [ISO/IEC 9899:1999]A C program need not all be translated at the same time.The text of the program is kept in units called source files, (or preprocessing files) in this International Standard.A source file together with all the headers and source files included via the preprocessing directive #include is known as a preprocessing translation unit. After preprocessing, a preprocessing translation unit is called a translation unit.\nPreviously translated translation units may be preserved individually or in libraries. The separate translation units of a program communicate by (for example) calls to functions whose identifiers have external linkage, manipulation of objects whose identifiers have external linkage, or manipulation of data files. Translation units may be separately translated and then later linked to produce an executable program.  \n\n> C语言的程序不需要一同时间翻译, 在这个国际标准中, 程序的文本内容以源文件(或者预处理文件)为单位保存, 一个源文件连同所有通过预处理指令#include包含的头文件和源文件被称为预处理翻译单元, 经过预处理后的翻译单元称为翻译单元.  翻译单位可以单独保存，也可以打包在程序库里. 程序的独立翻译单元通过(例如) 调用具有外部链接标识的函数, 处理具有外部链接标识的对象完成连接过程.  翻译单元可以独立翻译然后通过链接生成可执行程序.   \n\n\n\n#### ..3.3. PIC PIE 位置无关代码    \n编译出的二进制指令不使用绝对地址而使用相对地址称为PIC 技术  \nPIE和PIC的区别在于PIE假定了代码最终会被直接链接为可执行程序    \n\n\n#### ..3.4. GOT PLT 全局偏移表 链接过程表   \n这两个表完成了上面[编译单元](#编译单元translation-environment-编译的转换阶段-)中所说的处理过程  \n\n\n#### ..3.5. 符号表和符号   \n\n##### ..3.5.1. 全局符号和局部符号  \n符号的全局和局部是相对于编译单元而言的,  例如添加了static前缀的全局变量或者函数只在当前的编译单元可见, 因此是局部的 .  \n重定位不关心局部符号,  而对于在函数内声明的局部变量的名字并不会存储到符号表 完全由运行时栈来维护,(-g选项可以在.debug中找到符号).   \n符号表是为了编译单元之间建立联系使用的, 比如重定位.   \n\n##### ..3.5.2. 外部符号和内部符号  \n外部符号是指的当前编译单元使用但是却不在当前编译单元定义的符号.   \n\n\n##### ..3.5.3. 和字符串表的关系   \n符号表的name字段是字符串表的索引,  也就是说, 符号表本身并不存储符号的'字符串'名.  \n字符串表除了保存符号名外, 还保存常量字符串的值  \n\n\n#### ..3.6. 静态链接过程   \n\n1. 编译阶段  \n   1. 建立字符串表,符号表, 保存符号对应的声明信息.  \n   2. 建立重定位表, 对全局符号的访问都标记出准确的偏移地址  \n2. 链接生成阶段  \n  1. 合并目标文件中相同的节, 确定虚拟内存地址(pic技术只确定相对地址)  \n  2. 重建重定位表和符号表   \n  3. 使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   \n3. 运行时  \n   1. 所有地址已经完成重定位 对全局符号的访问不存在中间过程   \n   2. 如果未非位置无关代码, 则对全局符号的访问为立即数即为分配好的实际地址  \n   3. 如果是位置无关代码, 则对全局符号的访问需要用rip计算相对偏移.  \n   \n#### ..3.7. 动态链接过程  \n动态链接和静态链接的区别在于, 动态链接把重定位的时机放在了动态库被加载到内存之后.    \n\n1. 编译阶段  \n   1. 建立字符串表,符号表, 保存符号对应的声明信息.  \n   2. 建立重定位表, 对全局符号的访问都标记出准确的偏移地址  \n2. 链接生成阶段  \n  1. 合并目标文件中相同的节  确定虚拟内存地址(pic技术只确定相对地址)  \n  2. 重建重定位表和符号表   \n  3. 使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   \n  4. 保存全局符号到动态符号表(符号表中有全部符号数据 此为优化)   \n  5. 建立动态重定位表, 对全局变量的访问走GOT表, 动态重定位表记录了符号名和对应数据段中的编号(该数据段被标记为.got节).  \n  6. 建立链接过程表, 对全局函数的访问生成plt代码(.plt), 链接过程重定位表(.rela.plt)记录了每个全局函数的符号名以及在保存实际函数地址的数据段的地址. (.got.plt节), .got.plt表中存储的指针默认是   \n     1. .got.plt中所有函数的地址都会默认保存为第 个元素的内容, 该地址为_dl_runtime_resolve , 通过符号表找到真正的函数地址后填充.got.plt并执行函数.    \n  7. 对于内部符号的访问是否会进行优化 取决于代码模型,  例如对于小型代码模型中, 可执行程序中会直接访问全局变量的地址(被优化,但仍然保留GOT机制的有效性). 但是共享库中对全局变量的访问即使是当前库中的也一定会走got表.   \n3. 运行时  \n   1. 加载共享库   \n      1. 完成got, got.plt的填充   \n      2. 如果有repolr技术则设置内存段的只读  \n   2. 运行过程中  \n      1. 对全局变量的访问需要通过got表找到真正的地址   \n      2. 对函数的访问每次都会走plt, 第一次访问会跳转到符号解析函数找到真正的函数地址, 后续plt则会省略解析流程, 此为惰性加载机制.  \n\n\n<!-- more -->\n\n### ..4. 跟踪调测  \n编译选项为\n* 位置无关代码   \n* 禁止优化   \n* 禁止假设代码模型   \n\n#### ..4.1. 测试源码  \n\nlib.cpp  \n```\nint g_static_lib_bss = 0;\nint g_static_lib_data = 100;\nint lib_func(int a, int b)\n{\n  return a+b + g_static_lib_bss + g_static_lib_data;\n}\n```\n\nso.cpp  \n```\nint lib_func(int a, int b);\nextern long long g_static_lib_bss;\nextern long long g_static_lib_data;\nlong long g_static_so_bss = 0;\nlong long g_static_so_data = 100000;\n\nstatic long long g_local_so_data = 0xff00ff00;\n\nint so_child_func(int a, int b)\n{\n  return a+b + g_static_so_bss + g_static_so_data;\n}\n\nstatic int so_local_func()\n{\n  return g_local_so_data;\n}\n\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n  g_static_so_data ++;\n  int ret = lib_func(g_static_so_bss, g_static_so_data);\n  ret += so_child_func(g_static_lib_data, g_static_lib_bss);\n  ret += so_local_func();\n  return ret;\n}\n```\n\nmain.cpp  \n```\nint so_child_func(int a, int b);\nint so_func(int a, int b);\nextern int g_static_so_bss;\nextern int g_static_so_data;\n\nint g_main_static[128*1024] = {2,1};\n\nint main_func(int a, int b)\n{\n   int c = a+b;\n   c += g_static_so_bss;\n   c += g_static_so_data;\n   c += g_main_static[0];\n   c += so_func(a, b);\n   return c;\n}\n\nint main(int argc, char *argv[])\n{\n   int a = 0;\n   g_static_so_bss = 1000000;\n   a += main_func(argc, 1);\n   return a;\n}\n```\n\n#### ..4.2. 位置有关的重定位分析  \n```\ng++ -c so.cpp  -O0 -mcmodel=large  -fno-pic  \ng++ -c lib.cpp  -O0 -mcmodel=large  -fno-pic \ng++ -c main.cpp  -O0 -mcmodel=large  -fno-pic \ng++ so.o lib.o main.o -O0 -mcmodel=large -no-pie   \n```\n\n##### ..4.2.1. 分析结论如下:   \n\n* so.cpp中所有非static的全局变量和函数都存在符号表中  \n  * 符号表的起始偏移为00000200 大小为198\n  * 字符串表的起始偏移为00000398 大小为a4  \n\n* 通过xxd命令可以观察到存储所有所有符号名的位置为 0x398处开始分别是字符串:\n  * null\n  * so.cpp\n  * _ZL15g_local_so_data\n  * ...\n* 字符串表中的字符串均为标准的c-style风格的null为结尾(0x00)的字符串   \n* 符号表的所在位置0x00000200则为规整的数组 没有字符串信息  \n* 局部变量出现在目标对象的符号表中但对其访问的代码位置未出现在重定位表中  \n* 局部变量在符号中的类型是LOCAL  \n* 无论外部符号还是内部符号, 对于全局符号的访问均在重定位表中指明了具体的符号和偏移数据    \n* R_X86_64_64类型或者PC类型均为直接修改访问代码来完成重定位  \n* 对于外部的符号 无论是函数还是数据 在符号表中 均为`NOTYPE  GLOBAL UND`的一行占位数据  \n* 对于内部定义的全局函数, 则记录了再文本节中的具体的地址偏移,大小,类型等信息.   \n* 对于内部定义的全局变量, 则记录了该变量的序号, 大小, 类型信息.   \n\n* .data字段为16字节 内容分别是 a086 0100 0000 0000, 00ff 00ff 0000 0000\n  * 对应为long long g_static_so_data = 100000; 和static long long g_local_so_data = 0xff00ff00;\n\n访问全局数据  \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n```\n这里的g_static_so_bss 对应的汇编为:  \n```\n  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  5c:   00 00 00 \n  5f:   48 8b 00                mov    (%rax),%rax\n  62:   48 8d 50 01             lea    0x1(%rax),%rdx\n```\n其意思是  \n* 用64位立即数0来设置rax寄存器  \n* 解引用rax 并把内容保存到rax寄存器   \n* rax的内容+1 (这里利用了lea寻址完成++)并保存到rdx寄存器    \n这里问题就来了, 用C语言来描述就是  我们对地址 为0的的指针当做真实的全局变量的地址进行了解引用.   \n\n那么我们看下经过链接后的该汇编代码:  \n```\n  4005d3:       48 b8 60 10 68 00 00    movabs $0x681060,%rax\n  4005da:       00 00 00 \n  4005dd:       48 8b 00                mov    (%rax),%rax\n  4005e0:       48 8d 50 01             lea    0x1(%rax),%rdx\n```\n在这里, 这个立即数已经变成了合并完.data后, g_static_so_bss的真实地址.   \n这个立即数指令所在的地址偏移为0x57 然后我们查看重定位表即可发现完成该过程所需要的重定位信息:  \n```\n000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0  \n```\n\n备注:  \n这里我们看到最终链接出的地址4005da: 说明该程序并非pic代码, 对全局变量的访问没有任何相对计算以及读表过程.    \n\n\n\n\n##### ..4.2.2. 系统源码参考:  \n\n```\n/* $begin elfsymbol */\ntypedef struct { \n    int   name;      /* String table offset */ \n    char  type:4,    /* Function or data (4 bits) */ \n    binding:4; /* Local or global (4 bits) */ \n    char  reserved;  /* Unused */  \n    short section;   /* Section header index */\n    long  value;     /* Section offset or absolute address */ \n    long  size;      /* Object size in bytes */ \n} Elf64_Symbol; \n/* $end elfsymbol */\n\n/* $begin elfrelo */\ntypedef struct { \n    long offset;    /* Offset of the reference to relocate */ \n    long type:32,   /* Relocation type */ \n    symbol:32; /* Symbol table index */ \n    long addend;    /* Constant part of relocation expression */\n} Elf64_Rela; \n/* $end elfrelo */\n```\n\n  \n##### ..4.2.3. 字符串数据  \n\n```\n00000390: 0000 0000 0000 0000 0073 6f2e 6370 7000  .........so.cpp.\n000003a0: 5f5a 4c31 3567 5f6c 6f63 616c 5f73 6f5f  _ZL15g_local_so_\n000003b0: 6461 7461 005f 5a4c 3133 736f 5f6c 6f63  data._ZL13so_loc\n000003c0: 616c 5f66 756e 6376 0067 5f73 7461 7469  al_funcv.g_stati\n000003d0: 635f 736f 5f62 7373 0067 5f73 7461 7469  c_so_bss.g_stati\n000003e0: 635f 736f 5f64 6174 6100 5f5a 3133 736f  c_so_data._Z13so\n000003f0: 5f63 6869 6c64 5f66 756e 6369 6900 5f5a  _child_funcii._Z\n00000400: 3773 6f5f 6675 6e63 6969 005f 5a38 6c69  7so_funcii._Z8li\n00000410: 625f 6675 6e63 6969 0067 5f73 7461 7469  b_funcii.g_stati\n00000420: 635f 6c69 625f 6273 7300 675f 7374 6174  c_lib_bss.g_stat\n00000430: 6963 5f6c 6962 5f64 6174 6100 0000 0000  ic_lib_data.....\n```\n\n\n##### ..4.2.4. 节信息  \n\n```\nELF 头：\n  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  类别:                              ELF64\n  数据:                              2 补码，小端序 (little endian)\n  版本:                              1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI 版本:                          0\n  类型:                              REL (可重定位文件)\n  系统架构:                          Advanced Micro Devices X86-64\n  版本:                              0x1\n  入口点地址：              0x0\n  程序头起点：              0 (bytes into file)\n  Start of section headers:          1592 (bytes into file)\n  标志：             0x0\n  本头的大小：       64 (字节)\n  程序头大小：       0 (字节)\n  Number of program headers:         0\n  节头大小：         64 (字节)\n  节头数量：         12\n  字符串表索引节头： 11\n\n节头：\n  [号] 名称              类型             地址              偏移量\n       大小              全体大小          旗标   链接   信息   对齐\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .text             PROGBITS         0000000000000000  00000040\n       0000000000000103  0000000000000000  AX       0     0     1\n  [ 2] .rela.text        RELA             0000000000000000  00000440\n       0000000000000150  0000000000000018   I       9     1     8\n  [ 3] .data             PROGBITS         0000000000000000  00000148\n       0000000000000010  0000000000000000  WA       0     0     8\n  [ 4] .bss              NOBITS           0000000000000000  00000158\n       0000000000000008  0000000000000000  WA       0     0     8\n  [ 5] .comment          PROGBITS         0000000000000000  00000158\n       000000000000002e  0000000000000001  MS       0     0     1\n  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  00000186\n       0000000000000000  0000000000000000           0     0     1\n  [ 7] .eh_frame         PROGBITS         0000000000000000  00000188\n       0000000000000078  0000000000000000   A       0     0     8\n  [ 8] .rela.eh_frame    RELA             0000000000000000  00000590\n       0000000000000048  0000000000000018   I       9     7     8\n  [ 9] .symtab           SYMTAB           0000000000000000  00000200\n       0000000000000198  0000000000000018          10    10     8\n  [10] .strtab           STRTAB           0000000000000000  00000398\n       00000000000000a4  0000000000000000           0     0     1\n  [11] .shstrtab         STRTAB           0000000000000000  000005d8\n       0000000000000059  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\n本文件中没有程序头。\n\n重定位节 '.rela.text' 位于偏移量 0x440 含有 14 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000016  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000025  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n00000000003a  000300000001 R_X86_64_64       0000000000000000 .data + 8\n000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000068  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n000000000075  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n000000000086  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n000000000093  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0\n0000000000a2  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0\n0000000000b3  000e00000001 R_X86_64_64       0000000000000000 _Z8lib_funcii + 0\n0000000000c2  000f00000001 R_X86_64_64       0000000000000000 g_static_lib_bss + 0\n0000000000d1  001000000001 R_X86_64_64       0000000000000000 g_static_lib_data + 0\n0000000000e2  000c00000001 R_X86_64_64       0000000000000000 _Z13so_child_funcii + 0\n0000000000f1  000200000001 R_X86_64_64       0000000000000000 .text + 34\n\n重定位节 '.rela.eh_frame' 位于偏移量 0x590 含有 3 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0\n000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 34\n000000000060  000200000002 R_X86_64_PC32     0000000000000000 .text + 47\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.symtab' contains 17 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp\n     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 \n     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 \n     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000008     8 OBJECT  LOCAL  DEFAULT    3 _ZL15g_local_so_data\n     6: 0000000000000034    19 FUNC    LOCAL  DEFAULT    1 _ZL13so_local_funcv\n     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 \n     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 \n     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 \n    10: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    4 g_static_so_bss\n    11: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 g_static_so_data\n    12: 0000000000000000    52 FUNC    GLOBAL DEFAULT    1 _Z13so_child_funcii\n    13: 0000000000000047   188 FUNC    GLOBAL DEFAULT    1 _Z7so_funcii\n    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n\nNo version information found in this file.   \n```\n\n##### ..4.2.5. text数据   \n```\nso.o：     文件格式 elf64-x86-64   \n\n\nDisassembly of section .text:    \n\n0000000000000000 <_Z13so_child_funcii>:\n   0:   55                      push   %rbp\n   1:   48 89 e5                mov    %rsp,%rbp\n   4:   89 7d fc                mov    %edi,-0x4(%rbp)\n   7:   89 75 f8                mov    %esi,-0x8(%rbp)\n   a:   8b 55 fc                mov    -0x4(%rbp),%edx\n   d:   8b 45 f8                mov    -0x8(%rbp),%eax\n  10:   01 d0                   add    %edx,%eax\n  12:   89 c2                   mov    %eax,%edx\n  14:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  1b:   00 00 00 \n  1e:   48 8b 00                mov    (%rax),%rax\n  21:   01 c2                   add    %eax,%edx\n  23:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  2a:   00 00 00 \n  2d:   48 8b 00                mov    (%rax),%rax\n  30:   01 d0                   add    %edx,%eax\n  32:   5d                      pop    %rbp\n  33:   c3                      retq   \n\n0000000000000034 <_ZL13so_local_funcv>:\n  34:   55                      push   %rbp\n  35:   48 89 e5                mov    %rsp,%rbp\n  38:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  3f:   00 00 00 \n  42:   48 8b 00                mov    (%rax),%rax\n  45:   5d                      pop    %rbp\n  46:   c3                      retq   \n\n0000000000000047 <_Z7so_funcii>:\n  47:   55                      push   %rbp\n  48:   48 89 e5                mov    %rsp,%rbp\n  4b:   48 83 ec 20             sub    $0x20,%rsp\n  4f:   89 7d ec                mov    %edi,-0x14(%rbp)\n  52:   89 75 e8                mov    %esi,-0x18(%rbp)\n  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  5c:   00 00 00 \n  5f:   48 8b 00                mov    (%rax),%rax\n  62:   48 8d 50 01             lea    0x1(%rax),%rdx\n  66:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  6d:   00 00 00 \n  70:   48 89 10                mov    %rdx,(%rax)\n  73:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  7a:   00 00 00 \n  7d:   48 8b 00                mov    (%rax),%rax\n  80:   48 8d 50 01             lea    0x1(%rax),%rdx\n  84:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  8b:   00 00 00 \n  8e:   48 89 10                mov    %rdx,(%rax)\n  91:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  98:   00 00 00 \n  9b:   48 8b 00                mov    (%rax),%rax\n  9e:   89 c2                   mov    %eax,%edx\n  a0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  a7:   00 00 00 \n  aa:   48 8b 00                mov    (%rax),%rax\n  ad:   89 d6                   mov    %edx,%esi\n  af:   89 c7                   mov    %eax,%edi\n  b1:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  b8:   00 00 00 \n  bb:   ff d0                   callq  *%rax\n  bd:   89 45 fc                mov    %eax,-0x4(%rbp)\n  c0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  c7:   00 00 00 \n  ca:   48 8b 00                mov    (%rax),%rax\n  cd:   89 c2                   mov    %eax,%edx\n  cf:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  d6:   00 00 00 \n  d9:   48 8b 00                mov    (%rax),%rax\n  dc:   89 d6                   mov    %edx,%esi\n  de:   89 c7                   mov    %eax,%edi\n  e0:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  e7:   00 00 00 \n  ea:   ff d0                   callq  *%rax\n  ec:   01 45 fc                add    %eax,-0x4(%rbp)\n  ef:   48 b8 00 00 00 00 00    movabs $0x0,%rax\n  f6:   00 00 00 \n  f9:   ff d0                   callq  *%rax\n  fb:   01 45 fc                add    %eax,-0x4(%rbp)\n  fe:   8b 45 fc                mov    -0x4(%rbp),%eax\n 101:   c9                      leaveq \n 102:   c3                      retq   \n```\n\n\n\n\n\n#### ..4.3. 位置无关的重定位分析   \n```\ng++ -c so.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -c lib.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -c main.cpp  -O0 -mcmodel=large  -fPIC  \ng++ -shared so.o  -O0 -mcmodel=large  -fPIC  \ng++ so.so lib.o main.o -O0 -mcmodel=large -pie -fPIE    \nexport  LD_LIBRARY_PATH=LD_LIBRARY_PATH:./\n```\n\n```\ng++-6 -c so.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -c lib.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -c main.cpp  -O0 -mcmodel=large  -fPIC  \ng++-6 -shared so.o -oso.so  -O0 -mcmodel=large  -fPIC  \ng++-6 so.so lib.o main.o -O0 -mcmodel=large -pie -fPIE    \nexport  LD_LIBRARY_PATH=LD_LIBRARY_PATH:./\n```\n\n##### ..4.3.1. 分析说明   \n\nPIC的代码在编译为目标对象时, 所用的重定位方法和非PIC在方法上并没有差别  \n> 指明代码段中访问全局符号的操作数位置   \n> 在编译阶段用正确的地址替换掉占位用的空地址     \n> 与非PIC的差别我们会看到访问所有数据最终最终都会通过GOT表, 所以这部分的立即数会首先被替换成GOT表的地址  \n> 本段分析中主要分析动态链接的关键部分GOT/PLT/LOAD/FIXSYMBO部分分析, 对上述部分不再贴细节分析代码.   \n\n* so中的重定位表分别是.rela.dyn .rela.plt, 和目标文件中的记录格式类似但有明显不同  \n  * 无论是对全局数据的访问还是对全局函数的访问, 其重定位的地址都不在是代码段中的位置, 而是位于数据段   \n    * 对全局变量的访问, 重定位地址在.got段 数据段  \n    * 对全局函数的访问, 重定位地址在.got.plt段 数据段  \n* 重定位不在涉及修改.txt段中的内容, 所以共享库的文本段是可以跨进程安全共享的  \n\n\n\n##### ..4.3.2. 全局数据访问代码分析   \n\n访问全局数据  \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n```\n这里的g_static_so_bss++ 对应的汇编为:  \n```\n 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 <_Z7so_funcii+0xb>\n 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11\n 8b1:   00 00 00 \n 8b4:   4c 01 db                add    %r11,%rbx\n 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)\n 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)\n 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8c4:   ff ff ff \n 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8cb:   48 8b 00                mov    (%rax),%rax\n 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx\n```\n其意思是  \n* 8a3这行指令+0x20075d偏移保存到%rbx  \n* 计算出最终地址(%rbx + xffffffffffffffe0 (-20) * 1)并取值到rax  \n  * rbx的值为0x201000该地址对应的是节.got.plt 也是.got + sizeof(.got)的位置  \n  * -20位则表示在.got中  最终的地址为0x200fe0  \n  * 查找.dyn表可以知道该位置为000000200fe0  g_static_so_bss + 0   \n  * 查看该位置的内存为0  \n  * 那么如果在运行时没有进行动态填充, 则这里会出现对地址0进行解引用的操作.   \n  * rbx寄存器会复用 专门用来保存got表的入口偏移, 也就是浪费了一个通用寄存器来实现地址无关代码  \n* 我们进入gdb调试  \n  \n```\n0x7ffff7bd68a3    lea    -0x7(%rip),%rbx        # 0x7ffff7bd68a3 <_Z7so_funcii+11>   \n0x7ffff7bd68aa    movabs $0x20075d,%r11                 \n0x7ffff7bd68b4    add    %r11,%rbx                      \n0x7ffff7bd68b7    mov    %edi,-0x24(%rbp)               \n0x7ffff7bd68ba    mov    %esi,-0x28(%rbp)               \n0x7ffff7bd68bd    movabs $0xffffffffffffffe0,%rax       \n0x7ffff7bd68c7    mov    (%rbx,%rax,1),%rax             \n0x7ffff7bd68cb    mov    (%rax),%rax                    \n0x7ffff7bd68ce    lea    0x1(%rax),%rdx  \n```\n带入计算:  \n```0x7ffff7bd68a3 + 0x20075d + -20*1 = 0x7FFFF7DD6FE0```  \n该位置位于加载so.so的内存中, 对应为只读的got表  \n```\n00007ffff7bd6000      4K r-x-- so.so\n00007ffff7bd7000   2044K ----- so.so\n00007ffff7dd6000      4K r---- so.so\n00007ffff7dd7000      4K rw--- so.so\n```\n推算got表在内存中的实际位置为 0x7FFFF7DD6FE0 - 28 =  0x7FFFF7DD6FB8  \n那么查看该got实际的内存如下:  \n```\n(gdb) x /9ag 0x7FFFF7DD6FB8\n0x7ffff7dd6fb8: 0x7ffff6f27c30 <__cxa_finalize> \n0x7ffff7dd6fc0: 0x555555755030 <g_static_lib_data>\n0x7ffff7dd6fc8: 0x5555557d5044 <g_static_lib_bss>       \n0x7ffff7dd6fd0: 0x0\n0x7ffff7dd6fd8: 0x7ffff7dd7030 <g_static_so_data>       \n0x7ffff7dd6fe0: 0x7ffff7dd7048 <g_static_so_bss>\n0x7ffff7dd6fe8: 0x0     \n0x7ffff7dd6ff0: 0x0\n0x7ffff7dd6ff8: 0x0\n```\n\n对应0x7FFFF7DD6FE0的位置已经保存了正确的g_static_so_bss的地址.  \n再进一步读取变量的值:  \n```\n0x7ffff7dd7048 <g_static_so_bss>:       0xf4240  (1000000)\n0x7ffff7dd7030 <g_static_so_data>:      0x186a0   (100000)  \n```\n值也正确.   \n全局变量实际保存的位置对应so.so的可读写数据段   \n\n\n\n\n##### ..4.3.3. 全局函数访问代码分析   \n```\nint so_func(int a, int b)\n{\n  g_static_so_bss ++;\n  g_static_so_data ++;\n  int ret = lib_func(g_static_so_bss, g_static_so_data);\n  ret += so_child_func(g_static_lib_data, g_static_lib_bss);\n  ret += so_local_func();\n  return ret;\n}\n```\n对应的汇编码如下:  \n%esi保存了g_static_lib_data  %edi 保存了g_static_lib_bss   \n%rbx保存了base 偏移 8a3 + 0x20075d   \n```\n 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax\n 93b:   ff ff ff \n 93e:   48 01 d8                add    %rbx,%rax\n 941:   ff d0                   callq  *%rax\n```\n这里callq的实际地址为 8a3 + 0x20075d -0x900 = 0x200700   \n该地址位于.plt中  其偏移相对于.plt为:  0x200700-0x00000000000206e0 = 0x20  偏移地址为700  \n我们找到代码位置 \n```\n\n00000000000006e0 <.plt>:\n 6e0:   ff 35 22 09 20 00   pushq  0x200922(%rip)  # 201008 <GOT_+0x8> link_map\n 6e6:   ff 25 24 09 20 00   jmpq   *0x200924(%rip) # 201010 <GOT+0x10> _dl_runtime_resolve_xsavec\n 6ec:   0f 1f 40 00             nopl   0x0(%rax)\n\n00000000000006f0 <_Z13so_child_funcii@plt>:\n 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 <_Z13so_child_funcii@@Base+0x2007f8>\n 6f6:   68 00 00 00 00          pushq  $0x0\n 6fb:   e9 e0 ff ff ff          jmpq   6e0 <.plt>\n\n0000000000000700 <_Z8lib_funcii@plt>:\n 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 <_Z8lib_funcii>\n 706:   68 01 00 00 00          pushq  $0x1\n 70b:   e9 d0 ff ff ff          jmpq   6e0 <.plt>\n```\n\n700跳转到 (706+0x20091a) 这个地址保存的内存   \n这个地址为  0x201020  即.got.plt的第5项\n在elf文件中.got.plt是有5个值的, 第五项保存的值为706  也就是jmpq的下一行代码   \n```pushq $0x1```   意思是把当前的plt序号(.rela.plt的项)保存到栈上(传参)  \n在装载后, 相对偏移706会被替换成实际分配好的地址   \n因此第一次jmpq会跳转到偏移6e0处  \n再把got+8的位置压栈, (这个指针是link_map 后文会继续讲)   \n然后跳转到函数  ```_dl_runtime_resolve_xsavec```   \n\ngot+8 和got+10 将会完成符号的解析工作并找到真正的目标函数地址, 然后回写plt 执行目标函数.   \n这两项程序装载时会完成填充, 而后续的plt的其他函数会基于该机制以惰性加载机制调用时解析.  \n\n\n\nGDB调试内容如下:   \n```\n0x7ffff7bd6700 <_Z8lib_funcii@plt>              jmpq   *0x20091a(%rip)        # 0x7ffff7dd7020    \n0x7ffff7bd6706 <_Z8lib_funcii@plt+6>            pushq  $0x1                          \n0x7ffff7bd670b <_Z8lib_funcii@plt+11>           jmpq   0x7ffff7bd66e0                 \n0x7ffff7bd6710                                  jmpq   *0x2008a2(%rip)        # 0x7ffff7dd6fb8  \n\n(gdb) x /1ag 0x7ffff7dd7020\n0x7ffff7dd7020: 0x7ffff7bd6706 <_Z8lib_funcii@plt+6>  \n\n\n(gdb) x /5ag 0x7ffff7dd7000\n0x7ffff7dd7000: 0x200dc8        \n0x7ffff7dd7008: 0x7ffff7ff6000\n0x7ffff7dd7010: 0x7ffff7ded310 <_dl_runtime_resolve_xsavec>     \n0x7ffff7dd7018: 0x7ffff7bd66f6 <_Z13so_child_funcii@plt+6>\n0x7ffff7dd7020: 0x7ffff7bd6706 <_Z8lib_funcii@plt+6>\n```\n\n```_dl_runtime_resolve_xsavec```  \nrbx+8为符号表链表指针   \nrbx+16为压到栈上的目标函数编号 存储在plt的下标从第四项开始, 前三项分别是offset, link_map, 解析函数  \n```_dl_fixup``` 返回了查找到的真实地址 ```bnd jmpq *%r11```  跳转到实际地址  \n\n``` \n0x7ffff7ded310   push   %rbx                                                                \n0x7ffff7ded311   mov    %rsp,%rbx                                                           \n0x7ffff7ded314   and    $0xffffffffffffffc0,%rsp                                            \n0x7ffff7ded318   sub    0x20f4e9(%rip),%rsp        # 0x7ffff7ffc808 <_rtld_global_ro+168>   \n0x7ffff7ded31f   mov    %rax,(%rsp)                                                         \n0x7ffff7ded323   mov    %rcx,0x8(%rsp)                                                      \n0x7ffff7ded328   mov    %rdx,0x10(%rsp)                                                     \n0x7ffff7ded32d   mov    %rsi,0x18(%rsp)                                                     \n0x7ffff7ded332   mov    %rdi,0x20(%rsp)                                                     \n0x7ffff7ded337   mov    %r8,0x28(%rsp)                                                      \n0x7ffff7ded33c   mov    %r9,0x30(%rsp)                                                      \n0x7ffff7ded341   mov    $0xee,%eax                                                          \n0x7ffff7ded346   xor    %edx,%edx                                                           \n0x7ffff7ded348   mov    %rdx,0x250(%rsp)           \n0x7ffff7ded350   mov    %rdx,0x258(%rsp)           \n0x7ffff7ded358   mov    %rdx,0x260(%rsp)           \n0x7ffff7ded360   mov    %rdx,0x268(%rsp)           \n0x7ffff7ded368   mov    %rdx,0x270(%rsp)           \n0x7ffff7ded370   mov    %rdx,0x278(%rsp)           \n0x7ffff7ded378   xsavec 0x40(%rsp)                 \n0x7ffff7ded37d   mov    0x10(%rbx),%rsi            \n0x7ffff7ded381   mov    0x8(%rbx),%rdi             \n0x7ffff7ded385   callq  0x7ffff7de6630 <_dl_fixup> \n0x7ffff7ded38a   mov    %rax,%r11                  \n0x7ffff7ded38d   mov    $0xee,%eax                 \n0x7ffff7ded392   xor    %edx,%edx                  \n0x7ffff7ded394   xrstor 0x40(%rsp)         \n0x7ffff7ded399   mov    0x30(%rsp),%r9     \n0x7ffff7ded39e   mov    0x28(%rsp),%r8     \n0x7ffff7ded3a3   mov    0x20(%rsp),%rdi    \n0x7ffff7ded3a8   mov    0x18(%rsp),%rsi    \n0x7ffff7ded3ad   mov    0x10(%rsp),%rdx    \n0x7ffff7ded3b2   mov    0x8(%rsp),%rcx     \n0x7ffff7ded3b7   mov    (%rsp),%rax        \n0x7ffff7ded3bb   mov    %rbx,%rsp          \n0x7ffff7ded3be   mov    (%rsp),%rbx        \n0x7ffff7ded3c2   add    $0x18,%rsp         \n0x7ffff7ded3c6   bnd jmpq *%r11            \n\n```\n\n```_dl_fixup```及其相关源码   \n```C++\n// Elf64_Rela\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\ntypedef int64_t  Elf64_Sxword;\n \ntypedef struct\n{\n  Elf64_Addr        r_offset;                /* Address */\n  Elf64_Xword        r_info;                 /* Relocation type and symbol index */\n  Elf64_Sxword        r_addend;              /* Addend */\n} Elf64_Rela;\n```\n  \n```C++\n/Elf64_Sym\ntypedef uint32_t Elf64_Word;\ntypedef uint16_t Elf64_Section;\ntypedef uint64_t Elf64_Addr;\ntypedef uint64_t Elf64_Xword;\n \ntypedef struct\n{\n  Elf64_Word        st_name;                /* Symbol name (string tbl index), 4 bytes */\n  unsigned char        st_info;             /* Symbol type and binding, 1 byte */\n  unsigned char st_other;                   /* Symbol visibility, 1 byte */\n  Elf64_Section        st_shndx;            /* Section index, 2 bytes */\n  Elf64_Addr        st_value;               /* Symbol value, 8 bytes */\n  Elf64_Xword        st_size;               /* Symbol size, 8 bytes */\n} Elf64_Sym;\n```\nlibc/elf/dl-runtime.c  \n```C++\n__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (\n   /* GKM FIXME: Fix trampoline to pass bounds so we can do\n      without the `__unbounded' qualifier.  */\n     struct link_map *__unbounded l, ElfW(Word) reloc_offset)\n{\n  const ElfW(Sym) *const symtab\n    = (const void *) D_PTR (l, l_info[DT_SYMTAB]);\n  const char *strtab = (const void *) D_PTR (l, l_info[DT_STRTAB]);\n\n  const PLTREL *const reloc\n    = (const void *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);\n  const ElfW(Sym) *sym = &symtab[ELFW(R_SYM) (reloc->r_info)];\n  void *const rel_addr = (void *)(l->l_addr + reloc->r_offset);\n  lookup_t result;\n  DL_FIXUP_VALUE_TYPE value;\n\n  /* Sanity check that we're really looking at a PLT relocation.  */\n  assert (ELFW(R_TYPE)(reloc->r_info) == ELF_MACHINE_JMP_SLOT);\n\n   /* Look up the target symbol.  If the normal lookup rules are not\n      used don't look in the global scope.  */\n  if (__builtin_expect (ELFW(ST_VISIBILITY) (sym->st_other), 0) == 0)\n    {\n      const struct r_found_version *version = NULL;\n\n      if (l->l_info[VERSYMIDX (DT_VERSYM)] != NULL)\n      {\n        const ElfW(Half) *vernum =\n          (const void *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);\n        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc->r_info)] & 0x7fff;\n        version = &l->l_versions[ndx];\n        if (version->hash == 0)\n          version = NULL;\n      }\n\n      /* We need to keep the scope around so do some locking.  This is\n       not necessary for objects which cannot be unloaded or when\n       we are not using any threads (yet).  */\n      int flags = DL_LOOKUP_ADD_DEPENDENCY;\n      if (!RTLD_SINGLE_THREAD_P)\n      {\n        THREAD_GSCOPE_SET_FLAG ();\n        flags |= DL_LOOKUP_GSCOPE_LOCK;\n      }\n\n      result = _dl_lookup_symbol_x (strtab + sym->st_name, l, &sym, l->l_scope,\n                            version, ELF_RTYPE_CLASS_PLT, flags, NULL);\n\n      /* We are done with the global scope.  */\n      if (!RTLD_SINGLE_THREAD_P)\n      THREAD_GSCOPE_RESET_FLAG ();\n\n      /* Currently result contains the base load address (or link map)\n       of the object that defines sym.  Now add in the symbol\n       offset.  */\n      value = DL_FIXUP_MAKE_VALUE (result,\n                           sym ? (LOOKUP_VALUE_ADDRESS (result)\n                                + sym->st_value) : 0);\n    }\n  else\n    {\n      /* We already found the symbol.  The module (and therefore its load\n       address) is also known.  */\n      value = DL_FIXUP_MAKE_VALUE (l, l->l_addr + sym->st_value);\n      result = l;\n    }\n\n  /* And now perhaps the relocation addend.  */\n  value = elf_machine_plt_value (l, reloc, value);\n\n  /* Finally, fix up the plt itself.  */\n  if (__builtin_expect (GLRO(dl_bind_not), 0))\n    return value;\n\n  return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);\n}\n```\n\nelf/dl-lookup.c  \n```C++\n/* Search loaded objects' symbol tables for a definition of the symbol\n   UNDEF_NAME, perhaps with a requested version for the symbol.\n   We must never have calls to the audit functions inside this function\n   or in any function which gets called.  If this would happen the audit\n   code might create a thread which can throw off all the scope locking.  */\nlookup_t\n_dl_lookup_symbol_x (const char *undef_name, struct link_map *undef_map,\n                     const ElfW(Sym) **ref,\n                     struct r_scope_elem *symbol_scope[],\n                     const struct r_found_version *version,\n                     int type_class, int flags, struct link_map *skip_map);\n\n```\n\n\n\n```_dl_fixup```函数首先通过宏D_PTR从link_map结构中获得符号表symtab 字符串表strtab   \n\nreloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   \nreloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  \n\nst_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  \n\n其他情况 会进入if语句   \n首先获得符号的version信息 然后调用 ```_dl_lookup_symbol_x``` 函数从已装载的共享库中查找最终的符号地址 查找到符号sym后 对其进行重定位 即加上装载地址 保存在value中      \n最后调用```elf_machine_fixup_plt```函数进行修正    \n\n\nfixup plt  回写.got.plt的项   \n```\nstatic inline Elf64_Addr\nelf_machine_fixup_plt (struct link_map *map, lookup_t t,\n               const Elf64_Rela *reloc,\n               Elf64_Addr *reloc_addr, Elf64_Addr value)\n{\n  return *reloc_addr = value;\n}\n```\n\n```_dl_lookup_symbol_x```   \n...   \n\n\n\ngot表和plt表在代码中是直接根据代码行的偏移获取的, 因此这里并无随机化过程   \n\n\n\n\n\n\n##### .got节内容  \n未填充任何数据  \n```\nzsummer@debian:~/symbo$ xxd -s+0x00000fb8 -l0x0000000000000048  so.so  \n00000fb8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fc8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fd8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000fe8: 0000 0000 0000 0000 0000 0000 0000 0000  ................\n00000ff8: 0000 0000 0000 0000                      ........\n```\n\n\n##### .got.plt节  \n0x200dc8  \n0x0  \n0x0  \n0x6f6  \n0x706  \n\n```\nzsummer@debian:~/symbo$ xxd -s+0x00001000 -l0x0000000000000028  so.so          \n00001000: c80d 2000 0000 0000 0000 0000 0000 0000  .. .............\n00001010: 0000 0000 0000 0000 f606 0000 0000 0000  ................\n00001020: 0607 0000 0000 0000                      ........\n```\n\n##### .data节  \n2101288  \n100000  \n0xff00ff00\n\n```\nzsummer@debian:~/symbo$ xxd -s+0x00001028 -l0x0000000000000018  so.so      \n00001028: 2810 2000 0000 0000 a086 0100 0000 0000  (. .............\n00001038: 00ff 00ff 0000 0000                      ........\n```\n\n##### pmap信息  \n```\nzsummer@debian:~/symbo$ pmap 9208\n9208:   /home/zsummer/symbo/a.out\n0000555555554000      4K r-x-- a.out\n0000555555754000      4K r---- a.out\n0000555555755000    516K rw--- a.out\n00005555557d6000    132K rw---   [ anon ]\n00007ffff6ef0000   1732K r-x-- libc-2.27.so\n00007ffff70a1000   2044K ----- libc-2.27.so\n00007ffff72a0000     16K r---- libc-2.27.so\n00007ffff72a4000      8K rw--- libc-2.27.so\n00007ffff72a6000     16K rw---   [ anon ]\n00007ffff72aa000     92K r-x-- libgcc_s.so.1\n00007ffff72c1000   2044K ----- libgcc_s.so.1\n00007ffff74c0000      4K r---- libgcc_s.so.1\n00007ffff74c1000      4K rw--- libgcc_s.so.1\n00007ffff74c2000   1608K r-x-- libm-2.27.so\n00007ffff7654000   2044K ----- libm-2.27.so\n00007ffff7853000      4K r---- libm-2.27.so\n00007ffff7854000      4K rw--- libm-2.27.so\n00007ffff7855000   1480K r-x-- libstdc++.so.6.0.25\n00007ffff79c7000   2048K ----- libstdc++.so.6.0.25\n00007ffff7bc7000     40K r---- libstdc++.so.6.0.25\n00007ffff7bd1000      8K rw--- libstdc++.so.6.0.25\n00007ffff7bd3000     12K rw---   [ anon ]\n00007ffff7bd6000      4K r-x-- so.so\n00007ffff7bd7000   2044K ----- so.so\n00007ffff7dd6000      4K r---- so.so\n00007ffff7dd7000      4K rw--- so.so\n00007ffff7dd8000    148K r-x-- ld-2.27.so\n00007ffff7fd6000     20K rw---   [ anon ]\n00007ffff7ff6000      8K rw---   [ anon ]\n00007ffff7ff8000      8K r----   [ anon ]\n00007ffff7ffa000      8K r-x--   [ anon ]\n00007ffff7ffc000      4K r---- ld-2.27.so\n00007ffff7ffd000      4K rw--- ld-2.27.so\n00007ffff7ffe000      4K rw---   [ anon ]\n00007ffffffde000    132K rw---   [ stack ]\nffffffffff600000      4K r-x--   [ anon ]\n total            16260K\n```\n\n\n##### 节信息  \n```\nELF 头：\n  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 \n  类别:                              ELF64\n  数据:                              2 补码，小端序 (little endian)\n  版本:                              1 (current)\n  OS/ABI:                            UNIX - System V\n  ABI 版本:                          0\n  类型:                              DYN (共享目标文件)\n  系统架构:                          Advanced Micro Devices X86-64\n  版本:                              0x1\n  入口点地址：              0x720\n  程序头起点：              64 (bytes into file)\n  Start of section headers:          6544 (bytes into file)\n  标志：             0x0\n  本头的大小：       64 (字节)\n  程序头大小：       56 (字节)\n  Number of program headers:         7\n  节头大小：         64 (字节)\n  节头数量：         28\n  字符串表索引节头： 27\n\n节头：\n  [号] 名称              类型             地址              偏移量\n       大小              全体大小          旗标   链接   信息   对齐\n  [ 0]                   NULL             0000000000000000  00000000\n       0000000000000000  0000000000000000           0     0     0\n  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8\n       0000000000000024  0000000000000000   A       0     0     4\n  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0\n       0000000000000048  0000000000000000   A       3     0     8\n  [ 3] .dynsym           DYNSYM           0000000000000238  00000238\n       00000000000001b0  0000000000000018   A       4     1     8\n  [ 4] .dynstr           STRTAB           00000000000003e8  000003e8\n       000000000000013d  0000000000000000   A       0     0     1\n  [ 5] .gnu.version      VERSYM           0000000000000526  00000526\n       0000000000000024  0000000000000002   A       3     0     2\n  [ 6] .gnu.version_r    VERNEED          0000000000000550  00000550\n       0000000000000020  0000000000000000   A       4     1     8\n  [ 7] .rela.dyn         RELA             0000000000000570  00000570\n       0000000000000120  0000000000000018   A       3     0     8\n  [ 8] .rela.plt         RELA             0000000000000690  00000690\n       0000000000000030  0000000000000018  AI       3    21     8\n  [ 9] .init             PROGBITS         00000000000006c0  000006c0\n       0000000000000017  0000000000000000  AX       0     0     4\n  [10] .plt              PROGBITS         00000000000006e0  000006e0\n       0000000000000030  0000000000000010  AX       0     0     16\n  [11] .plt.got          PROGBITS         0000000000000710  00000710\n       0000000000000008  0000000000000000  AX       0     0     8\n  [12] .text             PROGBITS         0000000000000720  00000720\n       0000000000000282  0000000000000000  AX       0     0     16\n  [13] .fini             PROGBITS         00000000000009a4  000009a4\n       0000000000000009  0000000000000000  AX       0     0     4\n  [14] .eh_frame_hdr     PROGBITS         00000000000009b0  000009b0\n       0000000000000034  0000000000000000   A       0     0     4\n  [15] .eh_frame         PROGBITS         00000000000009e8  000009e8\n       00000000000000c4  0000000000000000   A       0     0     8\n  [16] .init_array       INIT_ARRAY       0000000000200db0  00000db0\n       0000000000000008  0000000000000008  WA       0     0     8\n  [17] .fini_array       FINI_ARRAY       0000000000200db8  00000db8\n       0000000000000008  0000000000000008  WA       0     0     8\n  [18] .jcr              PROGBITS         0000000000200dc0  00000dc0\n       0000000000000008  0000000000000000  WA       0     0     8\n  [19] .dynamic          DYNAMIC          0000000000200dc8  00000dc8\n       00000000000001f0  0000000000000010  WA       4     0     8\n  [20] .got              PROGBITS         0000000000200fb8  00000fb8\n       0000000000000048  0000000000000008  WA       0     0     8\n  [21] .got.plt          PROGBITS         0000000000201000  00001000\n       0000000000000028  0000000000000008  WA       0     0     8\n  [22] .data             PROGBITS         0000000000201028  00001028\n       0000000000000018  0000000000000000  WA       0     0     8\n  [23] .bss              NOBITS           0000000000201040  00001040\n       0000000000000010  0000000000000000  WA       0     0     8\n  [24] .comment          PROGBITS         0000000000000000  00001040\n       000000000000002d  0000000000000001  MS       0     0     1\n  [25] .symtab           SYMTAB           0000000000000000  00001070\n       00000000000005e8  0000000000000018          26    46     8\n  [26] .strtab           STRTAB           0000000000000000  00001658\n       0000000000000246  0000000000000000           0     0     1\n  [27] .shstrtab         STRTAB           0000000000000000  0000189e\n       00000000000000ee  0000000000000000           0     0     1\nKey to Flags:\n  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),\n  L (link order), O (extra OS processing required), G (group), T (TLS),\n  C (compressed), x (unknown), o (OS specific), E (exclude),\n  l (large), p (processor specific)\n\nThere are no section groups in this file.\n\n程序头：\n  Type           Offset             VirtAddr           PhysAddr\n                 FileSiz            MemSiz              Flags  Align\n  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000aac 0x0000000000000aac  R E    0x200000\n  LOAD           0x0000000000000db0 0x0000000000200db0 0x0000000000200db0\n                 0x0000000000000290 0x00000000000002a0  RW     0x200000\n  DYNAMIC        0x0000000000000dc8 0x0000000000200dc8 0x0000000000200dc8\n                 0x00000000000001f0 0x00000000000001f0  RW     0x8\n  NOTE           0x00000000000001c8 0x00000000000001c8 0x00000000000001c8\n                 0x0000000000000024 0x0000000000000024  R      0x4\n  GNU_EH_FRAME   0x00000000000009b0 0x00000000000009b0 0x00000000000009b0\n                 0x0000000000000034 0x0000000000000034  R      0x4\n  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000\n                 0x0000000000000000 0x0000000000000000  RW     0x10\n  GNU_RELRO      0x0000000000000db0 0x0000000000200db0 0x0000000000200db0\n                 0x0000000000000250 0x0000000000000250  R      0x1\n\n Section to Segment mapping:\n  段节...\n   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .eh_frame_hdr .eh_frame \n   01     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss \n   02     .dynamic \n   03     .note.gnu.build-id \n   04     .eh_frame_hdr \n   05     \n   06     .init_array .fini_array .jcr .dynamic .got \n\nDynamic section at offset 0xdc8 contains 27 entries:\n  标记        类型                         名称/值\n 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]\n 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]\n 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]\n 0x000000000000000c (INIT)               0x6c0\n 0x000000000000000d (FINI)               0x9a4\n 0x0000000000000019 (INIT_ARRAY)         0x200db0\n 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)\n 0x000000000000001a (FINI_ARRAY)         0x200db8\n 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)\n 0x000000006ffffef5 (GNU_HASH)           0x1f0\n 0x0000000000000005 (STRTAB)             0x3e8\n 0x0000000000000006 (SYMTAB)             0x238\n 0x000000000000000a (STRSZ)              317 (bytes)\n 0x000000000000000b (SYMENT)             24 (bytes)\n 0x0000000000000003 (PLTGOT)             0x201000\n 0x0000000000000002 (PLTRELSZ)           48 (bytes)\n 0x0000000000000014 (PLTREL)             RELA\n 0x0000000000000017 (JMPREL)             0x690\n 0x0000000000000007 (RELA)               0x570\n 0x0000000000000008 (RELASZ)             288 (bytes)\n 0x0000000000000009 (RELAENT)            24 (bytes)\n 0x000000006ffffffe (VERNEED)            0x550\n 0x000000006fffffff (VERNEEDNUM)         1\n 0x000000006ffffff0 (VERSYM)             0x526\n 0x000000006ffffff9 (RELACOUNT)          3\n 0x0000000000000000 (NULL)               0x0\n\n重定位节 '.rela.dyn' 位于偏移量 0x570 含有 12 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000200db0  000000000008 R_X86_64_RELATIVE                    7f0\n000000200db8  000000000008 R_X86_64_RELATIVE                    7b0\n000000201028  000000000008 R_X86_64_RELATIVE                    201028\n000000200fb8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 __cxa_finalize@GLIBC_2.2.5 + 0\n000000200fc0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_data + 0\n000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_bss + 0\n000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0\n000000200fd8  001100000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0\n000000200fe0  000d00000006 R_X86_64_GLOB_DAT 0000000000201048 g_static_so_bss + 0\n000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0\n000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start__ + 0\n000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0\n\n重定位节 '.rela.plt' 位于偏移量 0x690 含有 2 个条目：\n  偏移量          信息           类型           符号值        符号名称 + 加数\n000000201018  001000000007 R_X86_64_JUMP_SLO 0000000000000820 _Z13so_child_funcii + 0\n000000201020  000600000007 R_X86_64_JUMP_SLO 0000000000000000 _Z8lib_funcii + 0\n\nThe decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.\n\nSymbol table '.dynsym' contains 18 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@GLIBC_2.2.5 (2)\n     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n     3: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n     7: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n     8: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n     9: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    10: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    11: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init\n    12: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    13: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss\n    14: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii\n    15: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini\n    16: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii\n    17: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data\n\nSymbol table '.symtab' contains 63 entries:\n   Num:    Value          Size Type    Bind   Vis      Ndx Name\n     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND \n     1: 00000000000001c8     0 SECTION LOCAL  DEFAULT    1 \n     2: 00000000000001f0     0 SECTION LOCAL  DEFAULT    2 \n     3: 0000000000000238     0 SECTION LOCAL  DEFAULT    3 \n     4: 00000000000003e8     0 SECTION LOCAL  DEFAULT    4 \n     5: 0000000000000526     0 SECTION LOCAL  DEFAULT    5 \n     6: 0000000000000550     0 SECTION LOCAL  DEFAULT    6 \n     7: 0000000000000570     0 SECTION LOCAL  DEFAULT    7 \n     8: 0000000000000690     0 SECTION LOCAL  DEFAULT    8 \n     9: 00000000000006c0     0 SECTION LOCAL  DEFAULT    9 \n    10: 00000000000006e0     0 SECTION LOCAL  DEFAULT   10 \n    11: 0000000000000710     0 SECTION LOCAL  DEFAULT   11 \n    12: 0000000000000720     0 SECTION LOCAL  DEFAULT   12 \n    13: 00000000000009a4     0 SECTION LOCAL  DEFAULT   13 \n    14: 00000000000009b0     0 SECTION LOCAL  DEFAULT   14 \n    15: 00000000000009e8     0 SECTION LOCAL  DEFAULT   15 \n    16: 0000000000200db0     0 SECTION LOCAL  DEFAULT   16 \n    17: 0000000000200db8     0 SECTION LOCAL  DEFAULT   17 \n    18: 0000000000200dc0     0 SECTION LOCAL  DEFAULT   18 \n    19: 0000000000200dc8     0 SECTION LOCAL  DEFAULT   19 \n    20: 0000000000200fb8     0 SECTION LOCAL  DEFAULT   20 \n    21: 0000000000201000     0 SECTION LOCAL  DEFAULT   21 \n    22: 0000000000201028     0 SECTION LOCAL  DEFAULT   22 \n    23: 0000000000201040     0 SECTION LOCAL  DEFAULT   23 \n    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24 \n    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    26: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 __JCR_LIST__\n    27: 0000000000000720     0 FUNC    LOCAL  DEFAULT   12 deregister_tm_clones\n    28: 0000000000000760     0 FUNC    LOCAL  DEFAULT   12 register_tm_clones\n    29: 00000000000007b0     0 FUNC    LOCAL  DEFAULT   12 __do_global_dtors_aux\n    30: 0000000000201040     1 OBJECT  LOCAL  DEFAULT   23 completed.6972\n    31: 0000000000200db8     0 OBJECT  LOCAL  DEFAULT   17 __do_global_dtors_aux_fin\n    32: 00000000000007f0     0 FUNC    LOCAL  DEFAULT   12 frame_dummy\n    33: 0000000000200db0     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array_\n    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp\n    35: 0000000000201038     8 OBJECT  LOCAL  DEFAULT   22 _ZL15g_local_so_data\n    36: 0000000000000870    40 FUNC    LOCAL  DEFAULT   12 _ZL13so_local_funcv\n    37: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c\n    38: 0000000000000aa8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END__\n    39: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 __JCR_END__\n    40: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS \n    41: 00000000000009b0     0 NOTYPE  LOCAL  DEFAULT   14 __GNU_EH_FRAME_HDR\n    42: 0000000000201028     0 OBJECT  LOCAL  DEFAULT   22 __dso_handle\n    43: 0000000000200dc8     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC\n    44: 0000000000201040     0 OBJECT  LOCAL  DEFAULT   22 __TMC_END__\n    45: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   21 _GLOBAL_OFFSET_TABLE_\n    46: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata\n    47: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND __cxa_finalize@@GLIBC_2.2\n    48: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data\n    49: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini\n    50: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii\n    51: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss\n    52: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init\n    53: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses\n    54: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data\n    55: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end\n    56: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start\n    57: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss\n    58: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii\n    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab\n    60: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii\n    61: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__\n    62: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable\n\nHistogram for `.gnu.hash' bucket list length (total of 3 buckets):\n Length  Number     % of total  Coverage\n      0  0          (  0.0%)\n      1  0          (  0.0%)      0.0%\n      2  1          ( 33.3%)     22.2%\n      3  1          ( 33.3%)     55.6%\n      4  1          ( 33.3%)    100.0%\n\nVersion symbols section '.gnu.version' contains 18 entries:\n 地址：0000000000000526  Offset: 0x000526  Link: 3 (.dynsym)\n  000:   0 (*本地*)       2 (GLIBC_2.2.5)   0 (*本地*)       0 (*本地*)    \n  004:   0 (*本地*)       0 (*本地*)       0 (*本地*)       0 (*本地*)    \n  008:   0 (*本地*)       1 (*全局*)      1 (*全局*)      1 (*全局*)   \n  00c:   1 (*全局*)      1 (*全局*)      1 (*全局*)      1 (*全局*)   \n  010:   1 (*全局*)      1 (*全局*)   \n\nVersion needs section '.gnu.version_r' contains 1 entries:\n 地址：0x0000000000000550  Offset: 0x000550  Link: 4 (.dynstr)\n  000000: 版本: 1  文件：libc.so.6  计数：1\n  0x0010：名称：GLIBC_2.2.5  标志：无  版本：2\n\nDisplaying notes found in: .note.gnu.build-id\n  所有者             Data size  Description\n  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)\n    Build ID: 09ce242e3867431b496a7f5928e9817fa91d242a\n```\n\n\n##### 代码节   \n```\nso.so：     文件格式 elf64-x86-64\n\n\nDisassembly of section .init:\n\n00000000000006c0 <_init>:\n 6c0:   48 83 ec 08             sub    $0x8,%rsp\n 6c4:   48 8b 05 25 09 20 00    mov    0x200925(%rip),%rax        # 200ff0 <__gmon_start__>\n 6cb:   48 85 c0                test   %rax,%rax\n 6ce:   74 02                   je     6d2 <_init+0x12>\n 6d0:   ff d0                   callq  *%rax\n 6d2:   48 83 c4 08             add    $0x8,%rsp\n 6d6:   c3                      retq   \n\nDisassembly of section .plt:\n\n00000000000006e0 <.plt>:\n 6e0:   ff 35 22 09 20 00       pushq  0x200922(%rip)        # 201008 <_GLOBAL_OFFSET_TABLE_+0x8>\n 6e6:   ff 25 24 09 20 00       jmpq   *0x200924(%rip)        # 201010 <_GLOBAL_OFFSET_TABLE_+0x10>\n 6ec:   0f 1f 40 00             nopl   0x0(%rax)\n\n00000000000006f0 <_Z13so_child_funcii@plt>:\n 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 <_Z13so_child_funcii@@Base+0x2007f8>\n 6f6:   68 00 00 00 00          pushq  $0x0\n 6fb:   e9 e0 ff ff ff          jmpq   6e0 <.plt>\n\n0000000000000700 <_Z8lib_funcii@plt>:\n 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 <_Z8lib_funcii>\n 706:   68 01 00 00 00          pushq  $0x1\n 70b:   e9 d0 ff ff ff          jmpq   6e0 <.plt>\n\nDisassembly of section .plt.got:\n\n0000000000000710 <.plt.got>:\n 710:   ff 25 a2 08 20 00       jmpq   *0x2008a2(%rip)        # 200fb8 <__cxa_finalize@GLIBC_2.2.5>\n 716:   66 90                   xchg   %ax,%ax\n\nDisassembly of section .text:\n\n0000000000000720 <deregister_tm_clones>:\n 720:   48 8d 3d 19 09 20 00    lea    0x200919(%rip),%rdi        # 201040 <_edata>\n 727:   48 8d 05 19 09 20 00    lea    0x200919(%rip),%rax        # 201047 <_edata+0x7>\n 72e:   55                      push   %rbp\n 72f:   48 29 f8                sub    %rdi,%rax\n 732:   48 89 e5                mov    %rsp,%rbp\n 735:   48 83 f8 0e             cmp    $0xe,%rax\n 739:   76 15                   jbe    750 <deregister_tm_clones+0x30>\n 73b:   48 8b 05 a6 08 20 00    mov    0x2008a6(%rip),%rax        # 200fe8 <_ITM_deregisterTMCloneTable>\n 742:   48 85 c0                test   %rax,%rax\n 745:   74 09                   je     750 <deregister_tm_clones+0x30>\n 747:   5d                      pop    %rbp\n 748:   ff e0                   jmpq   *%rax\n 74a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 750:   5d                      pop    %rbp\n 751:   c3                      retq   \n 752:   0f 1f 40 00             nopl   0x0(%rax)\n 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 75d:   00 00 00 \n\n0000000000000760 <register_tm_clones>:\n 760:   48 8d 3d d9 08 20 00    lea    0x2008d9(%rip),%rdi        # 201040 <_edata>\n 767:   48 8d 35 d2 08 20 00    lea    0x2008d2(%rip),%rsi        # 201040 <_edata>\n 76e:   55                      push   %rbp\n 76f:   48 29 fe                sub    %rdi,%rsi\n 772:   48 89 e5                mov    %rsp,%rbp\n 775:   48 c1 fe 03             sar    $0x3,%rsi\n 779:   48 89 f0                mov    %rsi,%rax\n 77c:   48 c1 e8 3f             shr    $0x3f,%rax\n 780:   48 01 c6                add    %rax,%rsi\n 783:   48 d1 fe                sar    %rsi\n 786:   74 18                   je     7a0 <register_tm_clones+0x40>\n 788:   48 8b 05 69 08 20 00    mov    0x200869(%rip),%rax        # 200ff8 <_ITM_registerTMCloneTable>\n 78f:   48 85 c0                test   %rax,%rax\n 792:   74 0c                   je     7a0 <register_tm_clones+0x40>\n 794:   5d                      pop    %rbp\n 795:   ff e0                   jmpq   *%rax\n 797:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)\n 79e:   00 00 \n 7a0:   5d                      pop    %rbp\n 7a1:   c3                      retq   \n 7a2:   0f 1f 40 00             nopl   0x0(%rax)\n 7a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 7ad:   00 00 00 \n\n00000000000007b0 <__do_global_dtors_aux>:\n 7b0:   80 3d 89 08 20 00 00    cmpb   $0x0,0x200889(%rip)        # 201040 <_edata>\n 7b7:   75 27                   jne    7e0 <__do_global_dtors_aux+0x30>\n 7b9:   48 83 3d f7 07 20 00    cmpq   $0x0,0x2007f7(%rip)        # 200fb8 <__cxa_finalize@GLIBC_2.2.5>\n 7c0:   00 \n 7c1:   55                      push   %rbp\n 7c2:   48 89 e5                mov    %rsp,%rbp\n 7c5:   74 0c                   je     7d3 <__do_global_dtors_aux+0x23>\n 7c7:   48 8b 3d 5a 08 20 00    mov    0x20085a(%rip),%rdi        # 201028 <__dso_handle>\n 7ce:   e8 3d ff ff ff          callq  710 <.plt.got>\n 7d3:   e8 48 ff ff ff          callq  720 <deregister_tm_clones>\n 7d8:   5d                      pop    %rbp\n 7d9:   c6 05 60 08 20 00 01    movb   $0x1,0x200860(%rip)        # 201040 <_edata>\n 7e0:   f3 c3                   repz retq \n 7e2:   0f 1f 40 00             nopl   0x0(%rax)\n 7e6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)\n 7ed:   00 00 00 \n\n00000000000007f0 <frame_dummy>:\n 7f0:   48 8d 3d c9 05 20 00    lea    0x2005c9(%rip),%rdi        # 200dc0 <__JCR_END__>\n 7f7:   48 83 3f 00             cmpq   $0x0,(%rdi)\n 7fb:   75 0b                   jne    808 <frame_dummy+0x18>\n 7fd:   e9 5e ff ff ff          jmpq   760 <register_tm_clones>\n 802:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)\n 808:   48 8b 05 c1 07 20 00    mov    0x2007c1(%rip),%rax        # 200fd0 <_Jv_RegisterClasses>\n 80f:   48 85 c0                test   %rax,%rax\n 812:   74 e9                   je     7fd <frame_dummy+0xd>\n 814:   55                      push   %rbp\n 815:   48 89 e5                mov    %rsp,%rbp\n 818:   ff d0                   callq  *%rax\n 81a:   5d                      pop    %rbp\n 81b:   e9 40 ff ff ff          jmpq   760 <register_tm_clones>\n\n0000000000000820 <_Z13so_child_funcii>:\n 820:   55                      push   %rbp\n 821:   48 89 e5                mov    %rsp,%rbp\n 824:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 824 <_Z13so_child_funcii+0x4>\n 82b:   49 bb dc 07 20 00 00    movabs $0x2007dc,%r11\n 832:   00 00 00 \n 835:   4c 01 d8                add    %r11,%rax\n 838:   89 7d fc                mov    %edi,-0x4(%rbp)\n 83b:   89 75 f8                mov    %esi,-0x8(%rbp)\n 83e:   8b 4d fc                mov    -0x4(%rbp),%ecx\n 841:   8b 55 f8                mov    -0x8(%rbp),%edx\n 844:   01 ca                   add    %ecx,%edx\n 846:   89 d1                   mov    %edx,%ecx\n 848:   48 ba e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rdx\n 84f:   ff ff ff \n 852:   48 8b 14 10             mov    (%rax,%rdx,1),%rdx\n 856:   48 8b 12                mov    (%rdx),%rdx\n 859:   01 d1                   add    %edx,%ecx\n 85b:   48 ba d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rdx\n 862:   ff ff ff \n 865:   48 8b 04 10             mov    (%rax,%rdx,1),%rax\n 869:   48 8b 00                mov    (%rax),%rax\n 86c:   01 c8                   add    %ecx,%eax\n 86e:   5d                      pop    %rbp\n 86f:   c3                      retq   \n\n0000000000000870 <_ZL13so_local_funcv>:\n 870:   55                      push   %rbp\n 871:   48 89 e5                mov    %rsp,%rbp\n 874:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 874 <_ZL13so_local_funcv+0x4>\n 87b:   49 bb 8c 07 20 00 00    movabs $0x20078c,%r11\n 882:   00 00 00 \n 885:   4c 01 d8                add    %r11,%rax\n 888:   48 ba 38 00 00 00 00    movabs $0x38,%rdx\n 88f:   00 00 00 \n 892:   48 8b 04 10             mov    (%rax,%rdx,1),%rax\n 896:   5d                      pop    %rbp\n 897:   c3                      retq   \n\n0000000000000898 <_Z7so_funcii>:\n 898:   55                      push   %rbp\n 899:   48 89 e5                mov    %rsp,%rbp\n 89c:   41 57                   push   %r15\n 89e:   53                      push   %rbx\n 89f:   48 83 ec 20             sub    $0x20,%rsp\n 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 <_Z7so_funcii+0xb>\n 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11\n 8b1:   00 00 00 \n 8b4:   4c 01 db                add    %r11,%rbx\n 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)\n 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)\n 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8c4:   ff ff ff \n 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8cb:   48 8b 00                mov    (%rax),%rax\n 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx\n 8d2:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 8d9:   ff ff ff \n 8dc:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8e0:   48 89 10                mov    %rdx,(%rax)\n 8e3:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 8ea:   ff ff ff \n 8ed:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 8f1:   48 8b 00                mov    (%rax),%rax\n 8f4:   48 8d 50 01             lea    0x1(%rax),%rdx\n 8f8:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 8ff:   ff ff ff \n 902:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 906:   48 89 10                mov    %rdx,(%rax)\n 909:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax\n 910:   ff ff ff \n 913:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 917:   48 8b 00                mov    (%rax),%rax\n 91a:   89 c2                   mov    %eax,%edx\n 91c:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax\n 923:   ff ff ff \n 926:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 92a:   48 8b 00                mov    (%rax),%rax\n 92d:   89 d6                   mov    %edx,%esi\n 92f:   89 c7                   mov    %eax,%edi\n 931:   49 89 df                mov    %rbx,%r15\n 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax\n 93b:   ff ff ff \n 93e:   48 01 d8                add    %rbx,%rax\n 941:   ff d0                   callq  *%rax\n 943:   89 45 ec                mov    %eax,-0x14(%rbp)\n 946:   48 b8 c8 ff ff ff ff    movabs $0xffffffffffffffc8,%rax\n 94d:   ff ff ff \n 950:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 954:   48 8b 00                mov    (%rax),%rax\n 957:   89 c2                   mov    %eax,%edx\n 959:   48 b8 c0 ff ff ff ff    movabs $0xffffffffffffffc0,%rax\n 960:   ff ff ff \n 963:   48 8b 04 03             mov    (%rbx,%rax,1),%rax\n 967:   48 8b 00                mov    (%rax),%rax\n 96a:   89 d6                   mov    %edx,%esi\n 96c:   89 c7                   mov    %eax,%edi\n 96e:   49 89 df                mov    %rbx,%r15\n 971:   48 b8 f0 f6 df ff ff    movabs $0xffffffffffdff6f0,%rax\n 978:   ff ff ff \n 97b:   48 01 d8                add    %rbx,%rax\n 97e:   ff d0                   callq  *%rax\n 980:   01 45 ec                add    %eax,-0x14(%rbp)\n 983:   48 b8 70 f8 df ff ff    movabs $0xffffffffffdff870,%rax\n 98a:   ff ff ff \n 98d:   48 8d 04 03             lea    (%rbx,%rax,1),%rax\n 991:   ff d0                   callq  *%rax\n 993:   01 45 ec                add    %eax,-0x14(%rbp)\n 996:   8b 45 ec                mov    -0x14(%rbp),%eax\n 999:   48 83 c4 20             add    $0x20,%rsp\n 99d:   5b                      pop    %rbx\n 99e:   41 5f                   pop    %r15\n 9a0:   5d                      pop    %rbp\n 9a1:   c3                      retq   \n\nDisassembly of section .fini:\n\n00000000000009a4 <_fini>:\n 9a4:   48 83 ec 08             sub    $0x8,%rsp\n 9a8:   48 83 c4 08             add    $0x8,%rsp\n 9ac:   c3                      retq   \n```\n\n### 动态库装载过程  \n[linux kernel 源码](https://elixir.bootlin.com/linux/latest/source)  \n\n#### ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\nLD_SHOW_AUXV=1 whoami \n\n#### load_elf_binary函数  \n* 填充并且检查目标程序ELF头部\n* load_elf_phdrs加载目标程序的程序头表\n* 如果需要动态链接, 则寻找和处理解释器段\n* 检查并读取解释器的程序表头\n* 装入目标程序的段segment\n* create_elf_tables填写目标文件的参数环境变量等必要信息\n* start_kernel宏准备进入新的程序入口\n\n\n\n\n\n\n\n\n\n</font>  \n","slug":"2019-12-16-elf-link","published":1,"updated":"2020-03-09T03:25:56.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckd3wyen6001x7w5hbwed3p0w","content":"<font color=\"#ff6688\">  \n\n<h3><span id=\"1-目录\">..1. 目录</span></h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#1-目录\">..1. 目录</a></li>\n<li><a href=\"#2-准备工具和基础汇编知识\">..2. 准备工具和基础汇编知识</a></li>\n<li><a href=\"#3-编译链接过程的基本原理和流程\">..3. 编译链接过程的基本原理和流程</a><ul>\n<li><a href=\"#31-gcc中编译一个源文件可以拆分为4个部分\">..3.1. gcc中编译一个源文件可以拆分为4个部分</a></li>\n<li><a href=\"#32-编译单元translation-environment-编译的转换阶段-\">..3.2. 编译单元(Translation environment), 编译的转换阶段 :</a></li>\n<li><a href=\"#33-pic-pie-位置无关代码\">..3.3. PIC PIE 位置无关代码</a></li>\n<li><a href=\"#34-got-plt-全局偏移表-链接过程表\">..3.4. GOT PLT 全局偏移表 链接过程表</a></li>\n<li><a href=\"#35-符号表和符号\">..3.5. 符号表和符号</a><ul>\n<li><a href=\"#351-全局符号和局部符号\">..3.5.1. 全局符号和局部符号</a></li>\n<li><a href=\"#352-外部符号和内部符号\">..3.5.2. 外部符号和内部符号</a></li>\n<li><a href=\"#353-和字符串表的关系\">..3.5.3. 和字符串表的关系</a></li>\n</ul>\n</li>\n<li><a href=\"#36-静态链接过程\">..3.6. 静态链接过程</a></li>\n<li><a href=\"#37-动态链接过程\">..3.7. 动态链接过程</a></li>\n</ul>\n</li>\n<li><a href=\"#4-跟踪调测\">..4. 跟踪调测</a><ul>\n<li><a href=\"#41-测试源码\">..4.1. 测试源码</a></li>\n<li><a href=\"#42-位置有关的重定位分析\">..4.2. 位置有关的重定位分析</a><ul>\n<li><a href=\"#421-分析结论如下\">..4.2.1. 分析结论如下:</a></li>\n<li><a href=\"#422-系统源码参考\">..4.2.2. 系统源码参考:</a></li>\n<li><a href=\"#423-字符串数据\">..4.2.3. 字符串数据</a></li>\n<li><a href=\"#424-节信息\">..4.2.4. 节信息</a></li>\n<li><a href=\"#425-text数据\">..4.2.5. text数据</a></li>\n</ul>\n</li>\n<li><a href=\"#43-位置无关的重定位分析\">..4.3. 位置无关的重定位分析</a><ul>\n<li><a href=\"#431-分析说明\">..4.3.1. 分析说明</a></li>\n<li><a href=\"#432-全局数据访问代码分析\">..4.3.2. 全局数据访问代码分析</a></li>\n<li><a href=\"#433-全局函数访问代码分析\">..4.3.3. 全局函数访问代码分析</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#动态库装载过程\">动态库装载过程</a><ul>\n<li><a href=\"#elf的辅助向量-auxv\">ELF的辅助向量 AUXV</a></li>\n<li><a href=\"#load_elf_binary函数\">load_elf_binary函数</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3><span id=\"2-准备工具和基础汇编知识\">..2. 准备工具和基础汇编知识</span></h3><ul>\n<li>readelf -a  查看elf信息  </li>\n<li>objdump -S 查看汇编指令  </li>\n<li>ldd 查看动态加载   </li>\n<li>xxd - make a hexdump or do the reverse.</li>\n<li>gdb  <ul>\n<li>gdb 通过<code>layout regs</code>打开寄存器显示, 通过<code>set disassemble-next-line on</code>打开汇编  </li>\n<li>gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可    </li>\n<li>gdb关闭ASLR：<ul>\n<li>set disable-randomization on</li>\n</ul>\n</li>\n<li>开启ASLR：<ul>\n<li>set disable-randomization off</li>\n</ul>\n</li>\n<li>查看ASLR状态：<ul>\n<li>show disable-randomization</li>\n</ul>\n</li>\n<li>disas反汇编命令，直接disas是反汇编当前函数<ul>\n<li>disas /r (显示汇编指令对应十六进制值)   </li>\n<li>disas /m (如果有源码，显示对应行源码)   </li>\n</ul>\n</li>\n<li>intel语法<ul>\n<li>set disassembly-flavor intel</li>\n<li>set disassembly-flavor att  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>详细工具和汇编的基础知识见上一篇文章: <a href=\"https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/\">汇编语法/寻址/寄存器/代码模型(GNU assembler) </a>  </li>\n</ul>\n<a id=\"more\"></a>\n\n<h3><span id=\"3-编译链接过程的基本原理和流程\">..3. 编译链接过程的基本原理和流程</span></h3><p>C和C++均使用分离编译来支持多源文件模块化机制, 因此也带来了静态和动态的链接问题, 本文主要梳理了静态库的链接过程和动态链接过程.    </p>\n<h4><span id=\"31-gcc中编译一个源文件可以拆分为4个部分\">..3.1. gcc中编译一个源文件可以拆分为4个部分</span></h4><ol>\n<li>预处理 -E</li>\n<li>编译器 -S</li>\n<li>目标文件 -C</li>\n<li>链接为共享库或者可执行程序   </li>\n</ol>\n<h4><span id=\"32-编译单元translation-environment-编译的转换阶段\">..3.2. 编译单元(Translation environment), 编译的转换阶段 :</span></h4><blockquote>\n<p>[ISO/IEC 9899:1999]A C program need not all be translated at the same time.The text of the program is kept in units called source files, (or preprocessing files) in this International Standard.A source file together with all the headers and source files included via the preprocessing directive #include is known as a preprocessing translation unit. After preprocessing, a preprocessing translation unit is called a translation unit.<br>Previously translated translation units may be preserved individually or in libraries. The separate translation units of a program communicate by (for example) calls to functions whose identifiers have external linkage, manipulation of objects whose identifiers have external linkage, or manipulation of data files. Translation units may be separately translated and then later linked to produce an executable program.  </p>\n</blockquote>\n<blockquote>\n<p>C语言的程序不需要一同时间翻译, 在这个国际标准中, 程序的文本内容以源文件(或者预处理文件)为单位保存, 一个源文件连同所有通过预处理指令#include包含的头文件和源文件被称为预处理翻译单元, 经过预处理后的翻译单元称为翻译单元.  翻译单位可以单独保存，也可以打包在程序库里. 程序的独立翻译单元通过(例如) 调用具有外部链接标识的函数, 处理具有外部链接标识的对象完成连接过程.  翻译单元可以独立翻译然后通过链接生成可执行程序.   </p>\n</blockquote>\n<h4><span id=\"33-pic-pie-位置无关代码\">..3.3. PIC PIE 位置无关代码</span></h4><p>编译出的二进制指令不使用绝对地址而使用相对地址称为PIC 技术<br>PIE和PIC的区别在于PIE假定了代码最终会被直接链接为可执行程序    </p>\n<h4><span id=\"34-got-plt-全局偏移表-链接过程表\">..3.4. GOT PLT 全局偏移表 链接过程表</span></h4><p>这两个表完成了上面<a href=\"#编译单元translation-environment-编译的转换阶段-\">编译单元</a>中所说的处理过程  </p>\n<h4><span id=\"35-符号表和符号\">..3.5. 符号表和符号</span></h4><h5><span id=\"351-全局符号和局部符号\">..3.5.1. 全局符号和局部符号</span></h5><p>符号的全局和局部是相对于编译单元而言的,  例如添加了static前缀的全局变量或者函数只在当前的编译单元可见, 因此是局部的 .<br>重定位不关心局部符号,  而对于在函数内声明的局部变量的名字并不会存储到符号表 完全由运行时栈来维护,(-g选项可以在.debug中找到符号).<br>符号表是为了编译单元之间建立联系使用的, 比如重定位.   </p>\n<h5><span id=\"352-外部符号和内部符号\">..3.5.2. 外部符号和内部符号</span></h5><p>外部符号是指的当前编译单元使用但是却不在当前编译单元定义的符号.   </p>\n<h5><span id=\"353-和字符串表的关系\">..3.5.3. 和字符串表的关系</span></h5><p>符号表的name字段是字符串表的索引,  也就是说, 符号表本身并不存储符号的’字符串’名.<br>字符串表除了保存符号名外, 还保存常量字符串的值  </p>\n<h4><span id=\"36-静态链接过程\">..3.6. 静态链接过程</span></h4><ol>\n<li>编译阶段  <ol>\n<li>建立字符串表,符号表, 保存符号对应的声明信息.  </li>\n<li>建立重定位表, 对全局符号的访问都标记出准确的偏移地址  </li>\n</ol>\n</li>\n<li>链接生成阶段  <ol>\n<li>合并目标文件中相同的节, 确定虚拟内存地址(pic技术只确定相对地址)  </li>\n<li>重建重定位表和符号表   </li>\n<li>使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   </li>\n</ol>\n</li>\n<li>运行时  <ol>\n<li>所有地址已经完成重定位 对全局符号的访问不存在中间过程   </li>\n<li>如果未非位置无关代码, 则对全局符号的访问为立即数即为分配好的实际地址  </li>\n<li>如果是位置无关代码, 则对全局符号的访问需要用rip计算相对偏移.  </li>\n</ol>\n</li>\n</ol>\n<h4><span id=\"37-动态链接过程\">..3.7. 动态链接过程</span></h4><p>动态链接和静态链接的区别在于, 动态链接把重定位的时机放在了动态库被加载到内存之后.    </p>\n<ol>\n<li>编译阶段  <ol>\n<li>建立字符串表,符号表, 保存符号对应的声明信息.  </li>\n<li>建立重定位表, 对全局符号的访问都标记出准确的偏移地址  </li>\n</ol>\n</li>\n<li>链接生成阶段  <ol>\n<li>合并目标文件中相同的节  确定虚拟内存地址(pic技术只确定相对地址)  </li>\n<li>重建重定位表和符号表   </li>\n<li>使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   </li>\n<li>保存全局符号到动态符号表(符号表中有全部符号数据 此为优化)   </li>\n<li>建立动态重定位表, 对全局变量的访问走GOT表, 动态重定位表记录了符号名和对应数据段中的编号(该数据段被标记为.got节).  </li>\n<li>建立链接过程表, 对全局函数的访问生成plt代码(.plt), 链接过程重定位表(.rela.plt)记录了每个全局函数的符号名以及在保存实际函数地址的数据段的地址. (.got.plt节), .got.plt表中存储的指针默认是   <ol>\n<li>.got.plt中所有函数的地址都会默认保存为第 个元素的内容, 该地址为_dl_runtime_resolve , 通过符号表找到真正的函数地址后填充.got.plt并执行函数.    </li>\n</ol>\n</li>\n<li>对于内部符号的访问是否会进行优化 取决于代码模型,  例如对于小型代码模型中, 可执行程序中会直接访问全局变量的地址(被优化,但仍然保留GOT机制的有效性). 但是共享库中对全局变量的访问即使是当前库中的也一定会走got表.   </li>\n</ol>\n</li>\n<li>运行时  <ol>\n<li>加载共享库   <ol>\n<li>完成got, got.plt的填充   </li>\n<li>如果有repolr技术则设置内存段的只读  </li>\n</ol>\n</li>\n<li>运行过程中  <ol>\n<li>对全局变量的访问需要通过got表找到真正的地址   </li>\n<li>对函数的访问每次都会走plt, 第一次访问会跳转到符号解析函数找到真正的函数地址, 后续plt则会省略解析流程, 此为惰性加载机制.  </li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<!-- more -->\n\n<h3><span id=\"4-跟踪调测\">..4. 跟踪调测</span></h3><p>编译选项为</p>\n<ul>\n<li>位置无关代码   </li>\n<li>禁止优化   </li>\n<li>禁止假设代码模型   </li>\n</ul>\n<h4><span id=\"41-测试源码\">..4.1. 测试源码</span></h4><p>lib.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int g_static_lib_bss &#x3D; 0;</span><br><span class=\"line\">int g_static_lib_data &#x3D; 100;</span><br><span class=\"line\">int lib_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return a+b + g_static_lib_bss + g_static_lib_data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>so.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int lib_func(int a, int b);</span><br><span class=\"line\">extern long long g_static_lib_bss;</span><br><span class=\"line\">extern long long g_static_lib_data;</span><br><span class=\"line\">long long g_static_so_bss &#x3D; 0;</span><br><span class=\"line\">long long g_static_so_data &#x3D; 100000;</span><br><span class=\"line\"></span><br><span class=\"line\">static long long g_local_so_data &#x3D; 0xff00ff00;</span><br><span class=\"line\"></span><br><span class=\"line\">int so_child_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return a+b + g_static_so_bss + g_static_so_data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static int so_local_func()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return g_local_so_data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br><span class=\"line\">  g_static_so_data ++;</span><br><span class=\"line\">  int ret &#x3D; lib_func(g_static_so_bss, g_static_so_data);</span><br><span class=\"line\">  ret +&#x3D; so_child_func(g_static_lib_data, g_static_lib_bss);</span><br><span class=\"line\">  ret +&#x3D; so_local_func();</span><br><span class=\"line\">  return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_child_func(int a, int b);</span><br><span class=\"line\">int so_func(int a, int b);</span><br><span class=\"line\">extern int g_static_so_bss;</span><br><span class=\"line\">extern int g_static_so_data;</span><br><span class=\"line\"></span><br><span class=\"line\">int g_main_static[128*1024] &#x3D; &#123;2,1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int c &#x3D; a+b;</span><br><span class=\"line\">   c +&#x3D; g_static_so_bss;</span><br><span class=\"line\">   c +&#x3D; g_static_so_data;</span><br><span class=\"line\">   c +&#x3D; g_main_static[0];</span><br><span class=\"line\">   c +&#x3D; so_func(a, b);</span><br><span class=\"line\">   return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int a &#x3D; 0;</span><br><span class=\"line\">   g_static_so_bss &#x3D; 1000000;</span><br><span class=\"line\">   a +&#x3D; main_func(argc, 1);</span><br><span class=\"line\">   return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4><span id=\"42-位置有关的重定位分析\">..4.2. 位置有关的重定位分析</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c so.cpp  -O0 -mcmodel&#x3D;large  -fno-pic  </span><br><span class=\"line\">g++ -c lib.cpp  -O0 -mcmodel&#x3D;large  -fno-pic </span><br><span class=\"line\">g++ -c main.cpp  -O0 -mcmodel&#x3D;large  -fno-pic </span><br><span class=\"line\">g++ so.o lib.o main.o -O0 -mcmodel&#x3D;large -no-pie</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"421-分析结论如下\">..4.2.1. 分析结论如下:</span></h5><ul>\n<li><p>so.cpp中所有非static的全局变量和函数都存在符号表中  </p>\n<ul>\n<li>符号表的起始偏移为00000200 大小为198</li>\n<li>字符串表的起始偏移为00000398 大小为a4  </li>\n</ul>\n</li>\n<li><p>通过xxd命令可以观察到存储所有所有符号名的位置为 0x398处开始分别是字符串:</p>\n<ul>\n<li>null</li>\n<li>so.cpp</li>\n<li>_ZL15g_local_so_data</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>字符串表中的字符串均为标准的c-style风格的null为结尾(0x00)的字符串   </p>\n</li>\n<li><p>符号表的所在位置0x00000200则为规整的数组 没有字符串信息  </p>\n</li>\n<li><p>局部变量出现在目标对象的符号表中但对其访问的代码位置未出现在重定位表中  </p>\n</li>\n<li><p>局部变量在符号中的类型是LOCAL  </p>\n</li>\n<li><p>无论外部符号还是内部符号, 对于全局符号的访问均在重定位表中指明了具体的符号和偏移数据    </p>\n</li>\n<li><p>R_X86_64_64类型或者PC类型均为直接修改访问代码来完成重定位  </p>\n</li>\n<li><p>对于外部的符号 无论是函数还是数据 在符号表中 均为<code>NOTYPE  GLOBAL UND</code>的一行占位数据  </p>\n</li>\n<li><p>对于内部定义的全局函数, 则记录了再文本节中的具体的地址偏移,大小,类型等信息.   </p>\n</li>\n<li><p>对于内部定义的全局变量, 则记录了该变量的序号, 大小, 类型信息.   </p>\n</li>\n<li><p>.data字段为16字节 内容分别是 a086 0100 0000 0000, 00ff 00ff 0000 0000</p>\n<ul>\n<li>对应为long long g_static_so_data = 100000; 和static long long g_local_so_data = 0xff00ff00;</li>\n</ul>\n</li>\n</ul>\n<p>访问全局数据  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br></pre></td></tr></table></figure>\n<p>这里的g_static_so_bss 对应的汇编为:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">5c:   00 00 00 </span><br><span class=\"line\">5f:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">62:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>其意思是  </p>\n<ul>\n<li>用64位立即数0来设置rax寄存器  </li>\n<li>解引用rax 并把内容保存到rax寄存器   </li>\n<li>rax的内容+1 (这里利用了lea寻址完成++)并保存到rdx寄存器<br>这里问题就来了, 用C语言来描述就是  我们对地址 为0的的指针当做真实的全局变量的地址进行了解引用.   </li>\n</ul>\n<p>那么我们看下经过链接后的该汇编代码:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4005d3:       48 b8 60 10 68 00 00    movabs $0x681060,%rax</span><br><span class=\"line\">4005da:       00 00 00 </span><br><span class=\"line\">4005dd:       48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">4005e0:       48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>在这里, 这个立即数已经变成了合并完.data后, g_static_so_bss的真实地址.<br>这个立即数指令所在的地址偏移为0x57 然后我们查看重定位表即可发现完成该过程所需要的重定位信息:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>备注:<br>这里我们看到最终链接出的地址4005da: 说明该程序并非pic代码, 对全局变量的访问没有任何相对计算以及读表过程.    </p>\n<h5><span id=\"422-系统源码参考\">..4.2.2. 系统源码参考:</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* $begin elfsymbol *&#x2F;</span><br><span class=\"line\">typedef struct &#123; </span><br><span class=\"line\">    int   name;      &#x2F;* String table offset *&#x2F; </span><br><span class=\"line\">    char  type:4,    &#x2F;* Function or data (4 bits) *&#x2F; </span><br><span class=\"line\">    binding:4; &#x2F;* Local or global (4 bits) *&#x2F; </span><br><span class=\"line\">    char  reserved;  &#x2F;* Unused *&#x2F;  </span><br><span class=\"line\">    short section;   &#x2F;* Section header index *&#x2F;</span><br><span class=\"line\">    long  value;     &#x2F;* Section offset or absolute address *&#x2F; </span><br><span class=\"line\">    long  size;      &#x2F;* Object size in bytes *&#x2F; </span><br><span class=\"line\">&#125; Elf64_Symbol; </span><br><span class=\"line\">&#x2F;* $end elfsymbol *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* $begin elfrelo *&#x2F;</span><br><span class=\"line\">typedef struct &#123; </span><br><span class=\"line\">    long offset;    &#x2F;* Offset of the reference to relocate *&#x2F; </span><br><span class=\"line\">    long type:32,   &#x2F;* Relocation type *&#x2F; </span><br><span class=\"line\">    symbol:32; &#x2F;* Symbol table index *&#x2F; </span><br><span class=\"line\">    long addend;    &#x2F;* Constant part of relocation expression *&#x2F;</span><br><span class=\"line\">&#125; Elf64_Rela; </span><br><span class=\"line\">&#x2F;* $end elfrelo *&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"423-字符串数据\">..4.2.3. 字符串数据</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000390: 0000 0000 0000 0000 0073 6f2e 6370 7000  .........so.cpp.</span><br><span class=\"line\">000003a0: 5f5a 4c31 3567 5f6c 6f63 616c 5f73 6f5f  _ZL15g_local_so_</span><br><span class=\"line\">000003b0: 6461 7461 005f 5a4c 3133 736f 5f6c 6f63  data._ZL13so_loc</span><br><span class=\"line\">000003c0: 616c 5f66 756e 6376 0067 5f73 7461 7469  al_funcv.g_stati</span><br><span class=\"line\">000003d0: 635f 736f 5f62 7373 0067 5f73 7461 7469  c_so_bss.g_stati</span><br><span class=\"line\">000003e0: 635f 736f 5f64 6174 6100 5f5a 3133 736f  c_so_data._Z13so</span><br><span class=\"line\">000003f0: 5f63 6869 6c64 5f66 756e 6369 6900 5f5a  _child_funcii._Z</span><br><span class=\"line\">00000400: 3773 6f5f 6675 6e63 6969 005f 5a38 6c69  7so_funcii._Z8li</span><br><span class=\"line\">00000410: 625f 6675 6e63 6969 0067 5f73 7461 7469  b_funcii.g_stati</span><br><span class=\"line\">00000420: 635f 6c69 625f 6273 7300 675f 7374 6174  c_lib_bss.g_stat</span><br><span class=\"line\">00000430: 6963 5f6c 6962 5f64 6174 6100 0000 0000  ic_lib_data.....</span><br></pre></td></tr></table></figure>\n\n\n<h5><span id=\"424-节信息\">..4.2.4. 节信息</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF 头：</span><br><span class=\"line\">  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  类别:                              ELF64</span><br><span class=\"line\">  数据:                              2 补码，小端序 (little endian)</span><br><span class=\"line\">  版本:                              1 (current)</span><br><span class=\"line\">  OS&#x2F;ABI:                            UNIX - System V</span><br><span class=\"line\">  ABI 版本:                          0</span><br><span class=\"line\">  类型:                              REL (可重定位文件)</span><br><span class=\"line\">  系统架构:                          Advanced Micro Devices X86-64</span><br><span class=\"line\">  版本:                              0x1</span><br><span class=\"line\">  入口点地址：              0x0</span><br><span class=\"line\">  程序头起点：              0 (bytes into file)</span><br><span class=\"line\">  Start of section headers:          1592 (bytes into file)</span><br><span class=\"line\">  标志：             0x0</span><br><span class=\"line\">  本头的大小：       64 (字节)</span><br><span class=\"line\">  程序头大小：       0 (字节)</span><br><span class=\"line\">  Number of program headers:         0</span><br><span class=\"line\">  节头大小：         64 (字节)</span><br><span class=\"line\">  节头数量：         12</span><br><span class=\"line\">  字符串表索引节头： 11</span><br><span class=\"line\"></span><br><span class=\"line\">节头：</span><br><span class=\"line\">  [号] 名称              类型             地址              偏移量</span><br><span class=\"line\">       大小              全体大小          旗标   链接   信息   对齐</span><br><span class=\"line\">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     0</span><br><span class=\"line\">  [ 1] .text             PROGBITS         0000000000000000  00000040</span><br><span class=\"line\">       0000000000000103  0000000000000000  AX       0     0     1</span><br><span class=\"line\">  [ 2] .rela.text        RELA             0000000000000000  00000440</span><br><span class=\"line\">       0000000000000150  0000000000000018   I       9     1     8</span><br><span class=\"line\">  [ 3] .data             PROGBITS         0000000000000000  00000148</span><br><span class=\"line\">       0000000000000010  0000000000000000  WA       0     0     8</span><br><span class=\"line\">  [ 4] .bss              NOBITS           0000000000000000  00000158</span><br><span class=\"line\">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class=\"line\">  [ 5] .comment          PROGBITS         0000000000000000  00000158</span><br><span class=\"line\">       000000000000002e  0000000000000001  MS       0     0     1</span><br><span class=\"line\">  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  00000186</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     1</span><br><span class=\"line\">  [ 7] .eh_frame         PROGBITS         0000000000000000  00000188</span><br><span class=\"line\">       0000000000000078  0000000000000000   A       0     0     8</span><br><span class=\"line\">  [ 8] .rela.eh_frame    RELA             0000000000000000  00000590</span><br><span class=\"line\">       0000000000000048  0000000000000018   I       9     7     8</span><br><span class=\"line\">  [ 9] .symtab           SYMTAB           0000000000000000  00000200</span><br><span class=\"line\">       0000000000000198  0000000000000018          10    10     8</span><br><span class=\"line\">  [10] .strtab           STRTAB           0000000000000000  00000398</span><br><span class=\"line\">       00000000000000a4  0000000000000000           0     0     1</span><br><span class=\"line\">  [11] .shstrtab         STRTAB           0000000000000000  000005d8</span><br><span class=\"line\">       0000000000000059  0000000000000000           0     0     1</span><br><span class=\"line\">Key to Flags:</span><br><span class=\"line\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class=\"line\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class=\"line\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class=\"line\">  l (large), p (processor specific)</span><br><span class=\"line\"></span><br><span class=\"line\">There are no section groups in this file.</span><br><span class=\"line\"></span><br><span class=\"line\">本文件中没有程序头。</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rela.text&#39; 位于偏移量 0x440 含有 14 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000000016  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000025  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">00000000003a  000300000001 R_X86_64_64       0000000000000000 .data + 8</span><br><span class=\"line\">000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000068  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000075  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000000086  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000000093  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">0000000000a2  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">0000000000b3  000e00000001 R_X86_64_64       0000000000000000 _Z8lib_funcii + 0</span><br><span class=\"line\">0000000000c2  000f00000001 R_X86_64_64       0000000000000000 g_static_lib_bss + 0</span><br><span class=\"line\">0000000000d1  001000000001 R_X86_64_64       0000000000000000 g_static_lib_data + 0</span><br><span class=\"line\">0000000000e2  000c00000001 R_X86_64_64       0000000000000000 _Z13so_child_funcii + 0</span><br><span class=\"line\">0000000000f1  000200000001 R_X86_64_64       0000000000000000 .text + 34</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rela.eh_frame&#39; 位于偏移量 0x590 含有 3 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0</span><br><span class=\"line\">000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 34</span><br><span class=\"line\">000000000060  000200000002 R_X86_64_PC32     0000000000000000 .text + 47</span><br><span class=\"line\"></span><br><span class=\"line\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol table &#39;.symtab&#39; contains 17 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp</span><br><span class=\"line\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class=\"line\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class=\"line\">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class=\"line\">     5: 0000000000000008     8 OBJECT  LOCAL  DEFAULT    3 _ZL15g_local_so_data</span><br><span class=\"line\">     6: 0000000000000034    19 FUNC    LOCAL  DEFAULT    1 _ZL13so_local_funcv</span><br><span class=\"line\">     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class=\"line\">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class=\"line\">     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class=\"line\">    10: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    4 g_static_so_bss</span><br><span class=\"line\">    11: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 g_static_so_data</span><br><span class=\"line\">    12: 0000000000000000    52 FUNC    GLOBAL DEFAULT    1 _Z13so_child_funcii</span><br><span class=\"line\">    13: 0000000000000047   188 FUNC    GLOBAL DEFAULT    1 _Z7so_funcii</span><br><span class=\"line\">    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii</span><br><span class=\"line\">    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss</span><br><span class=\"line\">    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data</span><br><span class=\"line\"></span><br><span class=\"line\">No version information found in this file.</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"425-text数据\">..4.2.5. text数据</span></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">so.o：     文件格式 elf64-x86-64   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:    </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000000 &lt;_Z13so_child_funcii&gt;:</span><br><span class=\"line\">   0:   55                      push   %rbp</span><br><span class=\"line\">   1:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">   4:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class=\"line\">   7:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class=\"line\">   a:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class=\"line\">   d:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class=\"line\">  10:   01 d0                   add    %edx,%eax</span><br><span class=\"line\">  12:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  14:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  1b:   00 00 00 </span><br><span class=\"line\">  1e:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  21:   01 c2                   add    %eax,%edx</span><br><span class=\"line\">  23:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  2a:   00 00 00 </span><br><span class=\"line\">  2d:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  30:   01 d0                   add    %edx,%eax</span><br><span class=\"line\">  32:   5d                      pop    %rbp</span><br><span class=\"line\">  33:   c3                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000034 &lt;_ZL13so_local_funcv&gt;:</span><br><span class=\"line\">  34:   55                      push   %rbp</span><br><span class=\"line\">  35:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  38:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  3f:   00 00 00 </span><br><span class=\"line\">  42:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  45:   5d                      pop    %rbp</span><br><span class=\"line\">  46:   c3                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000047 &lt;_Z7so_funcii&gt;:</span><br><span class=\"line\">  47:   55                      push   %rbp</span><br><span class=\"line\">  48:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  4b:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  4f:   89 7d ec                mov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  52:   89 75 e8                mov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  5c:   00 00 00 </span><br><span class=\"line\">  5f:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  62:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br><span class=\"line\">  66:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  6d:   00 00 00 </span><br><span class=\"line\">  70:   48 89 10                mov    %rdx,(%rax)</span><br><span class=\"line\">  73:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  7a:   00 00 00 </span><br><span class=\"line\">  7d:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  80:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br><span class=\"line\">  84:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  8b:   00 00 00 </span><br><span class=\"line\">  8e:   48 89 10                mov    %rdx,(%rax)</span><br><span class=\"line\">  91:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  98:   00 00 00 </span><br><span class=\"line\">  9b:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  9e:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  a0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  a7:   00 00 00 </span><br><span class=\"line\">  aa:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  ad:   89 d6                   mov    %edx,%esi</span><br><span class=\"line\">  af:   89 c7                   mov    %eax,%edi</span><br><span class=\"line\">  b1:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  b8:   00 00 00 </span><br><span class=\"line\">  bb:   ff d0                   callq  *%rax</span><br><span class=\"line\">  bd:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  c0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  c7:   00 00 00 </span><br><span class=\"line\">  ca:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  cd:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  cf:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  d6:   00 00 00 </span><br><span class=\"line\">  d9:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  dc:   89 d6                   mov    %edx,%esi</span><br><span class=\"line\">  de:   89 c7                   mov    %eax,%edi</span><br><span class=\"line\">  e0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  e7:   00 00 00 </span><br><span class=\"line\">  ea:   ff d0                   callq  *%rax</span><br><span class=\"line\">  ec:   01 45 fc                add    %eax,-0x4(%rbp)</span><br><span class=\"line\">  ef:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  f6:   00 00 00 </span><br><span class=\"line\">  f9:   ff d0                   callq  *%rax</span><br><span class=\"line\">  fb:   01 45 fc                add    %eax,-0x4(%rbp)</span><br><span class=\"line\">  fe:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class=\"line\"> 101:   c9                      leaveq </span><br><span class=\"line\"> 102:   c3                      retq</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4><span id=\"43-位置无关的重定位分析\">..4.3. 位置无关的重定位分析</span></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c so.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -c lib.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -c main.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -shared so.o  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ so.so lib.o main.o -O0 -mcmodel&#x3D;large -pie -fPIE    </span><br><span class=\"line\">export  LD_LIBRARY_PATH&#x3D;LD_LIBRARY_PATH:.&#x2F;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -c so.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -c lib.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -c main.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -shared so.o -oso.so  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 so.so lib.o main.o -O0 -mcmodel&#x3D;large -pie -fPIE    </span><br><span class=\"line\">export  LD_LIBRARY_PATH&#x3D;LD_LIBRARY_PATH:.&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h5><span id=\"431-分析说明\">..4.3.1. 分析说明</span></h5><p>PIC的代码在编译为目标对象时, 所用的重定位方法和非PIC在方法上并没有差别  </p>\n<blockquote>\n<p>指明代码段中访问全局符号的操作数位置<br>在编译阶段用正确的地址替换掉占位用的空地址<br>与非PIC的差别我们会看到访问所有数据最终最终都会通过GOT表, 所以这部分的立即数会首先被替换成GOT表的地址<br>本段分析中主要分析动态链接的关键部分GOT/PLT/LOAD/FIXSYMBO部分分析, 对上述部分不再贴细节分析代码.   </p>\n</blockquote>\n<ul>\n<li>so中的重定位表分别是.rela.dyn .rela.plt, 和目标文件中的记录格式类似但有明显不同  <ul>\n<li>无论是对全局数据的访问还是对全局函数的访问, 其重定位的地址都不在是代码段中的位置, 而是位于数据段   <ul>\n<li>对全局变量的访问, 重定位地址在.got段 数据段  </li>\n<li>对全局函数的访问, 重定位地址在.got.plt段 数据段  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重定位不在涉及修改.txt段中的内容, 所以共享库的文本段是可以跨进程安全共享的  </li>\n</ul>\n<h5><span id=\"432-全局数据访问代码分析\">..4.3.2. 全局数据访问代码分析</span></h5><p>访问全局数据  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br></pre></td></tr></table></figure>\n<p>这里的g_static_so_bss++ 对应的汇编为:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 &lt;_Z7so_funcii+0xb&gt;</span><br><span class=\"line\">8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11</span><br><span class=\"line\">8b1:   00 00 00 </span><br><span class=\"line\">8b4:   4c 01 db                add    %r11,%rbx</span><br><span class=\"line\">8b7:   89 7d dc                mov    %edi,-0x24(%rbp)</span><br><span class=\"line\">8ba:   89 75 d8                mov    %esi,-0x28(%rbp)</span><br><span class=\"line\">8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax</span><br><span class=\"line\">8c4:   ff ff ff </span><br><span class=\"line\">8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax</span><br><span class=\"line\">8cb:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">8ce:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>其意思是  </p>\n<ul>\n<li>8a3这行指令+0x20075d偏移保存到%rbx  </li>\n<li>计算出最终地址(%rbx + xffffffffffffffe0 (-20) * 1)并取值到rax  <ul>\n<li>rbx的值为0x201000该地址对应的是节.got.plt 也是.got + sizeof(.got)的位置  </li>\n<li>-20位则表示在.got中  最终的地址为0x200fe0  </li>\n<li>查找.dyn表可以知道该位置为000000200fe0  g_static_so_bss + 0   </li>\n<li>查看该位置的内存为0  </li>\n<li>那么如果在运行时没有进行动态填充, 则这里会出现对地址0进行解引用的操作.   </li>\n<li>rbx寄存器会复用 专门用来保存got表的入口偏移, 也就是浪费了一个通用寄存器来实现地址无关代码  </li>\n</ul>\n</li>\n<li>我们进入gdb调试  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x7ffff7bd68a3    lea    -0x7(%rip),%rbx        # 0x7ffff7bd68a3 &lt;_Z7so_funcii+11&gt;   </span><br><span class=\"line\">0x7ffff7bd68aa    movabs $0x20075d,%r11                 </span><br><span class=\"line\">0x7ffff7bd68b4    add    %r11,%rbx                      </span><br><span class=\"line\">0x7ffff7bd68b7    mov    %edi,-0x24(%rbp)               </span><br><span class=\"line\">0x7ffff7bd68ba    mov    %esi,-0x28(%rbp)               </span><br><span class=\"line\">0x7ffff7bd68bd    movabs $0xffffffffffffffe0,%rax       </span><br><span class=\"line\">0x7ffff7bd68c7    mov    (%rbx,%rax,1),%rax             </span><br><span class=\"line\">0x7ffff7bd68cb    mov    (%rax),%rax                    </span><br><span class=\"line\">0x7ffff7bd68ce    lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>带入计算:  </p>\n<figure class=\"highlight plain\"><figcaption><span>+ 0x20075d + -20*1 </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该位置位于加载so.so的内存中, 对应为只读的got表</span><br></pre></td></tr></table></figure>\n<p>00007ffff7bd6000      4K r-x– so.so<br>00007ffff7bd7000   2044K —– so.so<br>00007ffff7dd6000      4K r—- so.so<br>00007ffff7dd7000      4K rw— so.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推算got表在内存中的实际位置为 0x7FFFF7DD6FE0 - 28 &#x3D;  0x7FFFF7DD6FB8  </span><br><span class=\"line\">那么查看该got实际的内存如下:</span><br></pre></td></tr></table></figure>\n<p>(gdb) x /9ag 0x7FFFF7DD6FB8<br>0x7ffff7dd6fb8: 0x7ffff6f27c30 &lt;__cxa_finalize&gt;<br>0x7ffff7dd6fc0: 0x555555755030 <g_static_lib_data><br>0x7ffff7dd6fc8: 0x5555557d5044 <g_static_lib_bss><br>0x7ffff7dd6fd0: 0x0<br>0x7ffff7dd6fd8: 0x7ffff7dd7030 <g_static_so_data><br>0x7ffff7dd6fe0: 0x7ffff7dd7048 <g_static_so_bss><br>0x7ffff7dd6fe8: 0x0<br>0x7ffff7dd6ff0: 0x0<br>0x7ffff7dd6ff8: 0x0</g_static_so_bss></g_static_so_data></g_static_lib_bss></g_static_lib_data></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对应0x7FFFF7DD6FE0的位置已经保存了正确的g_static_so_bss的地址.  </span><br><span class=\"line\">再进一步读取变量的值:</span><br></pre></td></tr></table></figure>\n<p>0x7ffff7dd7048 <g_static_so_bss>:       0xf4240  (1000000)<br>0x7ffff7dd7030 <g_static_so_data>:      0x186a0   (100000)  </g_static_so_data></g_static_so_bss></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值也正确.   </span><br><span class=\"line\">全局变量实际保存的位置对应so.so的可读写数据段   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### ..4.3.3. 全局函数访问代码分析</span><br></pre></td></tr></table></figure>\n<p>int so_func(int a, int b)<br>{<br>  g_static_so_bss ++;<br>  g_static_so_data ++;<br>  int ret = lib_func(g_static_so_bss, g_static_so_data);<br>  ret += so_child_func(g_static_lib_data, g_static_lib_bss);<br>  ret += so_local_func();<br>  return ret;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应的汇编码如下:  </span><br><span class=\"line\">%esi保存了g_static_lib_data  %edi 保存了g_static_lib_bss   </span><br><span class=\"line\">%rbx保存了base 偏移 8a3 + 0x20075d</span><br></pre></td></tr></table></figure>\n<p> 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax<br> 93b:   ff ff ff<br> 93e:   48 01 d8                add    %rbx,%rax<br> 941:   ff d0                   callq  *%rax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里callq的实际地址为 8a3 + 0x20075d -0x900 &#x3D; 0x200700   </span><br><span class=\"line\">该地址位于.plt中  其偏移相对于.plt为:  0x200700-0x00000000000206e0 &#x3D; 0x20  偏移地址为700  </span><br><span class=\"line\">我们找到代码位置</span><br></pre></td></tr></table></figure>\n\n<p>00000000000006e0 &lt;.plt&gt;:<br> 6e0:   ff 35 22 09 20 00   pushq  0x200922(%rip)  # 201008 &lt;GOT_+0x8&gt; link_map<br> 6e6:   ff 25 24 09 20 00   jmpq   *0x200924(%rip) # 201010 &lt;GOT+0x10&gt; _dl_runtime_resolve_xsavec<br> 6ec:   0f 1f 40 00             nopl   0x0(%rax)</p>\n<p>00000000000006f0 &lt;_Z13so_child_funcii@plt&gt;:<br> 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 &lt;_Z13so_child_funcii@@Base+0x2007f8&gt;<br> 6f6:   68 00 00 00 00          pushq  $0x0<br> 6fb:   e9 e0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>0000000000000700 &lt;_Z8lib_funcii@plt&gt;:<br> 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 &lt;_Z8lib_funcii&gt;<br> 706:   68 01 00 00 00          pushq  $0x1<br> 70b:   e9 d0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">700跳转到 (706+0x20091a) 这个地址保存的内存   </span><br><span class=\"line\">这个地址为  0x201020  即.got.plt的第5项</span><br><span class=\"line\">在elf文件中.got.plt是有5个值的, 第五项保存的值为706  也就是jmpq的下一行代码   </span><br><span class=\"line\">&#96;&#96;&#96;pushq $0x1&#96;&#96;&#96;   意思是把当前的plt序号(.rela.plt的项)保存到栈上(传参)  </span><br><span class=\"line\">在装载后, 相对偏移706会被替换成实际分配好的地址   </span><br><span class=\"line\">因此第一次jmpq会跳转到偏移6e0处  </span><br><span class=\"line\">再把got+8的位置压栈, (这个指针是link_map 后文会继续讲)   </span><br><span class=\"line\">然后跳转到函数  &#96;&#96;&#96;_dl_runtime_resolve_xsavec&#96;&#96;&#96;   </span><br><span class=\"line\"></span><br><span class=\"line\">got+8 和got+10 将会完成符号的解析工作并找到真正的目标函数地址, 然后回写plt 执行目标函数.   </span><br><span class=\"line\">这两项程序装载时会完成填充, 而后续的plt的其他函数会基于该机制以惰性加载机制调用时解析.  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GDB调试内容如下:</span><br></pre></td></tr></table></figure>\n<p>0x7ffff7bd6700 &lt;_Z8lib_funcii@plt&gt;              jmpq   *0x20091a(%rip)        # 0x7ffff7dd7020<br>0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;            pushq  $0x1<br>0x7ffff7bd670b &lt;_Z8lib_funcii@plt+11&gt;           jmpq   0x7ffff7bd66e0<br>0x7ffff7bd6710                                  jmpq   *0x2008a2(%rip)        # 0x7ffff7dd6fb8  </p>\n<p>(gdb) x /1ag 0x7ffff7dd7020<br>0x7ffff7dd7020: 0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;  </p>\n<p>(gdb) x /5ag 0x7ffff7dd7000<br>0x7ffff7dd7000: 0x200dc8<br>0x7ffff7dd7008: 0x7ffff7ff6000<br>0x7ffff7dd7010: 0x7ffff7ded310 &lt;_dl_runtime_resolve_xsavec&gt;<br>0x7ffff7dd7018: 0x7ffff7bd66f6 &lt;_Z13so_child_funcii@plt+6&gt;<br>0x7ffff7dd7020: 0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;_dl_runtime_resolve_xsavec&#96;&#96;&#96;  </span><br><span class=\"line\">rbx+8为符号表链表指针   </span><br><span class=\"line\">rbx+16为压到栈上的目标函数编号 存储在plt的下标从第四项开始, 前三项分别是offset, link_map, 解析函数  </span><br><span class=\"line\">&#96;&#96;&#96;_dl_fixup&#96;&#96;&#96; 返回了查找到的真实地址 &#96;&#96;&#96;bnd jmpq *%r11&#96;&#96;&#96;  跳转到实际地址  </span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">0x7ffff7ded310   push   %rbx                                                                </span><br><span class=\"line\">0x7ffff7ded311   mov    %rsp,%rbx                                                           </span><br><span class=\"line\">0x7ffff7ded314   and    $0xffffffffffffffc0,%rsp                                            </span><br><span class=\"line\">0x7ffff7ded318   sub    0x20f4e9(%rip),%rsp        # 0x7ffff7ffc808 &lt;_rtld_global_ro+168&gt;   </span><br><span class=\"line\">0x7ffff7ded31f   mov    %rax,(%rsp)                                                         </span><br><span class=\"line\">0x7ffff7ded323   mov    %rcx,0x8(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded328   mov    %rdx,0x10(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded32d   mov    %rsi,0x18(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded332   mov    %rdi,0x20(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded337   mov    %r8,0x28(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded33c   mov    %r9,0x30(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded341   mov    $0xee,%eax                                                          </span><br><span class=\"line\">0x7ffff7ded346   xor    %edx,%edx                                                           </span><br><span class=\"line\">0x7ffff7ded348   mov    %rdx,0x250(%rsp)           </span><br><span class=\"line\">0x7ffff7ded350   mov    %rdx,0x258(%rsp)           </span><br><span class=\"line\">0x7ffff7ded358   mov    %rdx,0x260(%rsp)           </span><br><span class=\"line\">0x7ffff7ded360   mov    %rdx,0x268(%rsp)           </span><br><span class=\"line\">0x7ffff7ded368   mov    %rdx,0x270(%rsp)           </span><br><span class=\"line\">0x7ffff7ded370   mov    %rdx,0x278(%rsp)           </span><br><span class=\"line\">0x7ffff7ded378   xsavec 0x40(%rsp)                 </span><br><span class=\"line\">0x7ffff7ded37d   mov    0x10(%rbx),%rsi            </span><br><span class=\"line\">0x7ffff7ded381   mov    0x8(%rbx),%rdi             </span><br><span class=\"line\">0x7ffff7ded385   callq  0x7ffff7de6630 &lt;_dl_fixup&gt; </span><br><span class=\"line\">0x7ffff7ded38a   mov    %rax,%r11                  </span><br><span class=\"line\">0x7ffff7ded38d   mov    $0xee,%eax                 </span><br><span class=\"line\">0x7ffff7ded392   xor    %edx,%edx                  </span><br><span class=\"line\">0x7ffff7ded394   xrstor 0x40(%rsp)         </span><br><span class=\"line\">0x7ffff7ded399   mov    0x30(%rsp),%r9     </span><br><span class=\"line\">0x7ffff7ded39e   mov    0x28(%rsp),%r8     </span><br><span class=\"line\">0x7ffff7ded3a3   mov    0x20(%rsp),%rdi    </span><br><span class=\"line\">0x7ffff7ded3a8   mov    0x18(%rsp),%rsi    </span><br><span class=\"line\">0x7ffff7ded3ad   mov    0x10(%rsp),%rdx    </span><br><span class=\"line\">0x7ffff7ded3b2   mov    0x8(%rsp),%rcx     </span><br><span class=\"line\">0x7ffff7ded3b7   mov    (%rsp),%rax        </span><br><span class=\"line\">0x7ffff7ded3bb   mov    %rbx,%rsp          </span><br><span class=\"line\">0x7ffff7ded3be   mov    (%rsp),%rbx        </span><br><span class=\"line\">0x7ffff7ded3c2   add    $0x18,%rsp         </span><br><span class=\"line\">0x7ffff7ded3c6   bnd jmpq *%r11</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">&#x2F;&#x2F; Elf64_Rela</span><br><span class=\"line\">typedef uint64_t Elf64_Addr;</span><br><span class=\"line\">typedef uint64_t Elf64_Xword;</span><br><span class=\"line\">typedef int64_t  Elf64_Sxword;</span><br><span class=\"line\"> </span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Elf64_Addr        r_offset;                &#x2F;* Address *&#x2F;</span><br><span class=\"line\">  Elf64_Xword        r_info;                 &#x2F;* Relocation type and symbol index *&#x2F;</span><br><span class=\"line\">  Elf64_Sxword        r_addend;              &#x2F;* Addend *&#x2F;</span><br><span class=\"line\">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Elf64_Sym</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint32_t</span> Elf64_Word;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint16_t</span> Elf64_Section;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Word        st_name;                <span class=\"comment\">/* Symbol name (string tbl index), 4 bytes */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>        st_info;             <span class=\"comment\">/* Symbol type and binding, 1 byte */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> st_other;                   <span class=\"comment\">/* Symbol visibility, 1 byte */</span></span><br><span class=\"line\">  Elf64_Section        st_shndx;            <span class=\"comment\">/* Section index, 2 bytes */</span></span><br><span class=\"line\">  Elf64_Addr        st_value;               <span class=\"comment\">/* Symbol value, 8 bytes */</span></span><br><span class=\"line\">  Elf64_Xword        st_size;               <span class=\"comment\">/* Symbol size, 8 bytes */</span></span><br><span class=\"line\">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>\n<p>libc/elf/dl-runtime.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (</span><br><span class=\"line\">   <span class=\"comment\">/* GKM <span class=\"doctag\">FIXME:</span> Fix trampoline to pass bounds so we can do</span></span><br><span class=\"line\"><span class=\"comment\">      without the `__unbounded' qualifier.  */</span></span><br><span class=\"line\">     struct link_map *__unbounded l, ElfW(Word) reloc_offset)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *<span class=\"keyword\">const</span> symtab</span></span><br><span class=\"line\"><span class=\"function\">    </span>= (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *strtab = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> PLTREL *<span class=\"keyword\">const</span> reloc</span><br><span class=\"line\">    = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> rel_addr = (<span class=\"keyword\">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class=\"line\">  <span class=\"keyword\">lookup_t</span> result;</span><br><span class=\"line\">  DL_FIXUP_VALUE_TYPE value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class=\"line\">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class=\"line\"><span class=\"comment\">      used don't look in the global scope.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class=\"number\">0</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_found_version</span> *<span class=\"title\">version</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *vernum </span>=</span><br><span class=\"line\">          (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class=\"line\">        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">        version = &amp;l-&gt;l_versions[ndx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (version-&gt;hash == <span class=\"number\">0</span>)</span><br><span class=\"line\">          version = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class=\"line\"><span class=\"comment\">       not necessary for objects which cannot be unloaded or when</span></span><br><span class=\"line\"><span class=\"comment\">       we are not using any threads (yet).  */</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        THREAD_GSCOPE_SET_FLAG ();</span><br><span class=\"line\">        flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class=\"line\">                            version, ELF_RTYPE_CLASS_PLT, flags, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We are done with the global scope.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      THREAD_GSCOPE_RESET_FLAG ();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Currently result contains the base load address (or link map)</span></span><br><span class=\"line\"><span class=\"comment\">       of the object that defines sym.  Now add in the symbol</span></span><br><span class=\"line\"><span class=\"comment\">       offset.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class=\"line\">                           sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class=\"line\">                                + sym-&gt;st_value) : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class=\"line\"><span class=\"comment\">       address) is also known.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class=\"line\">      result = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* And now perhaps the relocation addend.  */</span></span><br><span class=\"line\">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Finally, fix up the plt itself.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (GLRO(dl_bind_not), <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>elf/dl-lookup.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Search loaded objects' symbol tables for a definition of the symbol</span></span><br><span class=\"line\"><span class=\"comment\">   UNDEF_NAME, perhaps with a requested version for the symbol.</span></span><br><span class=\"line\"><span class=\"comment\">   We must never have calls to the audit functions inside this function</span></span><br><span class=\"line\"><span class=\"comment\">   or in any function which gets called.  If this would happen the audit</span></span><br><span class=\"line\"><span class=\"comment\">   code might create a thread which can throw off all the scope locking.  */</span></span><br><span class=\"line\"><span class=\"keyword\">lookup_t</span></span><br><span class=\"line\">_dl_lookup_symbol_x (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *undef_name, struct link_map *undef_map,</span><br><span class=\"line\">                     <span class=\"keyword\">const</span> ElfW(Sym) **ref,</span><br><span class=\"line\">                     struct r_scope_elem *symbol_scope[],</span><br><span class=\"line\">                     <span class=\"keyword\">const</span> struct r_found_version *version,</span><br><span class=\"line\">                     <span class=\"keyword\">int</span> type_class, <span class=\"keyword\">int</span> flags, struct link_map *skip_map);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><figcaption><span>字符串表strtab   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">reloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   </span><br><span class=\"line\">reloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  </span><br><span class=\"line\"></span><br><span class=\"line\">st_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  </span><br><span class=\"line\"></span><br><span class=\"line\">其他情况 会进入if语句   </span><br><span class=\"line\">首先获得符号的version信息 然后调用 &#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96; 函数从已装载的共享库中查找最终的符号地址 查找到符号sym后 对其进行重定位 即加上装载地址 保存在value中      </span><br><span class=\"line\">最后调用&#96;&#96;&#96;elf_machine_fixup_plt&#96;&#96;&#96;函数进行修正    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixup plt  回写.got.plt的项</span><br></pre></td></tr></table></figure>\n<p>static inline Elf64_Addr<br>elf_machine_fixup_plt (struct link_map *map, lookup_t t,<br>               const Elf64_Rela *reloc,<br>               Elf64_Addr *reloc_addr, Elf64_Addr value)<br>{<br>  return *reloc_addr = value;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96;   </span><br><span class=\"line\">...   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">got表和plt表在代码中是直接根据代码行的偏移获取的, 因此这里并无随机化过程   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### .got节内容  </span><br><span class=\"line\">未填充任何数据</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00000fb8 -l0x0000000000000048  so.so<br>00000fb8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fc8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fd8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fe8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000ff8: 0000 0000 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### .got.plt节  </span><br><span class=\"line\">0x200dc8  </span><br><span class=\"line\">0x0  </span><br><span class=\"line\">0x0  </span><br><span class=\"line\">0x6f6  </span><br><span class=\"line\">0x706</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00001000 -l0x0000000000000028  so.so<br>00001000: c80d 2000 0000 0000 0000 0000 0000 0000  .. ………….<br>00001010: 0000 0000 0000 0000 f606 0000 0000 0000  …………….<br>00001020: 0607 0000 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### .data节  </span><br><span class=\"line\">2101288  </span><br><span class=\"line\">100000  </span><br><span class=\"line\">0xff00ff00</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00001028 -l0x0000000000000018  so.so<br>00001028: 2810 2000 0000 0000 a086 0100 0000 0000  (. ………….<br>00001038: 00ff 00ff 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### pmap信息</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ pmap 9208<br>9208:   /home/zsummer/symbo/a.out<br>0000555555554000      4K r-x– a.out<br>0000555555754000      4K r—- a.out<br>0000555555755000    516K rw— a.out<br>00005555557d6000    132K rw—   [ anon ]<br>00007ffff6ef0000   1732K r-x– libc-2.27.so<br>00007ffff70a1000   2044K —– libc-2.27.so<br>00007ffff72a0000     16K r—- libc-2.27.so<br>00007ffff72a4000      8K rw— libc-2.27.so<br>00007ffff72a6000     16K rw—   [ anon ]<br>00007ffff72aa000     92K r-x– libgcc_s.so.1<br>00007ffff72c1000   2044K —– libgcc_s.so.1<br>00007ffff74c0000      4K r—- libgcc_s.so.1<br>00007ffff74c1000      4K rw— libgcc_s.so.1<br>00007ffff74c2000   1608K r-x– libm-2.27.so<br>00007ffff7654000   2044K —– libm-2.27.so<br>00007ffff7853000      4K r—- libm-2.27.so<br>00007ffff7854000      4K rw— libm-2.27.so<br>00007ffff7855000   1480K r-x– libstdc++.so.6.0.25<br>00007ffff79c7000   2048K —– libstdc++.so.6.0.25<br>00007ffff7bc7000     40K r—- libstdc++.so.6.0.25<br>00007ffff7bd1000      8K rw— libstdc++.so.6.0.25<br>00007ffff7bd3000     12K rw—   [ anon ]<br>00007ffff7bd6000      4K r-x– so.so<br>00007ffff7bd7000   2044K —– so.so<br>00007ffff7dd6000      4K r—- so.so<br>00007ffff7dd7000      4K rw— so.so<br>00007ffff7dd8000    148K r-x– ld-2.27.so<br>00007ffff7fd6000     20K rw—   [ anon ]<br>00007ffff7ff6000      8K rw—   [ anon ]<br>00007ffff7ff8000      8K r—-   [ anon ]<br>00007ffff7ffa000      8K r-x–   [ anon ]<br>00007ffff7ffc000      4K r—- ld-2.27.so<br>00007ffff7ffd000      4K rw— ld-2.27.so<br>00007ffff7ffe000      4K rw—   [ anon ]<br>00007ffffffde000    132K rw—   [ stack ]<br>ffffffffff600000      4K r-x–   [ anon ]<br> total            16260K</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 节信息</span><br></pre></td></tr></table></figure>\n<p>ELF 头：<br>  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>  类别:                              ELF64<br>  数据:                              2 补码，小端序 (little endian)<br>  版本:                              1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI 版本:                          0<br>  类型:                              DYN (共享目标文件)<br>  系统架构:                          Advanced Micro Devices X86-64<br>  版本:                              0x1<br>  入口点地址：              0x720<br>  程序头起点：              64 (bytes into file)<br>  Start of section headers:          6544 (bytes into file)<br>  标志：             0x0<br>  本头的大小：       64 (字节)<br>  程序头大小：       56 (字节)<br>  Number of program headers:         7<br>  节头大小：         64 (字节)<br>  节头数量：         28<br>  字符串表索引节头： 27</p>\n<p>节头：<br>  [号] 名称              类型             地址              偏移量<br>       大小              全体大小          旗标   链接   信息   对齐<br>  [ 0]                   NULL             0000000000000000  00000000<br>       0000000000000000  0000000000000000           0     0     0<br>  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8<br>       0000000000000024  0000000000000000   A       0     0     4<br>  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0<br>       0000000000000048  0000000000000000   A       3     0     8<br>  [ 3] .dynsym           DYNSYM           0000000000000238  00000238<br>       00000000000001b0  0000000000000018   A       4     1     8<br>  [ 4] .dynstr           STRTAB           00000000000003e8  000003e8<br>       000000000000013d  0000000000000000   A       0     0     1<br>  [ 5] .gnu.version      VERSYM           0000000000000526  00000526<br>       0000000000000024  0000000000000002   A       3     0     2<br>  [ 6] .gnu.version_r    VERNEED          0000000000000550  00000550<br>       0000000000000020  0000000000000000   A       4     1     8<br>  [ 7] .rela.dyn         RELA             0000000000000570  00000570<br>       0000000000000120  0000000000000018   A       3     0     8<br>  [ 8] .rela.plt         RELA             0000000000000690  00000690<br>       0000000000000030  0000000000000018  AI       3    21     8<br>  [ 9] .init             PROGBITS         00000000000006c0  000006c0<br>       0000000000000017  0000000000000000  AX       0     0     4<br>  [10] .plt              PROGBITS         00000000000006e0  000006e0<br>       0000000000000030  0000000000000010  AX       0     0     16<br>  [11] .plt.got          PROGBITS         0000000000000710  00000710<br>       0000000000000008  0000000000000000  AX       0     0     8<br>  [12] .text             PROGBITS         0000000000000720  00000720<br>       0000000000000282  0000000000000000  AX       0     0     16<br>  [13] .fini             PROGBITS         00000000000009a4  000009a4<br>       0000000000000009  0000000000000000  AX       0     0     4<br>  [14] .eh_frame_hdr     PROGBITS         00000000000009b0  000009b0<br>       0000000000000034  0000000000000000   A       0     0     4<br>  [15] .eh_frame         PROGBITS         00000000000009e8  000009e8<br>       00000000000000c4  0000000000000000   A       0     0     8<br>  [16] .init_array       INIT_ARRAY       0000000000200db0  00000db0<br>       0000000000000008  0000000000000008  WA       0     0     8<br>  [17] .fini_array       FINI_ARRAY       0000000000200db8  00000db8<br>       0000000000000008  0000000000000008  WA       0     0     8<br>  [18] .jcr              PROGBITS         0000000000200dc0  00000dc0<br>       0000000000000008  0000000000000000  WA       0     0     8<br>  [19] .dynamic          DYNAMIC          0000000000200dc8  00000dc8<br>       00000000000001f0  0000000000000010  WA       4     0     8<br>  [20] .got              PROGBITS         0000000000200fb8  00000fb8<br>       0000000000000048  0000000000000008  WA       0     0     8<br>  [21] .got.plt          PROGBITS         0000000000201000  00001000<br>       0000000000000028  0000000000000008  WA       0     0     8<br>  [22] .data             PROGBITS         0000000000201028  00001028<br>       0000000000000018  0000000000000000  WA       0     0     8<br>  [23] .bss              NOBITS           0000000000201040  00001040<br>       0000000000000010  0000000000000000  WA       0     0     8<br>  [24] .comment          PROGBITS         0000000000000000  00001040<br>       000000000000002d  0000000000000001  MS       0     0     1<br>  [25] .symtab           SYMTAB           0000000000000000  00001070<br>       00000000000005e8  0000000000000018          26    46     8<br>  [26] .strtab           STRTAB           0000000000000000  00001658<br>       0000000000000246  0000000000000000           0     0     1<br>  [27] .shstrtab         STRTAB           0000000000000000  0000189e<br>       00000000000000ee  0000000000000000           0     0     1<br>Key to Flags:<br>  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>  L (link order), O (extra OS processing required), G (group), T (TLS),<br>  C (compressed), x (unknown), o (OS specific), E (exclude),<br>  l (large), p (processor specific)</p>\n<p>There are no section groups in this file.</p>\n<p>程序头：<br>  Type           Offset             VirtAddr           PhysAddr<br>                 FileSiz            MemSiz              Flags  Align<br>  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000<br>                 0x0000000000000aac 0x0000000000000aac  R E    0x200000<br>  LOAD           0x0000000000000db0 0x0000000000200db0 0x0000000000200db0<br>                 0x0000000000000290 0x00000000000002a0  RW     0x200000<br>  DYNAMIC        0x0000000000000dc8 0x0000000000200dc8 0x0000000000200dc8<br>                 0x00000000000001f0 0x00000000000001f0  RW     0x8<br>  NOTE           0x00000000000001c8 0x00000000000001c8 0x00000000000001c8<br>                 0x0000000000000024 0x0000000000000024  R      0x4<br>  GNU_EH_FRAME   0x00000000000009b0 0x00000000000009b0 0x00000000000009b0<br>                 0x0000000000000034 0x0000000000000034  R      0x4<br>  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000<br>                 0x0000000000000000 0x0000000000000000  RW     0x10<br>  GNU_RELRO      0x0000000000000db0 0x0000000000200db0 0x0000000000200db0<br>                 0x0000000000000250 0x0000000000000250  R      0x1</p>\n<p> Section to Segment mapping:<br>  段节…<br>   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .eh_frame_hdr .eh_frame<br>   01     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss<br>   02     .dynamic<br>   03     .note.gnu.build-id<br>   04     .eh_frame_hdr<br>   05<br>   06     .init_array .fini_array .jcr .dynamic .got </p>\n<p>Dynamic section at offset 0xdc8 contains 27 entries:<br>  标记        类型                         名称/值<br> 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]<br> 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]<br> 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]<br> 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]<br> 0x000000000000000c (INIT)               0x6c0<br> 0x000000000000000d (FINI)               0x9a4<br> 0x0000000000000019 (INIT_ARRAY)         0x200db0<br> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)<br> 0x000000000000001a (FINI_ARRAY)         0x200db8<br> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)<br> 0x000000006ffffef5 (GNU_HASH)           0x1f0<br> 0x0000000000000005 (STRTAB)             0x3e8<br> 0x0000000000000006 (SYMTAB)             0x238<br> 0x000000000000000a (STRSZ)              317 (bytes)<br> 0x000000000000000b (SYMENT)             24 (bytes)<br> 0x0000000000000003 (PLTGOT)             0x201000<br> 0x0000000000000002 (PLTRELSZ)           48 (bytes)<br> 0x0000000000000014 (PLTREL)             RELA<br> 0x0000000000000017 (JMPREL)             0x690<br> 0x0000000000000007 (RELA)               0x570<br> 0x0000000000000008 (RELASZ)             288 (bytes)<br> 0x0000000000000009 (RELAENT)            24 (bytes)<br> 0x000000006ffffffe (VERNEED)            0x550<br> 0x000000006fffffff (VERNEEDNUM)         1<br> 0x000000006ffffff0 (VERSYM)             0x526<br> 0x000000006ffffff9 (RELACOUNT)          3<br> 0x0000000000000000 (NULL)               0x0</p>\n<p>重定位节 ‘.rela.dyn’ 位于偏移量 0x570 含有 12 个条目：<br>  偏移量          信息           类型           符号值        符号名称 + 加数<br>000000200db0  000000000008 R_X86_64_RELATIVE                    7f0<br>000000200db8  000000000008 R_X86_64_RELATIVE                    7b0<br>000000201028  000000000008 R_X86_64_RELATIVE                    201028<br>000000200fb8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 <strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a> + 0<br>000000200fc0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_data + 0<br>000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_bss + 0<br>000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0<br>000000200fd8  001100000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0<br>000000200fe0  000d00000006 R_X86_64_GLOB_DAT 0000000000201048 g_static_so_bss + 0<br>000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0<br>000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start</strong> + 0<br>000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</p>\n<p>重定位节 ‘.rela.plt’ 位于偏移量 0x690 含有 2 个条目：<br>  偏移量          信息           类型           符号值        符号名称 + 加数<br>000000201018  001000000007 R_X86_64_JUMP_SLO 0000000000000820 _Z13so_child_funcii + 0<br>000000201020  000600000007 R_X86_64_JUMP_SLO 0000000000000000 _Z8lib_funcii + 0</p>\n<p>The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</p>\n<p>Symbol table ‘.dynsym’ contains 18 entries:<br>   Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND<br>     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND <strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a> (2)<br>     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data<br>     3: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss<br>     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses<br>     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab<br>     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii<br>     7: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start</strong><br>     8: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable<br>     9: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata<br>    10: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end<br>    11: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init<br>    12: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start<br>    13: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss<br>    14: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii<br>    15: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini<br>    16: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii<br>    17: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data</p>\n<p>Symbol table ‘.symtab’ contains 63 entries:<br>   Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND<br>     1: 00000000000001c8     0 SECTION LOCAL  DEFAULT    1<br>     2: 00000000000001f0     0 SECTION LOCAL  DEFAULT    2<br>     3: 0000000000000238     0 SECTION LOCAL  DEFAULT    3<br>     4: 00000000000003e8     0 SECTION LOCAL  DEFAULT    4<br>     5: 0000000000000526     0 SECTION LOCAL  DEFAULT    5<br>     6: 0000000000000550     0 SECTION LOCAL  DEFAULT    6<br>     7: 0000000000000570     0 SECTION LOCAL  DEFAULT    7<br>     8: 0000000000000690     0 SECTION LOCAL  DEFAULT    8<br>     9: 00000000000006c0     0 SECTION LOCAL  DEFAULT    9<br>    10: 00000000000006e0     0 SECTION LOCAL  DEFAULT   10<br>    11: 0000000000000710     0 SECTION LOCAL  DEFAULT   11<br>    12: 0000000000000720     0 SECTION LOCAL  DEFAULT   12<br>    13: 00000000000009a4     0 SECTION LOCAL  DEFAULT   13<br>    14: 00000000000009b0     0 SECTION LOCAL  DEFAULT   14<br>    15: 00000000000009e8     0 SECTION LOCAL  DEFAULT   15<br>    16: 0000000000200db0     0 SECTION LOCAL  DEFAULT   16<br>    17: 0000000000200db8     0 SECTION LOCAL  DEFAULT   17<br>    18: 0000000000200dc0     0 SECTION LOCAL  DEFAULT   18<br>    19: 0000000000200dc8     0 SECTION LOCAL  DEFAULT   19<br>    20: 0000000000200fb8     0 SECTION LOCAL  DEFAULT   20<br>    21: 0000000000201000     0 SECTION LOCAL  DEFAULT   21<br>    22: 0000000000201028     0 SECTION LOCAL  DEFAULT   22<br>    23: 0000000000201040     0 SECTION LOCAL  DEFAULT   23<br>    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24<br>    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c<br>    26: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 <strong>JCR_LIST</strong><br>    27: 0000000000000720     0 FUNC    LOCAL  DEFAULT   12 deregister_tm_clones<br>    28: 0000000000000760     0 FUNC    LOCAL  DEFAULT   12 register_tm_clones<br>    29: 00000000000007b0     0 FUNC    LOCAL  DEFAULT   12 <strong>do_global_dtors_aux<br>    30: 0000000000201040     1 OBJECT  LOCAL  DEFAULT   23 completed.6972<br>    31: 0000000000200db8     0 OBJECT  LOCAL  DEFAULT   17 <em>_do_global_dtors_aux_fin<br>    32: 00000000000007f0     0 FUNC    LOCAL  DEFAULT   12 frame_dummy<br>    33: 0000000000200db0     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array</em><br>    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp<br>    35: 0000000000201038     8 OBJECT  LOCAL  DEFAULT   22 _ZL15g_local_so_data<br>    36: 0000000000000870    40 FUNC    LOCAL  DEFAULT   12 _ZL13so_local_funcv<br>    37: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c<br>    38: 0000000000000aa8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END</strong><br>    39: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 <strong>JCR_END</strong><br>    40: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS<br>    41: 00000000000009b0     0 NOTYPE  LOCAL  DEFAULT   14 <strong>GNU_EH_FRAME_HDR<br>    42: 0000000000201028     0 OBJECT  LOCAL  DEFAULT   22 __dso_handle<br>    43: 0000000000200dc8     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC<br>    44: 0000000000201040     0 OBJECT  LOCAL  DEFAULT   22 __TMC_END</strong><br>    45: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   21 <em>GLOBAL_OFFSET_TABLE</em><br>    46: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 <em>edata<br>    47: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND <em>_cxa_finalize@@GLIBC_2.2<br>    48: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data<br>    49: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini<br>    50: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii<br>    51: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss<br>    52: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init<br>    53: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses<br>    54: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data<br>    55: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end<br>    56: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start<br>    57: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss<br>    58: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii<br>    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab<br>    60: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii<br>    61: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start</em></em><br>    62: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</p>\n<p>Histogram for `.gnu.hash’ bucket list length (total of 3 buckets):<br> Length  Number     % of total  Coverage<br>      0  0          (  0.0%)<br>      1  0          (  0.0%)      0.0%<br>      2  1          ( 33.3%)     22.2%<br>      3  1          ( 33.3%)     55.6%<br>      4  1          ( 33.3%)    100.0%</p>\n<p>Version symbols section ‘.gnu.version’ contains 18 entries:<br> 地址：0000000000000526  Offset: 0x000526  Link: 3 (.dynsym)<br>  000:   0 (<em>本地</em>)       2 (GLIBC_2.2.5)   0 (<em>本地</em>)       0 (<em>本地</em>)<br>  004:   0 (<em>本地</em>)       0 (<em>本地</em>)       0 (<em>本地</em>)       0 (<em>本地</em>)<br>  008:   0 (<em>本地</em>)       1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)<br>  00c:   1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)<br>  010:   1 (<em>全局</em>)      1 (<em>全局</em>)   </p>\n<p>Version needs section ‘.gnu.version_r’ contains 1 entries:<br> 地址：0x0000000000000550  Offset: 0x000550  Link: 4 (.dynstr)<br>  000000: 版本: 1  文件：libc.so.6  计数：1<br>  0x0010：名称：GLIBC_2.2.5  标志：无  版本：2</p>\n<p>Displaying notes found in: .note.gnu.build-id<br>  所有者             Data size  Description<br>  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)<br>    Build ID: 09ce242e3867431b496a7f5928e9817fa91d242a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 代码节</span><br></pre></td></tr></table></figure>\n<p>so.so：     文件格式 elf64-x86-64</p>\n<p>Disassembly of section .init:</p>\n<p>00000000000006c0 &lt;<em>init&gt;:<br> 6c0:   48 83 ec 08             sub    $0x8,%rsp<br> 6c4:   48 8b 05 25 09 20 00    mov    0x200925(%rip),%rax        # 200ff0 &lt;<em>_gmon_start</em></em>&gt;<br> 6cb:   48 85 c0                test   %rax,%rax<br> 6ce:   74 02                   je     6d2 &lt;_init+0x12&gt;<br> 6d0:   ff d0                   callq  *%rax<br> 6d2:   48 83 c4 08             add    $0x8,%rsp<br> 6d6:   c3                      retq   </p>\n<p>Disassembly of section .plt:</p>\n<p>00000000000006e0 &lt;.plt&gt;:<br> 6e0:   ff 35 22 09 20 00       pushq  0x200922(%rip)        # 201008 &lt;<em>GLOBAL_OFFSET_TABLE</em>+0x8&gt;<br> 6e6:   ff 25 24 09 20 00       jmpq   *0x200924(%rip)        # 201010 &lt;<em>GLOBAL_OFFSET_TABLE</em>+0x10&gt;<br> 6ec:   0f 1f 40 00             nopl   0x0(%rax)</p>\n<p>00000000000006f0 &lt;_Z13so_child_funcii@plt&gt;:<br> 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 &lt;_Z13so_child_funcii@@Base+0x2007f8&gt;<br> 6f6:   68 00 00 00 00          pushq  $0x0<br> 6fb:   e9 e0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>0000000000000700 &lt;_Z8lib_funcii@plt&gt;:<br> 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 &lt;_Z8lib_funcii&gt;<br> 706:   68 01 00 00 00          pushq  $0x1<br> 70b:   e9 d0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>Disassembly of section .plt.got:</p>\n<p>0000000000000710 &lt;.plt.got&gt;:<br> 710:   ff 25 a2 08 20 00       jmpq   *0x2008a2(%rip)        # 200fb8 &lt;<a href=\"mailto:__cxa_finalize@GLIBC_2.2.5\">__cxa_finalize@GLIBC_2.2.5</a>&gt;<br> 716:   66 90                   xchg   %ax,%ax</p>\n<p>Disassembly of section .text:</p>\n<p>0000000000000720 <deregister_tm_clones>:<br> 720:   48 8d 3d 19 09 20 00    lea    0x200919(%rip),%rdi        # 201040 &lt;_edata&gt;<br> 727:   48 8d 05 19 09 20 00    lea    0x200919(%rip),%rax        # 201047 &lt;_edata+0x7&gt;<br> 72e:   55                      push   %rbp<br> 72f:   48 29 f8                sub    %rdi,%rax<br> 732:   48 89 e5                mov    %rsp,%rbp<br> 735:   48 83 f8 0e             cmp    $0xe,%rax<br> 739:   76 15                   jbe    750 &lt;deregister_tm_clones+0x30&gt;<br> 73b:   48 8b 05 a6 08 20 00    mov    0x2008a6(%rip),%rax        # 200fe8 &lt;_ITM_deregisterTMCloneTable&gt;<br> 742:   48 85 c0                test   %rax,%rax<br> 745:   74 09                   je     750 &lt;deregister_tm_clones+0x30&gt;<br> 747:   5d                      pop    %rbp<br> 748:   ff e0                   jmpq   *%rax<br> 74a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)<br> 750:   5d                      pop    %rbp<br> 751:   c3                      retq<br> 752:   0f 1f 40 00             nopl   0x0(%rax)<br> 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 75d:   00 00 00 </deregister_tm_clones></p>\n<p>0000000000000760 <register_tm_clones>:<br> 760:   48 8d 3d d9 08 20 00    lea    0x2008d9(%rip),%rdi        # 201040 &lt;_edata&gt;<br> 767:   48 8d 35 d2 08 20 00    lea    0x2008d2(%rip),%rsi        # 201040 &lt;_edata&gt;<br> 76e:   55                      push   %rbp<br> 76f:   48 29 fe                sub    %rdi,%rsi<br> 772:   48 89 e5                mov    %rsp,%rbp<br> 775:   48 c1 fe 03             sar    $0x3,%rsi<br> 779:   48 89 f0                mov    %rsi,%rax<br> 77c:   48 c1 e8 3f             shr    $0x3f,%rax<br> 780:   48 01 c6                add    %rax,%rsi<br> 783:   48 d1 fe                sar    %rsi<br> 786:   74 18                   je     7a0 &lt;register_tm_clones+0x40&gt;<br> 788:   48 8b 05 69 08 20 00    mov    0x200869(%rip),%rax        # 200ff8 &lt;_ITM_registerTMCloneTable&gt;<br> 78f:   48 85 c0                test   %rax,%rax<br> 792:   74 0c                   je     7a0 &lt;register_tm_clones+0x40&gt;<br> 794:   5d                      pop    %rbp<br> 795:   ff e0                   jmpq   *%rax<br> 797:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)<br> 79e:   00 00<br> 7a0:   5d                      pop    %rbp<br> 7a1:   c3                      retq<br> 7a2:   0f 1f 40 00             nopl   0x0(%rax)<br> 7a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 7ad:   00 00 00 </register_tm_clones></p>\n<p>00000000000007b0 &lt;<strong>do_global_dtors_aux&gt;:<br> 7b0:   80 3d 89 08 20 00 00    cmpb   $0x0,0x200889(%rip)        # 201040 &lt;_edata&gt;<br> 7b7:   75 27                   jne    7e0 &lt;</strong>do_global_dtors_aux+0x30&gt;<br> 7b9:   48 83 3d f7 07 20 00    cmpq   $0x0,0x2007f7(%rip)        # 200fb8 &lt;<strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a>&gt;<br> 7c0:   00<br> 7c1:   55                      push   %rbp<br> 7c2:   48 89 e5                mov    %rsp,%rbp<br> 7c5:   74 0c                   je     7d3 &lt;</strong>do_global_dtors_aux+0x23&gt;<br> 7c7:   48 8b 3d 5a 08 20 00    mov    0x20085a(%rip),%rdi        # 201028 &lt;__dso_handle&gt;<br> 7ce:   e8 3d ff ff ff          callq  710 &lt;.plt.got&gt;<br> 7d3:   e8 48 ff ff ff          callq  720 <deregister_tm_clones><br> 7d8:   5d                      pop    %rbp<br> 7d9:   c6 05 60 08 20 00 01    movb   $0x1,0x200860(%rip)        # 201040 &lt;_edata&gt;<br> 7e0:   f3 c3                   repz retq<br> 7e2:   0f 1f 40 00             nopl   0x0(%rax)<br> 7e6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 7ed:   00 00 00 </deregister_tm_clones></p>\n<p>00000000000007f0 <frame_dummy>:<br> 7f0:   48 8d 3d c9 05 20 00    lea    0x2005c9(%rip),%rdi        # 200dc0 &lt;<strong>JCR_END</strong>&gt;<br> 7f7:   48 83 3f 00             cmpq   $0x0,(%rdi)<br> 7fb:   75 0b                   jne    808 &lt;frame_dummy+0x18&gt;<br> 7fd:   e9 5e ff ff ff          jmpq   760 <register_tm_clones><br> 802:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)<br> 808:   48 8b 05 c1 07 20 00    mov    0x2007c1(%rip),%rax        # 200fd0 &lt;_Jv_RegisterClasses&gt;<br> 80f:   48 85 c0                test   %rax,%rax<br> 812:   74 e9                   je     7fd &lt;frame_dummy+0xd&gt;<br> 814:   55                      push   %rbp<br> 815:   48 89 e5                mov    %rsp,%rbp<br> 818:   ff d0                   callq  *%rax<br> 81a:   5d                      pop    %rbp<br> 81b:   e9 40 ff ff ff          jmpq   760 <register_tm_clones></register_tm_clones></register_tm_clones></frame_dummy></p>\n<p>0000000000000820 &lt;_Z13so_child_funcii&gt;:<br> 820:   55                      push   %rbp<br> 821:   48 89 e5                mov    %rsp,%rbp<br> 824:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 824 &lt;_Z13so_child_funcii+0x4&gt;<br> 82b:   49 bb dc 07 20 00 00    movabs $0x2007dc,%r11<br> 832:   00 00 00<br> 835:   4c 01 d8                add    %r11,%rax<br> 838:   89 7d fc                mov    %edi,-0x4(%rbp)<br> 83b:   89 75 f8                mov    %esi,-0x8(%rbp)<br> 83e:   8b 4d fc                mov    -0x4(%rbp),%ecx<br> 841:   8b 55 f8                mov    -0x8(%rbp),%edx<br> 844:   01 ca                   add    %ecx,%edx<br> 846:   89 d1                   mov    %edx,%ecx<br> 848:   48 ba e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rdx<br> 84f:   ff ff ff<br> 852:   48 8b 14 10             mov    (%rax,%rdx,1),%rdx<br> 856:   48 8b 12                mov    (%rdx),%rdx<br> 859:   01 d1                   add    %edx,%ecx<br> 85b:   48 ba d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rdx<br> 862:   ff ff ff<br> 865:   48 8b 04 10             mov    (%rax,%rdx,1),%rax<br> 869:   48 8b 00                mov    (%rax),%rax<br> 86c:   01 c8                   add    %ecx,%eax<br> 86e:   5d                      pop    %rbp<br> 86f:   c3                      retq   </p>\n<p>0000000000000870 &lt;_ZL13so_local_funcv&gt;:<br> 870:   55                      push   %rbp<br> 871:   48 89 e5                mov    %rsp,%rbp<br> 874:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 874 &lt;_ZL13so_local_funcv+0x4&gt;<br> 87b:   49 bb 8c 07 20 00 00    movabs $0x20078c,%r11<br> 882:   00 00 00<br> 885:   4c 01 d8                add    %r11,%rax<br> 888:   48 ba 38 00 00 00 00    movabs $0x38,%rdx<br> 88f:   00 00 00<br> 892:   48 8b 04 10             mov    (%rax,%rdx,1),%rax<br> 896:   5d                      pop    %rbp<br> 897:   c3                      retq   </p>\n<p>0000000000000898 &lt;_Z7so_funcii&gt;:<br> 898:   55                      push   %rbp<br> 899:   48 89 e5                mov    %rsp,%rbp<br> 89c:   41 57                   push   %r15<br> 89e:   53                      push   %rbx<br> 89f:   48 83 ec 20             sub    $0x20,%rsp<br> 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 &lt;_Z7so_funcii+0xb&gt;<br> 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11<br> 8b1:   00 00 00<br> 8b4:   4c 01 db                add    %r11,%rbx<br> 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)<br> 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)<br> 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 8c4:   ff ff ff<br> 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8cb:   48 8b 00                mov    (%rax),%rax<br> 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx<br> 8d2:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 8d9:   ff ff ff<br> 8dc:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8e0:   48 89 10                mov    %rdx,(%rax)<br> 8e3:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 8ea:   ff ff ff<br> 8ed:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8f1:   48 8b 00                mov    (%rax),%rax<br> 8f4:   48 8d 50 01             lea    0x1(%rax),%rdx<br> 8f8:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 8ff:   ff ff ff<br> 902:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 906:   48 89 10                mov    %rdx,(%rax)<br> 909:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 910:   ff ff ff<br> 913:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 917:   48 8b 00                mov    (%rax),%rax<br> 91a:   89 c2                   mov    %eax,%edx<br> 91c:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 923:   ff ff ff<br> 926:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 92a:   48 8b 00                mov    (%rax),%rax<br> 92d:   89 d6                   mov    %edx,%esi<br> 92f:   89 c7                   mov    %eax,%edi<br> 931:   49 89 df                mov    %rbx,%r15<br> 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax<br> 93b:   ff ff ff<br> 93e:   48 01 d8                add    %rbx,%rax<br> 941:   ff d0                   callq  *%rax<br> 943:   89 45 ec                mov    %eax,-0x14(%rbp)<br> 946:   48 b8 c8 ff ff ff ff    movabs $0xffffffffffffffc8,%rax<br> 94d:   ff ff ff<br> 950:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 954:   48 8b 00                mov    (%rax),%rax<br> 957:   89 c2                   mov    %eax,%edx<br> 959:   48 b8 c0 ff ff ff ff    movabs $0xffffffffffffffc0,%rax<br> 960:   ff ff ff<br> 963:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 967:   48 8b 00                mov    (%rax),%rax<br> 96a:   89 d6                   mov    %edx,%esi<br> 96c:   89 c7                   mov    %eax,%edi<br> 96e:   49 89 df                mov    %rbx,%r15<br> 971:   48 b8 f0 f6 df ff ff    movabs $0xffffffffffdff6f0,%rax<br> 978:   ff ff ff<br> 97b:   48 01 d8                add    %rbx,%rax<br> 97e:   ff d0                   callq  *%rax<br> 980:   01 45 ec                add    %eax,-0x14(%rbp)<br> 983:   48 b8 70 f8 df ff ff    movabs $0xffffffffffdff870,%rax<br> 98a:   ff ff ff<br> 98d:   48 8d 04 03             lea    (%rbx,%rax,1),%rax<br> 991:   ff d0                   callq  *%rax<br> 993:   01 45 ec                add    %eax,-0x14(%rbp)<br> 996:   8b 45 ec                mov    -0x14(%rbp),%eax<br> 999:   48 83 c4 20             add    $0x20,%rsp<br> 99d:   5b                      pop    %rbx<br> 99e:   41 5f                   pop    %r15<br> 9a0:   5d                      pop    %rbp<br> 9a1:   c3                      retq   </p>\n<p>Disassembly of section .fini:</p>\n<p>00000000000009a4 &lt;_fini&gt;:<br> 9a4:   48 83 ec 08             sub    $0x8,%rsp<br> 9a8:   48 83 c4 08             add    $0x8,%rsp<br> 9ac:   c3                      retq   </p>\n<pre><code>\n### 动态库装载过程  \n[linux kernel 源码](https://elixir.bootlin.com/linux/latest/source)  \n\n#### ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\nLD_SHOW_AUXV=1 whoami \n\n#### load_elf_binary函数  \n* 填充并且检查目标程序ELF头部\n* load_elf_phdrs加载目标程序的程序头表\n* 如果需要动态链接, 则寻找和处理解释器段\n* 检查并读取解释器的程序表头\n* 装入目标程序的段segment\n* create_elf_tables填写目标文件的参数环境变量等必要信息\n* start_kernel宏准备进入新的程序入口\n\n\n\n\n\n\n\n\n\n&lt;/font&gt;</code></pre></font>","site":{"data":{}},"excerpt":"<font color=#ff6688>  \n\n<h3 id=\"1-目录\"><a href=\"#1-目录\" class=\"headerlink\" title=\"..1. 目录\"></a>..1. 目录</h3><!-- TOC -->\n\n<ul>\n<li><a href=\"#1-目录\">..1. 目录</a></li>\n<li><a href=\"#2-准备工具和基础汇编知识\">..2. 准备工具和基础汇编知识</a></li>\n<li><a href=\"#3-编译链接过程的基本原理和流程\">..3. 编译链接过程的基本原理和流程</a><ul>\n<li><a href=\"#31-gcc中编译一个源文件可以拆分为4个部分\">..3.1. gcc中编译一个源文件可以拆分为4个部分</a></li>\n<li><a href=\"#32-编译单元translation-environment-编译的转换阶段-\">..3.2. 编译单元(Translation environment), 编译的转换阶段 :</a></li>\n<li><a href=\"#33-pic-pie-位置无关代码\">..3.3. PIC PIE 位置无关代码</a></li>\n<li><a href=\"#34-got-plt-全局偏移表-链接过程表\">..3.4. GOT PLT 全局偏移表 链接过程表</a></li>\n<li><a href=\"#35-符号表和符号\">..3.5. 符号表和符号</a><ul>\n<li><a href=\"#351-全局符号和局部符号\">..3.5.1. 全局符号和局部符号</a></li>\n<li><a href=\"#352-外部符号和内部符号\">..3.5.2. 外部符号和内部符号</a></li>\n<li><a href=\"#353-和字符串表的关系\">..3.5.3. 和字符串表的关系</a></li>\n</ul>\n</li>\n<li><a href=\"#36-静态链接过程\">..3.6. 静态链接过程</a></li>\n<li><a href=\"#37-动态链接过程\">..3.7. 动态链接过程</a></li>\n</ul>\n</li>\n<li><a href=\"#4-跟踪调测\">..4. 跟踪调测</a><ul>\n<li><a href=\"#41-测试源码\">..4.1. 测试源码</a></li>\n<li><a href=\"#42-位置有关的重定位分析\">..4.2. 位置有关的重定位分析</a><ul>\n<li><a href=\"#421-分析结论如下\">..4.2.1. 分析结论如下:</a></li>\n<li><a href=\"#422-系统源码参考\">..4.2.2. 系统源码参考:</a></li>\n<li><a href=\"#423-字符串数据\">..4.2.3. 字符串数据</a></li>\n<li><a href=\"#424-节信息\">..4.2.4. 节信息</a></li>\n<li><a href=\"#425-text数据\">..4.2.5. text数据</a></li>\n</ul>\n</li>\n<li><a href=\"#43-位置无关的重定位分析\">..4.3. 位置无关的重定位分析</a><ul>\n<li><a href=\"#431-分析说明\">..4.3.1. 分析说明</a></li>\n<li><a href=\"#432-全局数据访问代码分析\">..4.3.2. 全局数据访问代码分析</a></li>\n<li><a href=\"#433-全局函数访问代码分析\">..4.3.3. 全局函数访问代码分析</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#动态库装载过程\">动态库装载过程</a><ul>\n<li><a href=\"#elf的辅助向量-auxv\">ELF的辅助向量 AUXV</a></li>\n<li><a href=\"#load_elf_binary函数\">load_elf_binary函数</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n<h3 id=\"2-准备工具和基础汇编知识\"><a href=\"#2-准备工具和基础汇编知识\" class=\"headerlink\" title=\"..2. 准备工具和基础汇编知识\"></a>..2. 准备工具和基础汇编知识</h3><ul>\n<li>readelf -a  查看elf信息  </li>\n<li>objdump -S 查看汇编指令  </li>\n<li>ldd 查看动态加载   </li>\n<li>xxd - make a hexdump or do the reverse.</li>\n<li>gdb  <ul>\n<li>gdb 通过<code>layout regs</code>打开寄存器显示, 通过<code>set disassemble-next-line on</code>打开汇编  </li>\n<li>gdb 通过peda插件字节显示汇编和寄存器  和上面的原生方式选择一个即可    </li>\n<li>gdb关闭ASLR：<ul>\n<li>set disable-randomization on</li>\n</ul>\n</li>\n<li>开启ASLR：<ul>\n<li>set disable-randomization off</li>\n</ul>\n</li>\n<li>查看ASLR状态：<ul>\n<li>show disable-randomization</li>\n</ul>\n</li>\n<li>disas反汇编命令，直接disas是反汇编当前函数<ul>\n<li>disas /r (显示汇编指令对应十六进制值)   </li>\n<li>disas /m (如果有源码，显示对应行源码)   </li>\n</ul>\n</li>\n<li>intel语法<ul>\n<li>set disassembly-flavor intel</li>\n<li>set disassembly-flavor att  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>详细工具和汇编的基础知识见上一篇文章: <a href=\"https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/\">汇编语法/寻址/寄存器/代码模型(GNU assembler) </a>  </li>\n</ul>","more":"<h3 id=\"3-编译链接过程的基本原理和流程\"><a href=\"#3-编译链接过程的基本原理和流程\" class=\"headerlink\" title=\"..3. 编译链接过程的基本原理和流程\"></a>..3. 编译链接过程的基本原理和流程</h3><p>C和C++均使用分离编译来支持多源文件模块化机制, 因此也带来了静态和动态的链接问题, 本文主要梳理了静态库的链接过程和动态链接过程.    </p>\n<h4 id=\"3-1-gcc中编译一个源文件可以拆分为4个部分\"><a href=\"#3-1-gcc中编译一个源文件可以拆分为4个部分\" class=\"headerlink\" title=\"..3.1. gcc中编译一个源文件可以拆分为4个部分\"></a>..3.1. gcc中编译一个源文件可以拆分为4个部分</h4><ol>\n<li>预处理 -E</li>\n<li>编译器 -S</li>\n<li>目标文件 -C</li>\n<li>链接为共享库或者可执行程序   </li>\n</ol>\n<h4 id=\"3-2-编译单元-Translation-environment-编译的转换阶段\"><a href=\"#3-2-编译单元-Translation-environment-编译的转换阶段\" class=\"headerlink\" title=\"..3.2. 编译单元(Translation environment), 编译的转换阶段 :\"></a>..3.2. 编译单元(Translation environment), 编译的转换阶段 :</h4><blockquote>\n<p>[ISO/IEC 9899:1999]A C program need not all be translated at the same time.The text of the program is kept in units called source files, (or preprocessing files) in this International Standard.A source file together with all the headers and source files included via the preprocessing directive #include is known as a preprocessing translation unit. After preprocessing, a preprocessing translation unit is called a translation unit.<br>Previously translated translation units may be preserved individually or in libraries. The separate translation units of a program communicate by (for example) calls to functions whose identifiers have external linkage, manipulation of objects whose identifiers have external linkage, or manipulation of data files. Translation units may be separately translated and then later linked to produce an executable program.  </p>\n</blockquote>\n<blockquote>\n<p>C语言的程序不需要一同时间翻译, 在这个国际标准中, 程序的文本内容以源文件(或者预处理文件)为单位保存, 一个源文件连同所有通过预处理指令#include包含的头文件和源文件被称为预处理翻译单元, 经过预处理后的翻译单元称为翻译单元.  翻译单位可以单独保存，也可以打包在程序库里. 程序的独立翻译单元通过(例如) 调用具有外部链接标识的函数, 处理具有外部链接标识的对象完成连接过程.  翻译单元可以独立翻译然后通过链接生成可执行程序.   </p>\n</blockquote>\n<h4 id=\"3-3-PIC-PIE-位置无关代码\"><a href=\"#3-3-PIC-PIE-位置无关代码\" class=\"headerlink\" title=\"..3.3. PIC PIE 位置无关代码\"></a>..3.3. PIC PIE 位置无关代码</h4><p>编译出的二进制指令不使用绝对地址而使用相对地址称为PIC 技术<br>PIE和PIC的区别在于PIE假定了代码最终会被直接链接为可执行程序    </p>\n<h4 id=\"3-4-GOT-PLT-全局偏移表-链接过程表\"><a href=\"#3-4-GOT-PLT-全局偏移表-链接过程表\" class=\"headerlink\" title=\"..3.4. GOT PLT 全局偏移表 链接过程表\"></a>..3.4. GOT PLT 全局偏移表 链接过程表</h4><p>这两个表完成了上面<a href=\"#编译单元translation-environment-编译的转换阶段-\">编译单元</a>中所说的处理过程  </p>\n<h4 id=\"3-5-符号表和符号\"><a href=\"#3-5-符号表和符号\" class=\"headerlink\" title=\"..3.5. 符号表和符号\"></a>..3.5. 符号表和符号</h4><h5 id=\"3-5-1-全局符号和局部符号\"><a href=\"#3-5-1-全局符号和局部符号\" class=\"headerlink\" title=\"..3.5.1. 全局符号和局部符号\"></a>..3.5.1. 全局符号和局部符号</h5><p>符号的全局和局部是相对于编译单元而言的,  例如添加了static前缀的全局变量或者函数只在当前的编译单元可见, 因此是局部的 .<br>重定位不关心局部符号,  而对于在函数内声明的局部变量的名字并不会存储到符号表 完全由运行时栈来维护,(-g选项可以在.debug中找到符号).<br>符号表是为了编译单元之间建立联系使用的, 比如重定位.   </p>\n<h5 id=\"3-5-2-外部符号和内部符号\"><a href=\"#3-5-2-外部符号和内部符号\" class=\"headerlink\" title=\"..3.5.2. 外部符号和内部符号\"></a>..3.5.2. 外部符号和内部符号</h5><p>外部符号是指的当前编译单元使用但是却不在当前编译单元定义的符号.   </p>\n<h5 id=\"3-5-3-和字符串表的关系\"><a href=\"#3-5-3-和字符串表的关系\" class=\"headerlink\" title=\"..3.5.3. 和字符串表的关系\"></a>..3.5.3. 和字符串表的关系</h5><p>符号表的name字段是字符串表的索引,  也就是说, 符号表本身并不存储符号的’字符串’名.<br>字符串表除了保存符号名外, 还保存常量字符串的值  </p>\n<h4 id=\"3-6-静态链接过程\"><a href=\"#3-6-静态链接过程\" class=\"headerlink\" title=\"..3.6. 静态链接过程\"></a>..3.6. 静态链接过程</h4><ol>\n<li>编译阶段  <ol>\n<li>建立字符串表,符号表, 保存符号对应的声明信息.  </li>\n<li>建立重定位表, 对全局符号的访问都标记出准确的偏移地址  </li>\n</ol>\n</li>\n<li>链接生成阶段  <ol>\n<li>合并目标文件中相同的节, 确定虚拟内存地址(pic技术只确定相对地址)  </li>\n<li>重建重定位表和符号表   </li>\n<li>使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   </li>\n</ol>\n</li>\n<li>运行时  <ol>\n<li>所有地址已经完成重定位 对全局符号的访问不存在中间过程   </li>\n<li>如果未非位置无关代码, 则对全局符号的访问为立即数即为分配好的实际地址  </li>\n<li>如果是位置无关代码, 则对全局符号的访问需要用rip计算相对偏移.  </li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3-7-动态链接过程\"><a href=\"#3-7-动态链接过程\" class=\"headerlink\" title=\"..3.7. 动态链接过程\"></a>..3.7. 动态链接过程</h4><p>动态链接和静态链接的区别在于, 动态链接把重定位的时机放在了动态库被加载到内存之后.    </p>\n<ol>\n<li>编译阶段  <ol>\n<li>建立字符串表,符号表, 保存符号对应的声明信息.  </li>\n<li>建立重定位表, 对全局符号的访问都标记出准确的偏移地址  </li>\n</ol>\n</li>\n<li>链接生成阶段  <ol>\n<li>合并目标文件中相同的节  确定虚拟内存地址(pic技术只确定相对地址)  </li>\n<li>重建重定位表和符号表   </li>\n<li>使用重定位表和符号表中记录的数据对代码段和数据段进行修改.   </li>\n<li>保存全局符号到动态符号表(符号表中有全部符号数据 此为优化)   </li>\n<li>建立动态重定位表, 对全局变量的访问走GOT表, 动态重定位表记录了符号名和对应数据段中的编号(该数据段被标记为.got节).  </li>\n<li>建立链接过程表, 对全局函数的访问生成plt代码(.plt), 链接过程重定位表(.rela.plt)记录了每个全局函数的符号名以及在保存实际函数地址的数据段的地址. (.got.plt节), .got.plt表中存储的指针默认是   <ol>\n<li>.got.plt中所有函数的地址都会默认保存为第 个元素的内容, 该地址为_dl_runtime_resolve , 通过符号表找到真正的函数地址后填充.got.plt并执行函数.    </li>\n</ol>\n</li>\n<li>对于内部符号的访问是否会进行优化 取决于代码模型,  例如对于小型代码模型中, 可执行程序中会直接访问全局变量的地址(被优化,但仍然保留GOT机制的有效性). 但是共享库中对全局变量的访问即使是当前库中的也一定会走got表.   </li>\n</ol>\n</li>\n<li>运行时  <ol>\n<li>加载共享库   <ol>\n<li>完成got, got.plt的填充   </li>\n<li>如果有repolr技术则设置内存段的只读  </li>\n</ol>\n</li>\n<li>运行过程中  <ol>\n<li>对全局变量的访问需要通过got表找到真正的地址   </li>\n<li>对函数的访问每次都会走plt, 第一次访问会跳转到符号解析函数找到真正的函数地址, 后续plt则会省略解析流程, 此为惰性加载机制.  </li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<!-- more -->\n\n<h3 id=\"4-跟踪调测\"><a href=\"#4-跟踪调测\" class=\"headerlink\" title=\"..4. 跟踪调测\"></a>..4. 跟踪调测</h3><p>编译选项为</p>\n<ul>\n<li>位置无关代码   </li>\n<li>禁止优化   </li>\n<li>禁止假设代码模型   </li>\n</ul>\n<h4 id=\"4-1-测试源码\"><a href=\"#4-1-测试源码\" class=\"headerlink\" title=\"..4.1. 测试源码\"></a>..4.1. 测试源码</h4><p>lib.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int g_static_lib_bss &#x3D; 0;</span><br><span class=\"line\">int g_static_lib_data &#x3D; 100;</span><br><span class=\"line\">int lib_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return a+b + g_static_lib_bss + g_static_lib_data;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>so.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int lib_func(int a, int b);</span><br><span class=\"line\">extern long long g_static_lib_bss;</span><br><span class=\"line\">extern long long g_static_lib_data;</span><br><span class=\"line\">long long g_static_so_bss &#x3D; 0;</span><br><span class=\"line\">long long g_static_so_data &#x3D; 100000;</span><br><span class=\"line\"></span><br><span class=\"line\">static long long g_local_so_data &#x3D; 0xff00ff00;</span><br><span class=\"line\"></span><br><span class=\"line\">int so_child_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return a+b + g_static_so_bss + g_static_so_data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static int so_local_func()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return g_local_so_data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br><span class=\"line\">  g_static_so_data ++;</span><br><span class=\"line\">  int ret &#x3D; lib_func(g_static_so_bss, g_static_so_data);</span><br><span class=\"line\">  ret +&#x3D; so_child_func(g_static_lib_data, g_static_lib_bss);</span><br><span class=\"line\">  ret +&#x3D; so_local_func();</span><br><span class=\"line\">  return ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.cpp  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_child_func(int a, int b);</span><br><span class=\"line\">int so_func(int a, int b);</span><br><span class=\"line\">extern int g_static_so_bss;</span><br><span class=\"line\">extern int g_static_so_data;</span><br><span class=\"line\"></span><br><span class=\"line\">int g_main_static[128*1024] &#x3D; &#123;2,1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int c &#x3D; a+b;</span><br><span class=\"line\">   c +&#x3D; g_static_so_bss;</span><br><span class=\"line\">   c +&#x3D; g_static_so_data;</span><br><span class=\"line\">   c +&#x3D; g_main_static[0];</span><br><span class=\"line\">   c +&#x3D; so_func(a, b);</span><br><span class=\"line\">   return c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int a &#x3D; 0;</span><br><span class=\"line\">   g_static_so_bss &#x3D; 1000000;</span><br><span class=\"line\">   a +&#x3D; main_func(argc, 1);</span><br><span class=\"line\">   return a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-位置有关的重定位分析\"><a href=\"#4-2-位置有关的重定位分析\" class=\"headerlink\" title=\"..4.2. 位置有关的重定位分析\"></a>..4.2. 位置有关的重定位分析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c so.cpp  -O0 -mcmodel&#x3D;large  -fno-pic  </span><br><span class=\"line\">g++ -c lib.cpp  -O0 -mcmodel&#x3D;large  -fno-pic </span><br><span class=\"line\">g++ -c main.cpp  -O0 -mcmodel&#x3D;large  -fno-pic </span><br><span class=\"line\">g++ so.o lib.o main.o -O0 -mcmodel&#x3D;large -no-pie</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-1-分析结论如下\"><a href=\"#4-2-1-分析结论如下\" class=\"headerlink\" title=\"..4.2.1. 分析结论如下:\"></a>..4.2.1. 分析结论如下:</h5><ul>\n<li><p>so.cpp中所有非static的全局变量和函数都存在符号表中  </p>\n<ul>\n<li>符号表的起始偏移为00000200 大小为198</li>\n<li>字符串表的起始偏移为00000398 大小为a4  </li>\n</ul>\n</li>\n<li><p>通过xxd命令可以观察到存储所有所有符号名的位置为 0x398处开始分别是字符串:</p>\n<ul>\n<li>null</li>\n<li>so.cpp</li>\n<li>_ZL15g_local_so_data</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>字符串表中的字符串均为标准的c-style风格的null为结尾(0x00)的字符串   </p>\n</li>\n<li><p>符号表的所在位置0x00000200则为规整的数组 没有字符串信息  </p>\n</li>\n<li><p>局部变量出现在目标对象的符号表中但对其访问的代码位置未出现在重定位表中  </p>\n</li>\n<li><p>局部变量在符号中的类型是LOCAL  </p>\n</li>\n<li><p>无论外部符号还是内部符号, 对于全局符号的访问均在重定位表中指明了具体的符号和偏移数据    </p>\n</li>\n<li><p>R_X86_64_64类型或者PC类型均为直接修改访问代码来完成重定位  </p>\n</li>\n<li><p>对于外部的符号 无论是函数还是数据 在符号表中 均为<code>NOTYPE  GLOBAL UND</code>的一行占位数据  </p>\n</li>\n<li><p>对于内部定义的全局函数, 则记录了再文本节中的具体的地址偏移,大小,类型等信息.   </p>\n</li>\n<li><p>对于内部定义的全局变量, 则记录了该变量的序号, 大小, 类型信息.   </p>\n</li>\n<li><p>.data字段为16字节 内容分别是 a086 0100 0000 0000, 00ff 00ff 0000 0000</p>\n<ul>\n<li>对应为long long g_static_so_data = 100000; 和static long long g_local_so_data = 0xff00ff00;</li>\n</ul>\n</li>\n</ul>\n<p>访问全局数据  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br></pre></td></tr></table></figure>\n<p>这里的g_static_so_bss 对应的汇编为:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">5c:   00 00 00 </span><br><span class=\"line\">5f:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">62:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>其意思是  </p>\n<ul>\n<li>用64位立即数0来设置rax寄存器  </li>\n<li>解引用rax 并把内容保存到rax寄存器   </li>\n<li>rax的内容+1 (这里利用了lea寻址完成++)并保存到rdx寄存器<br>这里问题就来了, 用C语言来描述就是  我们对地址 为0的的指针当做真实的全局变量的地址进行了解引用.   </li>\n</ul>\n<p>那么我们看下经过链接后的该汇编代码:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4005d3:       48 b8 60 10 68 00 00    movabs $0x681060,%rax</span><br><span class=\"line\">4005da:       00 00 00 </span><br><span class=\"line\">4005dd:       48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">4005e0:       48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>在这里, 这个立即数已经变成了合并完.data后, g_static_so_bss的真实地址.<br>这个立即数指令所在的地址偏移为0x57 然后我们查看重定位表即可发现完成该过程所需要的重定位信息:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br></pre></td></tr></table></figure>\n\n<p>备注:<br>这里我们看到最终链接出的地址4005da: 说明该程序并非pic代码, 对全局变量的访问没有任何相对计算以及读表过程.    </p>\n<h5 id=\"4-2-2-系统源码参考\"><a href=\"#4-2-2-系统源码参考\" class=\"headerlink\" title=\"..4.2.2. 系统源码参考:\"></a>..4.2.2. 系统源码参考:</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* $begin elfsymbol *&#x2F;</span><br><span class=\"line\">typedef struct &#123; </span><br><span class=\"line\">    int   name;      &#x2F;* String table offset *&#x2F; </span><br><span class=\"line\">    char  type:4,    &#x2F;* Function or data (4 bits) *&#x2F; </span><br><span class=\"line\">    binding:4; &#x2F;* Local or global (4 bits) *&#x2F; </span><br><span class=\"line\">    char  reserved;  &#x2F;* Unused *&#x2F;  </span><br><span class=\"line\">    short section;   &#x2F;* Section header index *&#x2F;</span><br><span class=\"line\">    long  value;     &#x2F;* Section offset or absolute address *&#x2F; </span><br><span class=\"line\">    long  size;      &#x2F;* Object size in bytes *&#x2F; </span><br><span class=\"line\">&#125; Elf64_Symbol; </span><br><span class=\"line\">&#x2F;* $end elfsymbol *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* $begin elfrelo *&#x2F;</span><br><span class=\"line\">typedef struct &#123; </span><br><span class=\"line\">    long offset;    &#x2F;* Offset of the reference to relocate *&#x2F; </span><br><span class=\"line\">    long type:32,   &#x2F;* Relocation type *&#x2F; </span><br><span class=\"line\">    symbol:32; &#x2F;* Symbol table index *&#x2F; </span><br><span class=\"line\">    long addend;    &#x2F;* Constant part of relocation expression *&#x2F;</span><br><span class=\"line\">&#125; Elf64_Rela; </span><br><span class=\"line\">&#x2F;* $end elfrelo *&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"4-2-3-字符串数据\"><a href=\"#4-2-3-字符串数据\" class=\"headerlink\" title=\"..4.2.3. 字符串数据\"></a>..4.2.3. 字符串数据</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00000390: 0000 0000 0000 0000 0073 6f2e 6370 7000  .........so.cpp.</span><br><span class=\"line\">000003a0: 5f5a 4c31 3567 5f6c 6f63 616c 5f73 6f5f  _ZL15g_local_so_</span><br><span class=\"line\">000003b0: 6461 7461 005f 5a4c 3133 736f 5f6c 6f63  data._ZL13so_loc</span><br><span class=\"line\">000003c0: 616c 5f66 756e 6376 0067 5f73 7461 7469  al_funcv.g_stati</span><br><span class=\"line\">000003d0: 635f 736f 5f62 7373 0067 5f73 7461 7469  c_so_bss.g_stati</span><br><span class=\"line\">000003e0: 635f 736f 5f64 6174 6100 5f5a 3133 736f  c_so_data._Z13so</span><br><span class=\"line\">000003f0: 5f63 6869 6c64 5f66 756e 6369 6900 5f5a  _child_funcii._Z</span><br><span class=\"line\">00000400: 3773 6f5f 6675 6e63 6969 005f 5a38 6c69  7so_funcii._Z8li</span><br><span class=\"line\">00000410: 625f 6675 6e63 6969 0067 5f73 7461 7469  b_funcii.g_stati</span><br><span class=\"line\">00000420: 635f 6c69 625f 6273 7300 675f 7374 6174  c_lib_bss.g_stat</span><br><span class=\"line\">00000430: 6963 5f6c 6962 5f64 6174 6100 0000 0000  ic_lib_data.....</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"4-2-4-节信息\"><a href=\"#4-2-4-节信息\" class=\"headerlink\" title=\"..4.2.4. 节信息\"></a>..4.2.4. 节信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ELF 头：</span><br><span class=\"line\">  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class=\"line\">  类别:                              ELF64</span><br><span class=\"line\">  数据:                              2 补码，小端序 (little endian)</span><br><span class=\"line\">  版本:                              1 (current)</span><br><span class=\"line\">  OS&#x2F;ABI:                            UNIX - System V</span><br><span class=\"line\">  ABI 版本:                          0</span><br><span class=\"line\">  类型:                              REL (可重定位文件)</span><br><span class=\"line\">  系统架构:                          Advanced Micro Devices X86-64</span><br><span class=\"line\">  版本:                              0x1</span><br><span class=\"line\">  入口点地址：              0x0</span><br><span class=\"line\">  程序头起点：              0 (bytes into file)</span><br><span class=\"line\">  Start of section headers:          1592 (bytes into file)</span><br><span class=\"line\">  标志：             0x0</span><br><span class=\"line\">  本头的大小：       64 (字节)</span><br><span class=\"line\">  程序头大小：       0 (字节)</span><br><span class=\"line\">  Number of program headers:         0</span><br><span class=\"line\">  节头大小：         64 (字节)</span><br><span class=\"line\">  节头数量：         12</span><br><span class=\"line\">  字符串表索引节头： 11</span><br><span class=\"line\"></span><br><span class=\"line\">节头：</span><br><span class=\"line\">  [号] 名称              类型             地址              偏移量</span><br><span class=\"line\">       大小              全体大小          旗标   链接   信息   对齐</span><br><span class=\"line\">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     0</span><br><span class=\"line\">  [ 1] .text             PROGBITS         0000000000000000  00000040</span><br><span class=\"line\">       0000000000000103  0000000000000000  AX       0     0     1</span><br><span class=\"line\">  [ 2] .rela.text        RELA             0000000000000000  00000440</span><br><span class=\"line\">       0000000000000150  0000000000000018   I       9     1     8</span><br><span class=\"line\">  [ 3] .data             PROGBITS         0000000000000000  00000148</span><br><span class=\"line\">       0000000000000010  0000000000000000  WA       0     0     8</span><br><span class=\"line\">  [ 4] .bss              NOBITS           0000000000000000  00000158</span><br><span class=\"line\">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class=\"line\">  [ 5] .comment          PROGBITS         0000000000000000  00000158</span><br><span class=\"line\">       000000000000002e  0000000000000001  MS       0     0     1</span><br><span class=\"line\">  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  00000186</span><br><span class=\"line\">       0000000000000000  0000000000000000           0     0     1</span><br><span class=\"line\">  [ 7] .eh_frame         PROGBITS         0000000000000000  00000188</span><br><span class=\"line\">       0000000000000078  0000000000000000   A       0     0     8</span><br><span class=\"line\">  [ 8] .rela.eh_frame    RELA             0000000000000000  00000590</span><br><span class=\"line\">       0000000000000048  0000000000000018   I       9     7     8</span><br><span class=\"line\">  [ 9] .symtab           SYMTAB           0000000000000000  00000200</span><br><span class=\"line\">       0000000000000198  0000000000000018          10    10     8</span><br><span class=\"line\">  [10] .strtab           STRTAB           0000000000000000  00000398</span><br><span class=\"line\">       00000000000000a4  0000000000000000           0     0     1</span><br><span class=\"line\">  [11] .shstrtab         STRTAB           0000000000000000  000005d8</span><br><span class=\"line\">       0000000000000059  0000000000000000           0     0     1</span><br><span class=\"line\">Key to Flags:</span><br><span class=\"line\">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class=\"line\">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class=\"line\">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class=\"line\">  l (large), p (processor specific)</span><br><span class=\"line\"></span><br><span class=\"line\">There are no section groups in this file.</span><br><span class=\"line\"></span><br><span class=\"line\">本文件中没有程序头。</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rela.text&#39; 位于偏移量 0x440 含有 14 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000000016  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000025  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">00000000003a  000300000001 R_X86_64_64       0000000000000000 .data + 8</span><br><span class=\"line\">000000000057  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000068  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">000000000075  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000000086  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">000000000093  000b00000001 R_X86_64_64       0000000000000000 g_static_so_data + 0</span><br><span class=\"line\">0000000000a2  000a00000001 R_X86_64_64       0000000000000000 g_static_so_bss + 0</span><br><span class=\"line\">0000000000b3  000e00000001 R_X86_64_64       0000000000000000 _Z8lib_funcii + 0</span><br><span class=\"line\">0000000000c2  000f00000001 R_X86_64_64       0000000000000000 g_static_lib_bss + 0</span><br><span class=\"line\">0000000000d1  001000000001 R_X86_64_64       0000000000000000 g_static_lib_data + 0</span><br><span class=\"line\">0000000000e2  000c00000001 R_X86_64_64       0000000000000000 _Z13so_child_funcii + 0</span><br><span class=\"line\">0000000000f1  000200000001 R_X86_64_64       0000000000000000 .text + 34</span><br><span class=\"line\"></span><br><span class=\"line\">重定位节 &#39;.rela.eh_frame&#39; 位于偏移量 0x590 含有 3 个条目：</span><br><span class=\"line\">  偏移量          信息           类型           符号值        符号名称 + 加数</span><br><span class=\"line\">000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0</span><br><span class=\"line\">000000000040  000200000002 R_X86_64_PC32     0000000000000000 .text + 34</span><br><span class=\"line\">000000000060  000200000002 R_X86_64_PC32     0000000000000000 .text + 47</span><br><span class=\"line\"></span><br><span class=\"line\">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</span><br><span class=\"line\"></span><br><span class=\"line\">Symbol table &#39;.symtab&#39; contains 17 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp</span><br><span class=\"line\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class=\"line\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class=\"line\">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class=\"line\">     5: 0000000000000008     8 OBJECT  LOCAL  DEFAULT    3 _ZL15g_local_so_data</span><br><span class=\"line\">     6: 0000000000000034    19 FUNC    LOCAL  DEFAULT    1 _ZL13so_local_funcv</span><br><span class=\"line\">     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class=\"line\">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class=\"line\">     9: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class=\"line\">    10: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    4 g_static_so_bss</span><br><span class=\"line\">    11: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 g_static_so_data</span><br><span class=\"line\">    12: 0000000000000000    52 FUNC    GLOBAL DEFAULT    1 _Z13so_child_funcii</span><br><span class=\"line\">    13: 0000000000000047   188 FUNC    GLOBAL DEFAULT    1 _Z7so_funcii</span><br><span class=\"line\">    14: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii</span><br><span class=\"line\">    15: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss</span><br><span class=\"line\">    16: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data</span><br><span class=\"line\"></span><br><span class=\"line\">No version information found in this file.</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-5-text数据\"><a href=\"#4-2-5-text数据\" class=\"headerlink\" title=\"..4.2.5. text数据\"></a>..4.2.5. text数据</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">so.o：     文件格式 elf64-x86-64   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:    </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000000 &lt;_Z13so_child_funcii&gt;:</span><br><span class=\"line\">   0:   55                      push   %rbp</span><br><span class=\"line\">   1:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">   4:   89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class=\"line\">   7:   89 75 f8                mov    %esi,-0x8(%rbp)</span><br><span class=\"line\">   a:   8b 55 fc                mov    -0x4(%rbp),%edx</span><br><span class=\"line\">   d:   8b 45 f8                mov    -0x8(%rbp),%eax</span><br><span class=\"line\">  10:   01 d0                   add    %edx,%eax</span><br><span class=\"line\">  12:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  14:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  1b:   00 00 00 </span><br><span class=\"line\">  1e:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  21:   01 c2                   add    %eax,%edx</span><br><span class=\"line\">  23:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  2a:   00 00 00 </span><br><span class=\"line\">  2d:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  30:   01 d0                   add    %edx,%eax</span><br><span class=\"line\">  32:   5d                      pop    %rbp</span><br><span class=\"line\">  33:   c3                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000034 &lt;_ZL13so_local_funcv&gt;:</span><br><span class=\"line\">  34:   55                      push   %rbp</span><br><span class=\"line\">  35:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  38:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  3f:   00 00 00 </span><br><span class=\"line\">  42:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  45:   5d                      pop    %rbp</span><br><span class=\"line\">  46:   c3                      retq   </span><br><span class=\"line\"></span><br><span class=\"line\">0000000000000047 &lt;_Z7so_funcii&gt;:</span><br><span class=\"line\">  47:   55                      push   %rbp</span><br><span class=\"line\">  48:   48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  4b:   48 83 ec 20             sub    $0x20,%rsp</span><br><span class=\"line\">  4f:   89 7d ec                mov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  52:   89 75 e8                mov    %esi,-0x18(%rbp)</span><br><span class=\"line\">  55:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  5c:   00 00 00 </span><br><span class=\"line\">  5f:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  62:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br><span class=\"line\">  66:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  6d:   00 00 00 </span><br><span class=\"line\">  70:   48 89 10                mov    %rdx,(%rax)</span><br><span class=\"line\">  73:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  7a:   00 00 00 </span><br><span class=\"line\">  7d:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  80:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br><span class=\"line\">  84:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  8b:   00 00 00 </span><br><span class=\"line\">  8e:   48 89 10                mov    %rdx,(%rax)</span><br><span class=\"line\">  91:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  98:   00 00 00 </span><br><span class=\"line\">  9b:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  9e:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  a0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  a7:   00 00 00 </span><br><span class=\"line\">  aa:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  ad:   89 d6                   mov    %edx,%esi</span><br><span class=\"line\">  af:   89 c7                   mov    %eax,%edi</span><br><span class=\"line\">  b1:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  b8:   00 00 00 </span><br><span class=\"line\">  bb:   ff d0                   callq  *%rax</span><br><span class=\"line\">  bd:   89 45 fc                mov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  c0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  c7:   00 00 00 </span><br><span class=\"line\">  ca:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  cd:   89 c2                   mov    %eax,%edx</span><br><span class=\"line\">  cf:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  d6:   00 00 00 </span><br><span class=\"line\">  d9:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">  dc:   89 d6                   mov    %edx,%esi</span><br><span class=\"line\">  de:   89 c7                   mov    %eax,%edi</span><br><span class=\"line\">  e0:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  e7:   00 00 00 </span><br><span class=\"line\">  ea:   ff d0                   callq  *%rax</span><br><span class=\"line\">  ec:   01 45 fc                add    %eax,-0x4(%rbp)</span><br><span class=\"line\">  ef:   48 b8 00 00 00 00 00    movabs $0x0,%rax</span><br><span class=\"line\">  f6:   00 00 00 </span><br><span class=\"line\">  f9:   ff d0                   callq  *%rax</span><br><span class=\"line\">  fb:   01 45 fc                add    %eax,-0x4(%rbp)</span><br><span class=\"line\">  fe:   8b 45 fc                mov    -0x4(%rbp),%eax</span><br><span class=\"line\"> 101:   c9                      leaveq </span><br><span class=\"line\"> 102:   c3                      retq</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-3-位置无关的重定位分析\"><a href=\"#4-3-位置无关的重定位分析\" class=\"headerlink\" title=\"..4.3. 位置无关的重定位分析\"></a>..4.3. 位置无关的重定位分析</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ -c so.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -c lib.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -c main.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ -shared so.o  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++ so.so lib.o main.o -O0 -mcmodel&#x3D;large -pie -fPIE    </span><br><span class=\"line\">export  LD_LIBRARY_PATH&#x3D;LD_LIBRARY_PATH:.&#x2F;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++-6 -c so.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -c lib.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -c main.cpp  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 -shared so.o -oso.so  -O0 -mcmodel&#x3D;large  -fPIC  </span><br><span class=\"line\">g++-6 so.so lib.o main.o -O0 -mcmodel&#x3D;large -pie -fPIE    </span><br><span class=\"line\">export  LD_LIBRARY_PATH&#x3D;LD_LIBRARY_PATH:.&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-1-分析说明\"><a href=\"#4-3-1-分析说明\" class=\"headerlink\" title=\"..4.3.1. 分析说明\"></a>..4.3.1. 分析说明</h5><p>PIC的代码在编译为目标对象时, 所用的重定位方法和非PIC在方法上并没有差别  </p>\n<blockquote>\n<p>指明代码段中访问全局符号的操作数位置<br>在编译阶段用正确的地址替换掉占位用的空地址<br>与非PIC的差别我们会看到访问所有数据最终最终都会通过GOT表, 所以这部分的立即数会首先被替换成GOT表的地址<br>本段分析中主要分析动态链接的关键部分GOT/PLT/LOAD/FIXSYMBO部分分析, 对上述部分不再贴细节分析代码.   </p>\n</blockquote>\n<ul>\n<li>so中的重定位表分别是.rela.dyn .rela.plt, 和目标文件中的记录格式类似但有明显不同  <ul>\n<li>无论是对全局数据的访问还是对全局函数的访问, 其重定位的地址都不在是代码段中的位置, 而是位于数据段   <ul>\n<li>对全局变量的访问, 重定位地址在.got段 数据段  </li>\n<li>对全局函数的访问, 重定位地址在.got.plt段 数据段  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>重定位不在涉及修改.txt段中的内容, 所以共享库的文本段是可以跨进程安全共享的  </li>\n</ul>\n<h5 id=\"4-3-2-全局数据访问代码分析\"><a href=\"#4-3-2-全局数据访问代码分析\" class=\"headerlink\" title=\"..4.3.2. 全局数据访问代码分析\"></a>..4.3.2. 全局数据访问代码分析</h5><p>访问全局数据  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int so_func(int a, int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  g_static_so_bss ++;</span><br></pre></td></tr></table></figure>\n<p>这里的g_static_so_bss++ 对应的汇编为:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 &lt;_Z7so_funcii+0xb&gt;</span><br><span class=\"line\">8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11</span><br><span class=\"line\">8b1:   00 00 00 </span><br><span class=\"line\">8b4:   4c 01 db                add    %r11,%rbx</span><br><span class=\"line\">8b7:   89 7d dc                mov    %edi,-0x24(%rbp)</span><br><span class=\"line\">8ba:   89 75 d8                mov    %esi,-0x28(%rbp)</span><br><span class=\"line\">8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax</span><br><span class=\"line\">8c4:   ff ff ff </span><br><span class=\"line\">8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax</span><br><span class=\"line\">8cb:   48 8b 00                mov    (%rax),%rax</span><br><span class=\"line\">8ce:   48 8d 50 01             lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>其意思是  </p>\n<ul>\n<li>8a3这行指令+0x20075d偏移保存到%rbx  </li>\n<li>计算出最终地址(%rbx + xffffffffffffffe0 (-20) * 1)并取值到rax  <ul>\n<li>rbx的值为0x201000该地址对应的是节.got.plt 也是.got + sizeof(.got)的位置  </li>\n<li>-20位则表示在.got中  最终的地址为0x200fe0  </li>\n<li>查找.dyn表可以知道该位置为000000200fe0  g_static_so_bss + 0   </li>\n<li>查看该位置的内存为0  </li>\n<li>那么如果在运行时没有进行动态填充, 则这里会出现对地址0进行解引用的操作.   </li>\n<li>rbx寄存器会复用 专门用来保存got表的入口偏移, 也就是浪费了一个通用寄存器来实现地址无关代码  </li>\n</ul>\n</li>\n<li>我们进入gdb调试  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x7ffff7bd68a3    lea    -0x7(%rip),%rbx        # 0x7ffff7bd68a3 &lt;_Z7so_funcii+11&gt;   </span><br><span class=\"line\">0x7ffff7bd68aa    movabs $0x20075d,%r11                 </span><br><span class=\"line\">0x7ffff7bd68b4    add    %r11,%rbx                      </span><br><span class=\"line\">0x7ffff7bd68b7    mov    %edi,-0x24(%rbp)               </span><br><span class=\"line\">0x7ffff7bd68ba    mov    %esi,-0x28(%rbp)               </span><br><span class=\"line\">0x7ffff7bd68bd    movabs $0xffffffffffffffe0,%rax       </span><br><span class=\"line\">0x7ffff7bd68c7    mov    (%rbx,%rax,1),%rax             </span><br><span class=\"line\">0x7ffff7bd68cb    mov    (%rax),%rax                    </span><br><span class=\"line\">0x7ffff7bd68ce    lea    0x1(%rax),%rdx</span><br></pre></td></tr></table></figure>\n<p>带入计算:  </p>\n<figure class=\"highlight plain\"><figcaption><span>+ 0x20075d + -20*1 </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">该位置位于加载so.so的内存中, 对应为只读的got表</span><br></pre></td></tr></table></figure>\n<p>00007ffff7bd6000      4K r-x– so.so<br>00007ffff7bd7000   2044K —– so.so<br>00007ffff7dd6000      4K r—- so.so<br>00007ffff7dd7000      4K rw— so.so</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">推算got表在内存中的实际位置为 0x7FFFF7DD6FE0 - 28 &#x3D;  0x7FFFF7DD6FB8  </span><br><span class=\"line\">那么查看该got实际的内存如下:</span><br></pre></td></tr></table></figure>\n<p>(gdb) x /9ag 0x7FFFF7DD6FB8<br>0x7ffff7dd6fb8: 0x7ffff6f27c30 &lt;__cxa_finalize&gt;<br>0x7ffff7dd6fc0: 0x555555755030 <g_static_lib_data><br>0x7ffff7dd6fc8: 0x5555557d5044 <g_static_lib_bss><br>0x7ffff7dd6fd0: 0x0<br>0x7ffff7dd6fd8: 0x7ffff7dd7030 <g_static_so_data><br>0x7ffff7dd6fe0: 0x7ffff7dd7048 <g_static_so_bss><br>0x7ffff7dd6fe8: 0x0<br>0x7ffff7dd6ff0: 0x0<br>0x7ffff7dd6ff8: 0x0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对应0x7FFFF7DD6FE0的位置已经保存了正确的g_static_so_bss的地址.  </span><br><span class=\"line\">再进一步读取变量的值:</span><br></pre></td></tr></table></figure>\n<p>0x7ffff7dd7048 <g_static_so_bss>:       0xf4240  (1000000)<br>0x7ffff7dd7030 <g_static_so_data>:      0x186a0   (100000)  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值也正确.   </span><br><span class=\"line\">全局变量实际保存的位置对应so.so的可读写数据段   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### ..4.3.3. 全局函数访问代码分析</span><br></pre></td></tr></table></figure>\n<p>int so_func(int a, int b)<br>{<br>  g_static_so_bss ++;<br>  g_static_so_data ++;<br>  int ret = lib_func(g_static_so_bss, g_static_so_data);<br>  ret += so_child_func(g_static_lib_data, g_static_lib_bss);<br>  ret += so_local_func();<br>  return ret;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应的汇编码如下:  </span><br><span class=\"line\">%esi保存了g_static_lib_data  %edi 保存了g_static_lib_bss   </span><br><span class=\"line\">%rbx保存了base 偏移 8a3 + 0x20075d</span><br></pre></td></tr></table></figure>\n<p> 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax<br> 93b:   ff ff ff<br> 93e:   48 01 d8                add    %rbx,%rax<br> 941:   ff d0                   callq  *%rax</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里callq的实际地址为 8a3 + 0x20075d -0x900 &#x3D; 0x200700   </span><br><span class=\"line\">该地址位于.plt中  其偏移相对于.plt为:  0x200700-0x00000000000206e0 &#x3D; 0x20  偏移地址为700  </span><br><span class=\"line\">我们找到代码位置</span><br></pre></td></tr></table></figure>\n\n<p>00000000000006e0 &lt;.plt&gt;:<br> 6e0:   ff 35 22 09 20 00   pushq  0x200922(%rip)  # 201008 &lt;GOT_+0x8&gt; link_map<br> 6e6:   ff 25 24 09 20 00   jmpq   *0x200924(%rip) # 201010 &lt;GOT+0x10&gt; _dl_runtime_resolve_xsavec<br> 6ec:   0f 1f 40 00             nopl   0x0(%rax)</p>\n<p>00000000000006f0 &lt;_Z13so_child_funcii@plt&gt;:<br> 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 &lt;_Z13so_child_funcii@@Base+0x2007f8&gt;<br> 6f6:   68 00 00 00 00          pushq  $0x0<br> 6fb:   e9 e0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>0000000000000700 &lt;_Z8lib_funcii@plt&gt;:<br> 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 &lt;_Z8lib_funcii&gt;<br> 706:   68 01 00 00 00          pushq  $0x1<br> 70b:   e9 d0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">700跳转到 (706+0x20091a) 这个地址保存的内存   </span><br><span class=\"line\">这个地址为  0x201020  即.got.plt的第5项</span><br><span class=\"line\">在elf文件中.got.plt是有5个值的, 第五项保存的值为706  也就是jmpq的下一行代码   </span><br><span class=\"line\">&#96;&#96;&#96;pushq $0x1&#96;&#96;&#96;   意思是把当前的plt序号(.rela.plt的项)保存到栈上(传参)  </span><br><span class=\"line\">在装载后, 相对偏移706会被替换成实际分配好的地址   </span><br><span class=\"line\">因此第一次jmpq会跳转到偏移6e0处  </span><br><span class=\"line\">再把got+8的位置压栈, (这个指针是link_map 后文会继续讲)   </span><br><span class=\"line\">然后跳转到函数  &#96;&#96;&#96;_dl_runtime_resolve_xsavec&#96;&#96;&#96;   </span><br><span class=\"line\"></span><br><span class=\"line\">got+8 和got+10 将会完成符号的解析工作并找到真正的目标函数地址, 然后回写plt 执行目标函数.   </span><br><span class=\"line\">这两项程序装载时会完成填充, 而后续的plt的其他函数会基于该机制以惰性加载机制调用时解析.  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GDB调试内容如下:</span><br></pre></td></tr></table></figure>\n<p>0x7ffff7bd6700 &lt;_Z8lib_funcii@plt&gt;              jmpq   *0x20091a(%rip)        # 0x7ffff7dd7020<br>0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;            pushq  $0x1<br>0x7ffff7bd670b &lt;_Z8lib_funcii@plt+11&gt;           jmpq   0x7ffff7bd66e0<br>0x7ffff7bd6710                                  jmpq   *0x2008a2(%rip)        # 0x7ffff7dd6fb8  </p>\n<p>(gdb) x /1ag 0x7ffff7dd7020<br>0x7ffff7dd7020: 0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;  </p>\n<p>(gdb) x /5ag 0x7ffff7dd7000<br>0x7ffff7dd7000: 0x200dc8<br>0x7ffff7dd7008: 0x7ffff7ff6000<br>0x7ffff7dd7010: 0x7ffff7ded310 &lt;_dl_runtime_resolve_xsavec&gt;<br>0x7ffff7dd7018: 0x7ffff7bd66f6 &lt;_Z13so_child_funcii@plt+6&gt;<br>0x7ffff7dd7020: 0x7ffff7bd6706 &lt;_Z8lib_funcii@plt+6&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;_dl_runtime_resolve_xsavec&#96;&#96;&#96;  </span><br><span class=\"line\">rbx+8为符号表链表指针   </span><br><span class=\"line\">rbx+16为压到栈上的目标函数编号 存储在plt的下标从第四项开始, 前三项分别是offset, link_map, 解析函数  </span><br><span class=\"line\">&#96;&#96;&#96;_dl_fixup&#96;&#96;&#96; 返回了查找到的真实地址 &#96;&#96;&#96;bnd jmpq *%r11&#96;&#96;&#96;  跳转到实际地址  </span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96; </span><br><span class=\"line\">0x7ffff7ded310   push   %rbx                                                                </span><br><span class=\"line\">0x7ffff7ded311   mov    %rsp,%rbx                                                           </span><br><span class=\"line\">0x7ffff7ded314   and    $0xffffffffffffffc0,%rsp                                            </span><br><span class=\"line\">0x7ffff7ded318   sub    0x20f4e9(%rip),%rsp        # 0x7ffff7ffc808 &lt;_rtld_global_ro+168&gt;   </span><br><span class=\"line\">0x7ffff7ded31f   mov    %rax,(%rsp)                                                         </span><br><span class=\"line\">0x7ffff7ded323   mov    %rcx,0x8(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded328   mov    %rdx,0x10(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded32d   mov    %rsi,0x18(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded332   mov    %rdi,0x20(%rsp)                                                     </span><br><span class=\"line\">0x7ffff7ded337   mov    %r8,0x28(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded33c   mov    %r9,0x30(%rsp)                                                      </span><br><span class=\"line\">0x7ffff7ded341   mov    $0xee,%eax                                                          </span><br><span class=\"line\">0x7ffff7ded346   xor    %edx,%edx                                                           </span><br><span class=\"line\">0x7ffff7ded348   mov    %rdx,0x250(%rsp)           </span><br><span class=\"line\">0x7ffff7ded350   mov    %rdx,0x258(%rsp)           </span><br><span class=\"line\">0x7ffff7ded358   mov    %rdx,0x260(%rsp)           </span><br><span class=\"line\">0x7ffff7ded360   mov    %rdx,0x268(%rsp)           </span><br><span class=\"line\">0x7ffff7ded368   mov    %rdx,0x270(%rsp)           </span><br><span class=\"line\">0x7ffff7ded370   mov    %rdx,0x278(%rsp)           </span><br><span class=\"line\">0x7ffff7ded378   xsavec 0x40(%rsp)                 </span><br><span class=\"line\">0x7ffff7ded37d   mov    0x10(%rbx),%rsi            </span><br><span class=\"line\">0x7ffff7ded381   mov    0x8(%rbx),%rdi             </span><br><span class=\"line\">0x7ffff7ded385   callq  0x7ffff7de6630 &lt;_dl_fixup&gt; </span><br><span class=\"line\">0x7ffff7ded38a   mov    %rax,%r11                  </span><br><span class=\"line\">0x7ffff7ded38d   mov    $0xee,%eax                 </span><br><span class=\"line\">0x7ffff7ded392   xor    %edx,%edx                  </span><br><span class=\"line\">0x7ffff7ded394   xrstor 0x40(%rsp)         </span><br><span class=\"line\">0x7ffff7ded399   mov    0x30(%rsp),%r9     </span><br><span class=\"line\">0x7ffff7ded39e   mov    0x28(%rsp),%r8     </span><br><span class=\"line\">0x7ffff7ded3a3   mov    0x20(%rsp),%rdi    </span><br><span class=\"line\">0x7ffff7ded3a8   mov    0x18(%rsp),%rsi    </span><br><span class=\"line\">0x7ffff7ded3ad   mov    0x10(%rsp),%rdx    </span><br><span class=\"line\">0x7ffff7ded3b2   mov    0x8(%rsp),%rcx     </span><br><span class=\"line\">0x7ffff7ded3b7   mov    (%rsp),%rax        </span><br><span class=\"line\">0x7ffff7ded3bb   mov    %rbx,%rsp          </span><br><span class=\"line\">0x7ffff7ded3be   mov    (%rsp),%rbx        </span><br><span class=\"line\">0x7ffff7ded3c2   add    $0x18,%rsp         </span><br><span class=\"line\">0x7ffff7ded3c6   bnd jmpq *%r11</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">&#x2F;&#x2F; Elf64_Rela</span><br><span class=\"line\">typedef uint64_t Elf64_Addr;</span><br><span class=\"line\">typedef uint64_t Elf64_Xword;</span><br><span class=\"line\">typedef int64_t  Elf64_Sxword;</span><br><span class=\"line\"> </span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Elf64_Addr        r_offset;                &#x2F;* Address *&#x2F;</span><br><span class=\"line\">  Elf64_Xword        r_info;                 &#x2F;* Relocation type and symbol index *&#x2F;</span><br><span class=\"line\">  Elf64_Sxword        r_addend;              &#x2F;* Addend *&#x2F;</span><br><span class=\"line\">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Elf64_Sym</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint32_t</span> Elf64_Word;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint16_t</span> Elf64_Section;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Addr;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">uint64_t</span> Elf64_Xword;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  Elf64_Word        st_name;                <span class=\"comment\">/* Symbol name (string tbl index), 4 bytes */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>        st_info;             <span class=\"comment\">/* Symbol type and binding, 1 byte */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> st_other;                   <span class=\"comment\">/* Symbol visibility, 1 byte */</span></span><br><span class=\"line\">  Elf64_Section        st_shndx;            <span class=\"comment\">/* Section index, 2 bytes */</span></span><br><span class=\"line\">  Elf64_Addr        st_value;               <span class=\"comment\">/* Symbol value, 8 bytes */</span></span><br><span class=\"line\">  Elf64_Xword        st_size;               <span class=\"comment\">/* Symbol size, 8 bytes */</span></span><br><span class=\"line\">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure>\n<p>libc/elf/dl-runtime.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE _dl_fixup (</span><br><span class=\"line\">   <span class=\"comment\">/* GKM <span class=\"doctag\">FIXME:</span> Fix trampoline to pass bounds so we can do</span></span><br><span class=\"line\"><span class=\"comment\">      without the `__unbounded' qualifier.  */</span></span><br><span class=\"line\">     struct link_map *__unbounded l, ElfW(Word) reloc_offset)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *<span class=\"keyword\">const</span> symtab</span></span><br><span class=\"line\"><span class=\"function\">    </span>= (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *strtab = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> PLTREL *<span class=\"keyword\">const</span> reloc</span><br><span class=\"line\">    = (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> rel_addr = (<span class=\"keyword\">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class=\"line\">  <span class=\"keyword\">lookup_t</span> result;</span><br><span class=\"line\">  DL_FIXUP_VALUE_TYPE value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Sanity check that we're really looking at a PLT relocation.  */</span></span><br><span class=\"line\">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class=\"line\"><span class=\"comment\">      used don't look in the global scope.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class=\"number\">0</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_found_version</span> *<span class=\"title\">version</span> = <span class=\"title\">NULL</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"title\">ElfW</span><span class=\"params\">(Half)</span> *vernum </span>=</span><br><span class=\"line\">          (<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class=\"line\">        ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class=\"number\">0x7fff</span>;</span><br><span class=\"line\">        version = &amp;l-&gt;l_versions[ndx];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (version-&gt;hash == <span class=\"number\">0</span>)</span><br><span class=\"line\">          version = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class=\"line\"><span class=\"comment\">       not necessary for objects which cannot be unloaded or when</span></span><br><span class=\"line\"><span class=\"comment\">       we are not using any threads (yet).  */</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        THREAD_GSCOPE_SET_FLAG ();</span><br><span class=\"line\">        flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class=\"line\">                            version, ELF_RTYPE_CLASS_PLT, flags, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* We are done with the global scope.  */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class=\"line\">      THREAD_GSCOPE_RESET_FLAG ();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* Currently result contains the base load address (or link map)</span></span><br><span class=\"line\"><span class=\"comment\">       of the object that defines sym.  Now add in the symbol</span></span><br><span class=\"line\"><span class=\"comment\">       offset.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class=\"line\">                           sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class=\"line\">                                + sym-&gt;st_value) : <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class=\"line\"><span class=\"comment\">       address) is also known.  */</span></span><br><span class=\"line\">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class=\"line\">      result = l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* And now perhaps the relocation addend.  */</span></span><br><span class=\"line\">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Finally, fix up the plt itself.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__builtin_expect (GLRO(dl_bind_not), <span class=\"number\">0</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>elf/dl-lookup.c  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Search loaded objects' symbol tables for a definition of the symbol</span></span><br><span class=\"line\"><span class=\"comment\">   UNDEF_NAME, perhaps with a requested version for the symbol.</span></span><br><span class=\"line\"><span class=\"comment\">   We must never have calls to the audit functions inside this function</span></span><br><span class=\"line\"><span class=\"comment\">   or in any function which gets called.  If this would happen the audit</span></span><br><span class=\"line\"><span class=\"comment\">   code might create a thread which can throw off all the scope locking.  */</span></span><br><span class=\"line\"><span class=\"keyword\">lookup_t</span></span><br><span class=\"line\">_dl_lookup_symbol_x (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *undef_name, struct link_map *undef_map,</span><br><span class=\"line\">                     <span class=\"keyword\">const</span> ElfW(Sym) **ref,</span><br><span class=\"line\">                     struct r_scope_elem *symbol_scope[],</span><br><span class=\"line\">                     <span class=\"keyword\">const</span> struct r_found_version *version,</span><br><span class=\"line\">                     <span class=\"keyword\">int</span> type_class, <span class=\"keyword\">int</span> flags, struct link_map *skip_map);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><figcaption><span>字符串表strtab   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">reloc_offset即是传入的参数reloc_arg 其代表在.rela.plt表中的第几项 保存在reloc中   </span><br><span class=\"line\">reloc的r_offset表示需要修改的函数地址在GOT表中的地址 加上装载地址l_addr得到的rel_addr就是最终要修改的.got.plt保存该函数地址的项的绝对地址  </span><br><span class=\"line\"></span><br><span class=\"line\">st_other描述符号的可见性 如果包含STV_PROTECTED、STV_HIDDEN和STV_INTERNAL的其中任何一种 则直接将装载地址加上st_value即得到函数的最终地址value 将其写入rel_addr    (相当于作用域不超过当前符号表的范围)  </span><br><span class=\"line\"></span><br><span class=\"line\">其他情况 会进入if语句   </span><br><span class=\"line\">首先获得符号的version信息 然后调用 &#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96; 函数从已装载的共享库中查找最终的符号地址 查找到符号sym后 对其进行重定位 即加上装载地址 保存在value中      </span><br><span class=\"line\">最后调用&#96;&#96;&#96;elf_machine_fixup_plt&#96;&#96;&#96;函数进行修正    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">fixup plt  回写.got.plt的项</span><br></pre></td></tr></table></figure>\n<p>static inline Elf64_Addr<br>elf_machine_fixup_plt (struct link_map *map, lookup_t t,<br>               const Elf64_Rela *reloc,<br>               Elf64_Addr *reloc_addr, Elf64_Addr value)<br>{<br>  return *reloc_addr = value;<br>}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;_dl_lookup_symbol_x&#96;&#96;&#96;   </span><br><span class=\"line\">...   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">got表和plt表在代码中是直接根据代码行的偏移获取的, 因此这里并无随机化过程   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### .got节内容  </span><br><span class=\"line\">未填充任何数据</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00000fb8 -l0x0000000000000048  so.so<br>00000fb8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fc8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fd8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000fe8: 0000 0000 0000 0000 0000 0000 0000 0000  …………….<br>00000ff8: 0000 0000 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### .got.plt节  </span><br><span class=\"line\">0x200dc8  </span><br><span class=\"line\">0x0  </span><br><span class=\"line\">0x0  </span><br><span class=\"line\">0x6f6  </span><br><span class=\"line\">0x706</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00001000 -l0x0000000000000028  so.so<br>00001000: c80d 2000 0000 0000 0000 0000 0000 0000  .. ………….<br>00001010: 0000 0000 0000 0000 f606 0000 0000 0000  …………….<br>00001020: 0607 0000 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### .data节  </span><br><span class=\"line\">2101288  </span><br><span class=\"line\">100000  </span><br><span class=\"line\">0xff00ff00</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ xxd -s+0x00001028 -l0x0000000000000018  so.so<br>00001028: 2810 2000 0000 0000 a086 0100 0000 0000  (. ………….<br>00001038: 00ff 00ff 0000 0000                      ……..</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">##### pmap信息</span><br></pre></td></tr></table></figure>\n<p>zsummer@debian:~/symbo$ pmap 9208<br>9208:   /home/zsummer/symbo/a.out<br>0000555555554000      4K r-x– a.out<br>0000555555754000      4K r—- a.out<br>0000555555755000    516K rw— a.out<br>00005555557d6000    132K rw—   [ anon ]<br>00007ffff6ef0000   1732K r-x– libc-2.27.so<br>00007ffff70a1000   2044K —– libc-2.27.so<br>00007ffff72a0000     16K r—- libc-2.27.so<br>00007ffff72a4000      8K rw— libc-2.27.so<br>00007ffff72a6000     16K rw—   [ anon ]<br>00007ffff72aa000     92K r-x– libgcc_s.so.1<br>00007ffff72c1000   2044K —– libgcc_s.so.1<br>00007ffff74c0000      4K r—- libgcc_s.so.1<br>00007ffff74c1000      4K rw— libgcc_s.so.1<br>00007ffff74c2000   1608K r-x– libm-2.27.so<br>00007ffff7654000   2044K —– libm-2.27.so<br>00007ffff7853000      4K r—- libm-2.27.so<br>00007ffff7854000      4K rw— libm-2.27.so<br>00007ffff7855000   1480K r-x– libstdc++.so.6.0.25<br>00007ffff79c7000   2048K —– libstdc++.so.6.0.25<br>00007ffff7bc7000     40K r—- libstdc++.so.6.0.25<br>00007ffff7bd1000      8K rw— libstdc++.so.6.0.25<br>00007ffff7bd3000     12K rw—   [ anon ]<br>00007ffff7bd6000      4K r-x– so.so<br>00007ffff7bd7000   2044K —– so.so<br>00007ffff7dd6000      4K r—- so.so<br>00007ffff7dd7000      4K rw— so.so<br>00007ffff7dd8000    148K r-x– ld-2.27.so<br>00007ffff7fd6000     20K rw—   [ anon ]<br>00007ffff7ff6000      8K rw—   [ anon ]<br>00007ffff7ff8000      8K r—-   [ anon ]<br>00007ffff7ffa000      8K r-x–   [ anon ]<br>00007ffff7ffc000      4K r—- ld-2.27.so<br>00007ffff7ffd000      4K rw— ld-2.27.so<br>00007ffff7ffe000      4K rw—   [ anon ]<br>00007ffffffde000    132K rw—   [ stack ]<br>ffffffffff600000      4K r-x–   [ anon ]<br> total            16260K</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 节信息</span><br></pre></td></tr></table></figure>\n<p>ELF 头：<br>  Magic：  7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00<br>  类别:                              ELF64<br>  数据:                              2 补码，小端序 (little endian)<br>  版本:                              1 (current)<br>  OS/ABI:                            UNIX - System V<br>  ABI 版本:                          0<br>  类型:                              DYN (共享目标文件)<br>  系统架构:                          Advanced Micro Devices X86-64<br>  版本:                              0x1<br>  入口点地址：              0x720<br>  程序头起点：              64 (bytes into file)<br>  Start of section headers:          6544 (bytes into file)<br>  标志：             0x0<br>  本头的大小：       64 (字节)<br>  程序头大小：       56 (字节)<br>  Number of program headers:         7<br>  节头大小：         64 (字节)<br>  节头数量：         28<br>  字符串表索引节头： 27</p>\n<p>节头：<br>  [号] 名称              类型             地址              偏移量<br>       大小              全体大小          旗标   链接   信息   对齐<br>  [ 0]                   NULL             0000000000000000  00000000<br>       0000000000000000  0000000000000000           0     0     0<br>  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8<br>       0000000000000024  0000000000000000   A       0     0     4<br>  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0<br>       0000000000000048  0000000000000000   A       3     0     8<br>  [ 3] .dynsym           DYNSYM           0000000000000238  00000238<br>       00000000000001b0  0000000000000018   A       4     1     8<br>  [ 4] .dynstr           STRTAB           00000000000003e8  000003e8<br>       000000000000013d  0000000000000000   A       0     0     1<br>  [ 5] .gnu.version      VERSYM           0000000000000526  00000526<br>       0000000000000024  0000000000000002   A       3     0     2<br>  [ 6] .gnu.version_r    VERNEED          0000000000000550  00000550<br>       0000000000000020  0000000000000000   A       4     1     8<br>  [ 7] .rela.dyn         RELA             0000000000000570  00000570<br>       0000000000000120  0000000000000018   A       3     0     8<br>  [ 8] .rela.plt         RELA             0000000000000690  00000690<br>       0000000000000030  0000000000000018  AI       3    21     8<br>  [ 9] .init             PROGBITS         00000000000006c0  000006c0<br>       0000000000000017  0000000000000000  AX       0     0     4<br>  [10] .plt              PROGBITS         00000000000006e0  000006e0<br>       0000000000000030  0000000000000010  AX       0     0     16<br>  [11] .plt.got          PROGBITS         0000000000000710  00000710<br>       0000000000000008  0000000000000000  AX       0     0     8<br>  [12] .text             PROGBITS         0000000000000720  00000720<br>       0000000000000282  0000000000000000  AX       0     0     16<br>  [13] .fini             PROGBITS         00000000000009a4  000009a4<br>       0000000000000009  0000000000000000  AX       0     0     4<br>  [14] .eh_frame_hdr     PROGBITS         00000000000009b0  000009b0<br>       0000000000000034  0000000000000000   A       0     0     4<br>  [15] .eh_frame         PROGBITS         00000000000009e8  000009e8<br>       00000000000000c4  0000000000000000   A       0     0     8<br>  [16] .init_array       INIT_ARRAY       0000000000200db0  00000db0<br>       0000000000000008  0000000000000008  WA       0     0     8<br>  [17] .fini_array       FINI_ARRAY       0000000000200db8  00000db8<br>       0000000000000008  0000000000000008  WA       0     0     8<br>  [18] .jcr              PROGBITS         0000000000200dc0  00000dc0<br>       0000000000000008  0000000000000000  WA       0     0     8<br>  [19] .dynamic          DYNAMIC          0000000000200dc8  00000dc8<br>       00000000000001f0  0000000000000010  WA       4     0     8<br>  [20] .got              PROGBITS         0000000000200fb8  00000fb8<br>       0000000000000048  0000000000000008  WA       0     0     8<br>  [21] .got.plt          PROGBITS         0000000000201000  00001000<br>       0000000000000028  0000000000000008  WA       0     0     8<br>  [22] .data             PROGBITS         0000000000201028  00001028<br>       0000000000000018  0000000000000000  WA       0     0     8<br>  [23] .bss              NOBITS           0000000000201040  00001040<br>       0000000000000010  0000000000000000  WA       0     0     8<br>  [24] .comment          PROGBITS         0000000000000000  00001040<br>       000000000000002d  0000000000000001  MS       0     0     1<br>  [25] .symtab           SYMTAB           0000000000000000  00001070<br>       00000000000005e8  0000000000000018          26    46     8<br>  [26] .strtab           STRTAB           0000000000000000  00001658<br>       0000000000000246  0000000000000000           0     0     1<br>  [27] .shstrtab         STRTAB           0000000000000000  0000189e<br>       00000000000000ee  0000000000000000           0     0     1<br>Key to Flags:<br>  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),<br>  L (link order), O (extra OS processing required), G (group), T (TLS),<br>  C (compressed), x (unknown), o (OS specific), E (exclude),<br>  l (large), p (processor specific)</p>\n<p>There are no section groups in this file.</p>\n<p>程序头：<br>  Type           Offset             VirtAddr           PhysAddr<br>                 FileSiz            MemSiz              Flags  Align<br>  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000<br>                 0x0000000000000aac 0x0000000000000aac  R E    0x200000<br>  LOAD           0x0000000000000db0 0x0000000000200db0 0x0000000000200db0<br>                 0x0000000000000290 0x00000000000002a0  RW     0x200000<br>  DYNAMIC        0x0000000000000dc8 0x0000000000200dc8 0x0000000000200dc8<br>                 0x00000000000001f0 0x00000000000001f0  RW     0x8<br>  NOTE           0x00000000000001c8 0x00000000000001c8 0x00000000000001c8<br>                 0x0000000000000024 0x0000000000000024  R      0x4<br>  GNU_EH_FRAME   0x00000000000009b0 0x00000000000009b0 0x00000000000009b0<br>                 0x0000000000000034 0x0000000000000034  R      0x4<br>  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000<br>                 0x0000000000000000 0x0000000000000000  RW     0x10<br>  GNU_RELRO      0x0000000000000db0 0x0000000000200db0 0x0000000000200db0<br>                 0x0000000000000250 0x0000000000000250  R      0x1</p>\n<p> Section to Segment mapping:<br>  段节…<br>   00     .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .eh_frame_hdr .eh_frame<br>   01     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss<br>   02     .dynamic<br>   03     .note.gnu.build-id<br>   04     .eh_frame_hdr<br>   05<br>   06     .init_array .fini_array .jcr .dynamic .got </p>\n<p>Dynamic section at offset 0xdc8 contains 27 entries:<br>  标记        类型                         名称/值<br> 0x0000000000000001 (NEEDED)             共享库：[libstdc++.so.6]<br> 0x0000000000000001 (NEEDED)             共享库：[libm.so.6]<br> 0x0000000000000001 (NEEDED)             共享库：[libgcc_s.so.1]<br> 0x0000000000000001 (NEEDED)             共享库：[libc.so.6]<br> 0x000000000000000c (INIT)               0x6c0<br> 0x000000000000000d (FINI)               0x9a4<br> 0x0000000000000019 (INIT_ARRAY)         0x200db0<br> 0x000000000000001b (INIT_ARRAYSZ)       8 (bytes)<br> 0x000000000000001a (FINI_ARRAY)         0x200db8<br> 0x000000000000001c (FINI_ARRAYSZ)       8 (bytes)<br> 0x000000006ffffef5 (GNU_HASH)           0x1f0<br> 0x0000000000000005 (STRTAB)             0x3e8<br> 0x0000000000000006 (SYMTAB)             0x238<br> 0x000000000000000a (STRSZ)              317 (bytes)<br> 0x000000000000000b (SYMENT)             24 (bytes)<br> 0x0000000000000003 (PLTGOT)             0x201000<br> 0x0000000000000002 (PLTRELSZ)           48 (bytes)<br> 0x0000000000000014 (PLTREL)             RELA<br> 0x0000000000000017 (JMPREL)             0x690<br> 0x0000000000000007 (RELA)               0x570<br> 0x0000000000000008 (RELASZ)             288 (bytes)<br> 0x0000000000000009 (RELAENT)            24 (bytes)<br> 0x000000006ffffffe (VERNEED)            0x550<br> 0x000000006fffffff (VERNEEDNUM)         1<br> 0x000000006ffffff0 (VERSYM)             0x526<br> 0x000000006ffffff9 (RELACOUNT)          3<br> 0x0000000000000000 (NULL)               0x0</p>\n<p>重定位节 ‘.rela.dyn’ 位于偏移量 0x570 含有 12 个条目：<br>  偏移量          信息           类型           符号值        符号名称 + 加数<br>000000200db0  000000000008 R_X86_64_RELATIVE                    7f0<br>000000200db8  000000000008 R_X86_64_RELATIVE                    7b0<br>000000201028  000000000008 R_X86_64_RELATIVE                    201028<br>000000200fb8  000100000006 R_X86_64_GLOB_DAT 0000000000000000 <strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a> + 0<br>000000200fc0  000200000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_data + 0<br>000000200fc8  000300000006 R_X86_64_GLOB_DAT 0000000000000000 g_static_lib_bss + 0<br>000000200fd0  000400000006 R_X86_64_GLOB_DAT 0000000000000000 _Jv_RegisterClasses + 0<br>000000200fd8  001100000006 R_X86_64_GLOB_DAT 0000000000201030 g_static_so_data + 0<br>000000200fe0  000d00000006 R_X86_64_GLOB_DAT 0000000000201048 g_static_so_bss + 0<br>000000200fe8  000500000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_deregisterTMClone + 0<br>000000200ff0  000700000006 R_X86_64_GLOB_DAT 0000000000000000 __gmon_start</strong> + 0<br>000000200ff8  000800000006 R_X86_64_GLOB_DAT 0000000000000000 _ITM_registerTMCloneTa + 0</p>\n<p>重定位节 ‘.rela.plt’ 位于偏移量 0x690 含有 2 个条目：<br>  偏移量          信息           类型           符号值        符号名称 + 加数<br>000000201018  001000000007 R_X86_64_JUMP_SLO 0000000000000820 _Z13so_child_funcii + 0<br>000000201020  000600000007 R_X86_64_JUMP_SLO 0000000000000000 _Z8lib_funcii + 0</p>\n<p>The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</p>\n<p>Symbol table ‘.dynsym’ contains 18 entries:<br>   Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND<br>     1: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND <strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a> (2)<br>     2: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data<br>     3: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss<br>     4: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses<br>     5: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab<br>     6: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii<br>     7: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start</strong><br>     8: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable<br>     9: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 _edata<br>    10: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end<br>    11: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init<br>    12: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start<br>    13: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss<br>    14: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii<br>    15: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini<br>    16: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii<br>    17: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data</p>\n<p>Symbol table ‘.symtab’ contains 63 entries:<br>   Num:    Value          Size Type    Bind   Vis      Ndx Name<br>     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND<br>     1: 00000000000001c8     0 SECTION LOCAL  DEFAULT    1<br>     2: 00000000000001f0     0 SECTION LOCAL  DEFAULT    2<br>     3: 0000000000000238     0 SECTION LOCAL  DEFAULT    3<br>     4: 00000000000003e8     0 SECTION LOCAL  DEFAULT    4<br>     5: 0000000000000526     0 SECTION LOCAL  DEFAULT    5<br>     6: 0000000000000550     0 SECTION LOCAL  DEFAULT    6<br>     7: 0000000000000570     0 SECTION LOCAL  DEFAULT    7<br>     8: 0000000000000690     0 SECTION LOCAL  DEFAULT    8<br>     9: 00000000000006c0     0 SECTION LOCAL  DEFAULT    9<br>    10: 00000000000006e0     0 SECTION LOCAL  DEFAULT   10<br>    11: 0000000000000710     0 SECTION LOCAL  DEFAULT   11<br>    12: 0000000000000720     0 SECTION LOCAL  DEFAULT   12<br>    13: 00000000000009a4     0 SECTION LOCAL  DEFAULT   13<br>    14: 00000000000009b0     0 SECTION LOCAL  DEFAULT   14<br>    15: 00000000000009e8     0 SECTION LOCAL  DEFAULT   15<br>    16: 0000000000200db0     0 SECTION LOCAL  DEFAULT   16<br>    17: 0000000000200db8     0 SECTION LOCAL  DEFAULT   17<br>    18: 0000000000200dc0     0 SECTION LOCAL  DEFAULT   18<br>    19: 0000000000200dc8     0 SECTION LOCAL  DEFAULT   19<br>    20: 0000000000200fb8     0 SECTION LOCAL  DEFAULT   20<br>    21: 0000000000201000     0 SECTION LOCAL  DEFAULT   21<br>    22: 0000000000201028     0 SECTION LOCAL  DEFAULT   22<br>    23: 0000000000201040     0 SECTION LOCAL  DEFAULT   23<br>    24: 0000000000000000     0 SECTION LOCAL  DEFAULT   24<br>    25: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c<br>    26: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 <strong>JCR_LIST</strong><br>    27: 0000000000000720     0 FUNC    LOCAL  DEFAULT   12 deregister_tm_clones<br>    28: 0000000000000760     0 FUNC    LOCAL  DEFAULT   12 register_tm_clones<br>    29: 00000000000007b0     0 FUNC    LOCAL  DEFAULT   12 <strong>do_global_dtors_aux<br>    30: 0000000000201040     1 OBJECT  LOCAL  DEFAULT   23 completed.6972<br>    31: 0000000000200db8     0 OBJECT  LOCAL  DEFAULT   17 <em>_do_global_dtors_aux_fin<br>    32: 00000000000007f0     0 FUNC    LOCAL  DEFAULT   12 frame_dummy<br>    33: 0000000000200db0     0 OBJECT  LOCAL  DEFAULT   16 __frame_dummy_init_array</em><br>    34: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS so.cpp<br>    35: 0000000000201038     8 OBJECT  LOCAL  DEFAULT   22 _ZL15g_local_so_data<br>    36: 0000000000000870    40 FUNC    LOCAL  DEFAULT   12 _ZL13so_local_funcv<br>    37: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c<br>    38: 0000000000000aa8     0 OBJECT  LOCAL  DEFAULT   15 __FRAME_END</strong><br>    39: 0000000000200dc0     0 OBJECT  LOCAL  DEFAULT   18 <strong>JCR_END</strong><br>    40: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS<br>    41: 00000000000009b0     0 NOTYPE  LOCAL  DEFAULT   14 <strong>GNU_EH_FRAME_HDR<br>    42: 0000000000201028     0 OBJECT  LOCAL  DEFAULT   22 __dso_handle<br>    43: 0000000000200dc8     0 OBJECT  LOCAL  DEFAULT   19 _DYNAMIC<br>    44: 0000000000201040     0 OBJECT  LOCAL  DEFAULT   22 __TMC_END</strong><br>    45: 0000000000201000     0 OBJECT  LOCAL  DEFAULT   21 <em>GLOBAL_OFFSET_TABLE</em><br>    46: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   22 <em>edata<br>    47: 0000000000000000     0 FUNC    WEAK   DEFAULT  UND <em>_cxa_finalize@@GLIBC_2.2<br>    48: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_data<br>    49: 00000000000009a4     0 FUNC    GLOBAL DEFAULT   13 _fini<br>    50: 0000000000000820    80 FUNC    GLOBAL DEFAULT   12 _Z13so_child_funcii<br>    51: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND g_static_lib_bss<br>    52: 00000000000006c0     0 FUNC    GLOBAL DEFAULT    9 _init<br>    53: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _Jv_RegisterClasses<br>    54: 0000000000201030     8 OBJECT  GLOBAL DEFAULT   22 g_static_so_data<br>    55: 0000000000201050     0 NOTYPE  GLOBAL DEFAULT   23 _end<br>    56: 0000000000201040     0 NOTYPE  GLOBAL DEFAULT   23 __bss_start<br>    57: 0000000000201048     8 OBJECT  GLOBAL DEFAULT   23 g_static_so_bss<br>    58: 0000000000000898   266 FUNC    GLOBAL DEFAULT   12 _Z7so_funcii<br>    59: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_deregisterTMCloneTab<br>    60: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z8lib_funcii<br>    61: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start</em></em><br>    62: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND _ITM_registerTMCloneTable</p>\n<p>Histogram for `.gnu.hash’ bucket list length (total of 3 buckets):<br> Length  Number     % of total  Coverage<br>      0  0          (  0.0%)<br>      1  0          (  0.0%)      0.0%<br>      2  1          ( 33.3%)     22.2%<br>      3  1          ( 33.3%)     55.6%<br>      4  1          ( 33.3%)    100.0%</p>\n<p>Version symbols section ‘.gnu.version’ contains 18 entries:<br> 地址：0000000000000526  Offset: 0x000526  Link: 3 (.dynsym)<br>  000:   0 (<em>本地</em>)       2 (GLIBC_2.2.5)   0 (<em>本地</em>)       0 (<em>本地</em>)<br>  004:   0 (<em>本地</em>)       0 (<em>本地</em>)       0 (<em>本地</em>)       0 (<em>本地</em>)<br>  008:   0 (<em>本地</em>)       1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)<br>  00c:   1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)      1 (<em>全局</em>)<br>  010:   1 (<em>全局</em>)      1 (<em>全局</em>)   </p>\n<p>Version needs section ‘.gnu.version_r’ contains 1 entries:<br> 地址：0x0000000000000550  Offset: 0x000550  Link: 4 (.dynstr)<br>  000000: 版本: 1  文件：libc.so.6  计数：1<br>  0x0010：名称：GLIBC_2.2.5  标志：无  版本：2</p>\n<p>Displaying notes found in: .note.gnu.build-id<br>  所有者             Data size  Description<br>  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)<br>    Build ID: 09ce242e3867431b496a7f5928e9817fa91d242a</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### 代码节</span><br></pre></td></tr></table></figure>\n<p>so.so：     文件格式 elf64-x86-64</p>\n<p>Disassembly of section .init:</p>\n<p>00000000000006c0 &lt;<em>init&gt;:<br> 6c0:   48 83 ec 08             sub    $0x8,%rsp<br> 6c4:   48 8b 05 25 09 20 00    mov    0x200925(%rip),%rax        # 200ff0 &lt;<em>_gmon_start</em></em>&gt;<br> 6cb:   48 85 c0                test   %rax,%rax<br> 6ce:   74 02                   je     6d2 &lt;_init+0x12&gt;<br> 6d0:   ff d0                   callq  *%rax<br> 6d2:   48 83 c4 08             add    $0x8,%rsp<br> 6d6:   c3                      retq   </p>\n<p>Disassembly of section .plt:</p>\n<p>00000000000006e0 &lt;.plt&gt;:<br> 6e0:   ff 35 22 09 20 00       pushq  0x200922(%rip)        # 201008 &lt;<em>GLOBAL_OFFSET_TABLE</em>+0x8&gt;<br> 6e6:   ff 25 24 09 20 00       jmpq   *0x200924(%rip)        # 201010 &lt;<em>GLOBAL_OFFSET_TABLE</em>+0x10&gt;<br> 6ec:   0f 1f 40 00             nopl   0x0(%rax)</p>\n<p>00000000000006f0 &lt;_Z13so_child_funcii@plt&gt;:<br> 6f0:   ff 25 22 09 20 00       jmpq   *0x200922(%rip)        # 201018 &lt;_Z13so_child_funcii@@Base+0x2007f8&gt;<br> 6f6:   68 00 00 00 00          pushq  $0x0<br> 6fb:   e9 e0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>0000000000000700 &lt;_Z8lib_funcii@plt&gt;:<br> 700:   ff 25 1a 09 20 00       jmpq   *0x20091a(%rip)        # 201020 &lt;_Z8lib_funcii&gt;<br> 706:   68 01 00 00 00          pushq  $0x1<br> 70b:   e9 d0 ff ff ff          jmpq   6e0 &lt;.plt&gt;</p>\n<p>Disassembly of section .plt.got:</p>\n<p>0000000000000710 &lt;.plt.got&gt;:<br> 710:   ff 25 a2 08 20 00       jmpq   *0x2008a2(%rip)        # 200fb8 &lt;<a href=\"mailto:__cxa_finalize@GLIBC_2.2.5\">__cxa_finalize@GLIBC_2.2.5</a>&gt;<br> 716:   66 90                   xchg   %ax,%ax</p>\n<p>Disassembly of section .text:</p>\n<p>0000000000000720 <deregister_tm_clones>:<br> 720:   48 8d 3d 19 09 20 00    lea    0x200919(%rip),%rdi        # 201040 &lt;_edata&gt;<br> 727:   48 8d 05 19 09 20 00    lea    0x200919(%rip),%rax        # 201047 &lt;_edata+0x7&gt;<br> 72e:   55                      push   %rbp<br> 72f:   48 29 f8                sub    %rdi,%rax<br> 732:   48 89 e5                mov    %rsp,%rbp<br> 735:   48 83 f8 0e             cmp    $0xe,%rax<br> 739:   76 15                   jbe    750 &lt;deregister_tm_clones+0x30&gt;<br> 73b:   48 8b 05 a6 08 20 00    mov    0x2008a6(%rip),%rax        # 200fe8 &lt;_ITM_deregisterTMCloneTable&gt;<br> 742:   48 85 c0                test   %rax,%rax<br> 745:   74 09                   je     750 &lt;deregister_tm_clones+0x30&gt;<br> 747:   5d                      pop    %rbp<br> 748:   ff e0                   jmpq   *%rax<br> 74a:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)<br> 750:   5d                      pop    %rbp<br> 751:   c3                      retq<br> 752:   0f 1f 40 00             nopl   0x0(%rax)<br> 756:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 75d:   00 00 00 </p>\n<p>0000000000000760 <register_tm_clones>:<br> 760:   48 8d 3d d9 08 20 00    lea    0x2008d9(%rip),%rdi        # 201040 &lt;_edata&gt;<br> 767:   48 8d 35 d2 08 20 00    lea    0x2008d2(%rip),%rsi        # 201040 &lt;_edata&gt;<br> 76e:   55                      push   %rbp<br> 76f:   48 29 fe                sub    %rdi,%rsi<br> 772:   48 89 e5                mov    %rsp,%rbp<br> 775:   48 c1 fe 03             sar    $0x3,%rsi<br> 779:   48 89 f0                mov    %rsi,%rax<br> 77c:   48 c1 e8 3f             shr    $0x3f,%rax<br> 780:   48 01 c6                add    %rax,%rsi<br> 783:   48 d1 fe                sar    %rsi<br> 786:   74 18                   je     7a0 &lt;register_tm_clones+0x40&gt;<br> 788:   48 8b 05 69 08 20 00    mov    0x200869(%rip),%rax        # 200ff8 &lt;_ITM_registerTMCloneTable&gt;<br> 78f:   48 85 c0                test   %rax,%rax<br> 792:   74 0c                   je     7a0 &lt;register_tm_clones+0x40&gt;<br> 794:   5d                      pop    %rbp<br> 795:   ff e0                   jmpq   *%rax<br> 797:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)<br> 79e:   00 00<br> 7a0:   5d                      pop    %rbp<br> 7a1:   c3                      retq<br> 7a2:   0f 1f 40 00             nopl   0x0(%rax)<br> 7a6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 7ad:   00 00 00 </p>\n<p>00000000000007b0 &lt;<strong>do_global_dtors_aux&gt;:<br> 7b0:   80 3d 89 08 20 00 00    cmpb   $0x0,0x200889(%rip)        # 201040 &lt;_edata&gt;<br> 7b7:   75 27                   jne    7e0 &lt;</strong>do_global_dtors_aux+0x30&gt;<br> 7b9:   48 83 3d f7 07 20 00    cmpq   $0x0,0x2007f7(%rip)        # 200fb8 &lt;<strong><a href=\"mailto:cxa_finalize@GLIBC_2.2.5\">cxa_finalize@GLIBC_2.2.5</a>&gt;<br> 7c0:   00<br> 7c1:   55                      push   %rbp<br> 7c2:   48 89 e5                mov    %rsp,%rbp<br> 7c5:   74 0c                   je     7d3 &lt;</strong>do_global_dtors_aux+0x23&gt;<br> 7c7:   48 8b 3d 5a 08 20 00    mov    0x20085a(%rip),%rdi        # 201028 &lt;__dso_handle&gt;<br> 7ce:   e8 3d ff ff ff          callq  710 &lt;.plt.got&gt;<br> 7d3:   e8 48 ff ff ff          callq  720 <deregister_tm_clones><br> 7d8:   5d                      pop    %rbp<br> 7d9:   c6 05 60 08 20 00 01    movb   $0x1,0x200860(%rip)        # 201040 &lt;_edata&gt;<br> 7e0:   f3 c3                   repz retq<br> 7e2:   0f 1f 40 00             nopl   0x0(%rax)<br> 7e6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)<br> 7ed:   00 00 00 </p>\n<p>00000000000007f0 <frame_dummy>:<br> 7f0:   48 8d 3d c9 05 20 00    lea    0x2005c9(%rip),%rdi        # 200dc0 &lt;<strong>JCR_END</strong>&gt;<br> 7f7:   48 83 3f 00             cmpq   $0x0,(%rdi)<br> 7fb:   75 0b                   jne    808 &lt;frame_dummy+0x18&gt;<br> 7fd:   e9 5e ff ff ff          jmpq   760 <register_tm_clones><br> 802:   66 0f 1f 44 00 00       nopw   0x0(%rax,%rax,1)<br> 808:   48 8b 05 c1 07 20 00    mov    0x2007c1(%rip),%rax        # 200fd0 &lt;_Jv_RegisterClasses&gt;<br> 80f:   48 85 c0                test   %rax,%rax<br> 812:   74 e9                   je     7fd &lt;frame_dummy+0xd&gt;<br> 814:   55                      push   %rbp<br> 815:   48 89 e5                mov    %rsp,%rbp<br> 818:   ff d0                   callq  *%rax<br> 81a:   5d                      pop    %rbp<br> 81b:   e9 40 ff ff ff          jmpq   760 <register_tm_clones></p>\n<p>0000000000000820 &lt;_Z13so_child_funcii&gt;:<br> 820:   55                      push   %rbp<br> 821:   48 89 e5                mov    %rsp,%rbp<br> 824:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 824 &lt;_Z13so_child_funcii+0x4&gt;<br> 82b:   49 bb dc 07 20 00 00    movabs $0x2007dc,%r11<br> 832:   00 00 00<br> 835:   4c 01 d8                add    %r11,%rax<br> 838:   89 7d fc                mov    %edi,-0x4(%rbp)<br> 83b:   89 75 f8                mov    %esi,-0x8(%rbp)<br> 83e:   8b 4d fc                mov    -0x4(%rbp),%ecx<br> 841:   8b 55 f8                mov    -0x8(%rbp),%edx<br> 844:   01 ca                   add    %ecx,%edx<br> 846:   89 d1                   mov    %edx,%ecx<br> 848:   48 ba e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rdx<br> 84f:   ff ff ff<br> 852:   48 8b 14 10             mov    (%rax,%rdx,1),%rdx<br> 856:   48 8b 12                mov    (%rdx),%rdx<br> 859:   01 d1                   add    %edx,%ecx<br> 85b:   48 ba d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rdx<br> 862:   ff ff ff<br> 865:   48 8b 04 10             mov    (%rax,%rdx,1),%rax<br> 869:   48 8b 00                mov    (%rax),%rax<br> 86c:   01 c8                   add    %ecx,%eax<br> 86e:   5d                      pop    %rbp<br> 86f:   c3                      retq   </p>\n<p>0000000000000870 &lt;_ZL13so_local_funcv&gt;:<br> 870:   55                      push   %rbp<br> 871:   48 89 e5                mov    %rsp,%rbp<br> 874:   48 8d 05 f9 ff ff ff    lea    -0x7(%rip),%rax        # 874 &lt;_ZL13so_local_funcv+0x4&gt;<br> 87b:   49 bb 8c 07 20 00 00    movabs $0x20078c,%r11<br> 882:   00 00 00<br> 885:   4c 01 d8                add    %r11,%rax<br> 888:   48 ba 38 00 00 00 00    movabs $0x38,%rdx<br> 88f:   00 00 00<br> 892:   48 8b 04 10             mov    (%rax,%rdx,1),%rax<br> 896:   5d                      pop    %rbp<br> 897:   c3                      retq   </p>\n<p>0000000000000898 &lt;_Z7so_funcii&gt;:<br> 898:   55                      push   %rbp<br> 899:   48 89 e5                mov    %rsp,%rbp<br> 89c:   41 57                   push   %r15<br> 89e:   53                      push   %rbx<br> 89f:   48 83 ec 20             sub    $0x20,%rsp<br> 8a3:   48 8d 1d f9 ff ff ff    lea    -0x7(%rip),%rbx        # 8a3 &lt;_Z7so_funcii+0xb&gt;<br> 8aa:   49 bb 5d 07 20 00 00    movabs $0x20075d,%r11<br> 8b1:   00 00 00<br> 8b4:   4c 01 db                add    %r11,%rbx<br> 8b7:   89 7d dc                mov    %edi,-0x24(%rbp)<br> 8ba:   89 75 d8                mov    %esi,-0x28(%rbp)<br> 8bd:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 8c4:   ff ff ff<br> 8c7:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8cb:   48 8b 00                mov    (%rax),%rax<br> 8ce:   48 8d 50 01             lea    0x1(%rax),%rdx<br> 8d2:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 8d9:   ff ff ff<br> 8dc:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8e0:   48 89 10                mov    %rdx,(%rax)<br> 8e3:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 8ea:   ff ff ff<br> 8ed:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 8f1:   48 8b 00                mov    (%rax),%rax<br> 8f4:   48 8d 50 01             lea    0x1(%rax),%rdx<br> 8f8:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 8ff:   ff ff ff<br> 902:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 906:   48 89 10                mov    %rdx,(%rax)<br> 909:   48 b8 d8 ff ff ff ff    movabs $0xffffffffffffffd8,%rax<br> 910:   ff ff ff<br> 913:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 917:   48 8b 00                mov    (%rax),%rax<br> 91a:   89 c2                   mov    %eax,%edx<br> 91c:   48 b8 e0 ff ff ff ff    movabs $0xffffffffffffffe0,%rax<br> 923:   ff ff ff<br> 926:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 92a:   48 8b 00                mov    (%rax),%rax<br> 92d:   89 d6                   mov    %edx,%esi<br> 92f:   89 c7                   mov    %eax,%edi<br> 931:   49 89 df                mov    %rbx,%r15<br> 934:   48 b8 00 f7 df ff ff    movabs $0xffffffffffdff700,%rax<br> 93b:   ff ff ff<br> 93e:   48 01 d8                add    %rbx,%rax<br> 941:   ff d0                   callq  *%rax<br> 943:   89 45 ec                mov    %eax,-0x14(%rbp)<br> 946:   48 b8 c8 ff ff ff ff    movabs $0xffffffffffffffc8,%rax<br> 94d:   ff ff ff<br> 950:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 954:   48 8b 00                mov    (%rax),%rax<br> 957:   89 c2                   mov    %eax,%edx<br> 959:   48 b8 c0 ff ff ff ff    movabs $0xffffffffffffffc0,%rax<br> 960:   ff ff ff<br> 963:   48 8b 04 03             mov    (%rbx,%rax,1),%rax<br> 967:   48 8b 00                mov    (%rax),%rax<br> 96a:   89 d6                   mov    %edx,%esi<br> 96c:   89 c7                   mov    %eax,%edi<br> 96e:   49 89 df                mov    %rbx,%r15<br> 971:   48 b8 f0 f6 df ff ff    movabs $0xffffffffffdff6f0,%rax<br> 978:   ff ff ff<br> 97b:   48 01 d8                add    %rbx,%rax<br> 97e:   ff d0                   callq  *%rax<br> 980:   01 45 ec                add    %eax,-0x14(%rbp)<br> 983:   48 b8 70 f8 df ff ff    movabs $0xffffffffffdff870,%rax<br> 98a:   ff ff ff<br> 98d:   48 8d 04 03             lea    (%rbx,%rax,1),%rax<br> 991:   ff d0                   callq  *%rax<br> 993:   01 45 ec                add    %eax,-0x14(%rbp)<br> 996:   8b 45 ec                mov    -0x14(%rbp),%eax<br> 999:   48 83 c4 20             add    $0x20,%rsp<br> 99d:   5b                      pop    %rbx<br> 99e:   41 5f                   pop    %r15<br> 9a0:   5d                      pop    %rbp<br> 9a1:   c3                      retq   </p>\n<p>Disassembly of section .fini:</p>\n<p>00000000000009a4 &lt;_fini&gt;:<br> 9a4:   48 83 ec 08             sub    $0x8,%rsp<br> 9a8:   48 83 c4 08             add    $0x8,%rsp<br> 9ac:   c3                      retq   </p>\n<pre><code>\n### 动态库装载过程  \n[linux kernel 源码](https://elixir.bootlin.com/linux/latest/source)  \n\n#### ELF的辅助向量 AUXV   \nmain函数的第三个参数  char* envp[]    \n\nLD_SHOW_AUXV=1 whoami \n\n#### load_elf_binary函数  \n* 填充并且检查目标程序ELF头部\n* load_elf_phdrs加载目标程序的程序头表\n* 如果需要动态链接, 则寻找和处理解释器段\n* 检查并读取解释器的程序表头\n* 装入目标程序的段segment\n* create_elf_tables填写目标文件的参数环境变量等必要信息\n* start_kernel宏准备进入新的程序入口\n\n\n\n\n\n\n\n\n\n&lt;/font&gt;</code></pre>"},{"title":"共享内存RESUME机制综述","date":"2020-08-02T16:00:00.000Z","author":"yawei.zhang","mathjax":true,"_content":"\n<!-- TOC -->\n\n- [前言](#%E5%89%8D%E8%A8%80)\n- [共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移](#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E5%87%BA%E7%8E%B0%E7%9A%84%E8%83%8C%E6%99%AF-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E8%80%8C%E4%B8%8D%E6%98%AF%E9%9B%86%E7%BE%A4%E5%86%97%E4%BD%99%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB)\n    - [MMOACT相比传统互联网的异同](#mmoact%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%BC%82%E5%90%8C)\n    - [方案对比和决策](#%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94%E5%92%8C%E5%86%B3%E7%AD%96)\n- [可行性分析和验证](#%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E5%92%8C%E9%AA%8C%E8%AF%81)\n    - [隔离业务状态数据与非业务环境数据](#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%9D%9E%E4%B8%9A%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE)\n    - [隔离业务状态和业务逻辑数据和逻辑分离](#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%95%B0%E6%8D%AE%E5%92%8C%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB)\n    - [最小化验证, FIRST GLOBAL STATE](#%E6%9C%80%E5%B0%8F%E5%8C%96%E9%AA%8C%E8%AF%81-first-global-state)\n- [解决方案和实践](#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E8%B7%B5)\n    - [RESUME状态重建/恢复的基础问题](#resume%E7%8A%B6%E6%80%81%E9%87%8D%E5%BB%BA%E6%81%A2%E5%A4%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98)\n    - [基础问题以及解决策略](#%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5)\n        - [附: 在随机化的ASLR中确立确定性的地址空间](#%E9%99%84-%E5%9C%A8%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%9A%84aslr%E4%B8%AD%E7%A1%AE%E7%AB%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4)\n    - [对象池和基础容器等通用性设计](#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%92%8C%E5%9F%BA%E7%A1%80%E5%AE%B9%E5%99%A8%E7%AD%89%E9%80%9A%E7%94%A8%E6%80%A7%E8%AE%BE%E8%AE%A1)\n        - [对象池定长内存池+对象分配回收接口的基础设计](#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9A%E9%95%BF%E5%86%85%E5%AD%98%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%9B%9E%E6%94%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1)\n        - [地址无关的容器实现](#%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0)\n- [小结](#%E5%B0%8F%E7%BB%93)\n    - [需要注意的其他问题](#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98)\n    - [通用性上的挑战: 在共享内存上构建通用内存管理器](#%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8A%E7%9A%84%E6%8C%91%E6%88%98-%E5%9C%A8%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%8A%E6%9E%84%E5%BB%BA%E9%80%9A%E7%94%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8)\n\n<!-- /TOC -->\n\n\n## 前言    \n**共享内存RESUME机制是指的: 通过将游戏状态数据保存在共享内存中, 当游戏进程crash后通过重启游戏服务器并attach已有的共享内存来恢复游戏状态, 以此达到玩家游戏体验在出现宕机时的连贯性, 提升游戏的容灾能力.**       \n\n\n## 共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移   \n\n### MMOACT相比传统互联网的异同   \n\n在web领域中,  业务和数据分离, 从而达成'业务无状态化', 开发人员专注于业务本身, 状态数据的一致性问题和容灾问题转移到可以较为独立解决的数据存储领域, 这个领域有非常多的论文和解决方案, 以及成熟的服务等.     \n\n而对于游戏领域来说, 互联网成熟的解决的方案很难在这个地方应用,  当然 对于外围系统来说, 我们仍然可以按照互联网成熟的解决方案进行布局, 例如聊天系统, 好友系统,  邮件系统, 日志系统,  或者一些游戏中的公会系统等.     \n\n<!--more-->\nMMOACT的特性:  \n* **CPU计算密集**   \n  * 地图单位扫描选择 命中包围盒碰撞检测 战斗事件响应处理  AI的扫描检测,行为决策,  移动的寻路/碰撞避免/检测等    \n  \n* **IO密集**  \n  * 视野内所有玩家的事件都要同步所有玩家(理想情况下), 这是一个$O(N^2)$的广播复杂度  \n  * 大世界内视野范围较为开阔   \n  \n* **低延迟响应**   \n  * 在战斗中, 一次攻击动作被拆解成逐帧开启和关闭的 霸体 无敌  攻击窗口 可闪避窗口 可打断窗口等流程片段, 一帧16.7ms  \n  * 在战斗中每秒平均5~7米的移动距离, 100ms的延迟将会带来一个身位的偏差造成命中失败  \n  * 弓箭的速度大约每秒50米, 30帧的客户端一帧就有两个身位的偏差  \n  * 互联网骨干网20ms的延迟 每一点额外的延迟都会给同步带来较为巨大的压力.   \n  \n* **共享状态高频读写**   \n  * 战斗单位与战斗单位之间, 战斗单位的模块与模块之间   \n  * ACT战斗中实时响应判定的AI(大量事件和回调)  \n  * 装备, 属性, 能量槽, 状态标签与技能和移动之间的相互引用与保证   \n    * BUFF对属性的修改 标签的装载和卸载 子弹时间的进出等都需要严格保证对称   \n  * 技能BUFF流程中跨战斗单位跨模块并需要严格保证时序的事件判定与脚本回执等   \n\n* **重业务逻辑,需求易变**   \n  * 业务类型繁多复杂且耦合, 见上栏'共享状态高频读写'   \n\n\n传统互联网特性:  \n* 数据规模大 用户量大 并发大  \n* 轻业务, 重存储 对数据一致性要求较高    \n  * 读写改查这几个基本操作可以涵盖绝大部分互联网业务的核心内容  \n* 业务较为稳定  \n* **延迟不敏感 通常都是秒级以上**.  \n  * google Analytics速度报告中, 网页的平均加载时间为4~8秒   2秒打开网页我们会觉得飞快(秒开)  \n  * 互动式直播和视频会议的延迟平均1~3秒  \n  * 苹果支付服务器验证一个支付凭据需要3s-6s   \n  * 45秒才能看视频   \n\n游戏业务的形式化描述:   \n$$\nS_k=\\begin{cases}\ng(P, C), \\qquad if \\quad k = 0 \\\\\\\\\nt(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1\n\\end{cases}\n$$\n\n> I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作  \n> S是游戏状态的集合 由众多状态子集组成  \n\n> 该公式的描述: \n> * 游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    \n> * 游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   \n\n\n大部分互联网核心业务都能很好的进行业务和状态存储上的解耦, 以stateless形式在现有成熟的数据库相关的存储服务之上通过已有的成熟的解决方案来订制解决, 其核心往往是通过牺牲响应速度, 提高解决方案的复杂度来实现大规模高一致性的互联网需求.   \n\n(12306的业务也不算复杂 但是难在大规模并发下, 状态之间难以解耦进行传统的分而治之而造成的)\n\n而游戏服务, 很多时候游戏服务可以看成一个复杂的非确定状态机, 有非常庞大的状态集合, 实时响应所有玩家的请求并不断的推演下去,  并且其业务变更非常频繁,  往往是通过牺牲一定程度的可靠性和一致性来做到在有限的开发周期和资源里, 把一个尽可能满足策划设计和玩家体验的游戏做出来.   \n实际上大部分的游戏项目也都在解决这个问题, 也因此互联网成熟的解决方案, 流行的解决方案 往往很难在游戏项目得到及时的应用, 尽管如此, 在靠近外围的架构和服务节点上, 我们仍然可以追着互联网潮流进行演进, 例如微服务.    \n\n\n附图, MMO技能的基本流程如下:   \n* 技能释放条件  --> 判断自身脚本 -->判断目标是否有脚本有则等待执行结果   \n* 技能预处理   --> 判定  \n* 技能释放成功  -->  判定  \n* 技能命中开始扫描目标  --> 是否有反向过滤  --> 等待执行结果   \n* 技能遍历所有选中目标\n  * 即将对目标发起命中处理  --> 判定  \n  * 对目标发起命中处理  \n    * 遍历所有效果    \n      * 即将对目标产生效果   --> 判定 \n        * 如果是伤害则有 伤害预处理  -- >判定    \n        * 如果是BUFF则有额外的buff流程判定  \n      * 已经对目标产生效果  --> 判定  \n        * 如果是伤害则有 伤害已经处理  -->判定  \n    * 遍历所有效果完毕   \n  * 已经对目标执行完命中处理  --> 判定   \n* 技能遍历目标发起命中结束    \n* 下一段命中  \n* 技能即将结束  --> 判定  \n* 技能已经结束   -->判定   \n\n通常1V1战斗一次可能需要保证时序的同步点大约就有20个 而混战情况下则会有N倍的提升,  在非分布式的情况下, 所有的同步点带来的处理复杂度都是一次分支判定,  但是如果是分布式则会是一次rpc   .   \n如果是共享内存下的消息队列实现(大吞吐)  一次rpc来回则可能有平均10ms的延迟, 那么在不牺牲时序逻辑的情况下, 则可能带来几百ms的巨大延迟.  \n\n### 方案对比和决策    \n有成功案例的两种做法:   \n\n一种不常见的BIGWORLD的做法(冗余系统&故障切换):   \n* 以战斗单位进行解耦, 不同的战斗单位可以分布在不同节点   \n* 游戏世界不按照场景地图划分, 而是按照战斗单位的负载动态切分   \n* 所有单位进行跨物理节点的冗余, 故障后直接切换到备份单位继续战斗   \n  \n* 跨节点的战斗, 如果战斗系统同步点过多则不可避免的带来额外的延迟  \n* RPC需求让系统变得更为复杂  开发和调试都会带来更多困难    \n* 动态负载均衡难以实现  \n* 需要面临的技术挑战过大参考资料和技术储备太少   \n\n\n另外一种, 基于共享内存RESUME做法:   \n* 状态数据持久化在共享内存中, 进程crash之后数据不丢失   \n* 对使用者透明,  状态数据是在本地内存还是共享内存 对C/C++这种语言的使用者来说没有区别  \n  * 经过完善的合理的包装设计, 可以做到业务人员对'共享内存'无感, 基本上做好状态和逻辑分离即可.   \n* 对共享内存上的状态访问读写操作等同本地内存, 无额外性能消耗和处理延迟  \n* RESUME后保持业务的连贯性, 对用户体验非常友好   \n* 原理简单容易(分阶段)实现, 且每阶段都可验证,  有较多成功案例.   \n\n\n\n方案差异:   \n* 提高可靠性   \n  * 多点备份  故障转移     \n    * 可在更多情景下做到可用性 例如网络故障 宕机   \n    * 可以考虑在小项目或者中台部门进行MVP迭代到一定完成度   \n  * 快速RESUME   \n    * 只支持crash情况, 但是根据行业经验 绝大部分情况都是代码bug带来的crash   \n* 保障业务连续性  \n  * 都能做到业务连续性   \n* 成本   \n  * 共享内存RESUME方案无论是在开发阶段还是QA/运维部署等阶段成本都大大低于多点备份+故障转移的做法   \n* 团队项目   \n  * 立项之初团队规模很小 人力资源总预算有限   \n\n方案选定:  \n* 尽可能的拆分外围服务 以stateless集群+数据库存储方案来实现   \n  * 例如好友 聊天 邮件等   \n\n* 对无法做到stateless又难以拆分的管理节点和战斗节点进行RESUME设计.   \n  * World管理节点  战斗场景  \n\n\n## 可行性分析和验证   \n\n### 隔离业务状态数据与非业务环境数据   \n第一个问题是, 哪些数据应该放在共享内存中, 哪些数据不能放在共享内存中, 这个问题决定了具体的业务恢复情况.  \n\n* **在游戏业务的RESUME机制中, 我们不做指令级的恢复,  也就是说, 首先 栈数据我们不会存放在共享内存中而是故障时直接丢弃**    \n  * 一旦把栈放在共享内存中, 意味着我们要记录所有的指令状态和序列以及执行情况, 以及这意味着我们在发明一套新的支持resume的vm语言(这种发明有没有现实意义是另外一个新的问题) 而不是在C/C++语言之上resume我们的业务.    \n  * crash可以发生在任意时刻的代码处理中, 难以避免的产生一些状态错误.    \n    * 规范: 不能在共享内存中的对象或者内存中 有存在指向任何栈上或者堆上的指针   \n    * 规范: 不能在共享内存中的对象或者内存中 有存在指向函数或者虚函数的指针 如果无法避免则需要在RESUME的时候恢复为正确的指针  \n    * 规范: 如非必要, 不能有被栈管理的共享内存资源  \n      * <font color=#999>例如使用智能指针获取共享内存上的某个对象, 然后经过一段复杂且经常变化的业务代码后release 控制权交给位于共享内存的map进行管理等.  这种情况一旦crash 这个对象无论crash多少次都会被永久挂起.</font>   \n    * 规范: 尽可能的做好结构和流程的局部化设计, 并且做好兜底设计:<font color=#999>   \n      * 例如 技能错误不影响战斗单位, 战斗单位错误不应该影响其他玩家等   \n      * 例如, 创建一个技能实例:  \n        * 获取创建实例的信息   \n        * 用准备好的信息数据创建一个实例并填充一个基础状态, 再接下来的复杂逻辑中一旦crash, resume之后仍然能检测到技能实例的异常状态或者到期后自动清理   \n        * 进行新实例创建后的脚本触发, 其他模块的同步调用通知等  \n      * 例如 技能中修改属性   \n        * 获取好单位的属性位置, 计算好要修改的值信息等   \n        * 没有任何错误和异常的话 进行连续的赋值修改等 (这种操作通常不会crash)    \n        * 执行一些变更通知 或者其他逻辑等  \n        * 技能实例到期销毁, 根据记录的属性修改记录进行反向恢复  \n      * 例如技能状态切换过程中出现错误  RESUME后正Tick检测到会再次执行切换操作</font>  \n    * 规范: 内部分阶段REVIEW新人的代码 检查是否有不符合RESUME或者带来隐患的设计\n\n* **隔离一些不能resume的三方库或者逻辑**    \n  * 例如PROTOBUF不能做RESUME  那么就需要禁止在任何业务状态中有存储指向pbin的指针, 必须是用时查找读取, 启服初始化时或者RESUME时重新加载.   \n  \n  \n* **消息/事件/任务队列等进行逻辑处理时应先标记当前'消息/事件/任务'在队列中已经被处理, 然后执行具体的逻辑. 一旦发生crash后不会重复执行该任务, 跳过故障流程**   \n  * 如果需要关注处理结果则应该有对应的处理超时机制, resume后等待一段时间后进行超时处理   \n\n\n### 隔离业务状态和业务逻辑(数据和逻辑分离)  \n一般来说, 我们在写可resumable的代码时要注意自己使用到的状态是不是放在共享内存中以及如何聚合在resumable框架中的,  但是为了减少开发人员的犯错机会以及心智负担, 我们可以参考ECS框架来单独的聚合所有resumable状态数据,  或者更进一步的, 所有状态数据都通过schema以单独的描述文件进行生成, 通过这种明确的定义和聚合形式, 做到让开发人员难以写出错误的代码, 以及可以更准确的跟踪resumable结构的变更(有利于热修复的风险控制).   \n\n* 业务状态和逻辑代码拆分后, 可以直观的观测和追溯状态的拓扑结构变更    \n* 共享内存RESUME机制是对代码热更友好的, 如果考虑线上代码热更, 则方便进行数据结构的拓扑对比     \n* 编写业务时因状态数据单独存放, 会起到'业务状态是放在共享内存而不是本地内存'的提醒作用, 减少心智负担.    \n* 方便进行REVIEW检查   \n\n\n### 最小化验证, FIRST GLOBAL STATE    \n\n基础原理为, 定义单独的抽象类作为单个服务节点的索引起点(框架),  该节点下所有共享内存上的状态均以对象,静态内存数组等数据成员的形式聚合为该类的数据成员.     \n在启服时候通过简单的静态计算算出来总大小并分配共享内存, 以此跑在共享内存之上,  在RESUME时则查找该共享内存并把框架类的指针指向共享内存区域.    \n\n* 基础的shmget/shmat流程   \n  * 启服创建共享内存, 并把global state指针指向共享内存完成构造初始化  \n  * 启服绑定共享内存, 并把global state指针指向共享内存完成绑定和resume回调等  \n\n* 所有游戏从global state这个Server类中聚合   例如  \n  * global state: scene server  \n    * map<场景>   \n      * 场景:   \n        * 地图大小   \n        * 怪物列表   \n    * map<玩家>   \n      * 玩家:\n        * 技能模块  \n          * 技能\n          * buff\n          * 标签\n        * 移动模块  \n    * 事件队列   \n\n\n## 解决方案和实践   \n\n### RESUME状态重建/恢复的基础问题  \n* 代码段因代码变更或者ASLR随机化发生改变   \n  * 函数指针变化 虚函数位置变化   \n\n<font color=#888>\n* 共享内存地址不固定情况下每次shmat会导致共享内存映射的地址发生变化   \n  * 记录的地址指针错误\n  * 只能使用地址无关的容器 例如std::array    \n</font>\n\n* 共享内存地址固定会因ASLR的HEAP/MMAP随机化而导致RESUME后冲突  \n  * 关闭ASLR并估算一个不会冲突的位置  (版本更新, 新的so库 都会带来小的改变 但是只要能启服成功 RESUME也会成功)   \n  * 不关闭ASLR并寻找一个不会被ASLR影响到区间  \n\n### 基础问题以及解决策略   \n\n共享内存RESUME方案需要配合一定的代码规范, 或者说共享内存方案本身需要让系统具备状态可恢复这种机制上, 一定会多多少少带来代码和设计上的约束,  我们会通过以下策略尽量减少这套机制对业务层的感知和对开发人员的限制.\n\n* 数据结构和算法的地址无关化设计  \n  * 避免出现指针, 特别是可能指向系统堆栈, 代码段等非共享内存位置的指针.  \n  * 能使用相对偏移量代替地址的尽量用偏移量   \n    * 例如下标 长度等信息    \n  * 尽量使用静态容器代替包含有动态内存分配的容器, 如果没有就实现一个   \n    * 使用数组方案, 或者std::array以及手动实现的static array来代替std::vector \n  * 业务上尽量使用无地址的解决方案   \n    * 例如现在有个事件队列, 我们手动定义事件枚举A,B,C,D   \n      * 在入队时, 我们根据需求push进去对应的事件ID和参数    \n      * 在出队时, 我们获取到事件ID进行switch case 事件枚举: 并调用指定的处理函数   \n\n\n* 固定虚拟地址空间中共享内存的映射地址   \n  * 让所有指向共享内存中的数据地址指针在RESUME后直接可用, 从共享内存RESUME整体出发降低系统的复杂度.  \n  * 需要关闭ASLR或者固定一个不会出现地址冲突问题的地址   \n\n\n* 间接地址方案, 隔离运行环境的真实地址  \n  * 基础思路为, 不直接使用和保存(函数)地址, 而是在第一次启动初始化时或者RESUME启动时把要使用的地址预先注册到某个公共位置, 使用时从这个位置读取正确的地址进行使用.   \n  * 情景1: 参考网络消息序列化的一般手段: 注册消息号和处理函数的映射关系  \n    * 函数类型相同   \n\n* 地址重定位方案, 直接修改失效的地址为当前执行环境的有效地址     \n  * 基础思路为: 记录下每个使用某(函数)地址的位置, 在RESUME后使用正确的(函数)地址替换掉记录中旧的记录     \n  * 例如我们记录下使用中所有带虚函数的对象位置, 在RESUME后对该对象的虚表指针进行替换.   \n  \n* 面向RESUME机制的手动编程, 不算兜底的兜底方案   \n  * 对于可以复用的底层框架代码或者容器代码, 我们会针对性的进行流程和框架上的封装, 或者提供支持RESUME容器实现来减少业务层对RESUME系统的感知以提高业务开发效率.   \n  * 但是无可避免的, 我们还是会遇到一些复杂的问题因为过于业务具体没有复用的价值, 或者无法预期进行集成, 因此一定程度上, 我们需要保留一定的开放性让用户自己去实现初始化和RESUME代码      \n    * 例如我们记录下所有包含OnResume方法的有效对象, 在RESUME后执行这些对象的OnResume方法来完成一些用户自定义的RESUME方案   \n      * 例如一些战斗单位绑定了RVO, 而这个RVO库并不运行在共享内存上, 那么这些战斗单位需要在OnResume里面进行重置操作或者根据当前的坐标移动信息重新绑定RVO库 \n\n\n#### 附: 在随机化的ASLR中确立确定性的地址空间  \n| - 用户空间布局 -              |\n|-------------------------------|\n| 0x0                           |\n| 保留区                        |\n| 代码段(PLT代码表部分)         |\n| 代码段                        |\n| 数据段(GOT) 只读              |\n| 数据段(.got.plt) 惰性加载机制 |\n| 数据段(Data)                  |\n| 数据段(BSS)                         |\n| 堆空间(Heap)                  |\n| ↓                             |\n| 未分配区域                    |\n| ↑                             |\n| 内存映射区域(mmap)            |\n| 栈空间(进程栈)                |\n| TASK_SIZE                     |\n\n地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置, 从而防范这类内存损坏漏洞被利用的计算机安全技术, 例如常见的Return-to-libc攻击.  \n\n这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制), 不同版本的操作系统和内核版本, 在ASLR的实现上以及默认系统选项都会有细节的不同, 在X86-64位最高等级下, 我们可以找到不会被随机到但是可以通过mmap建立有效映射的(0x0000 7F00 0000 0000 ~ 0x0000 5655 5555 5555)大约44T的地址空间(128T的1/3), 前者为mmap开始位置 后者为HEAP(BRK)开始位置.   \n\n在实践中, 我们把共享内存的位置设置在靠中间的位置, 给系统mmap和heap留有足够的空间.   例如 0x0000 7000 0000 000,  这样和MMAP区域有17T的间隙, 充分安全, 无论ASLR开什么级别RESUME多少次 始终不会和共享内存选定的地址产生冲突   \n\n细节内核代码分析见:[linux内存布局和ASLR下的可分配地址空间](https://zsummer.github.io/2019/11/04/2019-11-04-aslr/)\n\n\n\n\n###  对象池和基础容器等通用性设计   \n\n#### 对象池(定长内存池+对象分配回收接口)的基础设计  \n设计目的:   \n* 静态内存一次性分配, 动态分配和回收固定大小的内存   \n* 解决虚表失效问题   \n  * 解决单继承和多重继承问题  \n* 提供自定义的OnResume接口进行自定义的恢复 提高易用性和扩展性  \n  * 向用户层抛出一个自定义解决方案 \n* 提供FOREACH的分批轮询机制 平滑负载峰值  \n\n实现方案:   \n接口层实现:  \n* 类型枚举定义   \n* 注册(绑定)类型信息, 对象大小, 对象上限数量, 是否有虚表需要恢复, 是否需要支持OnResume    \n* 对象分配和回收接口  \n\n对象池管理器(管理头): \n* FREE索引ID(FREE LIST),  CHUNK大小(包含fence-next-id和obj), 数量上限, 虚表标志, OnResume标志, 起始地址偏移, BITMAP使用标志位图位置等    \n\n对象池:  \n* FENCE-HEAD-OBJ 数组   \n\n分配和回收流程:   \n分配:  \n* POP FREE HEAD指向的CHUNK   \n* 进行原地构造  \n* 设置BITMAP的使用标记   \n\n回收:  \n* 根据指针换算成CHUNK的索引ID   \n* 检测BITMAP的使用标记并移除标记  \n* 执行析构函数 \n* PUSH到FREE LIST中(设置为新的FREE HEAD)   \n\nFOREACH轮询流程:  \n按STEP数量遍历BITMAP使用标记并执行对象指定的轮询回调   \n* 例如对于一个每秒执行一次OnTick的对象,  可以拆分成100ms执行1/10的使用中对象的OnTick, 分10次在1秒内完成. 这样可以平滑CPU的负载, 并且不会出现迭代器失效等隐患问题    \n\nINIT和OnResume流程 \n一般放在对象池中的对象可以正在的构造函数中去完成初始化处理, Init这种二次初始化由用户去定义即可.    \n如果该对象需要在Resume中做一些自定义的检测或者恢复处理, 则需要定义该回调并进行标记  \n\n\n#### 地址无关的容器实现   \n这里放在一起说, 第一优先级是数组 其次是map和list.   \n\n* 数组容器的实现  \n  * 一般情况下可以用std::array或者原生数组来开发, 本身是地址无关的可以直接RESUME   \n  * 为了更方便和更通用, 实现了STATIC ARRAY,  接口和std::vector基本对齐, 但是元素数量上限是确定的\n\n* MAP容器   \n  * hash map的实现比较简单, 第一个版本中首先提供支持的就是hash map  \n  * 基本做法是分配上限大小的桶并以FREE LIST形式串联, 再分配上限大小的桶位(指向桶索引ID的编号数组), 在插入KV结构时hash到对应的桶位, 如果有冲突则在该位置串联.  查找删除时候过程相似.  \n  * std::map未实现 通过基于共享内存分配器实现的allocator直接对std::map进行支持  \n\n* LIST容器   \n  * 相比数组容器, 这个提供了稳定的迭代器和搞性能的插入删除性能   \n\n\n## 小结   \n通过框架和通用底层的数据结构实现, 以及对象池, 链表 数组 HASH_MAP等  \n已经实现了非常易用的一套基于共享内存RESUME的框架和系统  \n\n整体结构为两部分:   \n\n| GLOBAL SERVER |  OBJECT POOLS |   \n\n在服务的main入口通过对共享内存的启动BOOT封装, 完成自动化的共享内存的创建和恢复机制.   \n开发人员在开发新的服务节点时, 通过继承GLOBAL SERVER把所有数据以静态的形式聚合在GLOBAL SERVER下即可,  对于涉及到动态分配和管理的, 使用提供好的map/list/array即可.    \n\n### 需要注意的其他问题   \n\n* RESUME检测和恢复时间带来的超时问题和业务连贯性问题   \n  * RESUME恢复时间  \n    * 进程crash检测间隔  \n    * 共享内存上的状态恢复(通常非常快)  \n    * 被隔离的代码和模块的重新加载和初始化   \n      * 不在共享内存上的资源重新load  \n  * 被时间影响的功能   \n    * 大量移动包在RESUME成功之前无法处理消耗造成   \n      * 逻辑服没有移动包 战斗服是产生移动包的位置 其他节点结构简单不容易宕机 \n    * 异步请求出现超时\n\n\n### 通用性上的挑战: 在共享内存上构建通用内存管理器   \n\n* 移植stl的容器而非去独立实现(一劳永逸的兜底方案)   \n  * 实现shm allocator\n* 移植更多的三方库到共享内存上    \n  * 通用的内存分配器是基础     \n\n\n\n\n\n\n\n","source":"_posts/2020-08-03-shm-resume.md","raw":"---\ntitle: 共享内存RESUME机制综述 \ndate: 2020-08-03\ncategories: develop \nauthor: yawei.zhang \nmathjax: true\n---\n\n<!-- TOC -->\n\n- [前言](#%E5%89%8D%E8%A8%80)\n- [共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移](#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E5%87%BA%E7%8E%B0%E7%9A%84%E8%83%8C%E6%99%AF-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E8%80%8C%E4%B8%8D%E6%98%AF%E9%9B%86%E7%BE%A4%E5%86%97%E4%BD%99%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB)\n    - [MMOACT相比传统互联网的异同](#mmoact%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%BC%82%E5%90%8C)\n    - [方案对比和决策](#%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94%E5%92%8C%E5%86%B3%E7%AD%96)\n- [可行性分析和验证](#%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E5%92%8C%E9%AA%8C%E8%AF%81)\n    - [隔离业务状态数据与非业务环境数据](#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%9D%9E%E4%B8%9A%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE)\n    - [隔离业务状态和业务逻辑数据和逻辑分离](#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%95%B0%E6%8D%AE%E5%92%8C%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB)\n    - [最小化验证, FIRST GLOBAL STATE](#%E6%9C%80%E5%B0%8F%E5%8C%96%E9%AA%8C%E8%AF%81-first-global-state)\n- [解决方案和实践](#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E8%B7%B5)\n    - [RESUME状态重建/恢复的基础问题](#resume%E7%8A%B6%E6%80%81%E9%87%8D%E5%BB%BA%E6%81%A2%E5%A4%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98)\n    - [基础问题以及解决策略](#%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5)\n        - [附: 在随机化的ASLR中确立确定性的地址空间](#%E9%99%84-%E5%9C%A8%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%9A%84aslr%E4%B8%AD%E7%A1%AE%E7%AB%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4)\n    - [对象池和基础容器等通用性设计](#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%92%8C%E5%9F%BA%E7%A1%80%E5%AE%B9%E5%99%A8%E7%AD%89%E9%80%9A%E7%94%A8%E6%80%A7%E8%AE%BE%E8%AE%A1)\n        - [对象池定长内存池+对象分配回收接口的基础设计](#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9A%E9%95%BF%E5%86%85%E5%AD%98%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%9B%9E%E6%94%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1)\n        - [地址无关的容器实现](#%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0)\n- [小结](#%E5%B0%8F%E7%BB%93)\n    - [需要注意的其他问题](#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98)\n    - [通用性上的挑战: 在共享内存上构建通用内存管理器](#%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8A%E7%9A%84%E6%8C%91%E6%88%98-%E5%9C%A8%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%8A%E6%9E%84%E5%BB%BA%E9%80%9A%E7%94%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8)\n\n<!-- /TOC -->\n\n\n## 前言    \n**共享内存RESUME机制是指的: 通过将游戏状态数据保存在共享内存中, 当游戏进程crash后通过重启游戏服务器并attach已有的共享内存来恢复游戏状态, 以此达到玩家游戏体验在出现宕机时的连贯性, 提升游戏的容灾能力.**       \n\n\n## 共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移   \n\n### MMOACT相比传统互联网的异同   \n\n在web领域中,  业务和数据分离, 从而达成'业务无状态化', 开发人员专注于业务本身, 状态数据的一致性问题和容灾问题转移到可以较为独立解决的数据存储领域, 这个领域有非常多的论文和解决方案, 以及成熟的服务等.     \n\n而对于游戏领域来说, 互联网成熟的解决的方案很难在这个地方应用,  当然 对于外围系统来说, 我们仍然可以按照互联网成熟的解决方案进行布局, 例如聊天系统, 好友系统,  邮件系统, 日志系统,  或者一些游戏中的公会系统等.     \n\n<!--more-->\nMMOACT的特性:  \n* **CPU计算密集**   \n  * 地图单位扫描选择 命中包围盒碰撞检测 战斗事件响应处理  AI的扫描检测,行为决策,  移动的寻路/碰撞避免/检测等    \n  \n* **IO密集**  \n  * 视野内所有玩家的事件都要同步所有玩家(理想情况下), 这是一个$O(N^2)$的广播复杂度  \n  * 大世界内视野范围较为开阔   \n  \n* **低延迟响应**   \n  * 在战斗中, 一次攻击动作被拆解成逐帧开启和关闭的 霸体 无敌  攻击窗口 可闪避窗口 可打断窗口等流程片段, 一帧16.7ms  \n  * 在战斗中每秒平均5~7米的移动距离, 100ms的延迟将会带来一个身位的偏差造成命中失败  \n  * 弓箭的速度大约每秒50米, 30帧的客户端一帧就有两个身位的偏差  \n  * 互联网骨干网20ms的延迟 每一点额外的延迟都会给同步带来较为巨大的压力.   \n  \n* **共享状态高频读写**   \n  * 战斗单位与战斗单位之间, 战斗单位的模块与模块之间   \n  * ACT战斗中实时响应判定的AI(大量事件和回调)  \n  * 装备, 属性, 能量槽, 状态标签与技能和移动之间的相互引用与保证   \n    * BUFF对属性的修改 标签的装载和卸载 子弹时间的进出等都需要严格保证对称   \n  * 技能BUFF流程中跨战斗单位跨模块并需要严格保证时序的事件判定与脚本回执等   \n\n* **重业务逻辑,需求易变**   \n  * 业务类型繁多复杂且耦合, 见上栏'共享状态高频读写'   \n\n\n传统互联网特性:  \n* 数据规模大 用户量大 并发大  \n* 轻业务, 重存储 对数据一致性要求较高    \n  * 读写改查这几个基本操作可以涵盖绝大部分互联网业务的核心内容  \n* 业务较为稳定  \n* **延迟不敏感 通常都是秒级以上**.  \n  * google Analytics速度报告中, 网页的平均加载时间为4~8秒   2秒打开网页我们会觉得飞快(秒开)  \n  * 互动式直播和视频会议的延迟平均1~3秒  \n  * 苹果支付服务器验证一个支付凭据需要3s-6s   \n  * 45秒才能看视频   \n\n游戏业务的形式化描述:   \n$$\nS_k=\\begin{cases}\ng(P, C), \\qquad if \\quad k = 0 \\\\\\\\\nt(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1\n\\end{cases}\n$$\n\n> I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作  \n> S是游戏状态的集合 由众多状态子集组成  \n\n> 该公式的描述: \n> * 游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    \n> * 游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   \n\n\n大部分互联网核心业务都能很好的进行业务和状态存储上的解耦, 以stateless形式在现有成熟的数据库相关的存储服务之上通过已有的成熟的解决方案来订制解决, 其核心往往是通过牺牲响应速度, 提高解决方案的复杂度来实现大规模高一致性的互联网需求.   \n\n(12306的业务也不算复杂 但是难在大规模并发下, 状态之间难以解耦进行传统的分而治之而造成的)\n\n而游戏服务, 很多时候游戏服务可以看成一个复杂的非确定状态机, 有非常庞大的状态集合, 实时响应所有玩家的请求并不断的推演下去,  并且其业务变更非常频繁,  往往是通过牺牲一定程度的可靠性和一致性来做到在有限的开发周期和资源里, 把一个尽可能满足策划设计和玩家体验的游戏做出来.   \n实际上大部分的游戏项目也都在解决这个问题, 也因此互联网成熟的解决方案, 流行的解决方案 往往很难在游戏项目得到及时的应用, 尽管如此, 在靠近外围的架构和服务节点上, 我们仍然可以追着互联网潮流进行演进, 例如微服务.    \n\n\n附图, MMO技能的基本流程如下:   \n* 技能释放条件  --> 判断自身脚本 -->判断目标是否有脚本有则等待执行结果   \n* 技能预处理   --> 判定  \n* 技能释放成功  -->  判定  \n* 技能命中开始扫描目标  --> 是否有反向过滤  --> 等待执行结果   \n* 技能遍历所有选中目标\n  * 即将对目标发起命中处理  --> 判定  \n  * 对目标发起命中处理  \n    * 遍历所有效果    \n      * 即将对目标产生效果   --> 判定 \n        * 如果是伤害则有 伤害预处理  -- >判定    \n        * 如果是BUFF则有额外的buff流程判定  \n      * 已经对目标产生效果  --> 判定  \n        * 如果是伤害则有 伤害已经处理  -->判定  \n    * 遍历所有效果完毕   \n  * 已经对目标执行完命中处理  --> 判定   \n* 技能遍历目标发起命中结束    \n* 下一段命中  \n* 技能即将结束  --> 判定  \n* 技能已经结束   -->判定   \n\n通常1V1战斗一次可能需要保证时序的同步点大约就有20个 而混战情况下则会有N倍的提升,  在非分布式的情况下, 所有的同步点带来的处理复杂度都是一次分支判定,  但是如果是分布式则会是一次rpc   .   \n如果是共享内存下的消息队列实现(大吞吐)  一次rpc来回则可能有平均10ms的延迟, 那么在不牺牲时序逻辑的情况下, 则可能带来几百ms的巨大延迟.  \n\n### 方案对比和决策    \n有成功案例的两种做法:   \n\n一种不常见的BIGWORLD的做法(冗余系统&故障切换):   \n* 以战斗单位进行解耦, 不同的战斗单位可以分布在不同节点   \n* 游戏世界不按照场景地图划分, 而是按照战斗单位的负载动态切分   \n* 所有单位进行跨物理节点的冗余, 故障后直接切换到备份单位继续战斗   \n  \n* 跨节点的战斗, 如果战斗系统同步点过多则不可避免的带来额外的延迟  \n* RPC需求让系统变得更为复杂  开发和调试都会带来更多困难    \n* 动态负载均衡难以实现  \n* 需要面临的技术挑战过大参考资料和技术储备太少   \n\n\n另外一种, 基于共享内存RESUME做法:   \n* 状态数据持久化在共享内存中, 进程crash之后数据不丢失   \n* 对使用者透明,  状态数据是在本地内存还是共享内存 对C/C++这种语言的使用者来说没有区别  \n  * 经过完善的合理的包装设计, 可以做到业务人员对'共享内存'无感, 基本上做好状态和逻辑分离即可.   \n* 对共享内存上的状态访问读写操作等同本地内存, 无额外性能消耗和处理延迟  \n* RESUME后保持业务的连贯性, 对用户体验非常友好   \n* 原理简单容易(分阶段)实现, 且每阶段都可验证,  有较多成功案例.   \n\n\n\n方案差异:   \n* 提高可靠性   \n  * 多点备份  故障转移     \n    * 可在更多情景下做到可用性 例如网络故障 宕机   \n    * 可以考虑在小项目或者中台部门进行MVP迭代到一定完成度   \n  * 快速RESUME   \n    * 只支持crash情况, 但是根据行业经验 绝大部分情况都是代码bug带来的crash   \n* 保障业务连续性  \n  * 都能做到业务连续性   \n* 成本   \n  * 共享内存RESUME方案无论是在开发阶段还是QA/运维部署等阶段成本都大大低于多点备份+故障转移的做法   \n* 团队项目   \n  * 立项之初团队规模很小 人力资源总预算有限   \n\n方案选定:  \n* 尽可能的拆分外围服务 以stateless集群+数据库存储方案来实现   \n  * 例如好友 聊天 邮件等   \n\n* 对无法做到stateless又难以拆分的管理节点和战斗节点进行RESUME设计.   \n  * World管理节点  战斗场景  \n\n\n## 可行性分析和验证   \n\n### 隔离业务状态数据与非业务环境数据   \n第一个问题是, 哪些数据应该放在共享内存中, 哪些数据不能放在共享内存中, 这个问题决定了具体的业务恢复情况.  \n\n* **在游戏业务的RESUME机制中, 我们不做指令级的恢复,  也就是说, 首先 栈数据我们不会存放在共享内存中而是故障时直接丢弃**    \n  * 一旦把栈放在共享内存中, 意味着我们要记录所有的指令状态和序列以及执行情况, 以及这意味着我们在发明一套新的支持resume的vm语言(这种发明有没有现实意义是另外一个新的问题) 而不是在C/C++语言之上resume我们的业务.    \n  * crash可以发生在任意时刻的代码处理中, 难以避免的产生一些状态错误.    \n    * 规范: 不能在共享内存中的对象或者内存中 有存在指向任何栈上或者堆上的指针   \n    * 规范: 不能在共享内存中的对象或者内存中 有存在指向函数或者虚函数的指针 如果无法避免则需要在RESUME的时候恢复为正确的指针  \n    * 规范: 如非必要, 不能有被栈管理的共享内存资源  \n      * <font color=#999>例如使用智能指针获取共享内存上的某个对象, 然后经过一段复杂且经常变化的业务代码后release 控制权交给位于共享内存的map进行管理等.  这种情况一旦crash 这个对象无论crash多少次都会被永久挂起.</font>   \n    * 规范: 尽可能的做好结构和流程的局部化设计, 并且做好兜底设计:<font color=#999>   \n      * 例如 技能错误不影响战斗单位, 战斗单位错误不应该影响其他玩家等   \n      * 例如, 创建一个技能实例:  \n        * 获取创建实例的信息   \n        * 用准备好的信息数据创建一个实例并填充一个基础状态, 再接下来的复杂逻辑中一旦crash, resume之后仍然能检测到技能实例的异常状态或者到期后自动清理   \n        * 进行新实例创建后的脚本触发, 其他模块的同步调用通知等  \n      * 例如 技能中修改属性   \n        * 获取好单位的属性位置, 计算好要修改的值信息等   \n        * 没有任何错误和异常的话 进行连续的赋值修改等 (这种操作通常不会crash)    \n        * 执行一些变更通知 或者其他逻辑等  \n        * 技能实例到期销毁, 根据记录的属性修改记录进行反向恢复  \n      * 例如技能状态切换过程中出现错误  RESUME后正Tick检测到会再次执行切换操作</font>  \n    * 规范: 内部分阶段REVIEW新人的代码 检查是否有不符合RESUME或者带来隐患的设计\n\n* **隔离一些不能resume的三方库或者逻辑**    \n  * 例如PROTOBUF不能做RESUME  那么就需要禁止在任何业务状态中有存储指向pbin的指针, 必须是用时查找读取, 启服初始化时或者RESUME时重新加载.   \n  \n  \n* **消息/事件/任务队列等进行逻辑处理时应先标记当前'消息/事件/任务'在队列中已经被处理, 然后执行具体的逻辑. 一旦发生crash后不会重复执行该任务, 跳过故障流程**   \n  * 如果需要关注处理结果则应该有对应的处理超时机制, resume后等待一段时间后进行超时处理   \n\n\n### 隔离业务状态和业务逻辑(数据和逻辑分离)  \n一般来说, 我们在写可resumable的代码时要注意自己使用到的状态是不是放在共享内存中以及如何聚合在resumable框架中的,  但是为了减少开发人员的犯错机会以及心智负担, 我们可以参考ECS框架来单独的聚合所有resumable状态数据,  或者更进一步的, 所有状态数据都通过schema以单独的描述文件进行生成, 通过这种明确的定义和聚合形式, 做到让开发人员难以写出错误的代码, 以及可以更准确的跟踪resumable结构的变更(有利于热修复的风险控制).   \n\n* 业务状态和逻辑代码拆分后, 可以直观的观测和追溯状态的拓扑结构变更    \n* 共享内存RESUME机制是对代码热更友好的, 如果考虑线上代码热更, 则方便进行数据结构的拓扑对比     \n* 编写业务时因状态数据单独存放, 会起到'业务状态是放在共享内存而不是本地内存'的提醒作用, 减少心智负担.    \n* 方便进行REVIEW检查   \n\n\n### 最小化验证, FIRST GLOBAL STATE    \n\n基础原理为, 定义单独的抽象类作为单个服务节点的索引起点(框架),  该节点下所有共享内存上的状态均以对象,静态内存数组等数据成员的形式聚合为该类的数据成员.     \n在启服时候通过简单的静态计算算出来总大小并分配共享内存, 以此跑在共享内存之上,  在RESUME时则查找该共享内存并把框架类的指针指向共享内存区域.    \n\n* 基础的shmget/shmat流程   \n  * 启服创建共享内存, 并把global state指针指向共享内存完成构造初始化  \n  * 启服绑定共享内存, 并把global state指针指向共享内存完成绑定和resume回调等  \n\n* 所有游戏从global state这个Server类中聚合   例如  \n  * global state: scene server  \n    * map<场景>   \n      * 场景:   \n        * 地图大小   \n        * 怪物列表   \n    * map<玩家>   \n      * 玩家:\n        * 技能模块  \n          * 技能\n          * buff\n          * 标签\n        * 移动模块  \n    * 事件队列   \n\n\n## 解决方案和实践   \n\n### RESUME状态重建/恢复的基础问题  \n* 代码段因代码变更或者ASLR随机化发生改变   \n  * 函数指针变化 虚函数位置变化   \n\n<font color=#888>\n* 共享内存地址不固定情况下每次shmat会导致共享内存映射的地址发生变化   \n  * 记录的地址指针错误\n  * 只能使用地址无关的容器 例如std::array    \n</font>\n\n* 共享内存地址固定会因ASLR的HEAP/MMAP随机化而导致RESUME后冲突  \n  * 关闭ASLR并估算一个不会冲突的位置  (版本更新, 新的so库 都会带来小的改变 但是只要能启服成功 RESUME也会成功)   \n  * 不关闭ASLR并寻找一个不会被ASLR影响到区间  \n\n### 基础问题以及解决策略   \n\n共享内存RESUME方案需要配合一定的代码规范, 或者说共享内存方案本身需要让系统具备状态可恢复这种机制上, 一定会多多少少带来代码和设计上的约束,  我们会通过以下策略尽量减少这套机制对业务层的感知和对开发人员的限制.\n\n* 数据结构和算法的地址无关化设计  \n  * 避免出现指针, 特别是可能指向系统堆栈, 代码段等非共享内存位置的指针.  \n  * 能使用相对偏移量代替地址的尽量用偏移量   \n    * 例如下标 长度等信息    \n  * 尽量使用静态容器代替包含有动态内存分配的容器, 如果没有就实现一个   \n    * 使用数组方案, 或者std::array以及手动实现的static array来代替std::vector \n  * 业务上尽量使用无地址的解决方案   \n    * 例如现在有个事件队列, 我们手动定义事件枚举A,B,C,D   \n      * 在入队时, 我们根据需求push进去对应的事件ID和参数    \n      * 在出队时, 我们获取到事件ID进行switch case 事件枚举: 并调用指定的处理函数   \n\n\n* 固定虚拟地址空间中共享内存的映射地址   \n  * 让所有指向共享内存中的数据地址指针在RESUME后直接可用, 从共享内存RESUME整体出发降低系统的复杂度.  \n  * 需要关闭ASLR或者固定一个不会出现地址冲突问题的地址   \n\n\n* 间接地址方案, 隔离运行环境的真实地址  \n  * 基础思路为, 不直接使用和保存(函数)地址, 而是在第一次启动初始化时或者RESUME启动时把要使用的地址预先注册到某个公共位置, 使用时从这个位置读取正确的地址进行使用.   \n  * 情景1: 参考网络消息序列化的一般手段: 注册消息号和处理函数的映射关系  \n    * 函数类型相同   \n\n* 地址重定位方案, 直接修改失效的地址为当前执行环境的有效地址     \n  * 基础思路为: 记录下每个使用某(函数)地址的位置, 在RESUME后使用正确的(函数)地址替换掉记录中旧的记录     \n  * 例如我们记录下使用中所有带虚函数的对象位置, 在RESUME后对该对象的虚表指针进行替换.   \n  \n* 面向RESUME机制的手动编程, 不算兜底的兜底方案   \n  * 对于可以复用的底层框架代码或者容器代码, 我们会针对性的进行流程和框架上的封装, 或者提供支持RESUME容器实现来减少业务层对RESUME系统的感知以提高业务开发效率.   \n  * 但是无可避免的, 我们还是会遇到一些复杂的问题因为过于业务具体没有复用的价值, 或者无法预期进行集成, 因此一定程度上, 我们需要保留一定的开放性让用户自己去实现初始化和RESUME代码      \n    * 例如我们记录下所有包含OnResume方法的有效对象, 在RESUME后执行这些对象的OnResume方法来完成一些用户自定义的RESUME方案   \n      * 例如一些战斗单位绑定了RVO, 而这个RVO库并不运行在共享内存上, 那么这些战斗单位需要在OnResume里面进行重置操作或者根据当前的坐标移动信息重新绑定RVO库 \n\n\n#### 附: 在随机化的ASLR中确立确定性的地址空间  \n| - 用户空间布局 -              |\n|-------------------------------|\n| 0x0                           |\n| 保留区                        |\n| 代码段(PLT代码表部分)         |\n| 代码段                        |\n| 数据段(GOT) 只读              |\n| 数据段(.got.plt) 惰性加载机制 |\n| 数据段(Data)                  |\n| 数据段(BSS)                         |\n| 堆空间(Heap)                  |\n| ↓                             |\n| 未分配区域                    |\n| ↑                             |\n| 内存映射区域(mmap)            |\n| 栈空间(进程栈)                |\n| TASK_SIZE                     |\n\n地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置, 从而防范这类内存损坏漏洞被利用的计算机安全技术, 例如常见的Return-to-libc攻击.  \n\n这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制), 不同版本的操作系统和内核版本, 在ASLR的实现上以及默认系统选项都会有细节的不同, 在X86-64位最高等级下, 我们可以找到不会被随机到但是可以通过mmap建立有效映射的(0x0000 7F00 0000 0000 ~ 0x0000 5655 5555 5555)大约44T的地址空间(128T的1/3), 前者为mmap开始位置 后者为HEAP(BRK)开始位置.   \n\n在实践中, 我们把共享内存的位置设置在靠中间的位置, 给系统mmap和heap留有足够的空间.   例如 0x0000 7000 0000 000,  这样和MMAP区域有17T的间隙, 充分安全, 无论ASLR开什么级别RESUME多少次 始终不会和共享内存选定的地址产生冲突   \n\n细节内核代码分析见:[linux内存布局和ASLR下的可分配地址空间](https://zsummer.github.io/2019/11/04/2019-11-04-aslr/)\n\n\n\n\n###  对象池和基础容器等通用性设计   \n\n#### 对象池(定长内存池+对象分配回收接口)的基础设计  \n设计目的:   \n* 静态内存一次性分配, 动态分配和回收固定大小的内存   \n* 解决虚表失效问题   \n  * 解决单继承和多重继承问题  \n* 提供自定义的OnResume接口进行自定义的恢复 提高易用性和扩展性  \n  * 向用户层抛出一个自定义解决方案 \n* 提供FOREACH的分批轮询机制 平滑负载峰值  \n\n实现方案:   \n接口层实现:  \n* 类型枚举定义   \n* 注册(绑定)类型信息, 对象大小, 对象上限数量, 是否有虚表需要恢复, 是否需要支持OnResume    \n* 对象分配和回收接口  \n\n对象池管理器(管理头): \n* FREE索引ID(FREE LIST),  CHUNK大小(包含fence-next-id和obj), 数量上限, 虚表标志, OnResume标志, 起始地址偏移, BITMAP使用标志位图位置等    \n\n对象池:  \n* FENCE-HEAD-OBJ 数组   \n\n分配和回收流程:   \n分配:  \n* POP FREE HEAD指向的CHUNK   \n* 进行原地构造  \n* 设置BITMAP的使用标记   \n\n回收:  \n* 根据指针换算成CHUNK的索引ID   \n* 检测BITMAP的使用标记并移除标记  \n* 执行析构函数 \n* PUSH到FREE LIST中(设置为新的FREE HEAD)   \n\nFOREACH轮询流程:  \n按STEP数量遍历BITMAP使用标记并执行对象指定的轮询回调   \n* 例如对于一个每秒执行一次OnTick的对象,  可以拆分成100ms执行1/10的使用中对象的OnTick, 分10次在1秒内完成. 这样可以平滑CPU的负载, 并且不会出现迭代器失效等隐患问题    \n\nINIT和OnResume流程 \n一般放在对象池中的对象可以正在的构造函数中去完成初始化处理, Init这种二次初始化由用户去定义即可.    \n如果该对象需要在Resume中做一些自定义的检测或者恢复处理, 则需要定义该回调并进行标记  \n\n\n#### 地址无关的容器实现   \n这里放在一起说, 第一优先级是数组 其次是map和list.   \n\n* 数组容器的实现  \n  * 一般情况下可以用std::array或者原生数组来开发, 本身是地址无关的可以直接RESUME   \n  * 为了更方便和更通用, 实现了STATIC ARRAY,  接口和std::vector基本对齐, 但是元素数量上限是确定的\n\n* MAP容器   \n  * hash map的实现比较简单, 第一个版本中首先提供支持的就是hash map  \n  * 基本做法是分配上限大小的桶并以FREE LIST形式串联, 再分配上限大小的桶位(指向桶索引ID的编号数组), 在插入KV结构时hash到对应的桶位, 如果有冲突则在该位置串联.  查找删除时候过程相似.  \n  * std::map未实现 通过基于共享内存分配器实现的allocator直接对std::map进行支持  \n\n* LIST容器   \n  * 相比数组容器, 这个提供了稳定的迭代器和搞性能的插入删除性能   \n\n\n## 小结   \n通过框架和通用底层的数据结构实现, 以及对象池, 链表 数组 HASH_MAP等  \n已经实现了非常易用的一套基于共享内存RESUME的框架和系统  \n\n整体结构为两部分:   \n\n| GLOBAL SERVER |  OBJECT POOLS |   \n\n在服务的main入口通过对共享内存的启动BOOT封装, 完成自动化的共享内存的创建和恢复机制.   \n开发人员在开发新的服务节点时, 通过继承GLOBAL SERVER把所有数据以静态的形式聚合在GLOBAL SERVER下即可,  对于涉及到动态分配和管理的, 使用提供好的map/list/array即可.    \n\n### 需要注意的其他问题   \n\n* RESUME检测和恢复时间带来的超时问题和业务连贯性问题   \n  * RESUME恢复时间  \n    * 进程crash检测间隔  \n    * 共享内存上的状态恢复(通常非常快)  \n    * 被隔离的代码和模块的重新加载和初始化   \n      * 不在共享内存上的资源重新load  \n  * 被时间影响的功能   \n    * 大量移动包在RESUME成功之前无法处理消耗造成   \n      * 逻辑服没有移动包 战斗服是产生移动包的位置 其他节点结构简单不容易宕机 \n    * 异步请求出现超时\n\n\n### 通用性上的挑战: 在共享内存上构建通用内存管理器   \n\n* 移植stl的容器而非去独立实现(一劳永逸的兜底方案)   \n  * 实现shm allocator\n* 移植更多的三方库到共享内存上    \n  * 通用的内存分配器是基础     \n\n\n\n\n\n\n\n","slug":"2020-08-03-shm-resume","published":1,"updated":"2020-08-12T03:46:22.390Z","_id":"ckdgznlw800006o5hc0zaecf8","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- TOC -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E5%87%BA%E7%8E%B0%E7%9A%84%E8%83%8C%E6%99%AF-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E8%80%8C%E4%B8%8D%E6%98%AF%E9%9B%86%E7%BE%A4%E5%86%97%E4%BD%99%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB\">共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移</a><ul>\n<li><a href=\"#mmoact%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%BC%82%E5%90%8C\">MMOACT相比传统互联网的异同</a></li>\n<li><a href=\"#%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94%E5%92%8C%E5%86%B3%E7%AD%96\">方案对比和决策</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E5%92%8C%E9%AA%8C%E8%AF%81\">可行性分析和验证</a><ul>\n<li><a href=\"#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%9D%9E%E4%B8%9A%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE\">隔离业务状态数据与非业务环境数据</a></li>\n<li><a href=\"#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%95%B0%E6%8D%AE%E5%92%8C%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB\">隔离业务状态和业务逻辑数据和逻辑分离</a></li>\n<li><a href=\"#%E6%9C%80%E5%B0%8F%E5%8C%96%E9%AA%8C%E8%AF%81-first-global-state\">最小化验证, FIRST GLOBAL STATE</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E8%B7%B5\">解决方案和实践</a><ul>\n<li><a href=\"#resume%E7%8A%B6%E6%80%81%E9%87%8D%E5%BB%BA%E6%81%A2%E5%A4%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98\">RESUME状态重建/恢复的基础问题</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5\">基础问题以及解决策略</a><ul>\n<li><a href=\"#%E9%99%84-%E5%9C%A8%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%9A%84aslr%E4%B8%AD%E7%A1%AE%E7%AB%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4\">附: 在随机化的ASLR中确立确定性的地址空间</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%92%8C%E5%9F%BA%E7%A1%80%E5%AE%B9%E5%99%A8%E7%AD%89%E9%80%9A%E7%94%A8%E6%80%A7%E8%AE%BE%E8%AE%A1\">对象池和基础容器等通用性设计</a><ul>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9A%E9%95%BF%E5%86%85%E5%AD%98%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%9B%9E%E6%94%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1\">对象池定长内存池+对象分配回收接口的基础设计</a></li>\n<li><a href=\"#%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0\">地址无关的容器实现</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a><ul>\n<li><a href=\"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98\">需要注意的其他问题</a></li>\n<li><a href=\"#%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8A%E7%9A%84%E6%8C%91%E6%88%98-%E5%9C%A8%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%8A%E6%9E%84%E5%BB%BA%E9%80%9A%E7%94%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8\">通用性上的挑战: 在共享内存上构建通用内存管理器</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n<h2><span id=\"前言\">前言</span></h2><p><strong>共享内存RESUME机制是指的: 通过将游戏状态数据保存在共享内存中, 当游戏进程crash后通过重启游戏服务器并attach已有的共享内存来恢复游戏状态, 以此达到玩家游戏体验在出现宕机时的连贯性, 提升游戏的容灾能力.</strong>       </p>\n<h2><span id=\"共享内存resume出现的背景-为什么选择共享内存resume而不是集群冗余故障转移\">共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移</span></h2><h3><span id=\"mmoact相比传统互联网的异同\">MMOACT相比传统互联网的异同</span></h3><p>在web领域中,  业务和数据分离, 从而达成’业务无状态化’, 开发人员专注于业务本身, 状态数据的一致性问题和容灾问题转移到可以较为独立解决的数据存储领域, 这个领域有非常多的论文和解决方案, 以及成熟的服务等.     </p>\n<p>而对于游戏领域来说, 互联网成熟的解决的方案很难在这个地方应用,  当然 对于外围系统来说, 我们仍然可以按照互联网成熟的解决方案进行布局, 例如聊天系统, 好友系统,  邮件系统, 日志系统,  或者一些游戏中的公会系统等.     </p>\n<a id=\"more\"></a>\n<p>MMOACT的特性:  </p>\n<ul>\n<li><p><strong>CPU计算密集</strong>   </p>\n<ul>\n<li>地图单位扫描选择 命中包围盒碰撞检测 战斗事件响应处理  AI的扫描检测,行为决策,  移动的寻路/碰撞避免/检测等    </li>\n</ul>\n</li>\n<li><p><strong>IO密集</strong>  </p>\n<ul>\n<li>视野内所有玩家的事件都要同步所有玩家(理想情况下), 这是一个$O(N^2)$的广播复杂度  </li>\n<li>大世界内视野范围较为开阔   </li>\n</ul>\n</li>\n<li><p><strong>低延迟响应</strong>   </p>\n<ul>\n<li>在战斗中, 一次攻击动作被拆解成逐帧开启和关闭的 霸体 无敌  攻击窗口 可闪避窗口 可打断窗口等流程片段, 一帧16.7ms  </li>\n<li>在战斗中每秒平均5~7米的移动距离, 100ms的延迟将会带来一个身位的偏差造成命中失败  </li>\n<li>弓箭的速度大约每秒50米, 30帧的客户端一帧就有两个身位的偏差  </li>\n<li>互联网骨干网20ms的延迟 每一点额外的延迟都会给同步带来较为巨大的压力.   </li>\n</ul>\n</li>\n<li><p><strong>共享状态高频读写</strong>   </p>\n<ul>\n<li>战斗单位与战斗单位之间, 战斗单位的模块与模块之间   </li>\n<li>ACT战斗中实时响应判定的AI(大量事件和回调)  </li>\n<li>装备, 属性, 能量槽, 状态标签与技能和移动之间的相互引用与保证   <ul>\n<li>BUFF对属性的修改 标签的装载和卸载 子弹时间的进出等都需要严格保证对称   </li>\n</ul>\n</li>\n<li>技能BUFF流程中跨战斗单位跨模块并需要严格保证时序的事件判定与脚本回执等   </li>\n</ul>\n</li>\n<li><p><strong>重业务逻辑,需求易变</strong>   </p>\n<ul>\n<li>业务类型繁多复杂且耦合, 见上栏’共享状态高频读写’   </li>\n</ul>\n</li>\n</ul>\n<p>传统互联网特性:  </p>\n<ul>\n<li>数据规模大 用户量大 并发大  </li>\n<li>轻业务, 重存储 对数据一致性要求较高    <ul>\n<li>读写改查这几个基本操作可以涵盖绝大部分互联网业务的核心内容  </li>\n</ul>\n</li>\n<li>业务较为稳定  </li>\n<li><strong>延迟不敏感 通常都是秒级以上</strong>.  <ul>\n<li>google Analytics速度报告中, 网页的平均加载时间为4~8秒   2秒打开网页我们会觉得飞快(秒开)  </li>\n<li>互动式直播和视频会议的延迟平均1~3秒  </li>\n<li>苹果支付服务器验证一个支付凭据需要3s-6s   </li>\n<li>45秒才能看视频   </li>\n</ul>\n</li>\n</ul>\n<p>游戏业务的形式化描述:<br>$$<br>S_k=\\begin{cases}<br>g(P, C), \\qquad if \\quad k = 0 \\\\<br>t(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1<br>\\end{cases}<br>$$</p>\n<blockquote>\n<p>I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作<br>S是游戏状态的集合 由众多状态子集组成  </p>\n</blockquote>\n<blockquote>\n<p>该公式的描述: </p>\n<ul>\n<li>游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    </li>\n<li>游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   </li>\n</ul>\n</blockquote>\n<p>大部分互联网核心业务都能很好的进行业务和状态存储上的解耦, 以stateless形式在现有成熟的数据库相关的存储服务之上通过已有的成熟的解决方案来订制解决, 其核心往往是通过牺牲响应速度, 提高解决方案的复杂度来实现大规模高一致性的互联网需求.   </p>\n<p>(12306的业务也不算复杂 但是难在大规模并发下, 状态之间难以解耦进行传统的分而治之而造成的)</p>\n<p>而游戏服务, 很多时候游戏服务可以看成一个复杂的非确定状态机, 有非常庞大的状态集合, 实时响应所有玩家的请求并不断的推演下去,  并且其业务变更非常频繁,  往往是通过牺牲一定程度的可靠性和一致性来做到在有限的开发周期和资源里, 把一个尽可能满足策划设计和玩家体验的游戏做出来.<br>实际上大部分的游戏项目也都在解决这个问题, 也因此互联网成熟的解决方案, 流行的解决方案 往往很难在游戏项目得到及时的应用, 尽管如此, 在靠近外围的架构和服务节点上, 我们仍然可以追着互联网潮流进行演进, 例如微服务.    </p>\n<p>附图, MMO技能的基本流程如下:   </p>\n<ul>\n<li>技能释放条件  –&gt; 判断自身脚本 –&gt;判断目标是否有脚本有则等待执行结果   </li>\n<li>技能预处理   –&gt; 判定  </li>\n<li>技能释放成功  –&gt;  判定  </li>\n<li>技能命中开始扫描目标  –&gt; 是否有反向过滤  –&gt; 等待执行结果   </li>\n<li>技能遍历所有选中目标<ul>\n<li>即将对目标发起命中处理  –&gt; 判定  </li>\n<li>对目标发起命中处理  <ul>\n<li>遍历所有效果    <ul>\n<li>即将对目标产生效果   –&gt; 判定 <ul>\n<li>如果是伤害则有 伤害预处理  – &gt;判定    </li>\n<li>如果是BUFF则有额外的buff流程判定  </li>\n</ul>\n</li>\n<li>已经对目标产生效果  –&gt; 判定  <ul>\n<li>如果是伤害则有 伤害已经处理  –&gt;判定  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>遍历所有效果完毕   </li>\n</ul>\n</li>\n<li>已经对目标执行完命中处理  –&gt; 判定   </li>\n</ul>\n</li>\n<li>技能遍历目标发起命中结束    </li>\n<li>下一段命中  </li>\n<li>技能即将结束  –&gt; 判定  </li>\n<li>技能已经结束   –&gt;判定   </li>\n</ul>\n<p>通常1V1战斗一次可能需要保证时序的同步点大约就有20个 而混战情况下则会有N倍的提升,  在非分布式的情况下, 所有的同步点带来的处理复杂度都是一次分支判定,  但是如果是分布式则会是一次rpc   .<br>如果是共享内存下的消息队列实现(大吞吐)  一次rpc来回则可能有平均10ms的延迟, 那么在不牺牲时序逻辑的情况下, 则可能带来几百ms的巨大延迟.  </p>\n<h3><span id=\"方案对比和决策\">方案对比和决策</span></h3><p>有成功案例的两种做法:   </p>\n<p>一种不常见的BIGWORLD的做法(冗余系统&amp;故障切换):   </p>\n<ul>\n<li><p>以战斗单位进行解耦, 不同的战斗单位可以分布在不同节点   </p>\n</li>\n<li><p>游戏世界不按照场景地图划分, 而是按照战斗单位的负载动态切分   </p>\n</li>\n<li><p>所有单位进行跨物理节点的冗余, 故障后直接切换到备份单位继续战斗   </p>\n</li>\n<li><p>跨节点的战斗, 如果战斗系统同步点过多则不可避免的带来额外的延迟  </p>\n</li>\n<li><p>RPC需求让系统变得更为复杂  开发和调试都会带来更多困难    </p>\n</li>\n<li><p>动态负载均衡难以实现  </p>\n</li>\n<li><p>需要面临的技术挑战过大参考资料和技术储备太少   </p>\n</li>\n</ul>\n<p>另外一种, 基于共享内存RESUME做法:   </p>\n<ul>\n<li>状态数据持久化在共享内存中, 进程crash之后数据不丢失   </li>\n<li>对使用者透明,  状态数据是在本地内存还是共享内存 对C/C++这种语言的使用者来说没有区别  <ul>\n<li>经过完善的合理的包装设计, 可以做到业务人员对’共享内存’无感, 基本上做好状态和逻辑分离即可.   </li>\n</ul>\n</li>\n<li>对共享内存上的状态访问读写操作等同本地内存, 无额外性能消耗和处理延迟  </li>\n<li>RESUME后保持业务的连贯性, 对用户体验非常友好   </li>\n<li>原理简单容易(分阶段)实现, 且每阶段都可验证,  有较多成功案例.   </li>\n</ul>\n<p>方案差异:   </p>\n<ul>\n<li>提高可靠性   <ul>\n<li>多点备份  故障转移     <ul>\n<li>可在更多情景下做到可用性 例如网络故障 宕机   </li>\n<li>可以考虑在小项目或者中台部门进行MVP迭代到一定完成度   </li>\n</ul>\n</li>\n<li>快速RESUME   <ul>\n<li>只支持crash情况, 但是根据行业经验 绝大部分情况都是代码bug带来的crash   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>保障业务连续性  <ul>\n<li>都能做到业务连续性   </li>\n</ul>\n</li>\n<li>成本   <ul>\n<li>共享内存RESUME方案无论是在开发阶段还是QA/运维部署等阶段成本都大大低于多点备份+故障转移的做法   </li>\n</ul>\n</li>\n<li>团队项目   <ul>\n<li>立项之初团队规模很小 人力资源总预算有限   </li>\n</ul>\n</li>\n</ul>\n<p>方案选定:  </p>\n<ul>\n<li><p>尽可能的拆分外围服务 以stateless集群+数据库存储方案来实现   </p>\n<ul>\n<li>例如好友 聊天 邮件等   </li>\n</ul>\n</li>\n<li><p>对无法做到stateless又难以拆分的管理节点和战斗节点进行RESUME设计.   </p>\n<ul>\n<li>World管理节点  战斗场景  </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"可行性分析和验证\">可行性分析和验证</span></h2><h3><span id=\"隔离业务状态数据与非业务环境数据\">隔离业务状态数据与非业务环境数据</span></h3><p>第一个问题是, 哪些数据应该放在共享内存中, 哪些数据不能放在共享内存中, 这个问题决定了具体的业务恢复情况.  </p>\n<ul>\n<li><p><strong>在游戏业务的RESUME机制中, 我们不做指令级的恢复,  也就是说, 首先 栈数据我们不会存放在共享内存中而是故障时直接丢弃</strong>    </p>\n<ul>\n<li>一旦把栈放在共享内存中, 意味着我们要记录所有的指令状态和序列以及执行情况, 以及这意味着我们在发明一套新的支持resume的vm语言(这种发明有没有现实意义是另外一个新的问题) 而不是在C/C++语言之上resume我们的业务.    </li>\n<li>crash可以发生在任意时刻的代码处理中, 难以避免的产生一些状态错误.    <ul>\n<li>规范: 不能在共享内存中的对象或者内存中 有存在指向任何栈上或者堆上的指针   </li>\n<li>规范: 不能在共享内存中的对象或者内存中 有存在指向函数或者虚函数的指针 如果无法避免则需要在RESUME的时候恢复为正确的指针  </li>\n<li>规范: 如非必要, 不能有被栈管理的共享内存资源  <ul>\n<li><font color=\"#999\">例如使用智能指针获取共享内存上的某个对象, 然后经过一段复杂且经常变化的业务代码后release 控制权交给位于共享内存的map进行管理等.  这种情况一旦crash 这个对象无论crash多少次都会被永久挂起.</font>   </li>\n</ul>\n</li>\n<li>规范: 尽可能的做好结构和流程的局部化设计, 并且做好兜底设计:<font color=\"#999\">   <ul>\n<li>例如 技能错误不影响战斗单位, 战斗单位错误不应该影响其他玩家等   </li>\n<li>例如, 创建一个技能实例:  <ul>\n<li>获取创建实例的信息   </li>\n<li>用准备好的信息数据创建一个实例并填充一个基础状态, 再接下来的复杂逻辑中一旦crash, resume之后仍然能检测到技能实例的异常状态或者到期后自动清理   </li>\n<li>进行新实例创建后的脚本触发, 其他模块的同步调用通知等  </li>\n</ul>\n</li>\n<li>例如 技能中修改属性   <ul>\n<li>获取好单位的属性位置, 计算好要修改的值信息等   </li>\n<li>没有任何错误和异常的话 进行连续的赋值修改等 (这种操作通常不会crash)    </li>\n<li>执行一些变更通知 或者其他逻辑等  </li>\n<li>技能实例到期销毁, 根据记录的属性修改记录进行反向恢复  </li>\n</ul>\n</li>\n<li>例如技能状态切换过程中出现错误  RESUME后正Tick检测到会再次执行切换操作</li></ul></font>  </li>\n</ul>\n</li>\n<li>规范: 内部分阶段REVIEW新人的代码 检查是否有不符合RESUME或者带来隐患的设计</li>\n</ul>\n</li>\n</ul>\n\n<li><p><strong>隔离一些不能resume的三方库或者逻辑</strong>    </p>\n<ul>\n<li>例如PROTOBUF不能做RESUME  那么就需要禁止在任何业务状态中有存储指向pbin的指针, 必须是用时查找读取, 启服初始化时或者RESUME时重新加载.   </li>\n</ul>\n</li>\n\n<ul>\n<li><strong>消息/事件/任务队列等进行逻辑处理时应先标记当前’消息/事件/任务’在队列中已经被处理, 然后执行具体的逻辑. 一旦发生crash后不会重复执行该任务, 跳过故障流程</strong>   <ul>\n<li>如果需要关注处理结果则应该有对应的处理超时机制, resume后等待一段时间后进行超时处理   </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"隔离业务状态和业务逻辑数据和逻辑分离\">隔离业务状态和业务逻辑(数据和逻辑分离)</span></h3><p>一般来说, 我们在写可resumable的代码时要注意自己使用到的状态是不是放在共享内存中以及如何聚合在resumable框架中的,  但是为了减少开发人员的犯错机会以及心智负担, 我们可以参考ECS框架来单独的聚合所有resumable状态数据,  或者更进一步的, 所有状态数据都通过schema以单独的描述文件进行生成, 通过这种明确的定义和聚合形式, 做到让开发人员难以写出错误的代码, 以及可以更准确的跟踪resumable结构的变更(有利于热修复的风险控制).   </p>\n<ul>\n<li>业务状态和逻辑代码拆分后, 可以直观的观测和追溯状态的拓扑结构变更    </li>\n<li>共享内存RESUME机制是对代码热更友好的, 如果考虑线上代码热更, 则方便进行数据结构的拓扑对比     </li>\n<li>编写业务时因状态数据单独存放, 会起到’业务状态是放在共享内存而不是本地内存’的提醒作用, 减少心智负担.    </li>\n<li>方便进行REVIEW检查   </li>\n</ul>\n<h3><span id=\"最小化验证-first-global-state\">最小化验证, FIRST GLOBAL STATE</span></h3><p>基础原理为, 定义单独的抽象类作为单个服务节点的索引起点(框架),  该节点下所有共享内存上的状态均以对象,静态内存数组等数据成员的形式聚合为该类的数据成员.<br>在启服时候通过简单的静态计算算出来总大小并分配共享内存, 以此跑在共享内存之上,  在RESUME时则查找该共享内存并把框架类的指针指向共享内存区域.    </p>\n<ul>\n<li><p>基础的shmget/shmat流程   </p>\n<ul>\n<li>启服创建共享内存, 并把global state指针指向共享内存完成构造初始化  </li>\n<li>启服绑定共享内存, 并把global state指针指向共享内存完成绑定和resume回调等  </li>\n</ul>\n</li>\n<li><p>所有游戏从global state这个Server类中聚合   例如  </p>\n<ul>\n<li>global state: scene server  <ul>\n<li>map&lt;场景&gt;   <ul>\n<li>场景:   <ul>\n<li>地图大小   </li>\n<li>怪物列表   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>map&lt;玩家&gt;   <ul>\n<li>玩家:<ul>\n<li>技能模块  <ul>\n<li>技能</li>\n<li>buff</li>\n<li>标签</li>\n</ul>\n</li>\n<li>移动模块  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件队列   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"解决方案和实践\">解决方案和实践</span></h2><h3><span id=\"resume状态重建恢复的基础问题\">RESUME状态重建/恢复的基础问题</span></h3><ul>\n<li>代码段因代码变更或者ASLR随机化发生改变   <ul>\n<li>函数指针变化 虚函数位置变化   </li>\n</ul>\n</li>\n</ul>\n<font color=\"#888\">\n* 共享内存地址不固定情况下每次shmat会导致共享内存映射的地址发生变化   \n  * 记录的地址指针错误\n  * 只能使用地址无关的容器 例如std::array    \n</font>\n\n<ul>\n<li>共享内存地址固定会因ASLR的HEAP/MMAP随机化而导致RESUME后冲突  <ul>\n<li>关闭ASLR并估算一个不会冲突的位置  (版本更新, 新的so库 都会带来小的改变 但是只要能启服成功 RESUME也会成功)   </li>\n<li>不关闭ASLR并寻找一个不会被ASLR影响到区间  </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"基础问题以及解决策略\">基础问题以及解决策略</span></h3><p>共享内存RESUME方案需要配合一定的代码规范, 或者说共享内存方案本身需要让系统具备状态可恢复这种机制上, 一定会多多少少带来代码和设计上的约束,  我们会通过以下策略尽量减少这套机制对业务层的感知和对开发人员的限制.</p>\n<ul>\n<li>数据结构和算法的地址无关化设计  <ul>\n<li>避免出现指针, 特别是可能指向系统堆栈, 代码段等非共享内存位置的指针.  </li>\n<li>能使用相对偏移量代替地址的尽量用偏移量   <ul>\n<li>例如下标 长度等信息    </li>\n</ul>\n</li>\n<li>尽量使用静态容器代替包含有动态内存分配的容器, 如果没有就实现一个   <ul>\n<li>使用数组方案, 或者std::array以及手动实现的static array来代替std::vector </li>\n</ul>\n</li>\n<li>业务上尽量使用无地址的解决方案   <ul>\n<li>例如现在有个事件队列, 我们手动定义事件枚举A,B,C,D   <ul>\n<li>在入队时, 我们根据需求push进去对应的事件ID和参数    </li>\n<li>在出队时, 我们获取到事件ID进行switch case 事件枚举: 并调用指定的处理函数   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>固定虚拟地址空间中共享内存的映射地址   <ul>\n<li>让所有指向共享内存中的数据地址指针在RESUME后直接可用, 从共享内存RESUME整体出发降低系统的复杂度.  </li>\n<li>需要关闭ASLR或者固定一个不会出现地址冲突问题的地址   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>间接地址方案, 隔离运行环境的真实地址  </p>\n<ul>\n<li>基础思路为, 不直接使用和保存(函数)地址, 而是在第一次启动初始化时或者RESUME启动时把要使用的地址预先注册到某个公共位置, 使用时从这个位置读取正确的地址进行使用.   </li>\n<li>情景1: 参考网络消息序列化的一般手段: 注册消息号和处理函数的映射关系  <ul>\n<li>函数类型相同   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>地址重定位方案, 直接修改失效的地址为当前执行环境的有效地址     </p>\n<ul>\n<li>基础思路为: 记录下每个使用某(函数)地址的位置, 在RESUME后使用正确的(函数)地址替换掉记录中旧的记录     </li>\n<li>例如我们记录下使用中所有带虚函数的对象位置, 在RESUME后对该对象的虚表指针进行替换.   </li>\n</ul>\n</li>\n<li><p>面向RESUME机制的手动编程, 不算兜底的兜底方案   </p>\n<ul>\n<li>对于可以复用的底层框架代码或者容器代码, 我们会针对性的进行流程和框架上的封装, 或者提供支持RESUME容器实现来减少业务层对RESUME系统的感知以提高业务开发效率.   </li>\n<li>但是无可避免的, 我们还是会遇到一些复杂的问题因为过于业务具体没有复用的价值, 或者无法预期进行集成, 因此一定程度上, 我们需要保留一定的开放性让用户自己去实现初始化和RESUME代码      <ul>\n<li>例如我们记录下所有包含OnResume方法的有效对象, 在RESUME后执行这些对象的OnResume方法来完成一些用户自定义的RESUME方案   <ul>\n<li>例如一些战斗单位绑定了RVO, 而这个RVO库并不运行在共享内存上, 那么这些战斗单位需要在OnResume里面进行重置操作或者根据当前的坐标移动信息重新绑定RVO库 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"附-在随机化的aslr中确立确定性的地址空间\">附: 在随机化的ASLR中确立确定性的地址空间</span></h4><table>\n<thead>\n<tr>\n<th>- 用户空间布局 -</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x0</td>\n</tr>\n<tr>\n<td>保留区</td>\n</tr>\n<tr>\n<td>代码段(PLT代码表部分)</td>\n</tr>\n<tr>\n<td>代码段</td>\n</tr>\n<tr>\n<td>数据段(GOT) 只读</td>\n</tr>\n<tr>\n<td>数据段(.got.plt) 惰性加载机制</td>\n</tr>\n<tr>\n<td>数据段(Data)</td>\n</tr>\n<tr>\n<td>数据段(BSS)</td>\n</tr>\n<tr>\n<td>堆空间(Heap)</td>\n</tr>\n<tr>\n<td>↓</td>\n</tr>\n<tr>\n<td>未分配区域</td>\n</tr>\n<tr>\n<td>↑</td>\n</tr>\n<tr>\n<td>内存映射区域(mmap)</td>\n</tr>\n<tr>\n<td>栈空间(进程栈)</td>\n</tr>\n<tr>\n<td>TASK_SIZE</td>\n</tr>\n</tbody></table>\n<p>地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置, 从而防范这类内存损坏漏洞被利用的计算机安全技术, 例如常见的Return-to-libc攻击.  </p>\n<p>这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制), 不同版本的操作系统和内核版本, 在ASLR的实现上以及默认系统选项都会有细节的不同, 在X86-64位最高等级下, 我们可以找到不会被随机到但是可以通过mmap建立有效映射的(0x0000 7F00 0000 0000 ~ 0x0000 5655 5555 5555)大约44T的地址空间(128T的1/3), 前者为mmap开始位置 后者为HEAP(BRK)开始位置.   </p>\n<p>在实践中, 我们把共享内存的位置设置在靠中间的位置, 给系统mmap和heap留有足够的空间.   例如 0x0000 7000 0000 000,  这样和MMAP区域有17T的间隙, 充分安全, 无论ASLR开什么级别RESUME多少次 始终不会和共享内存选定的地址产生冲突   </p>\n<p>细节内核代码分析见:<a href=\"https://zsummer.github.io/2019/11/04/2019-11-04-aslr/\">linux内存布局和ASLR下的可分配地址空间</a></p>\n<h3><span id=\"对象池和基础容器等通用性设计\">对象池和基础容器等通用性设计</span></h3><h4><span id=\"对象池定长内存池对象分配回收接口的基础设计\">对象池(定长内存池+对象分配回收接口)的基础设计</span></h4><p>设计目的:   </p>\n<ul>\n<li>静态内存一次性分配, 动态分配和回收固定大小的内存   </li>\n<li>解决虚表失效问题   <ul>\n<li>解决单继承和多重继承问题  </li>\n</ul>\n</li>\n<li>提供自定义的OnResume接口进行自定义的恢复 提高易用性和扩展性  <ul>\n<li>向用户层抛出一个自定义解决方案 </li>\n</ul>\n</li>\n<li>提供FOREACH的分批轮询机制 平滑负载峰值  </li>\n</ul>\n<p>实现方案:<br>接口层实现:  </p>\n<ul>\n<li>类型枚举定义   </li>\n<li>注册(绑定)类型信息, 对象大小, 对象上限数量, 是否有虚表需要恢复, 是否需要支持OnResume    </li>\n<li>对象分配和回收接口  </li>\n</ul>\n<p>对象池管理器(管理头): </p>\n<ul>\n<li>FREE索引ID(FREE LIST),  CHUNK大小(包含fence-next-id和obj), 数量上限, 虚表标志, OnResume标志, 起始地址偏移, BITMAP使用标志位图位置等    </li>\n</ul>\n<p>对象池:  </p>\n<ul>\n<li>FENCE-HEAD-OBJ 数组   </li>\n</ul>\n<p>分配和回收流程:<br>分配:  </p>\n<ul>\n<li>POP FREE HEAD指向的CHUNK   </li>\n<li>进行原地构造  </li>\n<li>设置BITMAP的使用标记   </li>\n</ul>\n<p>回收:  </p>\n<ul>\n<li>根据指针换算成CHUNK的索引ID   </li>\n<li>检测BITMAP的使用标记并移除标记  </li>\n<li>执行析构函数 </li>\n<li>PUSH到FREE LIST中(设置为新的FREE HEAD)   </li>\n</ul>\n<p>FOREACH轮询流程:<br>按STEP数量遍历BITMAP使用标记并执行对象指定的轮询回调   </p>\n<ul>\n<li>例如对于一个每秒执行一次OnTick的对象,  可以拆分成100ms执行1/10的使用中对象的OnTick, 分10次在1秒内完成. 这样可以平滑CPU的负载, 并且不会出现迭代器失效等隐患问题    </li>\n</ul>\n<p>INIT和OnResume流程<br>一般放在对象池中的对象可以正在的构造函数中去完成初始化处理, Init这种二次初始化由用户去定义即可.<br>如果该对象需要在Resume中做一些自定义的检测或者恢复处理, 则需要定义该回调并进行标记  </p>\n<h4><span id=\"地址无关的容器实现\">地址无关的容器实现</span></h4><p>这里放在一起说, 第一优先级是数组 其次是map和list.   </p>\n<ul>\n<li><p>数组容器的实现  </p>\n<ul>\n<li>一般情况下可以用std::array或者原生数组来开发, 本身是地址无关的可以直接RESUME   </li>\n<li>为了更方便和更通用, 实现了STATIC ARRAY,  接口和std::vector基本对齐, 但是元素数量上限是确定的</li>\n</ul>\n</li>\n<li><p>MAP容器   </p>\n<ul>\n<li>hash map的实现比较简单, 第一个版本中首先提供支持的就是hash map  </li>\n<li>基本做法是分配上限大小的桶并以FREE LIST形式串联, 再分配上限大小的桶位(指向桶索引ID的编号数组), 在插入KV结构时hash到对应的桶位, 如果有冲突则在该位置串联.  查找删除时候过程相似.  </li>\n<li>std::map未实现 通过基于共享内存分配器实现的allocator直接对std::map进行支持  </li>\n</ul>\n</li>\n<li><p>LIST容器   </p>\n<ul>\n<li>相比数组容器, 这个提供了稳定的迭代器和搞性能的插入删除性能   </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"小结\">小结</span></h2><p>通过框架和通用底层的数据结构实现, 以及对象池, 链表 数组 HASH_MAP等<br>已经实现了非常易用的一套基于共享内存RESUME的框架和系统  </p>\n<p>整体结构为两部分:   </p>\n<p>| GLOBAL SERVER |  OBJECT POOLS |   </p>\n<p>在服务的main入口通过对共享内存的启动BOOT封装, 完成自动化的共享内存的创建和恢复机制.<br>开发人员在开发新的服务节点时, 通过继承GLOBAL SERVER把所有数据以静态的形式聚合在GLOBAL SERVER下即可,  对于涉及到动态分配和管理的, 使用提供好的map/list/array即可.    </p>\n<h3><span id=\"需要注意的其他问题\">需要注意的其他问题</span></h3><ul>\n<li>RESUME检测和恢复时间带来的超时问题和业务连贯性问题   <ul>\n<li>RESUME恢复时间  <ul>\n<li>进程crash检测间隔  </li>\n<li>共享内存上的状态恢复(通常非常快)  </li>\n<li>被隔离的代码和模块的重新加载和初始化   <ul>\n<li>不在共享内存上的资源重新load  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>被时间影响的功能   <ul>\n<li>大量移动包在RESUME成功之前无法处理消耗造成   <ul>\n<li>逻辑服没有移动包 战斗服是产生移动包的位置 其他节点结构简单不容易宕机 </li>\n</ul>\n</li>\n<li>异步请求出现超时</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"通用性上的挑战-在共享内存上构建通用内存管理器\">通用性上的挑战: 在共享内存上构建通用内存管理器</span></h3><ul>\n<li>移植stl的容器而非去独立实现(一劳永逸的兜底方案)   <ul>\n<li>实现shm allocator</li>\n</ul>\n</li>\n<li>移植更多的三方库到共享内存上    <ul>\n<li>通用的内存分配器是基础</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<!-- TOC -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E5%87%BA%E7%8E%B0%E7%9A%84%E8%83%8C%E6%99%AF-%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98resume%E8%80%8C%E4%B8%8D%E6%98%AF%E9%9B%86%E7%BE%A4%E5%86%97%E4%BD%99%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB\">共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移</a><ul>\n<li><a href=\"#mmoact%E7%9B%B8%E6%AF%94%E4%BC%A0%E7%BB%9F%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%BC%82%E5%90%8C\">MMOACT相比传统互联网的异同</a></li>\n<li><a href=\"#%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94%E5%92%8C%E5%86%B3%E7%AD%96\">方案对比和决策</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90%E5%92%8C%E9%AA%8C%E8%AF%81\">可行性分析和验证</a><ul>\n<li><a href=\"#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E6%95%B0%E6%8D%AE%E4%B8%8E%E9%9D%9E%E4%B8%9A%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%95%B0%E6%8D%AE\">隔离业务状态数据与非业务环境数据</a></li>\n<li><a href=\"#%E9%9A%94%E7%A6%BB%E4%B8%9A%E5%8A%A1%E7%8A%B6%E6%80%81%E5%92%8C%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%95%B0%E6%8D%AE%E5%92%8C%E9%80%BB%E8%BE%91%E5%88%86%E7%A6%BB\">隔离业务状态和业务逻辑数据和逻辑分离</a></li>\n<li><a href=\"#%E6%9C%80%E5%B0%8F%E5%8C%96%E9%AA%8C%E8%AF%81-first-global-state\">最小化验证, FIRST GLOBAL STATE</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%92%8C%E5%AE%9E%E8%B7%B5\">解决方案和实践</a><ul>\n<li><a href=\"#resume%E7%8A%B6%E6%80%81%E9%87%8D%E5%BB%BA%E6%81%A2%E5%A4%8D%E7%9A%84%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98\">RESUME状态重建/恢复的基础问题</a></li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5\">基础问题以及解决策略</a><ul>\n<li><a href=\"#%E9%99%84-%E5%9C%A8%E9%9A%8F%E6%9C%BA%E5%8C%96%E7%9A%84aslr%E4%B8%AD%E7%A1%AE%E7%AB%8B%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4\">附: 在随机化的ASLR中确立确定性的地址空间</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%92%8C%E5%9F%BA%E7%A1%80%E5%AE%B9%E5%99%A8%E7%AD%89%E9%80%9A%E7%94%A8%E6%80%A7%E8%AE%BE%E8%AE%A1\">对象池和基础容器等通用性设计</a><ul>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E6%B1%A0%E5%AE%9A%E9%95%BF%E5%86%85%E5%AD%98%E6%B1%A0%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%9B%9E%E6%94%B6%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%9F%BA%E7%A1%80%E8%AE%BE%E8%AE%A1\">对象池定长内存池+对象分配回收接口的基础设计</a></li>\n<li><a href=\"#%E5%9C%B0%E5%9D%80%E6%97%A0%E5%85%B3%E7%9A%84%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0\">地址无关的容器实现</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%B0%8F%E7%BB%93\">小结</a><ul>\n<li><a href=\"#%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98\">需要注意的其他问题</a></li>\n<li><a href=\"#%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8A%E7%9A%84%E6%8C%91%E6%88%98-%E5%9C%A8%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%8A%E6%9E%84%E5%BB%BA%E9%80%9A%E7%94%A8%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8\">通用性上的挑战: 在共享内存上构建通用内存管理器</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>共享内存RESUME机制是指的: 通过将游戏状态数据保存在共享内存中, 当游戏进程crash后通过重启游戏服务器并attach已有的共享内存来恢复游戏状态, 以此达到玩家游戏体验在出现宕机时的连贯性, 提升游戏的容灾能力.</strong>       </p>\n<h2 id=\"共享内存RESUME出现的背景-为什么选择共享内存RESUME而不是集群冗余-故障转移\"><a href=\"#共享内存RESUME出现的背景-为什么选择共享内存RESUME而不是集群冗余-故障转移\" class=\"headerlink\" title=\"共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移\"></a>共享内存RESUME出现的背景: 为什么选择共享内存RESUME而不是集群冗余+故障转移</h2><h3 id=\"MMOACT相比传统互联网的异同\"><a href=\"#MMOACT相比传统互联网的异同\" class=\"headerlink\" title=\"MMOACT相比传统互联网的异同\"></a>MMOACT相比传统互联网的异同</h3><p>在web领域中,  业务和数据分离, 从而达成’业务无状态化’, 开发人员专注于业务本身, 状态数据的一致性问题和容灾问题转移到可以较为独立解决的数据存储领域, 这个领域有非常多的论文和解决方案, 以及成熟的服务等.     </p>\n<p>而对于游戏领域来说, 互联网成熟的解决的方案很难在这个地方应用,  当然 对于外围系统来说, 我们仍然可以按照互联网成熟的解决方案进行布局, 例如聊天系统, 好友系统,  邮件系统, 日志系统,  或者一些游戏中的公会系统等.     </p>","more":"<p>MMOACT的特性:  </p>\n<ul>\n<li><p><strong>CPU计算密集</strong>   </p>\n<ul>\n<li>地图单位扫描选择 命中包围盒碰撞检测 战斗事件响应处理  AI的扫描检测,行为决策,  移动的寻路/碰撞避免/检测等    </li>\n</ul>\n</li>\n<li><p><strong>IO密集</strong>  </p>\n<ul>\n<li>视野内所有玩家的事件都要同步所有玩家(理想情况下), 这是一个$O(N^2)$的广播复杂度  </li>\n<li>大世界内视野范围较为开阔   </li>\n</ul>\n</li>\n<li><p><strong>低延迟响应</strong>   </p>\n<ul>\n<li>在战斗中, 一次攻击动作被拆解成逐帧开启和关闭的 霸体 无敌  攻击窗口 可闪避窗口 可打断窗口等流程片段, 一帧16.7ms  </li>\n<li>在战斗中每秒平均5~7米的移动距离, 100ms的延迟将会带来一个身位的偏差造成命中失败  </li>\n<li>弓箭的速度大约每秒50米, 30帧的客户端一帧就有两个身位的偏差  </li>\n<li>互联网骨干网20ms的延迟 每一点额外的延迟都会给同步带来较为巨大的压力.   </li>\n</ul>\n</li>\n<li><p><strong>共享状态高频读写</strong>   </p>\n<ul>\n<li>战斗单位与战斗单位之间, 战斗单位的模块与模块之间   </li>\n<li>ACT战斗中实时响应判定的AI(大量事件和回调)  </li>\n<li>装备, 属性, 能量槽, 状态标签与技能和移动之间的相互引用与保证   <ul>\n<li>BUFF对属性的修改 标签的装载和卸载 子弹时间的进出等都需要严格保证对称   </li>\n</ul>\n</li>\n<li>技能BUFF流程中跨战斗单位跨模块并需要严格保证时序的事件判定与脚本回执等   </li>\n</ul>\n</li>\n<li><p><strong>重业务逻辑,需求易变</strong>   </p>\n<ul>\n<li>业务类型繁多复杂且耦合, 见上栏’共享状态高频读写’   </li>\n</ul>\n</li>\n</ul>\n<p>传统互联网特性:  </p>\n<ul>\n<li>数据规模大 用户量大 并发大  </li>\n<li>轻业务, 重存储 对数据一致性要求较高    <ul>\n<li>读写改查这几个基本操作可以涵盖绝大部分互联网业务的核心内容  </li>\n</ul>\n</li>\n<li>业务较为稳定  </li>\n<li><strong>延迟不敏感 通常都是秒级以上</strong>.  <ul>\n<li>google Analytics速度报告中, 网页的平均加载时间为4~8秒   2秒打开网页我们会觉得飞快(秒开)  </li>\n<li>互动式直播和视频会议的延迟平均1~3秒  </li>\n<li>苹果支付服务器验证一个支付凭据需要3s-6s   </li>\n<li>45秒才能看视频   </li>\n</ul>\n</li>\n</ul>\n<p>游戏业务的形式化描述:<br>$$<br>S_k=\\begin{cases}<br>g(P, C), \\qquad if \\quad k = 0 \\\\<br>t(S_{k-1}, C, I_k),  \\quad if \\quad k \\geq 1<br>\\end{cases}<br>$$</p>\n<blockquote>\n<p>I是游戏状态变化的根本原因的集合 往往是各个玩家(按键)操作<br>S是游戏状态的集合 由众多状态子集组成  </p>\n</blockquote>\n<blockquote>\n<p>该公式的描述: </p>\n<ul>\n<li>游戏在第0个逻辑帧时 根据玩家信息P和游戏配置C 进行初始化运算g 得出初始化状态集合$S_0$    </li>\n<li>游戏在第k个逻辑帧时 根据前一个状态集合$S_{k-1}$和游戏配置C  根据第k帧收到的外部变化原因集合$I_k$ 进行逻辑t运算 得出第k个逻辑帧新的游戏状态集合$S_k$   </li>\n</ul>\n</blockquote>\n<p>大部分互联网核心业务都能很好的进行业务和状态存储上的解耦, 以stateless形式在现有成熟的数据库相关的存储服务之上通过已有的成熟的解决方案来订制解决, 其核心往往是通过牺牲响应速度, 提高解决方案的复杂度来实现大规模高一致性的互联网需求.   </p>\n<p>(12306的业务也不算复杂 但是难在大规模并发下, 状态之间难以解耦进行传统的分而治之而造成的)</p>\n<p>而游戏服务, 很多时候游戏服务可以看成一个复杂的非确定状态机, 有非常庞大的状态集合, 实时响应所有玩家的请求并不断的推演下去,  并且其业务变更非常频繁,  往往是通过牺牲一定程度的可靠性和一致性来做到在有限的开发周期和资源里, 把一个尽可能满足策划设计和玩家体验的游戏做出来.<br>实际上大部分的游戏项目也都在解决这个问题, 也因此互联网成熟的解决方案, 流行的解决方案 往往很难在游戏项目得到及时的应用, 尽管如此, 在靠近外围的架构和服务节点上, 我们仍然可以追着互联网潮流进行演进, 例如微服务.    </p>\n<p>附图, MMO技能的基本流程如下:   </p>\n<ul>\n<li>技能释放条件  –&gt; 判断自身脚本 –&gt;判断目标是否有脚本有则等待执行结果   </li>\n<li>技能预处理   –&gt; 判定  </li>\n<li>技能释放成功  –&gt;  判定  </li>\n<li>技能命中开始扫描目标  –&gt; 是否有反向过滤  –&gt; 等待执行结果   </li>\n<li>技能遍历所有选中目标<ul>\n<li>即将对目标发起命中处理  –&gt; 判定  </li>\n<li>对目标发起命中处理  <ul>\n<li>遍历所有效果    <ul>\n<li>即将对目标产生效果   –&gt; 判定 <ul>\n<li>如果是伤害则有 伤害预处理  – &gt;判定    </li>\n<li>如果是BUFF则有额外的buff流程判定  </li>\n</ul>\n</li>\n<li>已经对目标产生效果  –&gt; 判定  <ul>\n<li>如果是伤害则有 伤害已经处理  –&gt;判定  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>遍历所有效果完毕   </li>\n</ul>\n</li>\n<li>已经对目标执行完命中处理  –&gt; 判定   </li>\n</ul>\n</li>\n<li>技能遍历目标发起命中结束    </li>\n<li>下一段命中  </li>\n<li>技能即将结束  –&gt; 判定  </li>\n<li>技能已经结束   –&gt;判定   </li>\n</ul>\n<p>通常1V1战斗一次可能需要保证时序的同步点大约就有20个 而混战情况下则会有N倍的提升,  在非分布式的情况下, 所有的同步点带来的处理复杂度都是一次分支判定,  但是如果是分布式则会是一次rpc   .<br>如果是共享内存下的消息队列实现(大吞吐)  一次rpc来回则可能有平均10ms的延迟, 那么在不牺牲时序逻辑的情况下, 则可能带来几百ms的巨大延迟.  </p>\n<h3 id=\"方案对比和决策\"><a href=\"#方案对比和决策\" class=\"headerlink\" title=\"方案对比和决策\"></a>方案对比和决策</h3><p>有成功案例的两种做法:   </p>\n<p>一种不常见的BIGWORLD的做法(冗余系统&amp;故障切换):   </p>\n<ul>\n<li><p>以战斗单位进行解耦, 不同的战斗单位可以分布在不同节点   </p>\n</li>\n<li><p>游戏世界不按照场景地图划分, 而是按照战斗单位的负载动态切分   </p>\n</li>\n<li><p>所有单位进行跨物理节点的冗余, 故障后直接切换到备份单位继续战斗   </p>\n</li>\n<li><p>跨节点的战斗, 如果战斗系统同步点过多则不可避免的带来额外的延迟  </p>\n</li>\n<li><p>RPC需求让系统变得更为复杂  开发和调试都会带来更多困难    </p>\n</li>\n<li><p>动态负载均衡难以实现  </p>\n</li>\n<li><p>需要面临的技术挑战过大参考资料和技术储备太少   </p>\n</li>\n</ul>\n<p>另外一种, 基于共享内存RESUME做法:   </p>\n<ul>\n<li>状态数据持久化在共享内存中, 进程crash之后数据不丢失   </li>\n<li>对使用者透明,  状态数据是在本地内存还是共享内存 对C/C++这种语言的使用者来说没有区别  <ul>\n<li>经过完善的合理的包装设计, 可以做到业务人员对’共享内存’无感, 基本上做好状态和逻辑分离即可.   </li>\n</ul>\n</li>\n<li>对共享内存上的状态访问读写操作等同本地内存, 无额外性能消耗和处理延迟  </li>\n<li>RESUME后保持业务的连贯性, 对用户体验非常友好   </li>\n<li>原理简单容易(分阶段)实现, 且每阶段都可验证,  有较多成功案例.   </li>\n</ul>\n<p>方案差异:   </p>\n<ul>\n<li>提高可靠性   <ul>\n<li>多点备份  故障转移     <ul>\n<li>可在更多情景下做到可用性 例如网络故障 宕机   </li>\n<li>可以考虑在小项目或者中台部门进行MVP迭代到一定完成度   </li>\n</ul>\n</li>\n<li>快速RESUME   <ul>\n<li>只支持crash情况, 但是根据行业经验 绝大部分情况都是代码bug带来的crash   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>保障业务连续性  <ul>\n<li>都能做到业务连续性   </li>\n</ul>\n</li>\n<li>成本   <ul>\n<li>共享内存RESUME方案无论是在开发阶段还是QA/运维部署等阶段成本都大大低于多点备份+故障转移的做法   </li>\n</ul>\n</li>\n<li>团队项目   <ul>\n<li>立项之初团队规模很小 人力资源总预算有限   </li>\n</ul>\n</li>\n</ul>\n<p>方案选定:  </p>\n<ul>\n<li><p>尽可能的拆分外围服务 以stateless集群+数据库存储方案来实现   </p>\n<ul>\n<li>例如好友 聊天 邮件等   </li>\n</ul>\n</li>\n<li><p>对无法做到stateless又难以拆分的管理节点和战斗节点进行RESUME设计.   </p>\n<ul>\n<li>World管理节点  战斗场景  </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"可行性分析和验证\"><a href=\"#可行性分析和验证\" class=\"headerlink\" title=\"可行性分析和验证\"></a>可行性分析和验证</h2><h3 id=\"隔离业务状态数据与非业务环境数据\"><a href=\"#隔离业务状态数据与非业务环境数据\" class=\"headerlink\" title=\"隔离业务状态数据与非业务环境数据\"></a>隔离业务状态数据与非业务环境数据</h3><p>第一个问题是, 哪些数据应该放在共享内存中, 哪些数据不能放在共享内存中, 这个问题决定了具体的业务恢复情况.  </p>\n<ul>\n<li><p><strong>在游戏业务的RESUME机制中, 我们不做指令级的恢复,  也就是说, 首先 栈数据我们不会存放在共享内存中而是故障时直接丢弃</strong>    </p>\n<ul>\n<li>一旦把栈放在共享内存中, 意味着我们要记录所有的指令状态和序列以及执行情况, 以及这意味着我们在发明一套新的支持resume的vm语言(这种发明有没有现实意义是另外一个新的问题) 而不是在C/C++语言之上resume我们的业务.    </li>\n<li>crash可以发生在任意时刻的代码处理中, 难以避免的产生一些状态错误.    <ul>\n<li>规范: 不能在共享内存中的对象或者内存中 有存在指向任何栈上或者堆上的指针   </li>\n<li>规范: 不能在共享内存中的对象或者内存中 有存在指向函数或者虚函数的指针 如果无法避免则需要在RESUME的时候恢复为正确的指针  </li>\n<li>规范: 如非必要, 不能有被栈管理的共享内存资源  <ul>\n<li><font color=#999>例如使用智能指针获取共享内存上的某个对象, 然后经过一段复杂且经常变化的业务代码后release 控制权交给位于共享内存的map进行管理等.  这种情况一旦crash 这个对象无论crash多少次都会被永久挂起.</font>   </li>\n</ul>\n</li>\n<li>规范: 尽可能的做好结构和流程的局部化设计, 并且做好兜底设计:<font color=#999>   <ul>\n<li>例如 技能错误不影响战斗单位, 战斗单位错误不应该影响其他玩家等   </li>\n<li>例如, 创建一个技能实例:  <ul>\n<li>获取创建实例的信息   </li>\n<li>用准备好的信息数据创建一个实例并填充一个基础状态, 再接下来的复杂逻辑中一旦crash, resume之后仍然能检测到技能实例的异常状态或者到期后自动清理   </li>\n<li>进行新实例创建后的脚本触发, 其他模块的同步调用通知等  </li>\n</ul>\n</li>\n<li>例如 技能中修改属性   <ul>\n<li>获取好单位的属性位置, 计算好要修改的值信息等   </li>\n<li>没有任何错误和异常的话 进行连续的赋值修改等 (这种操作通常不会crash)    </li>\n<li>执行一些变更通知 或者其他逻辑等  </li>\n<li>技能实例到期销毁, 根据记录的属性修改记录进行反向恢复  </li>\n</ul>\n</li>\n<li>例如技能状态切换过程中出现错误  RESUME后正Tick检测到会再次执行切换操作</font>  </li>\n</ul>\n</li>\n<li>规范: 内部分阶段REVIEW新人的代码 检查是否有不符合RESUME或者带来隐患的设计</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>隔离一些不能resume的三方库或者逻辑</strong>    </p>\n<ul>\n<li>例如PROTOBUF不能做RESUME  那么就需要禁止在任何业务状态中有存储指向pbin的指针, 必须是用时查找读取, 启服初始化时或者RESUME时重新加载.   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><strong>消息/事件/任务队列等进行逻辑处理时应先标记当前’消息/事件/任务’在队列中已经被处理, 然后执行具体的逻辑. 一旦发生crash后不会重复执行该任务, 跳过故障流程</strong>   <ul>\n<li>如果需要关注处理结果则应该有对应的处理超时机制, resume后等待一段时间后进行超时处理   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"隔离业务状态和业务逻辑-数据和逻辑分离\"><a href=\"#隔离业务状态和业务逻辑-数据和逻辑分离\" class=\"headerlink\" title=\"隔离业务状态和业务逻辑(数据和逻辑分离)\"></a>隔离业务状态和业务逻辑(数据和逻辑分离)</h3><p>一般来说, 我们在写可resumable的代码时要注意自己使用到的状态是不是放在共享内存中以及如何聚合在resumable框架中的,  但是为了减少开发人员的犯错机会以及心智负担, 我们可以参考ECS框架来单独的聚合所有resumable状态数据,  或者更进一步的, 所有状态数据都通过schema以单独的描述文件进行生成, 通过这种明确的定义和聚合形式, 做到让开发人员难以写出错误的代码, 以及可以更准确的跟踪resumable结构的变更(有利于热修复的风险控制).   </p>\n<ul>\n<li>业务状态和逻辑代码拆分后, 可以直观的观测和追溯状态的拓扑结构变更    </li>\n<li>共享内存RESUME机制是对代码热更友好的, 如果考虑线上代码热更, 则方便进行数据结构的拓扑对比     </li>\n<li>编写业务时因状态数据单独存放, 会起到’业务状态是放在共享内存而不是本地内存’的提醒作用, 减少心智负担.    </li>\n<li>方便进行REVIEW检查   </li>\n</ul>\n<h3 id=\"最小化验证-FIRST-GLOBAL-STATE\"><a href=\"#最小化验证-FIRST-GLOBAL-STATE\" class=\"headerlink\" title=\"最小化验证, FIRST GLOBAL STATE\"></a>最小化验证, FIRST GLOBAL STATE</h3><p>基础原理为, 定义单独的抽象类作为单个服务节点的索引起点(框架),  该节点下所有共享内存上的状态均以对象,静态内存数组等数据成员的形式聚合为该类的数据成员.<br>在启服时候通过简单的静态计算算出来总大小并分配共享内存, 以此跑在共享内存之上,  在RESUME时则查找该共享内存并把框架类的指针指向共享内存区域.    </p>\n<ul>\n<li><p>基础的shmget/shmat流程   </p>\n<ul>\n<li>启服创建共享内存, 并把global state指针指向共享内存完成构造初始化  </li>\n<li>启服绑定共享内存, 并把global state指针指向共享内存完成绑定和resume回调等  </li>\n</ul>\n</li>\n<li><p>所有游戏从global state这个Server类中聚合   例如  </p>\n<ul>\n<li>global state: scene server  <ul>\n<li>map&lt;场景&gt;   <ul>\n<li>场景:   <ul>\n<li>地图大小   </li>\n<li>怪物列表   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>map&lt;玩家&gt;   <ul>\n<li>玩家:<ul>\n<li>技能模块  <ul>\n<li>技能</li>\n<li>buff</li>\n<li>标签</li>\n</ul>\n</li>\n<li>移动模块  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>事件队列   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"解决方案和实践\"><a href=\"#解决方案和实践\" class=\"headerlink\" title=\"解决方案和实践\"></a>解决方案和实践</h2><h3 id=\"RESUME状态重建-恢复的基础问题\"><a href=\"#RESUME状态重建-恢复的基础问题\" class=\"headerlink\" title=\"RESUME状态重建/恢复的基础问题\"></a>RESUME状态重建/恢复的基础问题</h3><ul>\n<li>代码段因代码变更或者ASLR随机化发生改变   <ul>\n<li>函数指针变化 虚函数位置变化   </li>\n</ul>\n</li>\n</ul>\n<font color=#888>\n* 共享内存地址不固定情况下每次shmat会导致共享内存映射的地址发生变化   \n  * 记录的地址指针错误\n  * 只能使用地址无关的容器 例如std::array    \n</font>\n\n<ul>\n<li>共享内存地址固定会因ASLR的HEAP/MMAP随机化而导致RESUME后冲突  <ul>\n<li>关闭ASLR并估算一个不会冲突的位置  (版本更新, 新的so库 都会带来小的改变 但是只要能启服成功 RESUME也会成功)   </li>\n<li>不关闭ASLR并寻找一个不会被ASLR影响到区间  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基础问题以及解决策略\"><a href=\"#基础问题以及解决策略\" class=\"headerlink\" title=\"基础问题以及解决策略\"></a>基础问题以及解决策略</h3><p>共享内存RESUME方案需要配合一定的代码规范, 或者说共享内存方案本身需要让系统具备状态可恢复这种机制上, 一定会多多少少带来代码和设计上的约束,  我们会通过以下策略尽量减少这套机制对业务层的感知和对开发人员的限制.</p>\n<ul>\n<li>数据结构和算法的地址无关化设计  <ul>\n<li>避免出现指针, 特别是可能指向系统堆栈, 代码段等非共享内存位置的指针.  </li>\n<li>能使用相对偏移量代替地址的尽量用偏移量   <ul>\n<li>例如下标 长度等信息    </li>\n</ul>\n</li>\n<li>尽量使用静态容器代替包含有动态内存分配的容器, 如果没有就实现一个   <ul>\n<li>使用数组方案, 或者std::array以及手动实现的static array来代替std::vector </li>\n</ul>\n</li>\n<li>业务上尽量使用无地址的解决方案   <ul>\n<li>例如现在有个事件队列, 我们手动定义事件枚举A,B,C,D   <ul>\n<li>在入队时, 我们根据需求push进去对应的事件ID和参数    </li>\n<li>在出队时, 我们获取到事件ID进行switch case 事件枚举: 并调用指定的处理函数   </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>固定虚拟地址空间中共享内存的映射地址   <ul>\n<li>让所有指向共享内存中的数据地址指针在RESUME后直接可用, 从共享内存RESUME整体出发降低系统的复杂度.  </li>\n<li>需要关闭ASLR或者固定一个不会出现地址冲突问题的地址   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>间接地址方案, 隔离运行环境的真实地址  </p>\n<ul>\n<li>基础思路为, 不直接使用和保存(函数)地址, 而是在第一次启动初始化时或者RESUME启动时把要使用的地址预先注册到某个公共位置, 使用时从这个位置读取正确的地址进行使用.   </li>\n<li>情景1: 参考网络消息序列化的一般手段: 注册消息号和处理函数的映射关系  <ul>\n<li>函数类型相同   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>地址重定位方案, 直接修改失效的地址为当前执行环境的有效地址     </p>\n<ul>\n<li>基础思路为: 记录下每个使用某(函数)地址的位置, 在RESUME后使用正确的(函数)地址替换掉记录中旧的记录     </li>\n<li>例如我们记录下使用中所有带虚函数的对象位置, 在RESUME后对该对象的虚表指针进行替换.   </li>\n</ul>\n</li>\n<li><p>面向RESUME机制的手动编程, 不算兜底的兜底方案   </p>\n<ul>\n<li>对于可以复用的底层框架代码或者容器代码, 我们会针对性的进行流程和框架上的封装, 或者提供支持RESUME容器实现来减少业务层对RESUME系统的感知以提高业务开发效率.   </li>\n<li>但是无可避免的, 我们还是会遇到一些复杂的问题因为过于业务具体没有复用的价值, 或者无法预期进行集成, 因此一定程度上, 我们需要保留一定的开放性让用户自己去实现初始化和RESUME代码      <ul>\n<li>例如我们记录下所有包含OnResume方法的有效对象, 在RESUME后执行这些对象的OnResume方法来完成一些用户自定义的RESUME方案   <ul>\n<li>例如一些战斗单位绑定了RVO, 而这个RVO库并不运行在共享内存上, 那么这些战斗单位需要在OnResume里面进行重置操作或者根据当前的坐标移动信息重新绑定RVO库 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"附-在随机化的ASLR中确立确定性的地址空间\"><a href=\"#附-在随机化的ASLR中确立确定性的地址空间\" class=\"headerlink\" title=\"附: 在随机化的ASLR中确立确定性的地址空间\"></a>附: 在随机化的ASLR中确立确定性的地址空间</h4><table>\n<thead>\n<tr>\n<th>- 用户空间布局 -</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0x0</td>\n</tr>\n<tr>\n<td>保留区</td>\n</tr>\n<tr>\n<td>代码段(PLT代码表部分)</td>\n</tr>\n<tr>\n<td>代码段</td>\n</tr>\n<tr>\n<td>数据段(GOT) 只读</td>\n</tr>\n<tr>\n<td>数据段(.got.plt) 惰性加载机制</td>\n</tr>\n<tr>\n<td>数据段(Data)</td>\n</tr>\n<tr>\n<td>数据段(BSS)</td>\n</tr>\n<tr>\n<td>堆空间(Heap)</td>\n</tr>\n<tr>\n<td>↓</td>\n</tr>\n<tr>\n<td>未分配区域</td>\n</tr>\n<tr>\n<td>↑</td>\n</tr>\n<tr>\n<td>内存映射区域(mmap)</td>\n</tr>\n<tr>\n<td>栈空间(进程栈)</td>\n</tr>\n<tr>\n<td>TASK_SIZE</td>\n</tr>\n</tbody></table>\n<p>地址空间配置随机加载（英语：Address space layout randomization，缩写ASLR，又称地址空间配置随机化、地址空间布局随机化）是一种通过随机放置进程关键数据区域的地址空间来防止攻击者能可靠地跳转到内存的特定位置, 从而防范这类内存损坏漏洞被利用的计算机安全技术, 例如常见的Return-to-libc攻击.  </p>\n<p>这些数据区域一般包括代码段 数据段 堆区 栈区 mmap  动态库等,  其中涉及代码段的随机一般需要代码位置无关化的支持(PIC PIE机制), 不同版本的操作系统和内核版本, 在ASLR的实现上以及默认系统选项都会有细节的不同, 在X86-64位最高等级下, 我们可以找到不会被随机到但是可以通过mmap建立有效映射的(0x0000 7F00 0000 0000 ~ 0x0000 5655 5555 5555)大约44T的地址空间(128T的1/3), 前者为mmap开始位置 后者为HEAP(BRK)开始位置.   </p>\n<p>在实践中, 我们把共享内存的位置设置在靠中间的位置, 给系统mmap和heap留有足够的空间.   例如 0x0000 7000 0000 000,  这样和MMAP区域有17T的间隙, 充分安全, 无论ASLR开什么级别RESUME多少次 始终不会和共享内存选定的地址产生冲突   </p>\n<p>细节内核代码分析见:<a href=\"https://zsummer.github.io/2019/11/04/2019-11-04-aslr/\">linux内存布局和ASLR下的可分配地址空间</a></p>\n<h3 id=\"对象池和基础容器等通用性设计\"><a href=\"#对象池和基础容器等通用性设计\" class=\"headerlink\" title=\"对象池和基础容器等通用性设计\"></a>对象池和基础容器等通用性设计</h3><h4 id=\"对象池-定长内存池-对象分配回收接口-的基础设计\"><a href=\"#对象池-定长内存池-对象分配回收接口-的基础设计\" class=\"headerlink\" title=\"对象池(定长内存池+对象分配回收接口)的基础设计\"></a>对象池(定长内存池+对象分配回收接口)的基础设计</h4><p>设计目的:   </p>\n<ul>\n<li>静态内存一次性分配, 动态分配和回收固定大小的内存   </li>\n<li>解决虚表失效问题   <ul>\n<li>解决单继承和多重继承问题  </li>\n</ul>\n</li>\n<li>提供自定义的OnResume接口进行自定义的恢复 提高易用性和扩展性  <ul>\n<li>向用户层抛出一个自定义解决方案 </li>\n</ul>\n</li>\n<li>提供FOREACH的分批轮询机制 平滑负载峰值  </li>\n</ul>\n<p>实现方案:<br>接口层实现:  </p>\n<ul>\n<li>类型枚举定义   </li>\n<li>注册(绑定)类型信息, 对象大小, 对象上限数量, 是否有虚表需要恢复, 是否需要支持OnResume    </li>\n<li>对象分配和回收接口  </li>\n</ul>\n<p>对象池管理器(管理头): </p>\n<ul>\n<li>FREE索引ID(FREE LIST),  CHUNK大小(包含fence-next-id和obj), 数量上限, 虚表标志, OnResume标志, 起始地址偏移, BITMAP使用标志位图位置等    </li>\n</ul>\n<p>对象池:  </p>\n<ul>\n<li>FENCE-HEAD-OBJ 数组   </li>\n</ul>\n<p>分配和回收流程:<br>分配:  </p>\n<ul>\n<li>POP FREE HEAD指向的CHUNK   </li>\n<li>进行原地构造  </li>\n<li>设置BITMAP的使用标记   </li>\n</ul>\n<p>回收:  </p>\n<ul>\n<li>根据指针换算成CHUNK的索引ID   </li>\n<li>检测BITMAP的使用标记并移除标记  </li>\n<li>执行析构函数 </li>\n<li>PUSH到FREE LIST中(设置为新的FREE HEAD)   </li>\n</ul>\n<p>FOREACH轮询流程:<br>按STEP数量遍历BITMAP使用标记并执行对象指定的轮询回调   </p>\n<ul>\n<li>例如对于一个每秒执行一次OnTick的对象,  可以拆分成100ms执行1/10的使用中对象的OnTick, 分10次在1秒内完成. 这样可以平滑CPU的负载, 并且不会出现迭代器失效等隐患问题    </li>\n</ul>\n<p>INIT和OnResume流程<br>一般放在对象池中的对象可以正在的构造函数中去完成初始化处理, Init这种二次初始化由用户去定义即可.<br>如果该对象需要在Resume中做一些自定义的检测或者恢复处理, 则需要定义该回调并进行标记  </p>\n<h4 id=\"地址无关的容器实现\"><a href=\"#地址无关的容器实现\" class=\"headerlink\" title=\"地址无关的容器实现\"></a>地址无关的容器实现</h4><p>这里放在一起说, 第一优先级是数组 其次是map和list.   </p>\n<ul>\n<li><p>数组容器的实现  </p>\n<ul>\n<li>一般情况下可以用std::array或者原生数组来开发, 本身是地址无关的可以直接RESUME   </li>\n<li>为了更方便和更通用, 实现了STATIC ARRAY,  接口和std::vector基本对齐, 但是元素数量上限是确定的</li>\n</ul>\n</li>\n<li><p>MAP容器   </p>\n<ul>\n<li>hash map的实现比较简单, 第一个版本中首先提供支持的就是hash map  </li>\n<li>基本做法是分配上限大小的桶并以FREE LIST形式串联, 再分配上限大小的桶位(指向桶索引ID的编号数组), 在插入KV结构时hash到对应的桶位, 如果有冲突则在该位置串联.  查找删除时候过程相似.  </li>\n<li>std::map未实现 通过基于共享内存分配器实现的allocator直接对std::map进行支持  </li>\n</ul>\n</li>\n<li><p>LIST容器   </p>\n<ul>\n<li>相比数组容器, 这个提供了稳定的迭代器和搞性能的插入删除性能   </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>通过框架和通用底层的数据结构实现, 以及对象池, 链表 数组 HASH_MAP等<br>已经实现了非常易用的一套基于共享内存RESUME的框架和系统  </p>\n<p>整体结构为两部分:   </p>\n<p>| GLOBAL SERVER |  OBJECT POOLS |   </p>\n<p>在服务的main入口通过对共享内存的启动BOOT封装, 完成自动化的共享内存的创建和恢复机制.<br>开发人员在开发新的服务节点时, 通过继承GLOBAL SERVER把所有数据以静态的形式聚合在GLOBAL SERVER下即可,  对于涉及到动态分配和管理的, 使用提供好的map/list/array即可.    </p>\n<h3 id=\"需要注意的其他问题\"><a href=\"#需要注意的其他问题\" class=\"headerlink\" title=\"需要注意的其他问题\"></a>需要注意的其他问题</h3><ul>\n<li>RESUME检测和恢复时间带来的超时问题和业务连贯性问题   <ul>\n<li>RESUME恢复时间  <ul>\n<li>进程crash检测间隔  </li>\n<li>共享内存上的状态恢复(通常非常快)  </li>\n<li>被隔离的代码和模块的重新加载和初始化   <ul>\n<li>不在共享内存上的资源重新load  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>被时间影响的功能   <ul>\n<li>大量移动包在RESUME成功之前无法处理消耗造成   <ul>\n<li>逻辑服没有移动包 战斗服是产生移动包的位置 其他节点结构简单不容易宕机 </li>\n</ul>\n</li>\n<li>异步请求出现超时</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"通用性上的挑战-在共享内存上构建通用内存管理器\"><a href=\"#通用性上的挑战-在共享内存上构建通用内存管理器\" class=\"headerlink\" title=\"通用性上的挑战: 在共享内存上构建通用内存管理器\"></a>通用性上的挑战: 在共享内存上构建通用内存管理器</h3><ul>\n<li>移植stl的容器而非去独立实现(一劳永逸的兜底方案)   <ul>\n<li>实现shm allocator</li>\n</ul>\n</li>\n<li>移植更多的三方库到共享内存上    <ul>\n<li>通用的内存分配器是基础</li>\n</ul>\n</li>\n</ul>"},{"title":"一种适合共享内存RESUME方案的通用内存分配器设计方法和实现","date":"2020-08-10T16:00:00.000Z","author":"yawei.zhang","mathjax":true,"_content":"\n<!-- TOC -->\n\n- [前言](#%E5%89%8D%E8%A8%80)\n- [基本原理](#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86)\n- [内存分配器的基本概念](#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)\n    - [显示和隐式分配器](#%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E5%BC%8F%E5%88%86%E9%85%8D%E5%99%A8)\n    - [设计要求和目标](#%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82%E5%92%8C%E7%9B%AE%E6%A0%87)\n        - [内部碎片和外部碎片问题](#%E5%86%85%E9%83%A8%E7%A2%8E%E7%89%87%E5%92%8C%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87%E9%97%AE%E9%A2%98)\n- [基础分配策略](#%E5%9F%BA%E7%A1%80%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5)\n    - [基础存储方式](#%E5%9F%BA%E7%A1%80%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F)\n        - [Sequential Fit  连续适配](#sequential-fit--%E8%BF%9E%E7%BB%AD%E9%80%82%E9%85%8D)\n        - [Segregated List 分离列表](#segregated-list-%E5%88%86%E7%A6%BB%E5%88%97%E8%A1%A8)\n        - [Indexed  Fit](#indexed--fit)\n    - [路径匹配策略](#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E7%AD%96%E7%95%A5)\n        - [Best fit](#best-fit)\n        - [Worst fit](#worst-fit)\n        - [First fit](#first-fit)\n- [设计方案](#%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88)\n    - [设计需求:](#%E8%AE%BE%E8%AE%A1%E9%9C%80%E6%B1%82)\n    - [设计方式:](#%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F)\n    - [代码规模和最终性能](#%E4%BB%A3%E7%A0%81%E8%A7%84%E6%A8%A1%E5%92%8C%E6%9C%80%E7%BB%88%E6%80%A7%E8%83%BD)\n\n<!-- /TOC -->\n\n\n## 前言    \n在之前的文章我比较全面的介绍了一个完整的resume机制的阐述, 也提到了一些开发成本和三方库移植的问题, 这篇文章主要介绍如何在共享内存上实现一套可动态扩容的通用内存分配器, 以及如何利用通用内存分配器进行三方库包括stl中容器类的快速resumable化.       \n\n通用动态内存分配器的实现可以很好的对共享内存RESUME机制进行一个补充,  例如可以简单的基于分配器实现stl的allocator, 从而直接得到resumable的vector, list, queue, map, multi_map, unorder_map等;   也可以简单的将一些本身就比较容易resumable化的三方库和算法替换其allocator来简单快速的完成移植工作而非重写他们.   例如常见的资源解析rapidxml   移动避免算法库rvo等  .  \n\n当然, 处理易用性和快速移植三方库这些优点外, 从项目角度考虑也有一些缺点需要关注并进行合理范围的使用.   \n\n相比静态内存机制下的resumable方案 \n* 较难估算内存峰值用量  \n  * 有些场合下该难点是业务需求带来的, 比如说我们普通玩家可以设置可绑定的上限buff100个就够用, 但是对于一些GVE的大型BOSS团本来说, 100个就容易超限,  在扁平化的设计中, 如果我们用静态内存方案那么所有单位的内存使用量都是'上限', 但是改成动态方案 则是根据真实情况动态波动的.  我们可以根据策划配置通过软上限来进行计算, 但是业务功能量级铺设上来后 则很难全面的评估这些地方对内存使用的真实情况.     \n  * 静态内存中在启服时可以一次性的计算好所有内存大小, 整个游戏无论负载情况其内存占用是始终稳定且直观的 .   \n\n* 内存安全性不如静态内存   \n  * 静态内存基本上不存在野指针 越界等问题  也不存在内存不够用的情况   \n  * 例如说我实现了```static_list```; \n    * 定义声明了OBJ和总大小 ```static_list<Buff, MAX_BUFF_SIZE> buffs;```  \n    * 然后我引用了一个指针指向其中一个已有的元素进行当前被动动作标记, 在受击出现的时候```Buff* act = &受击BUFF;```  在受击结束时候在移除act;  这里虽然用到了指针 但是在使用的时候, static_list中所有的元素都在一个连续的静态内存区域内, 并且该指针可以通过偏移检测和bitmap计算是否是有效的obj指针, obj是不是有效的buff等, 并不会因为是指针出现越界访问问题.  \n\n* 定位一些内存访问相关的问题可能会更麻烦一些   \n  * 例如:  所有战斗单位位于共享内存xxx--yyy地址内以大小X对齐, 每个单位内聚合有技能模块移动模块属性模块.  假如现在出现了一个读取属性错误的问题, 我们很容易根据有限的地址信息去推测出出问题的范围, 并且方便进行基于内存地址的修改情况进行监听断点等  \n\n* 性能相比静态方案一般会有性能上的损失,  动态内存的分配和回收有一个适配的成本开销.   \n\n* 长期运行可能有内存碎片问题\n  * 这个问题反而比较乐观, 因为在静态内存池方案上 内存利用率往往是非常低的, 而动态内存分配器的碎片率一般根据情况大约都控制在25%以下, 像dlmalloc则在实践中能控制在95%左右.  \n  * 静态内存一般来说, 对象池与对象池之间是内存隔离的, 即相互之间的空闲内存不能共用    \n  * 无论是对象池还是容器, 其规模都是直接以'上限'在定义阶段确定的, 一般情景下都会有大量的富余容量浪费  \n\n<!--more -->\n## 基本原理      \n\n在共享内存紧邻静态内存区域, 划分出动态管理区域并支持动态增长扩容的区域     \n```\n|global state|  obj pools  |  dyn mgr |                     |  dyn segment 1 | dyn segment N ...   \n| <-- 启服时候根据配置直接计算出大小 --> |  <-- alian size --> | <---   动态分段扩容  ----->  ...\n```\n\n## 内存分配器的基本概念\n\n### 显示和隐式分配器   \n这是一个基础的分类,  无论显式分配器还是隐式分配器都需要显式指定分配,  但是显式分配器还需要显式指定回收.   \n\n一般我们经常接触到的malloc/free (ptmalloc分配器),  tcmalloc  jemalloc等都是显示分配器  \n\n而不需要显式指定回收的内存分配器, 通常我们称之为垃圾收集器, 隐式分配器会自动回收不再被使用内存,  也因此通常其实现需要语言级别的支持和配合. \n\n### 设计要求和目标   \n要求:  \n* 处理任意请求序列   \n  * 对于任意的请求和回收序列都能正确执行   \n* 立即响应请求\n  * 对于内存分配请求需要立刻响应 不能缓存\n* 只使用堆   \n  * 对于给系统用的内存分配器 只使用堆可以有更好的移植性   \n  * 对于共享内存RESUME而言, 对应的是 我们只能使用共享内存  \n* 对齐块   \n  * 一般来说通用内存分配器会提供两倍CPU位宽的对齐以保证对任意类型数据访问的支持, 一个错误的实现假设例如 在64位下只提供32位的对齐  那么去读取一个void*指针  则特定情况可能会导致CPU两次读取带来额外的性能开销甚至可能产生硬件异常.    \n* 不修改/移动已分配块\n  * 没有缺页中断这类机制支持 修改或者移动已分配块会直接导致上层功能异常 \n  \n目标:  \n* 最大化吞吐率\n* 最大化内存利用率, 减少管理内存大小, 减少内部碎片, 减少外部碎片\n\n#### 内部碎片和外部碎片问题  \n内部碎片:简单描述就是已分配块中的无效负荷部分   \n  * 例如因为对齐要求, 当用户分配9字节数据时候, 给出的已分配块为16,  那么就产生了7字节的内部碎片   \n  * 通常内部碎片的问题简单明了容易量化, 只要在可接受范围都可以.    \n外部碎片: 空闲内存合计能满足请求, 但是因为非连续, 导致没有任何一块单独的空闲内存能满足需求.   \n  * 例如在1M的空闲内存以512k大小分散在两个地方,  这个时候任何大于512k的请求都无法成功分配   \n  * 在通用的内存分配器中要求中, 外部碎片无法避免并且难以量化, 更准确的描述是, 外部碎片的产生不仅取决于之前请求的模式和分配器实现方式, 还取决于未来即将发生的请求的模式.    \n    * 举例来说 我们从1M内存中开采512k后再开采1K, 那么如果后续的请求中释放了512k的这个分配块 就出现了外部碎片问题.   \n  * 通常 如果我们对请求加以限制, 例如规定开采粒度都是512k  那么就可以通过内部碎片来优化一部分外部碎片问题.   \n  * 对于一个长期运行的系统来讲, 外部碎片是一个非常值得留意的问题.    \n\n## 基础分配策略  \n\n### 基础存储方式   \n\n#### Sequential Fit  (连续适配)\n 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  \n\n\n#### Segregated List (分离列表) \n 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  \n\n* Buddy System (Sequential Fit变种)  \n  * 内部碎片化问题比较严重   \n  * Binary Buddies  \n  * Fibonacci Buddies  \n  * Weighted Buddies   \n  \n#### Indexed  Fit  \n 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。\n* 使用Balanced Tree的Best Fit allocator\n* 使用Cartesian tree 的Stephenson Fast-Fit allocator\n* Bitmap Fit (Indexed Fit 变种)\n  Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  \n  \n\n### 路径匹配策略  \n对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    \n\n#### Best fit   \n  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.   \n  最佳匹配:  \n  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.  \n  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  \n\n\n#### Worst fit  \n  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.  \n  最不适合匹配  \n  内存管理器总是选择获得的最大的那个未分配内存块. \n  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)  \n  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  \n\n#### First fit  \n  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.  \n  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.   \n  同上例中, 首先匹配会从14k的block中分配12k的请求.   \n  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  \n\n\n## 设计方案       \n\n如何设计一个适用于共享内存上支持resumable的通用动态内存管理系统?  这里借鉴了linux下的设计布局.  \n参考我之前写的两篇文章:  \n[基于共享内存的通用内存分配器](https://zsummer.github.io/2020/02/07/2020-02-07-shared-memory-buddy_system/)\n[基于共享内存的对象池管理方案](https://zsummer.github.io/2020/02/07/2020-02-03-shared-memory-resume-overview/)\n\n### 设计需求:   \n\n* 不考虑多线程  \n* RESUMABLE支持  \n* 通用内存分配器的必要条件必须全部满足   \n  * 任意大小任意序列的请求支持  \n  * 立即响应请求   \n  * 保证内存的对齐要求 \n  * 不移动压缩已分配块    \n\n### 设计方式:  \n* 大块共享内存的连续地址空间下的动态扩容\n* buddy system算法来作为底层实现  \n  * 满足任意大小的请求序列\n  * 通过约束上层小内存分配器的批发粒度来降低外部碎片的发生   \n  * 满足大内存对齐而不产生内部碎片 (对于现代tcmalloc mimalloc等meta方案进行支持)    \n* zmalloc小内存分配方案  \n  * 1k以下的内存使用朴素的分箱方案(Segregated List)   \n    * best fit 方案 \n  * 1k以上的内存请求使用$2^{n-3}$进行对齐, 即最大浪费约12.5%的内存进行分箱   \n    * best fit 方案  \n    * dlmalloc使用$2^{n-2}$进行分箱, 箱内使用一个刚刚好够用的bit前缀树进行空间内不同大小的已分配块管理, 可以达到接近100%的利用率 而对齐只要一行代码即可完成.   性能上理论上比对齐方式略差  实测基本上没有什么差距.  \n    * tcmalloc mimalloc均采用对齐这种方案\n  * 超过大小内存请求上限大小的内存, 则'直接'交给底层的buddy system完成, zmalloc只提供统一接口.   \n  * 牺牲块开采    \n    * 这是进行了first fit优化的一个关键点 也是性能的关键    \n    * 在best fit的快速bitmap判定失败后会从牺牲块进行开采, 如果没有牺牲块则批发一个大块作为牺牲块进行开采.   \n    * 这里采用牺牲块有更良好的通用性性能,  指令路径短, cpu cache友好   \n    * 这里没采用tcmalloc/mimalloc的page设计, 在相同大小的连续请求中会比这种方案要好, 但是牺牲块的设计则通用性上更好, 性能差距即使针对性的情景下也很难超过5%  \n  \n### 代码规模和最终性能  \n这两种方案核心代码都是几百行级别, 但是考虑到coverage测试代码, 必要的辅助流程代码和assert调测(单元代码不在实现文件中), buddy system和zmalloc的实现部分代码均在1000行出头即可完成.   \n性能测试中, 同dlmalloc mimalloc tcmalloc的生产环境中性能差距均小于5%,  在项目整体的压测中无可观测的性能波动.   \n\n(tcmalloc相比ptmalloc的提升明显的部分在多线程部分的设计, 现代分配器tcmalloc/jemalloc/mimalloc等均做了局部化处理, 老的ptmalloc则只是在dlmalloc上做了多线程支持和细节优化 所以差距会比较明显)\n\n\n\n\n\n","source":"_posts/2020-08-11-shm-allocator.md","raw":"---\ntitle: 一种适合共享内存RESUME方案的通用内存分配器设计方法和实现 \ndate: 2020-08-11\ncategories: develop \nauthor: yawei.zhang \nmathjax: true\n---\n\n<!-- TOC -->\n\n- [前言](#%E5%89%8D%E8%A8%80)\n- [基本原理](#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86)\n- [内存分配器的基本概念](#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5)\n    - [显示和隐式分配器](#%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E5%BC%8F%E5%88%86%E9%85%8D%E5%99%A8)\n    - [设计要求和目标](#%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82%E5%92%8C%E7%9B%AE%E6%A0%87)\n        - [内部碎片和外部碎片问题](#%E5%86%85%E9%83%A8%E7%A2%8E%E7%89%87%E5%92%8C%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87%E9%97%AE%E9%A2%98)\n- [基础分配策略](#%E5%9F%BA%E7%A1%80%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5)\n    - [基础存储方式](#%E5%9F%BA%E7%A1%80%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F)\n        - [Sequential Fit  连续适配](#sequential-fit--%E8%BF%9E%E7%BB%AD%E9%80%82%E9%85%8D)\n        - [Segregated List 分离列表](#segregated-list-%E5%88%86%E7%A6%BB%E5%88%97%E8%A1%A8)\n        - [Indexed  Fit](#indexed--fit)\n    - [路径匹配策略](#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E7%AD%96%E7%95%A5)\n        - [Best fit](#best-fit)\n        - [Worst fit](#worst-fit)\n        - [First fit](#first-fit)\n- [设计方案](#%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88)\n    - [设计需求:](#%E8%AE%BE%E8%AE%A1%E9%9C%80%E6%B1%82)\n    - [设计方式:](#%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F)\n    - [代码规模和最终性能](#%E4%BB%A3%E7%A0%81%E8%A7%84%E6%A8%A1%E5%92%8C%E6%9C%80%E7%BB%88%E6%80%A7%E8%83%BD)\n\n<!-- /TOC -->\n\n\n## 前言    \n在之前的文章我比较全面的介绍了一个完整的resume机制的阐述, 也提到了一些开发成本和三方库移植的问题, 这篇文章主要介绍如何在共享内存上实现一套可动态扩容的通用内存分配器, 以及如何利用通用内存分配器进行三方库包括stl中容器类的快速resumable化.       \n\n通用动态内存分配器的实现可以很好的对共享内存RESUME机制进行一个补充,  例如可以简单的基于分配器实现stl的allocator, 从而直接得到resumable的vector, list, queue, map, multi_map, unorder_map等;   也可以简单的将一些本身就比较容易resumable化的三方库和算法替换其allocator来简单快速的完成移植工作而非重写他们.   例如常见的资源解析rapidxml   移动避免算法库rvo等  .  \n\n当然, 处理易用性和快速移植三方库这些优点外, 从项目角度考虑也有一些缺点需要关注并进行合理范围的使用.   \n\n相比静态内存机制下的resumable方案 \n* 较难估算内存峰值用量  \n  * 有些场合下该难点是业务需求带来的, 比如说我们普通玩家可以设置可绑定的上限buff100个就够用, 但是对于一些GVE的大型BOSS团本来说, 100个就容易超限,  在扁平化的设计中, 如果我们用静态内存方案那么所有单位的内存使用量都是'上限', 但是改成动态方案 则是根据真实情况动态波动的.  我们可以根据策划配置通过软上限来进行计算, 但是业务功能量级铺设上来后 则很难全面的评估这些地方对内存使用的真实情况.     \n  * 静态内存中在启服时可以一次性的计算好所有内存大小, 整个游戏无论负载情况其内存占用是始终稳定且直观的 .   \n\n* 内存安全性不如静态内存   \n  * 静态内存基本上不存在野指针 越界等问题  也不存在内存不够用的情况   \n  * 例如说我实现了```static_list```; \n    * 定义声明了OBJ和总大小 ```static_list<Buff, MAX_BUFF_SIZE> buffs;```  \n    * 然后我引用了一个指针指向其中一个已有的元素进行当前被动动作标记, 在受击出现的时候```Buff* act = &受击BUFF;```  在受击结束时候在移除act;  这里虽然用到了指针 但是在使用的时候, static_list中所有的元素都在一个连续的静态内存区域内, 并且该指针可以通过偏移检测和bitmap计算是否是有效的obj指针, obj是不是有效的buff等, 并不会因为是指针出现越界访问问题.  \n\n* 定位一些内存访问相关的问题可能会更麻烦一些   \n  * 例如:  所有战斗单位位于共享内存xxx--yyy地址内以大小X对齐, 每个单位内聚合有技能模块移动模块属性模块.  假如现在出现了一个读取属性错误的问题, 我们很容易根据有限的地址信息去推测出出问题的范围, 并且方便进行基于内存地址的修改情况进行监听断点等  \n\n* 性能相比静态方案一般会有性能上的损失,  动态内存的分配和回收有一个适配的成本开销.   \n\n* 长期运行可能有内存碎片问题\n  * 这个问题反而比较乐观, 因为在静态内存池方案上 内存利用率往往是非常低的, 而动态内存分配器的碎片率一般根据情况大约都控制在25%以下, 像dlmalloc则在实践中能控制在95%左右.  \n  * 静态内存一般来说, 对象池与对象池之间是内存隔离的, 即相互之间的空闲内存不能共用    \n  * 无论是对象池还是容器, 其规模都是直接以'上限'在定义阶段确定的, 一般情景下都会有大量的富余容量浪费  \n\n<!--more -->\n## 基本原理      \n\n在共享内存紧邻静态内存区域, 划分出动态管理区域并支持动态增长扩容的区域     \n```\n|global state|  obj pools  |  dyn mgr |                     |  dyn segment 1 | dyn segment N ...   \n| <-- 启服时候根据配置直接计算出大小 --> |  <-- alian size --> | <---   动态分段扩容  ----->  ...\n```\n\n## 内存分配器的基本概念\n\n### 显示和隐式分配器   \n这是一个基础的分类,  无论显式分配器还是隐式分配器都需要显式指定分配,  但是显式分配器还需要显式指定回收.   \n\n一般我们经常接触到的malloc/free (ptmalloc分配器),  tcmalloc  jemalloc等都是显示分配器  \n\n而不需要显式指定回收的内存分配器, 通常我们称之为垃圾收集器, 隐式分配器会自动回收不再被使用内存,  也因此通常其实现需要语言级别的支持和配合. \n\n### 设计要求和目标   \n要求:  \n* 处理任意请求序列   \n  * 对于任意的请求和回收序列都能正确执行   \n* 立即响应请求\n  * 对于内存分配请求需要立刻响应 不能缓存\n* 只使用堆   \n  * 对于给系统用的内存分配器 只使用堆可以有更好的移植性   \n  * 对于共享内存RESUME而言, 对应的是 我们只能使用共享内存  \n* 对齐块   \n  * 一般来说通用内存分配器会提供两倍CPU位宽的对齐以保证对任意类型数据访问的支持, 一个错误的实现假设例如 在64位下只提供32位的对齐  那么去读取一个void*指针  则特定情况可能会导致CPU两次读取带来额外的性能开销甚至可能产生硬件异常.    \n* 不修改/移动已分配块\n  * 没有缺页中断这类机制支持 修改或者移动已分配块会直接导致上层功能异常 \n  \n目标:  \n* 最大化吞吐率\n* 最大化内存利用率, 减少管理内存大小, 减少内部碎片, 减少外部碎片\n\n#### 内部碎片和外部碎片问题  \n内部碎片:简单描述就是已分配块中的无效负荷部分   \n  * 例如因为对齐要求, 当用户分配9字节数据时候, 给出的已分配块为16,  那么就产生了7字节的内部碎片   \n  * 通常内部碎片的问题简单明了容易量化, 只要在可接受范围都可以.    \n外部碎片: 空闲内存合计能满足请求, 但是因为非连续, 导致没有任何一块单独的空闲内存能满足需求.   \n  * 例如在1M的空闲内存以512k大小分散在两个地方,  这个时候任何大于512k的请求都无法成功分配   \n  * 在通用的内存分配器中要求中, 外部碎片无法避免并且难以量化, 更准确的描述是, 外部碎片的产生不仅取决于之前请求的模式和分配器实现方式, 还取决于未来即将发生的请求的模式.    \n    * 举例来说 我们从1M内存中开采512k后再开采1K, 那么如果后续的请求中释放了512k的这个分配块 就出现了外部碎片问题.   \n  * 通常 如果我们对请求加以限制, 例如规定开采粒度都是512k  那么就可以通过内部碎片来优化一部分外部碎片问题.   \n  * 对于一个长期运行的系统来讲, 外部碎片是一个非常值得留意的问题.    \n\n## 基础分配策略  \n\n### 基础存储方式   \n\n#### Sequential Fit  (连续适配)\n 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  \n\n\n#### Segregated List (分离列表) \n 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  \n\n* Buddy System (Sequential Fit变种)  \n  * 内部碎片化问题比较严重   \n  * Binary Buddies  \n  * Fibonacci Buddies  \n  * Weighted Buddies   \n  \n#### Indexed  Fit  \n 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。\n* 使用Balanced Tree的Best Fit allocator\n* 使用Cartesian tree 的Stephenson Fast-Fit allocator\n* Bitmap Fit (Indexed Fit 变种)\n  Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  \n  \n\n### 路径匹配策略  \n对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    \n\n#### Best fit   \n  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.   \n  最佳匹配:  \n  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.  \n  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  \n\n\n#### Worst fit  \n  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.  \n  最不适合匹配  \n  内存管理器总是选择获得的最大的那个未分配内存块. \n  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)  \n  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  \n\n#### First fit  \n  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.  \n  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.   \n  同上例中, 首先匹配会从14k的block中分配12k的请求.   \n  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  \n\n\n## 设计方案       \n\n如何设计一个适用于共享内存上支持resumable的通用动态内存管理系统?  这里借鉴了linux下的设计布局.  \n参考我之前写的两篇文章:  \n[基于共享内存的通用内存分配器](https://zsummer.github.io/2020/02/07/2020-02-07-shared-memory-buddy_system/)\n[基于共享内存的对象池管理方案](https://zsummer.github.io/2020/02/07/2020-02-03-shared-memory-resume-overview/)\n\n### 设计需求:   \n\n* 不考虑多线程  \n* RESUMABLE支持  \n* 通用内存分配器的必要条件必须全部满足   \n  * 任意大小任意序列的请求支持  \n  * 立即响应请求   \n  * 保证内存的对齐要求 \n  * 不移动压缩已分配块    \n\n### 设计方式:  \n* 大块共享内存的连续地址空间下的动态扩容\n* buddy system算法来作为底层实现  \n  * 满足任意大小的请求序列\n  * 通过约束上层小内存分配器的批发粒度来降低外部碎片的发生   \n  * 满足大内存对齐而不产生内部碎片 (对于现代tcmalloc mimalloc等meta方案进行支持)    \n* zmalloc小内存分配方案  \n  * 1k以下的内存使用朴素的分箱方案(Segregated List)   \n    * best fit 方案 \n  * 1k以上的内存请求使用$2^{n-3}$进行对齐, 即最大浪费约12.5%的内存进行分箱   \n    * best fit 方案  \n    * dlmalloc使用$2^{n-2}$进行分箱, 箱内使用一个刚刚好够用的bit前缀树进行空间内不同大小的已分配块管理, 可以达到接近100%的利用率 而对齐只要一行代码即可完成.   性能上理论上比对齐方式略差  实测基本上没有什么差距.  \n    * tcmalloc mimalloc均采用对齐这种方案\n  * 超过大小内存请求上限大小的内存, 则'直接'交给底层的buddy system完成, zmalloc只提供统一接口.   \n  * 牺牲块开采    \n    * 这是进行了first fit优化的一个关键点 也是性能的关键    \n    * 在best fit的快速bitmap判定失败后会从牺牲块进行开采, 如果没有牺牲块则批发一个大块作为牺牲块进行开采.   \n    * 这里采用牺牲块有更良好的通用性性能,  指令路径短, cpu cache友好   \n    * 这里没采用tcmalloc/mimalloc的page设计, 在相同大小的连续请求中会比这种方案要好, 但是牺牲块的设计则通用性上更好, 性能差距即使针对性的情景下也很难超过5%  \n  \n### 代码规模和最终性能  \n这两种方案核心代码都是几百行级别, 但是考虑到coverage测试代码, 必要的辅助流程代码和assert调测(单元代码不在实现文件中), buddy system和zmalloc的实现部分代码均在1000行出头即可完成.   \n性能测试中, 同dlmalloc mimalloc tcmalloc的生产环境中性能差距均小于5%,  在项目整体的压测中无可观测的性能波动.   \n\n(tcmalloc相比ptmalloc的提升明显的部分在多线程部分的设计, 现代分配器tcmalloc/jemalloc/mimalloc等均做了局部化处理, 老的ptmalloc则只是在dlmalloc上做了多线程支持和细节优化 所以差距会比较明显)\n\n\n\n\n\n","slug":"2020-08-11-shm-allocator","published":1,"updated":"2020-08-20T11:37:24.699Z","_id":"ckdq134y000026s5h90uthhnp","comments":1,"layout":"post","photos":[],"link":"","content":"<!-- TOC -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">基本原理</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">内存分配器的基本概念</a><ul>\n<li><a href=\"#%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E5%BC%8F%E5%88%86%E9%85%8D%E5%99%A8\">显示和隐式分配器</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82%E5%92%8C%E7%9B%AE%E6%A0%87\">设计要求和目标</a><ul>\n<li><a href=\"#%E5%86%85%E9%83%A8%E7%A2%8E%E7%89%87%E5%92%8C%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87%E9%97%AE%E9%A2%98\">内部碎片和外部碎片问题</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\">基础分配策略</a><ul>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F\">基础存储方式</a><ul>\n<li><a href=\"#sequential-fit--%E8%BF%9E%E7%BB%AD%E9%80%82%E9%85%8D\">Sequential Fit  连续适配</a></li>\n<li><a href=\"#segregated-list-%E5%88%86%E7%A6%BB%E5%88%97%E8%A1%A8\">Segregated List 分离列表</a></li>\n<li><a href=\"#indexed--fit\">Indexed  Fit</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E7%AD%96%E7%95%A5\">路径匹配策略</a><ul>\n<li><a href=\"#best-fit\">Best fit</a></li>\n<li><a href=\"#worst-fit\">Worst fit</a></li>\n<li><a href=\"#first-fit\">First fit</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88\">设计方案</a><ul>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E9%9C%80%E6%B1%82\">设计需求:</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F\">设计方式:</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E6%A8%A1%E5%92%8C%E6%9C%80%E7%BB%88%E6%80%A7%E8%83%BD\">代码规模和最终性能</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n<h2><span id=\"前言\">前言</span></h2><p>在之前的文章我比较全面的介绍了一个完整的resume机制的阐述, 也提到了一些开发成本和三方库移植的问题, 这篇文章主要介绍如何在共享内存上实现一套可动态扩容的通用内存分配器, 以及如何利用通用内存分配器进行三方库包括stl中容器类的快速resumable化.       </p>\n<p>通用动态内存分配器的实现可以很好的对共享内存RESUME机制进行一个补充,  例如可以简单的基于分配器实现stl的allocator, 从而直接得到resumable的vector, list, queue, map, multi_map, unorder_map等;   也可以简单的将一些本身就比较容易resumable化的三方库和算法替换其allocator来简单快速的完成移植工作而非重写他们.   例如常见的资源解析rapidxml   移动避免算法库rvo等  .  </p>\n<p>当然, 处理易用性和快速移植三方库这些优点外, 从项目角度考虑也有一些缺点需要关注并进行合理范围的使用.   </p>\n<p>相比静态内存机制下的resumable方案 </p>\n<ul>\n<li><p>较难估算内存峰值用量  </p>\n<ul>\n<li>有些场合下该难点是业务需求带来的, 比如说我们普通玩家可以设置可绑定的上限buff100个就够用, 但是对于一些GVE的大型BOSS团本来说, 100个就容易超限,  在扁平化的设计中, 如果我们用静态内存方案那么所有单位的内存使用量都是’上限’, 但是改成动态方案 则是根据真实情况动态波动的.  我们可以根据策划配置通过软上限来进行计算, 但是业务功能量级铺设上来后 则很难全面的评估这些地方对内存使用的真实情况.     </li>\n<li>静态内存中在启服时可以一次性的计算好所有内存大小, 整个游戏无论负载情况其内存占用是始终稳定且直观的 .   </li>\n</ul>\n</li>\n<li><p>内存安全性不如静态内存   </p>\n<ul>\n<li>静态内存基本上不存在野指针 越界等问题  也不存在内存不够用的情况   </li>\n<li>例如说我实现了<code>static_list</code>; <ul>\n<li>定义声明了OBJ和总大小 <code>static_list&lt;Buff, MAX_BUFF_SIZE&gt; buffs;</code>  </li>\n<li>然后我引用了一个指针指向其中一个已有的元素进行当前被动动作标记, 在受击出现的时候<code>Buff* act = &amp;受击BUFF;</code>  在受击结束时候在移除act;  这里虽然用到了指针 但是在使用的时候, static_list中所有的元素都在一个连续的静态内存区域内, 并且该指针可以通过偏移检测和bitmap计算是否是有效的obj指针, obj是不是有效的buff等, 并不会因为是指针出现越界访问问题.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定位一些内存访问相关的问题可能会更麻烦一些   </p>\n<ul>\n<li>例如:  所有战斗单位位于共享内存xxx–yyy地址内以大小X对齐, 每个单位内聚合有技能模块移动模块属性模块.  假如现在出现了一个读取属性错误的问题, 我们很容易根据有限的地址信息去推测出出问题的范围, 并且方便进行基于内存地址的修改情况进行监听断点等  </li>\n</ul>\n</li>\n<li><p>性能相比静态方案一般会有性能上的损失,  动态内存的分配和回收有一个适配的成本开销.   </p>\n</li>\n<li><p>长期运行可能有内存碎片问题</p>\n<ul>\n<li>这个问题反而比较乐观, 因为在静态内存池方案上 内存利用率往往是非常低的, 而动态内存分配器的碎片率一般根据情况大约都控制在25%以下, 像dlmalloc则在实践中能控制在95%左右.  </li>\n<li>静态内存一般来说, 对象池与对象池之间是内存隔离的, 即相互之间的空闲内存不能共用    </li>\n<li>无论是对象池还是容器, 其规模都是直接以’上限’在定义阶段确定的, 一般情景下都会有大量的富余容量浪费  </li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2><span id=\"基本原理\">基本原理</span></h2><p>在共享内存紧邻静态内存区域, 划分出动态管理区域并支持动态增长扩容的区域     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|global state|  obj pools  |  dyn mgr |                     |  dyn segment 1 | dyn segment N ...   </span><br><span class=\"line\">| &lt;-- 启服时候根据配置直接计算出大小 --&gt; |  &lt;-- alian size --&gt; | &lt;---   动态分段扩容  -----&gt;  ...</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"内存分配器的基本概念\">内存分配器的基本概念</span></h2><h3><span id=\"显示和隐式分配器\">显示和隐式分配器</span></h3><p>这是一个基础的分类,  无论显式分配器还是隐式分配器都需要显式指定分配,  但是显式分配器还需要显式指定回收.   </p>\n<p>一般我们经常接触到的malloc/free (ptmalloc分配器),  tcmalloc  jemalloc等都是显示分配器  </p>\n<p>而不需要显式指定回收的内存分配器, 通常我们称之为垃圾收集器, 隐式分配器会自动回收不再被使用内存,  也因此通常其实现需要语言级别的支持和配合. </p>\n<h3><span id=\"设计要求和目标\">设计要求和目标</span></h3><p>要求:  </p>\n<ul>\n<li>处理任意请求序列   <ul>\n<li>对于任意的请求和回收序列都能正确执行   </li>\n</ul>\n</li>\n<li>立即响应请求<ul>\n<li>对于内存分配请求需要立刻响应 不能缓存</li>\n</ul>\n</li>\n<li>只使用堆   <ul>\n<li>对于给系统用的内存分配器 只使用堆可以有更好的移植性   </li>\n<li>对于共享内存RESUME而言, 对应的是 我们只能使用共享内存  </li>\n</ul>\n</li>\n<li>对齐块   <ul>\n<li>一般来说通用内存分配器会提供两倍CPU位宽的对齐以保证对任意类型数据访问的支持, 一个错误的实现假设例如 在64位下只提供32位的对齐  那么去读取一个void*指针  则特定情况可能会导致CPU两次读取带来额外的性能开销甚至可能产生硬件异常.    </li>\n</ul>\n</li>\n<li>不修改/移动已分配块<ul>\n<li>没有缺页中断这类机制支持 修改或者移动已分配块会直接导致上层功能异常 </li>\n</ul>\n</li>\n</ul>\n<p>目标:  </p>\n<ul>\n<li>最大化吞吐率</li>\n<li>最大化内存利用率, 减少管理内存大小, 减少内部碎片, 减少外部碎片</li>\n</ul>\n<h4><span id=\"内部碎片和外部碎片问题\">内部碎片和外部碎片问题</span></h4><p>内部碎片:简单描述就是已分配块中的无效负荷部分   </p>\n<ul>\n<li>例如因为对齐要求, 当用户分配9字节数据时候, 给出的已分配块为16,  那么就产生了7字节的内部碎片   </li>\n<li>通常内部碎片的问题简单明了容易量化, 只要在可接受范围都可以.<br>外部碎片: 空闲内存合计能满足请求, 但是因为非连续, 导致没有任何一块单独的空闲内存能满足需求.   </li>\n<li>例如在1M的空闲内存以512k大小分散在两个地方,  这个时候任何大于512k的请求都无法成功分配   </li>\n<li>在通用的内存分配器中要求中, 外部碎片无法避免并且难以量化, 更准确的描述是, 外部碎片的产生不仅取决于之前请求的模式和分配器实现方式, 还取决于未来即将发生的请求的模式.    <ul>\n<li>举例来说 我们从1M内存中开采512k后再开采1K, 那么如果后续的请求中释放了512k的这个分配块 就出现了外部碎片问题.   </li>\n</ul>\n</li>\n<li>通常 如果我们对请求加以限制, 例如规定开采粒度都是512k  那么就可以通过内部碎片来优化一部分外部碎片问题.   </li>\n<li>对于一个长期运行的系统来讲, 外部碎片是一个非常值得留意的问题.    </li>\n</ul>\n<h2><span id=\"基础分配策略\">基础分配策略</span></h2><h3><span id=\"基础存储方式\">基础存储方式</span></h3><h4><span id=\"sequential-fit-连续适配\">Sequential Fit  (连续适配)</span></h4><p> 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  </p>\n<h4><span id=\"segregated-list-分离列表\">Segregated List (分离列表)</span></h4><p> 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  </p>\n<ul>\n<li>Buddy System (Sequential Fit变种)  <ul>\n<li>内部碎片化问题比较严重   </li>\n<li>Binary Buddies  </li>\n<li>Fibonacci Buddies  </li>\n<li>Weighted Buddies   </li>\n</ul>\n</li>\n</ul>\n<h4><span id=\"indexed-fit\">Indexed  Fit</span></h4><p> 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。</p>\n<ul>\n<li>使用Balanced Tree的Best Fit allocator</li>\n<li>使用Cartesian tree 的Stephenson Fast-Fit allocator</li>\n<li>Bitmap Fit (Indexed Fit 变种)<br>Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  </li>\n</ul>\n<h3><span id=\"路径匹配策略\">路径匹配策略</span></h3><p>对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    </p>\n<h4><span id=\"best-fit\">Best fit</span></h4><p>  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.<br>  最佳匹配:<br>  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.<br>  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  </p>\n<h4><span id=\"worst-fit\">Worst fit</span></h4><p>  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.<br>  最不适合匹配<br>  内存管理器总是选择获得的最大的那个未分配内存块.<br>  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)<br>  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  </p>\n<h4><span id=\"first-fit\">First fit</span></h4><p>  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.<br>  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.<br>  同上例中, 首先匹配会从14k的block中分配12k的请求.<br>  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  </p>\n<h2><span id=\"设计方案\">设计方案</span></h2><p>如何设计一个适用于共享内存上支持resumable的通用动态内存管理系统?  这里借鉴了linux下的设计布局.<br>参考我之前写的两篇文章:<br><a href=\"https://zsummer.github.io/2020/02/07/2020-02-07-shared-memory-buddy_system/\">基于共享内存的通用内存分配器</a><br><a href=\"https://zsummer.github.io/2020/02/07/2020-02-03-shared-memory-resume-overview/\">基于共享内存的对象池管理方案</a></p>\n<h3><span id=\"设计需求\">设计需求:</span></h3><ul>\n<li>不考虑多线程  </li>\n<li>RESUMABLE支持  </li>\n<li>通用内存分配器的必要条件必须全部满足   <ul>\n<li>任意大小任意序列的请求支持  </li>\n<li>立即响应请求   </li>\n<li>保证内存的对齐要求 </li>\n<li>不移动压缩已分配块    </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"设计方式\">设计方式:</span></h3><ul>\n<li>大块共享内存的连续地址空间下的动态扩容</li>\n<li>buddy system算法来作为底层实现  <ul>\n<li>满足任意大小的请求序列</li>\n<li>通过约束上层小内存分配器的批发粒度来降低外部碎片的发生   </li>\n<li>满足大内存对齐而不产生内部碎片 (对于现代tcmalloc mimalloc等meta方案进行支持)    </li>\n</ul>\n</li>\n<li>zmalloc小内存分配方案  <ul>\n<li>1k以下的内存使用朴素的分箱方案(Segregated List)   <ul>\n<li>best fit 方案 </li>\n</ul>\n</li>\n<li>1k以上的内存请求使用$2^{n-3}$进行对齐, 即最大浪费约12.5%的内存进行分箱   <ul>\n<li>best fit 方案  </li>\n<li>dlmalloc使用$2^{n-2}$进行分箱, 箱内使用一个刚刚好够用的bit前缀树进行空间内不同大小的已分配块管理, 可以达到接近100%的利用率 而对齐只要一行代码即可完成.   性能上理论上比对齐方式略差  实测基本上没有什么差距.  </li>\n<li>tcmalloc mimalloc均采用对齐这种方案</li>\n</ul>\n</li>\n<li>超过大小内存请求上限大小的内存, 则’直接’交给底层的buddy system完成, zmalloc只提供统一接口.   </li>\n<li>牺牲块开采    <ul>\n<li>这是进行了first fit优化的一个关键点 也是性能的关键    </li>\n<li>在best fit的快速bitmap判定失败后会从牺牲块进行开采, 如果没有牺牲块则批发一个大块作为牺牲块进行开采.   </li>\n<li>这里采用牺牲块有更良好的通用性性能,  指令路径短, cpu cache友好   </li>\n<li>这里没采用tcmalloc/mimalloc的page设计, 在相同大小的连续请求中会比这种方案要好, 但是牺牲块的设计则通用性上更好, 性能差距即使针对性的情景下也很难超过5%  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"代码规模和最终性能\">代码规模和最终性能</span></h3><p>这两种方案核心代码都是几百行级别, 但是考虑到coverage测试代码, 必要的辅助流程代码和assert调测(单元代码不在实现文件中), buddy system和zmalloc的实现部分代码均在1000行出头即可完成.<br>性能测试中, 同dlmalloc mimalloc tcmalloc的生产环境中性能差距均小于5%,  在项目整体的压测中无可观测的性能波动.   </p>\n<p>(tcmalloc相比ptmalloc的提升明显的部分在多线程部分的设计, 现代分配器tcmalloc/jemalloc/mimalloc等均做了局部化处理, 老的ptmalloc则只是在dlmalloc上做了多线程支持和细节优化 所以差距会比较明显)</p>\n","site":{"data":{}},"excerpt":"<!-- TOC -->\n\n<ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\">基本原理</a></li>\n<li><a href=\"#%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">内存分配器的基本概念</a><ul>\n<li><a href=\"#%E6%98%BE%E7%A4%BA%E5%92%8C%E9%9A%90%E5%BC%8F%E5%88%86%E9%85%8D%E5%99%A8\">显示和隐式分配器</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82%E5%92%8C%E7%9B%AE%E6%A0%87\">设计要求和目标</a><ul>\n<li><a href=\"#%E5%86%85%E9%83%A8%E7%A2%8E%E7%89%87%E5%92%8C%E5%A4%96%E9%83%A8%E7%A2%8E%E7%89%87%E9%97%AE%E9%A2%98\">内部碎片和外部碎片问题</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5\">基础分配策略</a><ul>\n<li><a href=\"#%E5%9F%BA%E7%A1%80%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F\">基础存储方式</a><ul>\n<li><a href=\"#sequential-fit--%E8%BF%9E%E7%BB%AD%E9%80%82%E9%85%8D\">Sequential Fit  连续适配</a></li>\n<li><a href=\"#segregated-list-%E5%88%86%E7%A6%BB%E5%88%97%E8%A1%A8\">Segregated List 分离列表</a></li>\n<li><a href=\"#indexed--fit\">Indexed  Fit</a></li>\n</ul>\n</li>\n<li><a href=\"#%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D%E7%AD%96%E7%95%A5\">路径匹配策略</a><ul>\n<li><a href=\"#best-fit\">Best fit</a></li>\n<li><a href=\"#worst-fit\">Worst fit</a></li>\n<li><a href=\"#first-fit\">First fit</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%A1%88\">设计方案</a><ul>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E9%9C%80%E6%B1%82\">设计需求:</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F\">设计方式:</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E8%A7%84%E6%A8%A1%E5%92%8C%E6%9C%80%E7%BB%88%E6%80%A7%E8%83%BD\">代码规模和最终性能</a></li>\n</ul>\n</li>\n</ul>\n<!-- /TOC -->\n\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在之前的文章我比较全面的介绍了一个完整的resume机制的阐述, 也提到了一些开发成本和三方库移植的问题, 这篇文章主要介绍如何在共享内存上实现一套可动态扩容的通用内存分配器, 以及如何利用通用内存分配器进行三方库包括stl中容器类的快速resumable化.       </p>\n<p>通用动态内存分配器的实现可以很好的对共享内存RESUME机制进行一个补充,  例如可以简单的基于分配器实现stl的allocator, 从而直接得到resumable的vector, list, queue, map, multi_map, unorder_map等;   也可以简单的将一些本身就比较容易resumable化的三方库和算法替换其allocator来简单快速的完成移植工作而非重写他们.   例如常见的资源解析rapidxml   移动避免算法库rvo等  .  </p>\n<p>当然, 处理易用性和快速移植三方库这些优点外, 从项目角度考虑也有一些缺点需要关注并进行合理范围的使用.   </p>\n<p>相比静态内存机制下的resumable方案 </p>\n<ul>\n<li><p>较难估算内存峰值用量  </p>\n<ul>\n<li>有些场合下该难点是业务需求带来的, 比如说我们普通玩家可以设置可绑定的上限buff100个就够用, 但是对于一些GVE的大型BOSS团本来说, 100个就容易超限,  在扁平化的设计中, 如果我们用静态内存方案那么所有单位的内存使用量都是’上限’, 但是改成动态方案 则是根据真实情况动态波动的.  我们可以根据策划配置通过软上限来进行计算, 但是业务功能量级铺设上来后 则很难全面的评估这些地方对内存使用的真实情况.     </li>\n<li>静态内存中在启服时可以一次性的计算好所有内存大小, 整个游戏无论负载情况其内存占用是始终稳定且直观的 .   </li>\n</ul>\n</li>\n<li><p>内存安全性不如静态内存   </p>\n<ul>\n<li>静态内存基本上不存在野指针 越界等问题  也不存在内存不够用的情况   </li>\n<li>例如说我实现了<code>static_list</code>; <ul>\n<li>定义声明了OBJ和总大小 <code>static_list&lt;Buff, MAX_BUFF_SIZE&gt; buffs;</code>  </li>\n<li>然后我引用了一个指针指向其中一个已有的元素进行当前被动动作标记, 在受击出现的时候<code>Buff* act = &amp;受击BUFF;</code>  在受击结束时候在移除act;  这里虽然用到了指针 但是在使用的时候, static_list中所有的元素都在一个连续的静态内存区域内, 并且该指针可以通过偏移检测和bitmap计算是否是有效的obj指针, obj是不是有效的buff等, 并不会因为是指针出现越界访问问题.  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定位一些内存访问相关的问题可能会更麻烦一些   </p>\n<ul>\n<li>例如:  所有战斗单位位于共享内存xxx–yyy地址内以大小X对齐, 每个单位内聚合有技能模块移动模块属性模块.  假如现在出现了一个读取属性错误的问题, 我们很容易根据有限的地址信息去推测出出问题的范围, 并且方便进行基于内存地址的修改情况进行监听断点等  </li>\n</ul>\n</li>\n<li><p>性能相比静态方案一般会有性能上的损失,  动态内存的分配和回收有一个适配的成本开销.   </p>\n</li>\n<li><p>长期运行可能有内存碎片问题</p>\n<ul>\n<li>这个问题反而比较乐观, 因为在静态内存池方案上 内存利用率往往是非常低的, 而动态内存分配器的碎片率一般根据情况大约都控制在25%以下, 像dlmalloc则在实践中能控制在95%左右.  </li>\n<li>静态内存一般来说, 对象池与对象池之间是内存隔离的, 即相互之间的空闲内存不能共用    </li>\n<li>无论是对象池还是容器, 其规模都是直接以’上限’在定义阶段确定的, 一般情景下都会有大量的富余容量浪费  </li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>在共享内存紧邻静态内存区域, 划分出动态管理区域并支持动态增长扩容的区域     </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|global state|  obj pools  |  dyn mgr |                     |  dyn segment 1 | dyn segment N ...   </span><br><span class=\"line\">| &lt;-- 启服时候根据配置直接计算出大小 --&gt; |  &lt;-- alian size --&gt; | &lt;---   动态分段扩容  -----&gt;  ...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内存分配器的基本概念\"><a href=\"#内存分配器的基本概念\" class=\"headerlink\" title=\"内存分配器的基本概念\"></a>内存分配器的基本概念</h2><h3 id=\"显示和隐式分配器\"><a href=\"#显示和隐式分配器\" class=\"headerlink\" title=\"显示和隐式分配器\"></a>显示和隐式分配器</h3><p>这是一个基础的分类,  无论显式分配器还是隐式分配器都需要显式指定分配,  但是显式分配器还需要显式指定回收.   </p>\n<p>一般我们经常接触到的malloc/free (ptmalloc分配器),  tcmalloc  jemalloc等都是显示分配器  </p>\n<p>而不需要显式指定回收的内存分配器, 通常我们称之为垃圾收集器, 隐式分配器会自动回收不再被使用内存,  也因此通常其实现需要语言级别的支持和配合. </p>\n<h3 id=\"设计要求和目标\"><a href=\"#设计要求和目标\" class=\"headerlink\" title=\"设计要求和目标\"></a>设计要求和目标</h3><p>要求:  </p>\n<ul>\n<li>处理任意请求序列   <ul>\n<li>对于任意的请求和回收序列都能正确执行   </li>\n</ul>\n</li>\n<li>立即响应请求<ul>\n<li>对于内存分配请求需要立刻响应 不能缓存</li>\n</ul>\n</li>\n<li>只使用堆   <ul>\n<li>对于给系统用的内存分配器 只使用堆可以有更好的移植性   </li>\n<li>对于共享内存RESUME而言, 对应的是 我们只能使用共享内存  </li>\n</ul>\n</li>\n<li>对齐块   <ul>\n<li>一般来说通用内存分配器会提供两倍CPU位宽的对齐以保证对任意类型数据访问的支持, 一个错误的实现假设例如 在64位下只提供32位的对齐  那么去读取一个void*指针  则特定情况可能会导致CPU两次读取带来额外的性能开销甚至可能产生硬件异常.    </li>\n</ul>\n</li>\n<li>不修改/移动已分配块<ul>\n<li>没有缺页中断这类机制支持 修改或者移动已分配块会直接导致上层功能异常 </li>\n</ul>\n</li>\n</ul>\n<p>目标:  </p>\n<ul>\n<li>最大化吞吐率</li>\n<li>最大化内存利用率, 减少管理内存大小, 减少内部碎片, 减少外部碎片</li>\n</ul>\n<h4 id=\"内部碎片和外部碎片问题\"><a href=\"#内部碎片和外部碎片问题\" class=\"headerlink\" title=\"内部碎片和外部碎片问题\"></a>内部碎片和外部碎片问题</h4><p>内部碎片:简单描述就是已分配块中的无效负荷部分   </p>\n<ul>\n<li>例如因为对齐要求, 当用户分配9字节数据时候, 给出的已分配块为16,  那么就产生了7字节的内部碎片   </li>\n<li>通常内部碎片的问题简单明了容易量化, 只要在可接受范围都可以.<br>外部碎片: 空闲内存合计能满足请求, 但是因为非连续, 导致没有任何一块单独的空闲内存能满足需求.   </li>\n<li>例如在1M的空闲内存以512k大小分散在两个地方,  这个时候任何大于512k的请求都无法成功分配   </li>\n<li>在通用的内存分配器中要求中, 外部碎片无法避免并且难以量化, 更准确的描述是, 外部碎片的产生不仅取决于之前请求的模式和分配器实现方式, 还取决于未来即将发生的请求的模式.    <ul>\n<li>举例来说 我们从1M内存中开采512k后再开采1K, 那么如果后续的请求中释放了512k的这个分配块 就出现了外部碎片问题.   </li>\n</ul>\n</li>\n<li>通常 如果我们对请求加以限制, 例如规定开采粒度都是512k  那么就可以通过内部碎片来优化一部分外部碎片问题.   </li>\n<li>对于一个长期运行的系统来讲, 外部碎片是一个非常值得留意的问题.    </li>\n</ul>\n<h2 id=\"基础分配策略\"><a href=\"#基础分配策略\" class=\"headerlink\" title=\"基础分配策略\"></a>基础分配策略</h2><h3 id=\"基础存储方式\"><a href=\"#基础存储方式\" class=\"headerlink\" title=\"基础存储方式\"></a>基础存储方式</h3><h4 id=\"Sequential-Fit-连续适配\"><a href=\"#Sequential-Fit-连续适配\" class=\"headerlink\" title=\"Sequential Fit  (连续适配)\"></a>Sequential Fit  (连续适配)</h4><p> 是基于一个单向或双向链表管理各个blocks的基础算法，因为和blocks的个数有关，性能比较差。这一类算法包括Fast-Fit, First-Fit, Next-Fit, and Worst-Fit。  </p>\n<h4 id=\"Segregated-List-分离列表\"><a href=\"#Segregated-List-分离列表\" class=\"headerlink\" title=\"Segregated List (分离列表)\"></a>Segregated List (分离列表)</h4><p> 将所有的空闲块，放入到一组链表中，每一个链表中只包含某一个大小范围的空闲块  </p>\n<ul>\n<li>Buddy System (Sequential Fit变种)  <ul>\n<li>内部碎片化问题比较严重   </li>\n<li>Binary Buddies  </li>\n<li>Fibonacci Buddies  </li>\n<li>Weighted Buddies   </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Indexed-Fit\"><a href=\"#Indexed-Fit\" class=\"headerlink\" title=\"Indexed  Fit\"></a>Indexed  Fit</h4><p> 通过一些高阶的数据结构来索引（Index）空闲的内存块。例如基于平衡树的“Best Fit”算法。</p>\n<ul>\n<li>使用Balanced Tree的Best Fit allocator</li>\n<li>使用Cartesian tree 的Stephenson Fast-Fit allocator</li>\n<li>Bitmap Fit (Indexed Fit 变种)<br>Indexed Fit算法的变种，通过一小段内存的位图来标记对应的内存是空闲的还是使用中。  </li>\n</ul>\n<h3 id=\"路径匹配策略\"><a href=\"#路径匹配策略\" class=\"headerlink\" title=\"路径匹配策略\"></a>路径匹配策略</h3><p>对于操作系统而言, 除了管理进程之外, 还需要有效的管理计算机的主内存, 管理主内存的共享使用和最小化内存访问时间是内存管理器的基本目标. 虽然使用了各种不同的策略来为争夺内存的进程分配空间，但最流行的三种策略是最佳匹配、最不适合匹配和首次匹配.    </p>\n<h4 id=\"Best-fit\"><a href=\"#Best-fit\" class=\"headerlink\" title=\"Best fit\"></a>Best fit</h4><p>  The allocator places a process in the smallest block of unallocated memory in which it will fit. For example, suppose a process requests 12KB of memory and the memory manager currently has a list of unallocated blocks of 6KB, 14KB, 19KB, 11KB, and 13KB blocks. The best-fit strategy will allocate 12KB of the 13KB block to the process.<br>  最佳匹配:<br>  这种匹配策略中, 分配器会从满足匹配要求的未分配内存中选择最小的块.<br>  例如程序请求一个12kb的内存, 而当前的内存管理器有一个未分配的内存块列表, 分别为14k, 19k, 11k, 13k, 那么best-fit讲从13k的内存块中分配内存给程序.  </p>\n<h4 id=\"Worst-fit\"><a href=\"#Worst-fit\" class=\"headerlink\" title=\"Worst fit\"></a>Worst fit</h4><p>  The memory manager places a process in the largest block of unallocated memory available. The idea is that this placement will create the largest hold after the allocations, thus increasing the possibility that, compared to best fit, another process can use the remaining space. Using the same example as above, worst fit will allocate 12KB of the 19KB block to the process, leaving a 7KB block for future use.<br>  最不适合匹配<br>  内存管理器总是选择获得的最大的那个未分配内存块.<br>  这种策略在每次分配后总是持有最大的内存块, 从而增加匹配的可能性. 与最佳匹配相比, 其他的请求可以使用剩余的空间.(最佳匹配的剩余内存往往无法利用)<br>  同上例, 最坏匹配会从19k的那个内存块中分配, 并留下7k的内存留给将来使用.  </p>\n<h4 id=\"First-fit\"><a href=\"#First-fit\" class=\"headerlink\" title=\"First fit\"></a>First fit</h4><p>  There may be many holes in the memory, so the operating system, to reduce the amount of time it spends analyzing the available spaces, begins at the start of primary memory and allocates memory from the first hole it encounters large enough to satisfy the request. Using the same example as above, first fit will allocate 12KB of the 14KB block to the process.<br>  通常内存中会存在很多空洞, 所以操作系统为了减少分析可用空间的性能(时间)消耗, 会从主要内存或者 第一个足够大并且满足求要的可分配内存的起始位置相应请求.<br>  同上例中, 首先匹配会从14k的block中分配12k的请求.<br>  First Fit的一个改良版本叫做Next Fit, 即在下次请求时会从上次中断的地方的开始搜索, 从而避免总是从起始的空闲内存开始查找. (Designated victim), First Fit的策略会倾向于总是把大块切的更零碎也因此带来更多的外部碎片问题, 也因为总是从空闲内存的头部开始切造成更多的内部碎片,  而Next Fit的做法会避免(改良)这些问题, 并且速度比Firt 以及 Best更快.  </p>\n<h2 id=\"设计方案\"><a href=\"#设计方案\" class=\"headerlink\" title=\"设计方案\"></a>设计方案</h2><p>如何设计一个适用于共享内存上支持resumable的通用动态内存管理系统?  这里借鉴了linux下的设计布局.<br>参考我之前写的两篇文章:<br><a href=\"https://zsummer.github.io/2020/02/07/2020-02-07-shared-memory-buddy_system/\">基于共享内存的通用内存分配器</a><br><a href=\"https://zsummer.github.io/2020/02/07/2020-02-03-shared-memory-resume-overview/\">基于共享内存的对象池管理方案</a></p>\n<h3 id=\"设计需求\"><a href=\"#设计需求\" class=\"headerlink\" title=\"设计需求:\"></a>设计需求:</h3><ul>\n<li>不考虑多线程  </li>\n<li>RESUMABLE支持  </li>\n<li>通用内存分配器的必要条件必须全部满足   <ul>\n<li>任意大小任意序列的请求支持  </li>\n<li>立即响应请求   </li>\n<li>保证内存的对齐要求 </li>\n<li>不移动压缩已分配块    </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"设计方式\"><a href=\"#设计方式\" class=\"headerlink\" title=\"设计方式:\"></a>设计方式:</h3><ul>\n<li>大块共享内存的连续地址空间下的动态扩容</li>\n<li>buddy system算法来作为底层实现  <ul>\n<li>满足任意大小的请求序列</li>\n<li>通过约束上层小内存分配器的批发粒度来降低外部碎片的发生   </li>\n<li>满足大内存对齐而不产生内部碎片 (对于现代tcmalloc mimalloc等meta方案进行支持)    </li>\n</ul>\n</li>\n<li>zmalloc小内存分配方案  <ul>\n<li>1k以下的内存使用朴素的分箱方案(Segregated List)   <ul>\n<li>best fit 方案 </li>\n</ul>\n</li>\n<li>1k以上的内存请求使用$2^{n-3}$进行对齐, 即最大浪费约12.5%的内存进行分箱   <ul>\n<li>best fit 方案  </li>\n<li>dlmalloc使用$2^{n-2}$进行分箱, 箱内使用一个刚刚好够用的bit前缀树进行空间内不同大小的已分配块管理, 可以达到接近100%的利用率 而对齐只要一行代码即可完成.   性能上理论上比对齐方式略差  实测基本上没有什么差距.  </li>\n<li>tcmalloc mimalloc均采用对齐这种方案</li>\n</ul>\n</li>\n<li>超过大小内存请求上限大小的内存, 则’直接’交给底层的buddy system完成, zmalloc只提供统一接口.   </li>\n<li>牺牲块开采    <ul>\n<li>这是进行了first fit优化的一个关键点 也是性能的关键    </li>\n<li>在best fit的快速bitmap判定失败后会从牺牲块进行开采, 如果没有牺牲块则批发一个大块作为牺牲块进行开采.   </li>\n<li>这里采用牺牲块有更良好的通用性性能,  指令路径短, cpu cache友好   </li>\n<li>这里没采用tcmalloc/mimalloc的page设计, 在相同大小的连续请求中会比这种方案要好, 但是牺牲块的设计则通用性上更好, 性能差距即使针对性的情景下也很难超过5%  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码规模和最终性能\"><a href=\"#代码规模和最终性能\" class=\"headerlink\" title=\"代码规模和最终性能\"></a>代码规模和最终性能</h3><p>这两种方案核心代码都是几百行级别, 但是考虑到coverage测试代码, 必要的辅助流程代码和assert调测(单元代码不在实现文件中), buddy system和zmalloc的实现部分代码均在1000行出头即可完成.<br>性能测试中, 同dlmalloc mimalloc tcmalloc的生产环境中性能差距均小于5%,  在项目整体的压测中无可观测的性能波动.   </p>\n<p>(tcmalloc相比ptmalloc的提升明显的部分在多线程部分的设计, 现代分配器tcmalloc/jemalloc/mimalloc等均做了局部化处理, 老的ptmalloc则只是在dlmalloc上做了多线程支持和细节优化 所以差距会比较明显)</p>"},{"title":"git和git-lfs编译与使用","date":"2020-09-29T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## git和git-lfs编译使用   \n\n### 编译git   \n[github](https://mirrors.edge.kernel.org/pub/software/scm/git/ )\n```\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.25.2.tar.gz\ntar -xvf git-2.25.2.tar.gz\ncd git-2.25.2\nmake configure NO_OPENSSL=1\n./configure --prefix=/usr/local/git  all\nmake \nmake install\necho \"export PATH=/usr/local/git/bin:$PATH\" >> /etc/profile\nsource /etc/profile\n```\n<!-- more -->\n\n### 编译git-lfs\n```\ngo build\ngo install\n```\n\n### 手动下载安装包\n```\ntar xf git-lfs-*.tar.gz\ncd git-lfs-*\nsudo ./install.sh\n```\n\n### 存放到git bin目录后执行\n```\ngit lfs install\n```\n\n\n### 使用git-lfs\n\n添加跟踪\n```\ngit lfs track \"*.so\"\ngit lfs track \"resource/*\"\n```\n\n\n\n**一定要先track然后再进行add commit操作** 否则查看[lfs规则更新](#lfs规则更新)    \n\n其他命令\n```\n# 查看当前使用 Git LFS 管理的匹配列表\ngit lfs track\n\n# 使用 Git LFS 管理指定的文件\ngit lfs track \"*.psd\"\n\n# 不再使用 Git LFS 管理指定的文件\ngit lfs untrack \"*.psd\"\n\n# 类似 `git status`，查看当前 Git LFS 对象的状态\ngit lfs status\n\n# 枚举目前所有被 Git LFS 管理的具体文件\ngit lfs ls-files\n\n# 检查当前所用 Git LFS 的版本\ngit lfs version\n\n# 针对使用了 LFS 的仓库进行了特别优化的 clone 命令，显著提升获取\n# LFS 对象的速度，接受和 `git clone` 一样的参数。 [1] [2]\ngit lfs clone https://github.com/user/repo.git\n```\n\n\n### lfs规则更新   \n``` Shell\ngit lfs track \"*.xlsx\"\ngit lfs migrate import --include=\"*.xlsx\" --include-ref=refs/heads/master\n```\n通过以上规则进行添加和更新   migrate会清理所有历史提交的文件改为文件指针 略等于删库重建   \n\n在完成所有更新后 需要对.git仓库进行整理修剪和提交   \n-f意思是--force 一般的git仓库管理会锁定master分支并保护  需要先解开保护.   \n```\ngit gc --prune=now\ngit reflog expire --expire-unreachable=now --all\ngit push --all -f \ngit push --tags \n```\n\n强制更新本地(注意保存好本地修改)\n```\ngit fetch --all\ngit reset --hard origin/master\ngit pull\n```\n\n### lfs规则更新2   \n删除对应后缀的所有文件后 添加track跟踪   \n然后重新添加所有该后缀的文件.      \n\n\n\n","source":"_posts/2020-09-30-git-lfs.md","raw":"---\ntitle: git和git-lfs编译与使用 \ndate: 2020-09-30\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## git和git-lfs编译使用   \n\n### 编译git   \n[github](https://mirrors.edge.kernel.org/pub/software/scm/git/ )\n```\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.25.2.tar.gz\ntar -xvf git-2.25.2.tar.gz\ncd git-2.25.2\nmake configure NO_OPENSSL=1\n./configure --prefix=/usr/local/git  all\nmake \nmake install\necho \"export PATH=/usr/local/git/bin:$PATH\" >> /etc/profile\nsource /etc/profile\n```\n<!-- more -->\n\n### 编译git-lfs\n```\ngo build\ngo install\n```\n\n### 手动下载安装包\n```\ntar xf git-lfs-*.tar.gz\ncd git-lfs-*\nsudo ./install.sh\n```\n\n### 存放到git bin目录后执行\n```\ngit lfs install\n```\n\n\n### 使用git-lfs\n\n添加跟踪\n```\ngit lfs track \"*.so\"\ngit lfs track \"resource/*\"\n```\n\n\n\n**一定要先track然后再进行add commit操作** 否则查看[lfs规则更新](#lfs规则更新)    \n\n其他命令\n```\n# 查看当前使用 Git LFS 管理的匹配列表\ngit lfs track\n\n# 使用 Git LFS 管理指定的文件\ngit lfs track \"*.psd\"\n\n# 不再使用 Git LFS 管理指定的文件\ngit lfs untrack \"*.psd\"\n\n# 类似 `git status`，查看当前 Git LFS 对象的状态\ngit lfs status\n\n# 枚举目前所有被 Git LFS 管理的具体文件\ngit lfs ls-files\n\n# 检查当前所用 Git LFS 的版本\ngit lfs version\n\n# 针对使用了 LFS 的仓库进行了特别优化的 clone 命令，显著提升获取\n# LFS 对象的速度，接受和 `git clone` 一样的参数。 [1] [2]\ngit lfs clone https://github.com/user/repo.git\n```\n\n\n### lfs规则更新   \n``` Shell\ngit lfs track \"*.xlsx\"\ngit lfs migrate import --include=\"*.xlsx\" --include-ref=refs/heads/master\n```\n通过以上规则进行添加和更新   migrate会清理所有历史提交的文件改为文件指针 略等于删库重建   \n\n在完成所有更新后 需要对.git仓库进行整理修剪和提交   \n-f意思是--force 一般的git仓库管理会锁定master分支并保护  需要先解开保护.   \n```\ngit gc --prune=now\ngit reflog expire --expire-unreachable=now --all\ngit push --all -f \ngit push --tags \n```\n\n强制更新本地(注意保存好本地修改)\n```\ngit fetch --all\ngit reset --hard origin/master\ngit pull\n```\n\n### lfs规则更新2   \n删除对应后缀的所有文件后 添加track跟踪   \n然后重新添加所有该后缀的文件.      \n\n\n\n","slug":"2020-09-30-git-lfs","published":1,"updated":"2020-10-09T13:42:06.505Z","_id":"ckfp7cyfp0000j45hfk2f69cw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"git和git-lfs编译使用\">git和git-lfs编译使用</span></h2><h3><span id=\"编译git\">编译git</span></h3><p><a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;mirrors.edge.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.25.2.tar.gz</span><br><span class=\"line\">tar -xvf git-2.25.2.tar.gz</span><br><span class=\"line\">cd git-2.25.2</span><br><span class=\"line\">make configure NO_OPENSSL&#x3D;1</span><br><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git  all</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\">echo &quot;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin:$PATH&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h3><span id=\"编译git-lfs\">编译git-lfs</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"手动下载安装包\">手动下载安装包</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf git-lfs-*.tar.gz</span><br><span class=\"line\">cd git-lfs-*</span><br><span class=\"line\">sudo .&#x2F;install.sh</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"存放到git-bin目录后执行\">存放到git bin目录后执行</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"使用git-lfs\">使用git-lfs</span></h3><p>添加跟踪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.so&quot;</span><br><span class=\"line\">git lfs track &quot;resource&#x2F;*&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>一定要先track然后再进行add commit操作</strong> 否则查看<a href=\"#lfs规则更新\">lfs规则更新</a>    </p>\n<p>其他命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前使用 Git LFS 管理的匹配列表</span><br><span class=\"line\">git lfs track</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 Git LFS 管理指定的文件</span><br><span class=\"line\">git lfs track &quot;*.psd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 不再使用 Git LFS 管理指定的文件</span><br><span class=\"line\">git lfs untrack &quot;*.psd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 类似 &#96;git status&#96;，查看当前 Git LFS 对象的状态</span><br><span class=\"line\">git lfs status</span><br><span class=\"line\"></span><br><span class=\"line\"># 枚举目前所有被 Git LFS 管理的具体文件</span><br><span class=\"line\">git lfs ls-files</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查当前所用 Git LFS 的版本</span><br><span class=\"line\">git lfs version</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对使用了 LFS 的仓库进行了特别优化的 clone 命令，显著提升获取</span><br><span class=\"line\"># LFS 对象的速度，接受和 &#96;git clone&#96; 一样的参数。 [1] [2]</span><br><span class=\"line\">git lfs clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"lfs规则更新\">lfs规则更新</span></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track \"*.xlsx\"</span><br><span class=\"line\">git lfs migrate import --include=\"*.xlsx\" --include-ref=refs/heads/master</span><br></pre></td></tr></table></figure>\n<p>通过以上规则进行添加和更新   migrate会清理所有历史提交的文件改为文件指针 略等于删库重建   </p>\n<p>在完成所有更新后 需要对.git仓库进行整理修剪和提交<br>-f意思是–force 一般的git仓库管理会锁定master分支并保护  需要先解开保护.   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git gc --prune&#x3D;now</span><br><span class=\"line\">git reflog expire --expire-unreachable&#x3D;now --all</span><br><span class=\"line\">git push --all -f </span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<p>强制更新本地(注意保存好本地修改)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"lfs规则更新2\">lfs规则更新2</span></h3><p>删除对应后缀的所有文件后 添加track跟踪<br>然后重新添加所有该后缀的文件.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"git和git-lfs编译使用\"><a href=\"#git和git-lfs编译使用\" class=\"headerlink\" title=\"git和git-lfs编译使用\"></a>git和git-lfs编译使用</h2><h3 id=\"编译git\"><a href=\"#编译git\" class=\"headerlink\" title=\"编译git\"></a>编译git</h3><p><a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https:&#x2F;&#x2F;mirrors.edge.kernel.org&#x2F;pub&#x2F;software&#x2F;scm&#x2F;git&#x2F;git-2.25.2.tar.gz</span><br><span class=\"line\">tar -xvf git-2.25.2.tar.gz</span><br><span class=\"line\">cd git-2.25.2</span><br><span class=\"line\">make configure NO_OPENSSL&#x3D;1</span><br><span class=\"line\">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;git  all</span><br><span class=\"line\">make </span><br><span class=\"line\">make install</span><br><span class=\"line\">echo &quot;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;git&#x2F;bin:$PATH&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br><span class=\"line\">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"编译git-lfs\"><a href=\"#编译git-lfs\" class=\"headerlink\" title=\"编译git-lfs\"></a>编译git-lfs</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build</span><br><span class=\"line\">go install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动下载安装包\"><a href=\"#手动下载安装包\" class=\"headerlink\" title=\"手动下载安装包\"></a>手动下载安装包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xf git-lfs-*.tar.gz</span><br><span class=\"line\">cd git-lfs-*</span><br><span class=\"line\">sudo .&#x2F;install.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存放到git-bin目录后执行\"><a href=\"#存放到git-bin目录后执行\" class=\"headerlink\" title=\"存放到git bin目录后执行\"></a>存放到git bin目录后执行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs install</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用git-lfs\"><a href=\"#使用git-lfs\" class=\"headerlink\" title=\"使用git-lfs\"></a>使用git-lfs</h3><p>添加跟踪</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track &quot;*.so&quot;</span><br><span class=\"line\">git lfs track &quot;resource&#x2F;*&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>一定要先track然后再进行add commit操作</strong> 否则查看<a href=\"#lfs规则更新\">lfs规则更新</a>    </p>\n<p>其他命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前使用 Git LFS 管理的匹配列表</span><br><span class=\"line\">git lfs track</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用 Git LFS 管理指定的文件</span><br><span class=\"line\">git lfs track &quot;*.psd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 不再使用 Git LFS 管理指定的文件</span><br><span class=\"line\">git lfs untrack &quot;*.psd&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 类似 &#96;git status&#96;，查看当前 Git LFS 对象的状态</span><br><span class=\"line\">git lfs status</span><br><span class=\"line\"></span><br><span class=\"line\"># 枚举目前所有被 Git LFS 管理的具体文件</span><br><span class=\"line\">git lfs ls-files</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查当前所用 Git LFS 的版本</span><br><span class=\"line\">git lfs version</span><br><span class=\"line\"></span><br><span class=\"line\"># 针对使用了 LFS 的仓库进行了特别优化的 clone 命令，显著提升获取</span><br><span class=\"line\"># LFS 对象的速度，接受和 &#96;git clone&#96; 一样的参数。 [1] [2]</span><br><span class=\"line\">git lfs clone https:&#x2F;&#x2F;github.com&#x2F;user&#x2F;repo.git</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"lfs规则更新\"><a href=\"#lfs规则更新\" class=\"headerlink\" title=\"lfs规则更新\"></a>lfs规则更新</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git lfs track \"*.xlsx\"</span><br><span class=\"line\">git lfs migrate import --include=\"*.xlsx\" --include-ref=refs/heads/master</span><br></pre></td></tr></table></figure>\n<p>通过以上规则进行添加和更新   migrate会清理所有历史提交的文件改为文件指针 略等于删库重建   </p>\n<p>在完成所有更新后 需要对.git仓库进行整理修剪和提交<br>-f意思是–force 一般的git仓库管理会锁定master分支并保护  需要先解开保护.   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git gc --prune&#x3D;now</span><br><span class=\"line\">git reflog expire --expire-unreachable&#x3D;now --all</span><br><span class=\"line\">git push --all -f </span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<p>强制更新本地(注意保存好本地修改)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all</span><br><span class=\"line\">git reset --hard origin&#x2F;master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lfs规则更新2\"><a href=\"#lfs规则更新2\" class=\"headerlink\" title=\"lfs规则更新2\"></a>lfs规则更新2</h3><p>删除对应后缀的所有文件后 添加track跟踪<br>然后重新添加所有该后缀的文件.</p>"},{"title":"树莓派使用","date":"2020-10-02T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## 树莓派官方地址和镜像下载  \n[官方地址https://openwrt.org/](https://openwrt.org/zh/)    \n[根据硬件下载](https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D19.07.4)   \n例如树莓派的分支可以再Brand分支中查找关键字**Raspberry Pi**   \n\n快速上手推荐直接安装镜像 即跳过系统安装部分直接启动就可以使用, 带来的问题是 一般我们使用的tf卡可能至少32G 但是烧录的镜像只能用到其中的几百M 需要利用工具进行额外的mount挂载.    \n\n这里有几个关键字 factory指的的是安装固件  sysupgrade是指的更新专用镜像文件   snapshots是快照镜像文件   \n\n<!--more-->\n\n例如树莓派3B对应的最新版本[view data](https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_b)如下:  \n\n```\nDevice Type:Single Board ComputerBrand:Raspberry Pi FoundationModel:Raspberry Pi 3Version:B\nSupported Current Rel:19.07.4Unsupported Functions:Country Code settingGluon support:unknownTarget:bcm27xxSubtarget:bcm2710Package architecture:aarch64_cortex-a53\nDevice Page:raspberry_piForum search:Raspberry Pi 3Git search:Raspberry Pi 3WikiDevi URL:https://wikidevi.wi-cat.ru/RPF_Raspberry_Pi_3_Model_BWikiDevi ID:RPF_Raspberry_Pi_3_Model_BOEM Device Homepage URL:https://www.raspberrypi.org/products/raspberry-pi-3-model-b/Firmware OEM Stock URL:https://www.raspberrypi.org/downloads/Firmware OpenWrt Install URL:http://downloads.openwrt.org/releases/19.07.4/targets/brcm2708/bcm2710/openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt Upgrade URL:http://downloads.openwrt.org/releases/19.07.4/targets/brcm2708/bcm2710/openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-sysupgrade.img.gzFirmware OpenWrt snapshot Install URL:http://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt snapshot Upgrade URL:http://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-ext4-sysupgrade.img.gzInstallation method(s):SD card, see devicepage\n```\n\n\n\n\n## 下载镜像文件并烧录到tf卡   \n[win32diskimager](https://win32diskimager.download/)   \n把下载的镜像通过这个工具烧录到tf卡中   \n这里唯一要注意的是如果有多个U盘设备 要正确选择好  \n\n## 启动树莓派   \n\n1. 插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   \n2. 插电  等待与20-30秒  \n3. 正常情况下电脑会被分配一个**192.168.1.X**的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  \n4. 默认的ssh地址是root@192.168.1.1 端口是22  没有密码   \n\n\n## 让树莓派连接外网  \n树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)   \n因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器   \n这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   \n\n修改**/etc/config/network** 添加Wwan    \n```\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改后如下:  \n```\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdd5:579e:a386::/48'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改**/etc/config/wireless**  \n默认为AP热点:\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'OpenWrt'\n        option encryption 'none'\n```\n修改为STA连接我们的wifi\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'Wwan'\n        option mode 'sta'\n        option ssid 'SUMMER'\n        option encryption 'psk2'\n        option key '1234512345'\n```\n执行**/etc/init.d/network restart**重启网络服务  \n\n通过路由器的管理页面此时应当发现连接上了路由器  \n如果这一步存在问题 可以先设置disable '0'在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到   \nssh登录后尝试ping一下看看是否能正常连网   \n\n## 让树莓派作为软路由 \n和上面不同 这个是用网线连接外网 ap热点保留 \n先用网线连接树莓派 修改wireless的disable为0 重启网络服务\n\n需要重启树莓派  \nnetwork  \n```\n\nconfig interface 'lan'\n        option ifname 'wlan0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option ifname 'eth0'\n        option proto 'dhcp'\n```\n\nwireless  \n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'SUMMER_RPI'\n        option encryption 'psk2'\n        option key 'aaaaaaaaaa'\n```\n\n\n\n## 更新opkg     \n```\nopkg update\n```\n此时可以通过opkg list查看所有支持的包 \n手动安装可以opkg install 命令   \n这里推荐先安装luci web管理服务   \n\n## 安装luci包和fdisk包    \n```\npokg install luci  \nopkg install luci-theme-bootstrap  \n```\n进入后台页面[http://192.168.1.1/](http://192.168.1.1/)   \n账号root  密码空  \n设置主题为bootstrap  \n\n```\nopkg install fdisk\n```\n安装完毕此时应该改还剩余80M空间   \n可以通过```df -h```命令查看  \n\n## 挂载剩余tf卡空间  \n通过命令```fdisk -l```查看当前TF卡的挂载情况  \n对空闲硬盘进行分区\n```\nfdisk /dev/mmcblk0\n```\n\n## 安装kcp  \n```\nopkg install kcptun-client\n```\n编辑/etc/config/kcptun 进行配置  \n删除多余参数,修改关键option, 注意启用  \n```\nconfig client\n        option disabled 0\n        option bind_address '0.0.0.0'\n        option local_port 12948\n        option server '4.2.4.73'\n        option server_port 18224 \n        option mode 'fast2'\n```\n\n## 安装ss\n使用luci后台或者opkg安装:  \n```\nopkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev\n```\nshadowsocks-libev-ss-local\nshadowsocks-libev-ss-rules\nshadowsocks-libev-ss-redir\nshadowsocks-libev-ss-tunnel\nshadowsocks-libev-config\niptables-mod-conntrack-extra\nluci-app-shadowsocks-libev\n\n1. 在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   \n2. 在local instances下启用ss local  端口1080  (点击disable按钮)\n\n此时启动了一个1080的ss端口连接服务器  (socks5端口)\n\n点击Save&Apply进行保存  \n\n然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   \n\n\n\n## 透明代理转发  \n启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   \n\n\n可能问题 \n检查IP转发\ncat /proc/sys/net/ipv4/ip_forward\n若为0\necho 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf\nsysctl -p\n\n\n可能问题 DNS污染  \n需要开启resole固定 \n以及转发 \nhttps://wangchujiang.com/linux-command/c/iptables.html\nhttps://gist.github.com/wen-long/8644243\n\n\n\n\n\n\n## wifi 5G时区问题   \n可能导致找不到wifi信号或者连上去后很快断开   \n\n修改/etc/config/system\n```\nconfig system\n        option timezone 'CST-8'\n        option zonename 'Asia/Shanghai'\n```\n修改/etc/config/wireless\n```\n        option country 'CN'\n```\n\n中国开放的5G频道为\n36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  \n\nopkg安装iw  iwinfo命令  \n\n通过```iwinfo wlan0 ***``` 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   \n\n例如通过```iwinfo wlan0 htmodelist```可以查看支持的htmode  \n例如通过```iwinfo wlan0 freqlist```可以查看支持的频段  \n\n通过iw list查看设备支持的工作模式 \niw wlan0 info\niw phy0 info\n\niw reg get 获取频段和信道宽度\n### 补充信息 \nhttps://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width   \n\nHT20 High Throughput 20MHz, 802.11n\nHT40 High Throughput 40MHz, 802.11n\nHT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.\nHT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.\nVHT20 Very High Throughput 20MHz, Supported by 802.11ac\nVHT40 Very High Throughput 40MHz, Supported by 802.11ac\nVHT80 Very High Throughput 80MHz, Supported by 802.11ac\nVHT160 Very High Throughput 160MHz, Supported by 802.11ac\nNOHT disables 11n\n\n可能得组合 \n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'104'\n\toption\thwmode\t\t'11a'\n\toption\thtmode\t\t'HT20'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'7'\n\toption\thwmode\t\t'11ng'\n\toption\thtmode\t\t'HT40+'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'36'\n\toption\thwmode\t\t'11na'\n\toption\thtmode\t\t'HT40+'\n```\n\n\n\n### 快照版本问题  \n如果安装的是快照版本 会有以下几个问题:  \n1. 没有luci   需要手动安装   \n2. 快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    \n\n快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)   \n\n\n","source":"_posts/2020-10-03-raspberrypi.md","raw":"---\ntitle: 树莓派使用\ndate: 2020-10-03\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## 树莓派官方地址和镜像下载  \n[官方地址https://openwrt.org/](https://openwrt.org/zh/)    \n[根据硬件下载](https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D19.07.4)   \n例如树莓派的分支可以再Brand分支中查找关键字**Raspberry Pi**   \n\n快速上手推荐直接安装镜像 即跳过系统安装部分直接启动就可以使用, 带来的问题是 一般我们使用的tf卡可能至少32G 但是烧录的镜像只能用到其中的几百M 需要利用工具进行额外的mount挂载.    \n\n这里有几个关键字 factory指的的是安装固件  sysupgrade是指的更新专用镜像文件   snapshots是快照镜像文件   \n\n<!--more-->\n\n例如树莓派3B对应的最新版本[view data](https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_b)如下:  \n\n```\nDevice Type:Single Board ComputerBrand:Raspberry Pi FoundationModel:Raspberry Pi 3Version:B\nSupported Current Rel:19.07.4Unsupported Functions:Country Code settingGluon support:unknownTarget:bcm27xxSubtarget:bcm2710Package architecture:aarch64_cortex-a53\nDevice Page:raspberry_piForum search:Raspberry Pi 3Git search:Raspberry Pi 3WikiDevi URL:https://wikidevi.wi-cat.ru/RPF_Raspberry_Pi_3_Model_BWikiDevi ID:RPF_Raspberry_Pi_3_Model_BOEM Device Homepage URL:https://www.raspberrypi.org/products/raspberry-pi-3-model-b/Firmware OEM Stock URL:https://www.raspberrypi.org/downloads/Firmware OpenWrt Install URL:http://downloads.openwrt.org/releases/19.07.4/targets/brcm2708/bcm2710/openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt Upgrade URL:http://downloads.openwrt.org/releases/19.07.4/targets/brcm2708/bcm2710/openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-sysupgrade.img.gzFirmware OpenWrt snapshot Install URL:http://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt snapshot Upgrade URL:http://downloads.openwrt.org/snapshots/targets/bcm27xx/bcm2710/openwrt-bcm27xx-bcm2710-rpi-3-ext4-sysupgrade.img.gzInstallation method(s):SD card, see devicepage\n```\n\n\n\n\n## 下载镜像文件并烧录到tf卡   \n[win32diskimager](https://win32diskimager.download/)   \n把下载的镜像通过这个工具烧录到tf卡中   \n这里唯一要注意的是如果有多个U盘设备 要正确选择好  \n\n## 启动树莓派   \n\n1. 插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   \n2. 插电  等待与20-30秒  \n3. 正常情况下电脑会被分配一个**192.168.1.X**的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  \n4. 默认的ssh地址是root@192.168.1.1 端口是22  没有密码   \n\n\n## 让树莓派连接外网  \n树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)   \n因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器   \n这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   \n\n修改**/etc/config/network** 添加Wwan    \n```\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改后如下:  \n```\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdd5:579e:a386::/48'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改**/etc/config/wireless**  \n默认为AP热点:\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'OpenWrt'\n        option encryption 'none'\n```\n修改为STA连接我们的wifi\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'Wwan'\n        option mode 'sta'\n        option ssid 'SUMMER'\n        option encryption 'psk2'\n        option key '1234512345'\n```\n执行**/etc/init.d/network restart**重启网络服务  \n\n通过路由器的管理页面此时应当发现连接上了路由器  \n如果这一步存在问题 可以先设置disable '0'在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到   \nssh登录后尝试ping一下看看是否能正常连网   \n\n## 让树莓派作为软路由 \n和上面不同 这个是用网线连接外网 ap热点保留 \n先用网线连接树莓派 修改wireless的disable为0 重启网络服务\n\n需要重启树莓派  \nnetwork  \n```\n\nconfig interface 'lan'\n        option ifname 'wlan0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option ifname 'eth0'\n        option proto 'dhcp'\n```\n\nwireless  \n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'SUMMER_RPI'\n        option encryption 'psk2'\n        option key 'aaaaaaaaaa'\n```\n\n\n\n## 更新opkg     \n```\nopkg update\n```\n此时可以通过opkg list查看所有支持的包 \n手动安装可以opkg install 命令   \n这里推荐先安装luci web管理服务   \n\n## 安装luci包和fdisk包    \n```\npokg install luci  \nopkg install luci-theme-bootstrap  \n```\n进入后台页面[http://192.168.1.1/](http://192.168.1.1/)   \n账号root  密码空  \n设置主题为bootstrap  \n\n```\nopkg install fdisk\n```\n安装完毕此时应该改还剩余80M空间   \n可以通过```df -h```命令查看  \n\n## 挂载剩余tf卡空间  \n通过命令```fdisk -l```查看当前TF卡的挂载情况  \n对空闲硬盘进行分区\n```\nfdisk /dev/mmcblk0\n```\n\n## 安装kcp  \n```\nopkg install kcptun-client\n```\n编辑/etc/config/kcptun 进行配置  \n删除多余参数,修改关键option, 注意启用  \n```\nconfig client\n        option disabled 0\n        option bind_address '0.0.0.0'\n        option local_port 12948\n        option server '4.2.4.73'\n        option server_port 18224 \n        option mode 'fast2'\n```\n\n## 安装ss\n使用luci后台或者opkg安装:  \n```\nopkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev\n```\nshadowsocks-libev-ss-local\nshadowsocks-libev-ss-rules\nshadowsocks-libev-ss-redir\nshadowsocks-libev-ss-tunnel\nshadowsocks-libev-config\niptables-mod-conntrack-extra\nluci-app-shadowsocks-libev\n\n1. 在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   \n2. 在local instances下启用ss local  端口1080  (点击disable按钮)\n\n此时启动了一个1080的ss端口连接服务器  (socks5端口)\n\n点击Save&Apply进行保存  \n\n然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   \n\n\n\n## 透明代理转发  \n启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   \n\n\n可能问题 \n检查IP转发\ncat /proc/sys/net/ipv4/ip_forward\n若为0\necho 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf\nsysctl -p\n\n\n可能问题 DNS污染  \n需要开启resole固定 \n以及转发 \nhttps://wangchujiang.com/linux-command/c/iptables.html\nhttps://gist.github.com/wen-long/8644243\n\n\n\n\n\n\n## wifi 5G时区问题   \n可能导致找不到wifi信号或者连上去后很快断开   \n\n修改/etc/config/system\n```\nconfig system\n        option timezone 'CST-8'\n        option zonename 'Asia/Shanghai'\n```\n修改/etc/config/wireless\n```\n        option country 'CN'\n```\n\n中国开放的5G频道为\n36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  \n\nopkg安装iw  iwinfo命令  \n\n通过```iwinfo wlan0 ***``` 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   \n\n例如通过```iwinfo wlan0 htmodelist```可以查看支持的htmode  \n例如通过```iwinfo wlan0 freqlist```可以查看支持的频段  \n\n通过iw list查看设备支持的工作模式 \niw wlan0 info\niw phy0 info\n\niw reg get 获取频段和信道宽度\n### 补充信息 \nhttps://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width   \n\nHT20 High Throughput 20MHz, 802.11n\nHT40 High Throughput 40MHz, 802.11n\nHT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.\nHT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.\nVHT20 Very High Throughput 20MHz, Supported by 802.11ac\nVHT40 Very High Throughput 40MHz, Supported by 802.11ac\nVHT80 Very High Throughput 80MHz, Supported by 802.11ac\nVHT160 Very High Throughput 160MHz, Supported by 802.11ac\nNOHT disables 11n\n\n可能得组合 \n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'104'\n\toption\thwmode\t\t'11a'\n\toption\thtmode\t\t'HT20'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'7'\n\toption\thwmode\t\t'11ng'\n\toption\thtmode\t\t'HT40+'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'36'\n\toption\thwmode\t\t'11na'\n\toption\thtmode\t\t'HT40+'\n```\n\n\n\n### 快照版本问题  \n如果安装的是快照版本 会有以下几个问题:  \n1. 没有luci   需要手动安装   \n2. 快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    \n\n快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)   \n\n\n","slug":"2020-10-03-raspberrypi","published":1,"updated":"2020-10-09T13:55:24.295Z","_id":"ckg2b97q20000lc5h6nc16tmn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"树莓派官方地址和镜像下载\">树莓派官方地址和镜像下载</span></h2><p><a href=\"https://openwrt.org/zh/\" target=\"_blank\" rel=\"noopener\">官方地址https://openwrt.org/</a><br><a href=\"https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D19.07.4\" target=\"_blank\" rel=\"noopener\">根据硬件下载</a><br>例如树莓派的分支可以再Brand分支中查找关键字<strong>Raspberry Pi</strong>   </p>\n<p>快速上手推荐直接安装镜像 即跳过系统安装部分直接启动就可以使用, 带来的问题是 一般我们使用的tf卡可能至少32G 但是烧录的镜像只能用到其中的几百M 需要利用工具进行额外的mount挂载.    </p>\n<p>这里有几个关键字 factory指的的是安装固件  sysupgrade是指的更新专用镜像文件   snapshots是快照镜像文件   </p>\n<a id=\"more\"></a>\n\n<p>例如树莓派3B对应的最新版本<a href=\"https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_b\" target=\"_blank\" rel=\"noopener\">view data</a>如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device Type:Single Board ComputerBrand:Raspberry Pi FoundationModel:Raspberry Pi 3Version:B</span><br><span class=\"line\">Supported Current Rel:19.07.4Unsupported Functions:Country Code settingGluon support:unknownTarget:bcm27xxSubtarget:bcm2710Package architecture:aarch64_cortex-a53</span><br><span class=\"line\">Device Page:raspberry_piForum search:Raspberry Pi 3Git search:Raspberry Pi 3WikiDevi URL:https:&#x2F;&#x2F;wikidevi.wi-cat.ru&#x2F;RPF_Raspberry_Pi_3_Model_BWikiDevi ID:RPF_Raspberry_Pi_3_Model_BOEM Device Homepage URL:https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;products&#x2F;raspberry-pi-3-model-b&#x2F;Firmware OEM Stock URL:https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;downloads&#x2F;Firmware OpenWrt Install URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;releases&#x2F;19.07.4&#x2F;targets&#x2F;brcm2708&#x2F;bcm2710&#x2F;openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt Upgrade URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;releases&#x2F;19.07.4&#x2F;targets&#x2F;brcm2708&#x2F;bcm2710&#x2F;openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-sysupgrade.img.gzFirmware OpenWrt snapshot Install URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;snapshots&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2710&#x2F;openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt snapshot Upgrade URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;snapshots&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2710&#x2F;openwrt-bcm27xx-bcm2710-rpi-3-ext4-sysupgrade.img.gzInstallation method(s):SD card, see devicepage</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2><span id=\"下载镜像文件并烧录到tf卡\">下载镜像文件并烧录到tf卡</span></h2><p><a href=\"https://win32diskimager.download/\" target=\"_blank\" rel=\"noopener\">win32diskimager</a><br>把下载的镜像通过这个工具烧录到tf卡中<br>这里唯一要注意的是如果有多个U盘设备 要正确选择好  </p>\n<h2><span id=\"启动树莓派\">启动树莓派</span></h2><ol>\n<li>插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   </li>\n<li>插电  等待与20-30秒  </li>\n<li>正常情况下电脑会被分配一个<strong>192.168.1.X</strong>的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  </li>\n<li>默认的ssh地址是<a href=\"mailto:root@192.168.1.1\">root@192.168.1.1</a> 端口是22  没有密码   </li>\n</ol>\n<h2><span id=\"让树莓派连接外网\">让树莓派连接外网</span></h2><p>树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)<br>因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器<br>这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   </p>\n<p>修改<strong>/etc/config/network</strong> 添加Wwan    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改后如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;loopback&#39;</span><br><span class=\"line\">        option ifname &#39;lo&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;127.0.0.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.0.0.0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#39;globals&#39;</span><br><span class=\"line\">        option ula_prefix &#39;fdd5:579e:a386::&#x2F;48&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option type &#39;bridge&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>/etc/config/wireless</strong><br>默认为AP热点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;OpenWrt&#39;</span><br><span class=\"line\">        option encryption &#39;none&#39;</span><br></pre></td></tr></table></figure>\n<p>修改为STA连接我们的wifi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;Wwan&#39;</span><br><span class=\"line\">        option mode &#39;sta&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;1234512345&#39;</span><br></pre></td></tr></table></figure>\n<p>执行<strong>/etc/init.d/network restart</strong>重启网络服务  </p>\n<p>通过路由器的管理页面此时应当发现连接上了路由器<br>如果这一步存在问题 可以先设置disable ‘0’在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到<br>ssh登录后尝试ping一下看看是否能正常连网   </p>\n<h2><span id=\"让树莓派作为软路由\">让树莓派作为软路由</span></h2><p>和上面不同 这个是用网线连接外网 ap热点保留<br>先用网线连接树莓派 修改wireless的disable为0 重启网络服务</p>\n<p>需要重启树莓派<br>network  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option ifname &#39;wlan0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;wan&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>wireless  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER_RPI&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;aaaaaaaaaa&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更新opkg\">更新opkg</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n<p>此时可以通过opkg list查看所有支持的包<br>手动安装可以opkg install 命令<br>这里推荐先安装luci web管理服务   </p>\n<h2><span id=\"安装luci包和fdisk包\">安装luci包和fdisk包</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pokg install luci  </span><br><span class=\"line\">opkg install luci-theme-bootstrap</span><br></pre></td></tr></table></figure>\n<p>进入后台页面<a href=\"http://192.168.1.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.1/</a><br>账号root  密码空<br>设置主题为bootstrap  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install fdisk</span><br></pre></td></tr></table></figure>\n<p>安装完毕此时应该改还剩余80M空间<br>可以通过<code>df -h</code>命令查看  </p>\n<h2><span id=\"挂载剩余tf卡空间\">挂载剩余tf卡空间</span></h2><p>通过命令<code>fdisk -l</code>查看当前TF卡的挂载情况<br>对空闲硬盘进行分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk &#x2F;dev&#x2F;mmcblk0</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"安装kcp\">安装kcp</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install kcptun-client</span><br></pre></td></tr></table></figure>\n<p>编辑/etc/config/kcptun 进行配置<br>删除多余参数,修改关键option, 注意启用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config client</span><br><span class=\"line\">        option disabled 0</span><br><span class=\"line\">        option bind_address &#39;0.0.0.0&#39;</span><br><span class=\"line\">        option local_port 12948</span><br><span class=\"line\">        option server &#39;4.2.4.73&#39;</span><br><span class=\"line\">        option server_port 18224 </span><br><span class=\"line\">        option mode &#39;fast2&#39;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"安装ss\">安装ss</span></h2><p>使用luci后台或者opkg安装:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev-ss-local<br>shadowsocks-libev-ss-rules<br>shadowsocks-libev-ss-redir<br>shadowsocks-libev-ss-tunnel<br>shadowsocks-libev-config<br>iptables-mod-conntrack-extra<br>luci-app-shadowsocks-libev</p>\n<ol>\n<li>在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   </li>\n<li>在local instances下启用ss local  端口1080  (点击disable按钮)</li>\n</ol>\n<p>此时启动了一个1080的ss端口连接服务器  (socks5端口)</p>\n<p>点击Save&amp;Apply进行保存  </p>\n<p>然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   </p>\n<h2><span id=\"透明代理转发\">透明代理转发</span></h2><p>启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   </p>\n<p>可能问题<br>检查IP转发<br>cat /proc/sys/net/ipv4/ip_forward<br>若为0<br>echo ‘net.ipv4.ip_forward = 1’ &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<p>可能问题 DNS污染<br>需要开启resole固定<br>以及转发<br><a href=\"https://wangchujiang.com/linux-command/c/iptables.html\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command/c/iptables.html</a><br><a href=\"https://gist.github.com/wen-long/8644243\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/wen-long/8644243</a></p>\n<h2><span id=\"wifi-5g时区问题\">wifi 5G时区问题</span></h2><p>可能导致找不到wifi信号或者连上去后很快断开   </p>\n<p>修改/etc/config/system</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config system</span><br><span class=\"line\">        option timezone &#39;CST-8&#39;</span><br><span class=\"line\">        option zonename &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>\n<p>修改/etc/config/wireless</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option country &#39;CN&#39;</span><br></pre></td></tr></table></figure>\n\n<p>中国开放的5G频道为<br>36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  </p>\n<p>opkg安装iw  iwinfo命令  </p>\n<p>通过<code>iwinfo wlan0 ***</code> 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   </p>\n<p>例如通过<code>iwinfo wlan0 htmodelist</code>可以查看支持的htmode<br>例如通过<code>iwinfo wlan0 freqlist</code>可以查看支持的频段  </p>\n<p>通过iw list查看设备支持的工作模式<br>iw wlan0 info<br>iw phy0 info</p>\n<p>iw reg get 获取频段和信道宽度</p>\n<h3><span id=\"补充信息\">补充信息</span></h3><p><a href=\"https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width</a>   </p>\n<p>HT20 High Throughput 20MHz, 802.11n<br>HT40 High Throughput 40MHz, 802.11n<br>HT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.<br>HT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.<br>VHT20 Very High Throughput 20MHz, Supported by 802.11ac<br>VHT40 Very High Throughput 40MHz, Supported by 802.11ac<br>VHT80 Very High Throughput 80MHz, Supported by 802.11ac<br>VHT160 Very High Throughput 160MHz, Supported by 802.11ac<br>NOHT disables 11n</p>\n<p>可能得组合 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;104&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11a&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT20&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;7&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11ng&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;36&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11na&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3><span id=\"快照版本问题\">快照版本问题</span></h3><p>如果安装的是快照版本 会有以下几个问题:  </p>\n<ol>\n<li>没有luci   需要手动安装   </li>\n<li>快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    </li>\n</ol>\n<p>快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"树莓派官方地址和镜像下载\"><a href=\"#树莓派官方地址和镜像下载\" class=\"headerlink\" title=\"树莓派官方地址和镜像下载\"></a>树莓派官方地址和镜像下载</h2><p><a href=\"https://openwrt.org/zh/\" target=\"_blank\" rel=\"noopener\">官方地址https://openwrt.org/</a><br><a href=\"https://openwrt.org/toh/views/toh_fwdownload?dataflt%5B0%5D=supported%20current%20rel_%3D19.07.4\" target=\"_blank\" rel=\"noopener\">根据硬件下载</a><br>例如树莓派的分支可以再Brand分支中查找关键字<strong>Raspberry Pi</strong>   </p>\n<p>快速上手推荐直接安装镜像 即跳过系统安装部分直接启动就可以使用, 带来的问题是 一般我们使用的tf卡可能至少32G 但是烧录的镜像只能用到其中的几百M 需要利用工具进行额外的mount挂载.    </p>\n<p>这里有几个关键字 factory指的的是安装固件  sysupgrade是指的更新专用镜像文件   snapshots是快照镜像文件   </p>","more":"<p>例如树莓派3B对应的最新版本<a href=\"https://openwrt.org/toh/hwdata/raspberry_pi_foundation/raspberry_pi_3_b\" target=\"_blank\" rel=\"noopener\">view data</a>如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Device Type:Single Board ComputerBrand:Raspberry Pi FoundationModel:Raspberry Pi 3Version:B</span><br><span class=\"line\">Supported Current Rel:19.07.4Unsupported Functions:Country Code settingGluon support:unknownTarget:bcm27xxSubtarget:bcm2710Package architecture:aarch64_cortex-a53</span><br><span class=\"line\">Device Page:raspberry_piForum search:Raspberry Pi 3Git search:Raspberry Pi 3WikiDevi URL:https:&#x2F;&#x2F;wikidevi.wi-cat.ru&#x2F;RPF_Raspberry_Pi_3_Model_BWikiDevi ID:RPF_Raspberry_Pi_3_Model_BOEM Device Homepage URL:https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;products&#x2F;raspberry-pi-3-model-b&#x2F;Firmware OEM Stock URL:https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;downloads&#x2F;Firmware OpenWrt Install URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;releases&#x2F;19.07.4&#x2F;targets&#x2F;brcm2708&#x2F;bcm2710&#x2F;openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt Upgrade URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;releases&#x2F;19.07.4&#x2F;targets&#x2F;brcm2708&#x2F;bcm2710&#x2F;openwrt-19.07.4-brcm2708-bcm2710-rpi-3-ext4-sysupgrade.img.gzFirmware OpenWrt snapshot Install URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;snapshots&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2710&#x2F;openwrt-bcm27xx-bcm2710-rpi-3-ext4-factory.img.gzFirmware OpenWrt snapshot Upgrade URL:http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;snapshots&#x2F;targets&#x2F;bcm27xx&#x2F;bcm2710&#x2F;openwrt-bcm27xx-bcm2710-rpi-3-ext4-sysupgrade.img.gzInstallation method(s):SD card, see devicepage</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"下载镜像文件并烧录到tf卡\"><a href=\"#下载镜像文件并烧录到tf卡\" class=\"headerlink\" title=\"下载镜像文件并烧录到tf卡\"></a>下载镜像文件并烧录到tf卡</h2><p><a href=\"https://win32diskimager.download/\" target=\"_blank\" rel=\"noopener\">win32diskimager</a><br>把下载的镜像通过这个工具烧录到tf卡中<br>这里唯一要注意的是如果有多个U盘设备 要正确选择好  </p>\n<h2 id=\"启动树莓派\"><a href=\"#启动树莓派\" class=\"headerlink\" title=\"启动树莓派\"></a>启动树莓派</h2><ol>\n<li>插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   </li>\n<li>插电  等待与20-30秒  </li>\n<li>正常情况下电脑会被分配一个<strong>192.168.1.X</strong>的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  </li>\n<li>默认的ssh地址是<a href=\"mailto:root@192.168.1.1\">root@192.168.1.1</a> 端口是22  没有密码   </li>\n</ol>\n<h2 id=\"让树莓派连接外网\"><a href=\"#让树莓派连接外网\" class=\"headerlink\" title=\"让树莓派连接外网\"></a>让树莓派连接外网</h2><p>树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)<br>因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器<br>这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   </p>\n<p>修改<strong>/etc/config/network</strong> 添加Wwan    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改后如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;loopback&#39;</span><br><span class=\"line\">        option ifname &#39;lo&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;127.0.0.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.0.0.0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#39;globals&#39;</span><br><span class=\"line\">        option ula_prefix &#39;fdd5:579e:a386::&#x2F;48&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option type &#39;bridge&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>/etc/config/wireless</strong><br>默认为AP热点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;OpenWrt&#39;</span><br><span class=\"line\">        option encryption &#39;none&#39;</span><br></pre></td></tr></table></figure>\n<p>修改为STA连接我们的wifi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;Wwan&#39;</span><br><span class=\"line\">        option mode &#39;sta&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;1234512345&#39;</span><br></pre></td></tr></table></figure>\n<p>执行<strong>/etc/init.d/network restart</strong>重启网络服务  </p>\n<p>通过路由器的管理页面此时应当发现连接上了路由器<br>如果这一步存在问题 可以先设置disable ‘0’在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到<br>ssh登录后尝试ping一下看看是否能正常连网   </p>\n<h2 id=\"让树莓派作为软路由\"><a href=\"#让树莓派作为软路由\" class=\"headerlink\" title=\"让树莓派作为软路由\"></a>让树莓派作为软路由</h2><p>和上面不同 这个是用网线连接外网 ap热点保留<br>先用网线连接树莓派 修改wireless的disable为0 重启网络服务</p>\n<p>需要重启树莓派<br>network  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option ifname &#39;wlan0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;wan&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>wireless  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER_RPI&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;aaaaaaaaaa&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新opkg\"><a href=\"#更新opkg\" class=\"headerlink\" title=\"更新opkg\"></a>更新opkg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n<p>此时可以通过opkg list查看所有支持的包<br>手动安装可以opkg install 命令<br>这里推荐先安装luci web管理服务   </p>\n<h2 id=\"安装luci包和fdisk包\"><a href=\"#安装luci包和fdisk包\" class=\"headerlink\" title=\"安装luci包和fdisk包\"></a>安装luci包和fdisk包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pokg install luci  </span><br><span class=\"line\">opkg install luci-theme-bootstrap</span><br></pre></td></tr></table></figure>\n<p>进入后台页面<a href=\"http://192.168.1.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.1/</a><br>账号root  密码空<br>设置主题为bootstrap  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install fdisk</span><br></pre></td></tr></table></figure>\n<p>安装完毕此时应该改还剩余80M空间<br>可以通过<code>df -h</code>命令查看  </p>\n<h2 id=\"挂载剩余tf卡空间\"><a href=\"#挂载剩余tf卡空间\" class=\"headerlink\" title=\"挂载剩余tf卡空间\"></a>挂载剩余tf卡空间</h2><p>通过命令<code>fdisk -l</code>查看当前TF卡的挂载情况<br>对空闲硬盘进行分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk &#x2F;dev&#x2F;mmcblk0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装kcp\"><a href=\"#安装kcp\" class=\"headerlink\" title=\"安装kcp\"></a>安装kcp</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install kcptun-client</span><br></pre></td></tr></table></figure>\n<p>编辑/etc/config/kcptun 进行配置<br>删除多余参数,修改关键option, 注意启用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config client</span><br><span class=\"line\">        option disabled 0</span><br><span class=\"line\">        option bind_address &#39;0.0.0.0&#39;</span><br><span class=\"line\">        option local_port 12948</span><br><span class=\"line\">        option server &#39;4.2.4.73&#39;</span><br><span class=\"line\">        option server_port 18224 </span><br><span class=\"line\">        option mode &#39;fast2&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h2><p>使用luci后台或者opkg安装:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev-ss-local<br>shadowsocks-libev-ss-rules<br>shadowsocks-libev-ss-redir<br>shadowsocks-libev-ss-tunnel<br>shadowsocks-libev-config<br>iptables-mod-conntrack-extra<br>luci-app-shadowsocks-libev</p>\n<ol>\n<li>在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   </li>\n<li>在local instances下启用ss local  端口1080  (点击disable按钮)</li>\n</ol>\n<p>此时启动了一个1080的ss端口连接服务器  (socks5端口)</p>\n<p>点击Save&amp;Apply进行保存  </p>\n<p>然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   </p>\n<h2 id=\"透明代理转发\"><a href=\"#透明代理转发\" class=\"headerlink\" title=\"透明代理转发\"></a>透明代理转发</h2><p>启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   </p>\n<p>可能问题<br>检查IP转发<br>cat /proc/sys/net/ipv4/ip_forward<br>若为0<br>echo ‘net.ipv4.ip_forward = 1’ &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<p>可能问题 DNS污染<br>需要开启resole固定<br>以及转发<br><a href=\"https://wangchujiang.com/linux-command/c/iptables.html\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command/c/iptables.html</a><br><a href=\"https://gist.github.com/wen-long/8644243\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/wen-long/8644243</a></p>\n<h2 id=\"wifi-5G时区问题\"><a href=\"#wifi-5G时区问题\" class=\"headerlink\" title=\"wifi 5G时区问题\"></a>wifi 5G时区问题</h2><p>可能导致找不到wifi信号或者连上去后很快断开   </p>\n<p>修改/etc/config/system</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config system</span><br><span class=\"line\">        option timezone &#39;CST-8&#39;</span><br><span class=\"line\">        option zonename &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>\n<p>修改/etc/config/wireless</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option country &#39;CN&#39;</span><br></pre></td></tr></table></figure>\n\n<p>中国开放的5G频道为<br>36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  </p>\n<p>opkg安装iw  iwinfo命令  </p>\n<p>通过<code>iwinfo wlan0 ***</code> 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   </p>\n<p>例如通过<code>iwinfo wlan0 htmodelist</code>可以查看支持的htmode<br>例如通过<code>iwinfo wlan0 freqlist</code>可以查看支持的频段  </p>\n<p>通过iw list查看设备支持的工作模式<br>iw wlan0 info<br>iw phy0 info</p>\n<p>iw reg get 获取频段和信道宽度</p>\n<h3 id=\"补充信息\"><a href=\"#补充信息\" class=\"headerlink\" title=\"补充信息\"></a>补充信息</h3><p><a href=\"https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width</a>   </p>\n<p>HT20 High Throughput 20MHz, 802.11n<br>HT40 High Throughput 40MHz, 802.11n<br>HT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.<br>HT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.<br>VHT20 Very High Throughput 20MHz, Supported by 802.11ac<br>VHT40 Very High Throughput 40MHz, Supported by 802.11ac<br>VHT80 Very High Throughput 80MHz, Supported by 802.11ac<br>VHT160 Very High Throughput 160MHz, Supported by 802.11ac<br>NOHT disables 11n</p>\n<p>可能得组合 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;104&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11a&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT20&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;7&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11ng&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;36&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11na&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快照版本问题\"><a href=\"#快照版本问题\" class=\"headerlink\" title=\"快照版本问题\"></a>快照版本问题</h3><p>如果安装的是快照版本 会有以下几个问题:  </p>\n<ol>\n<li>没有luci   需要手动安装   </li>\n<li>快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    </li>\n</ol>\n<p>快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)</p>"},{"title":"两倍明亮的光芒只能燃烧一半的生命长度","date":"2020-12-16T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n\nI've seen things you people wouldn't believe.   \n\n我所见过的事物，你们人类绝对无法置信。   \n  \nAttack ships on fire off the shoulder of Orion.   \n\n我目睹战船在猎户星座的端沿起火燃烧   \n\nI've watched c-beams glitter in the dark near the Tannhauser Gate.   \n\n我见过C射线 在唐怀瑟之门附近的黑暗中闪烁   \n\nAll those ... moments will be lost in time, like tears...in rain.   \n\n所有这些时刻 终将流逝在时光中   \n\n一如眼泪   \n\n消失在雨中   \n\nTime to die.........   \n\n<!-- more -->   \n \nA light that borns twice as bright burn half as long, rage rage against the dying of the light.   \ndon't go gentle in the good night.        \n\n也许是科幻史上最美遗言 .  此时此刻是如此的感同身受      \n寒风 微雨  加完班后的霓虹灯 .    迷幻的车流灯光    \n\n静息95 走路130 自己的生命就这样在开启了多倍速的情况下燃烧  但却只有微弱到没有感知的烛火 在黑夜的冷风中摇曳    \n\n所谓的温和与平静是给行将就木的老人的最终关怀  \n\n但是我本是一个战士 战士应当在狂暴中消耗自己的生命 在咆哮和怒吼的战斗中绽放自己的光芒  这才是对一个战士的最终关怀    \n\n人間五十年、下天の内を較ぶれば、夢幻の如く也。一度生を稟け、滅せぬ物の有る可き乎？   ","source":"_posts/2020-12-17-twice-as-bright-half-as-long.md","raw":"---\ntitle: 两倍明亮的光芒只能燃烧一半的生命长度\ndate: 2020-12-17\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n\nI've seen things you people wouldn't believe.   \n\n我所见过的事物，你们人类绝对无法置信。   \n  \nAttack ships on fire off the shoulder of Orion.   \n\n我目睹战船在猎户星座的端沿起火燃烧   \n\nI've watched c-beams glitter in the dark near the Tannhauser Gate.   \n\n我见过C射线 在唐怀瑟之门附近的黑暗中闪烁   \n\nAll those ... moments will be lost in time, like tears...in rain.   \n\n所有这些时刻 终将流逝在时光中   \n\n一如眼泪   \n\n消失在雨中   \n\nTime to die.........   \n\n<!-- more -->   \n \nA light that borns twice as bright burn half as long, rage rage against the dying of the light.   \ndon't go gentle in the good night.        \n\n也许是科幻史上最美遗言 .  此时此刻是如此的感同身受      \n寒风 微雨  加完班后的霓虹灯 .    迷幻的车流灯光    \n\n静息95 走路130 自己的生命就这样在开启了多倍速的情况下燃烧  但却只有微弱到没有感知的烛火 在黑夜的冷风中摇曳    \n\n所谓的温和与平静是给行将就木的老人的最终关怀  \n\n但是我本是一个战士 战士应当在狂暴中消耗自己的生命 在咆哮和怒吼的战斗中绽放自己的光芒  这才是对一个战士的最终关怀    \n\n人間五十年、下天の内を較ぶれば、夢幻の如く也。一度生を稟け、滅せぬ物の有る可き乎？   ","slug":"2020-12-17-twice-as-bright-half-as-long","published":1,"updated":"2020-12-21T09:10:19.084Z","_id":"ckiyc8rfk0000505h1z9966vz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>I’ve seen things you people wouldn’t believe.   </p>\n<p>我所见过的事物，你们人类绝对无法置信。   </p>\n<p>Attack ships on fire off the shoulder of Orion.   </p>\n<p>我目睹战船在猎户星座的端沿起火燃烧   </p>\n<p>I’ve watched c-beams glitter in the dark near the Tannhauser Gate.   </p>\n<p>我见过C射线 在唐怀瑟之门附近的黑暗中闪烁   </p>\n<p>All those … moments will be lost in time, like tears…in rain.   </p>\n<p>所有这些时刻 终将流逝在时光中   </p>\n<p>一如眼泪   </p>\n<p>消失在雨中   </p>\n<p>Time to die………   </p>\n<a id=\"more\"></a>   \n\n<p>A light that borns twice as bright burn half as long, rage rage against the dying of the light.<br>don’t go gentle in the good night.        </p>\n<p>也许是科幻史上最美遗言 .  此时此刻是如此的感同身受<br>寒风 微雨  加完班后的霓虹灯 .    迷幻的车流灯光    </p>\n<p>静息95 走路130 自己的生命就这样在开启了多倍速的情况下燃烧  但却只有微弱到没有感知的烛火 在黑夜的冷风中摇曳    </p>\n<p>所谓的温和与平静是给行将就木的老人的最终关怀  </p>\n<p>但是我本是一个战士 战士应当在狂暴中消耗自己的生命 在咆哮和怒吼的战斗中绽放自己的光芒  这才是对一个战士的最终关怀    </p>\n<p>人間五十年、下天の内を較ぶれば、夢幻の如く也。一度生を稟け、滅せぬ物の有る可き乎？</p>\n","site":{"data":{}},"excerpt":"<p>I’ve seen things you people wouldn’t believe.   </p>\n<p>我所见过的事物，你们人类绝对无法置信。   </p>\n<p>Attack ships on fire off the shoulder of Orion.   </p>\n<p>我目睹战船在猎户星座的端沿起火燃烧   </p>\n<p>I’ve watched c-beams glitter in the dark near the Tannhauser Gate.   </p>\n<p>我见过C射线 在唐怀瑟之门附近的黑暗中闪烁   </p>\n<p>All those … moments will be lost in time, like tears…in rain.   </p>\n<p>所有这些时刻 终将流逝在时光中   </p>\n<p>一如眼泪   </p>\n<p>消失在雨中   </p>\n<p>Time to die………   </p>","more":"<p>A light that borns twice as bright burn half as long, rage rage against the dying of the light.<br>don’t go gentle in the good night.        </p>\n<p>也许是科幻史上最美遗言 .  此时此刻是如此的感同身受<br>寒风 微雨  加完班后的霓虹灯 .    迷幻的车流灯光    </p>\n<p>静息95 走路130 自己的生命就这样在开启了多倍速的情况下燃烧  但却只有微弱到没有感知的烛火 在黑夜的冷风中摇曳    </p>\n<p>所谓的温和与平静是给行将就木的老人的最终关怀  </p>\n<p>但是我本是一个战士 战士应当在狂暴中消耗自己的生命 在咆哮和怒吼的战斗中绽放自己的光芒  这才是对一个战士的最终关怀    </p>\n<p>人間五十年、下天の内を較ぶれば、夢幻の如く也。一度生を稟け、滅せぬ物の有る可き乎？</p>"},{"title":"GLM常见使用接口","date":"2020-10-21T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## GLM常用函数解释说明  \nGLM默认使用右手坐标系，如果要改成默认左手坐标系，使用：\n```\nGLM_FORCE_LEFT_HANDED\n```\n\n\n\n<glm/trigonometric.hpp>\nGLM_FUNC_DECL GLM_CONSTEXPR vec< L, T, Q > radians (vec< L, T, Q > const &degrees)\n将角度转化为弧度。\n\n<glm/gtx/transform.hpp>\nGLM_FUNC_DECL mat< 4, 4, T, Q > rotate (T angle, vec< 3, T, Q > const &v)\n使用一个用弧度(radians)表示的角度(degrees)，以及一个用3个标量(scalar)表示的坐标(axis)，来构建一个4X4的旋转矩阵(rotate matrix)。\n\n<glm/gtc/matrix_transform.hpp>\nGLM_FUNC_DECL mat<4, 4, T, Q> lookAt (vec<3, T, Q> const &eye, vec<3, T, Q> const &center, vec<3, T, Q> const &up)\n基于默认的偏手坐标系来构建一个给定视图矩阵(view matrix)的视角(look)\n\nGLM_FUNC_DECL mat<4, 4, T, defaultp> perspective (T fovy, T aspect, T near, T far)\n为一个对称透视图截锥(symmetric perspective-view frustum)创建矩阵，基于默认的偏手坐标系和默认的近剪裁面距离、远剪裁面距离\n\n参数说明：\n\nfovy 相机视角宽度\naspect 长宽比率\nnear 近面裁剪距离\nfar 远面裁剪距离\n如果要修改默认的近/远剪裁面，使用：\n\n GLM_FORCE_DEPTH_ZERO_TO_ONE\n\n## 下载镜像文件并烧录到tf卡   \n[win32diskimager](https://win32diskimager.download/)   \n把下载的镜像通过这个工具烧录到tf卡中   \n这里唯一要注意的是如果有多个U盘设备 要正确选择好  \n\n## 启动树莓派   \n\n1. 插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   \n2. 插电  等待与20-30秒  \n3. 正常情况下电脑会被分配一个**192.168.1.X**的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  \n4. 默认的ssh地址是root@192.168.1.1 端口是22  没有密码   \n\n\n## 让树莓派连接外网  \n树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)   \n因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器   \n这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   \n\n修改**/etc/config/network** 添加Wwan    \n```\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改后如下:  \n```\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdd5:579e:a386::/48'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改**/etc/config/wireless**  \n默认为AP热点:\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'OpenWrt'\n        option encryption 'none'\n```\n修改为STA连接我们的wifi\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'Wwan'\n        option mode 'sta'\n        option ssid 'SUMMER'\n        option encryption 'psk2'\n        option key '1234512345'\n```\n执行**/etc/init.d/network restart**重启网络服务  \n\n通过路由器的管理页面此时应当发现连接上了路由器  \n如果这一步存在问题 可以先设置disable '0'在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到   \nssh登录后尝试ping一下看看是否能正常连网   \n\n## 让树莓派作为软路由 \n和上面不同 这个是用网线连接外网 ap热点保留 \n先用网线连接树莓派 修改wireless的disable为0 重启网络服务\n\n需要重启树莓派  \nnetwork  \n```\n\nconfig interface 'lan'\n        option ifname 'wlan0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option ifname 'eth0'\n        option proto 'dhcp'\n```\n\nwireless  \n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'SUMMER_RPI'\n        option encryption 'psk2'\n        option key 'aaaaaaaaaa'\n```\n\n\n\n## 更新opkg     \n```\nopkg update\n```\n此时可以通过opkg list查看所有支持的包 \n手动安装可以opkg install 命令   \n这里推荐先安装luci web管理服务   \n\n## 安装luci包和fdisk包    \n```\npokg install luci  \nopkg install luci-theme-bootstrap  \n```\n进入后台页面[http://192.168.1.1/](http://192.168.1.1/)   \n账号root  密码空  \n设置主题为bootstrap  \n\n```\nopkg install fdisk\n```\n安装完毕此时应该改还剩余80M空间   \n可以通过```df -h```命令查看  \n\n## 挂载剩余tf卡空间  \n通过命令```fdisk -l```查看当前TF卡的挂载情况  \n对空闲硬盘进行分区\n```\nfdisk /dev/mmcblk0\n```\n\n## 安装kcp  \n```\nopkg install kcptun-client\n```\n编辑/etc/config/kcptun 进行配置  \n删除多余参数,修改关键option, 注意启用  \n```\nconfig client\n        option disabled 0\n        option bind_address '0.0.0.0'\n        option local_port 12948\n        option server '4.2.4.73'\n        option server_port 18224 \n        option mode 'fast2'\n```\n\n## 安装ss\n使用luci后台或者opkg安装:  \n```\nopkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev\n```\nshadowsocks-libev-ss-local\nshadowsocks-libev-ss-rules\nshadowsocks-libev-ss-redir\nshadowsocks-libev-ss-tunnel\nshadowsocks-libev-config\niptables-mod-conntrack-extra\nluci-app-shadowsocks-libev\n\n1. 在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   \n2. 在local instances下启用ss local  端口1080  (点击disable按钮)\n\n此时启动了一个1080的ss端口连接服务器  (socks5端口)\n\n点击Save&Apply进行保存  \n\n然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   \n\n\n\n## 透明代理转发  \n启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   \n\n\n可能问题 \n检查IP转发\ncat /proc/sys/net/ipv4/ip_forward\n若为0\necho 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf\nsysctl -p\n\n\n可能问题 DNS污染  \n需要开启resole固定 \n以及转发 \nhttps://wangchujiang.com/linux-command/c/iptables.html\nhttps://gist.github.com/wen-long/8644243\n\n\n\n\n\n\n## wifi 5G时区问题   \n可能导致找不到wifi信号或者连上去后很快断开   \n\n修改/etc/config/system\n```\nconfig system\n        option timezone 'CST-8'\n        option zonename 'Asia/Shanghai'\n```\n修改/etc/config/wireless\n```\n        option country 'CN'\n```\n\n中国开放的5G频道为\n36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  \n\nopkg安装iw  iwinfo命令  \n\n通过```iwinfo wlan0 ***``` 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   \n\n例如通过```iwinfo wlan0 htmodelist```可以查看支持的htmode  \n例如通过```iwinfo wlan0 freqlist```可以查看支持的频段  \n\n通过iw list查看设备支持的工作模式 \niw wlan0 info\niw phy0 info\n\niw reg get 获取频段和信道宽度\n### 补充信息 \nhttps://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width   \n\nHT20 High Throughput 20MHz, 802.11n\nHT40 High Throughput 40MHz, 802.11n\nHT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.\nHT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.\nVHT20 Very High Throughput 20MHz, Supported by 802.11ac\nVHT40 Very High Throughput 40MHz, Supported by 802.11ac\nVHT80 Very High Throughput 80MHz, Supported by 802.11ac\nVHT160 Very High Throughput 160MHz, Supported by 802.11ac\nNOHT disables 11n\n\n可能得组合 \n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'104'\n\toption\thwmode\t\t'11a'\n\toption\thtmode\t\t'HT20'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'7'\n\toption\thwmode\t\t'11ng'\n\toption\thtmode\t\t'HT40+'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'36'\n\toption\thwmode\t\t'11na'\n\toption\thtmode\t\t'HT40+'\n```\n\n\n\n### 快照版本问题  \n如果安装的是快照版本 会有以下几个问题:  \n1. 没有luci   需要手动安装   \n2. 快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    \n\n快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)   \n\n\n","source":"_posts/2020-10-22-glm.md","raw":"---\ntitle: GLM常见使用接口\ndate: 2020-10-22\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## GLM常用函数解释说明  \nGLM默认使用右手坐标系，如果要改成默认左手坐标系，使用：\n```\nGLM_FORCE_LEFT_HANDED\n```\n\n\n\n<glm/trigonometric.hpp>\nGLM_FUNC_DECL GLM_CONSTEXPR vec< L, T, Q > radians (vec< L, T, Q > const &degrees)\n将角度转化为弧度。\n\n<glm/gtx/transform.hpp>\nGLM_FUNC_DECL mat< 4, 4, T, Q > rotate (T angle, vec< 3, T, Q > const &v)\n使用一个用弧度(radians)表示的角度(degrees)，以及一个用3个标量(scalar)表示的坐标(axis)，来构建一个4X4的旋转矩阵(rotate matrix)。\n\n<glm/gtc/matrix_transform.hpp>\nGLM_FUNC_DECL mat<4, 4, T, Q> lookAt (vec<3, T, Q> const &eye, vec<3, T, Q> const &center, vec<3, T, Q> const &up)\n基于默认的偏手坐标系来构建一个给定视图矩阵(view matrix)的视角(look)\n\nGLM_FUNC_DECL mat<4, 4, T, defaultp> perspective (T fovy, T aspect, T near, T far)\n为一个对称透视图截锥(symmetric perspective-view frustum)创建矩阵，基于默认的偏手坐标系和默认的近剪裁面距离、远剪裁面距离\n\n参数说明：\n\nfovy 相机视角宽度\naspect 长宽比率\nnear 近面裁剪距离\nfar 远面裁剪距离\n如果要修改默认的近/远剪裁面，使用：\n\n GLM_FORCE_DEPTH_ZERO_TO_ONE\n\n## 下载镜像文件并烧录到tf卡   \n[win32diskimager](https://win32diskimager.download/)   \n把下载的镜像通过这个工具烧录到tf卡中   \n这里唯一要注意的是如果有多个U盘设备 要正确选择好  \n\n## 启动树莓派   \n\n1. 插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   \n2. 插电  等待与20-30秒  \n3. 正常情况下电脑会被分配一个**192.168.1.X**的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  \n4. 默认的ssh地址是root@192.168.1.1 端口是22  没有密码   \n\n\n## 让树莓派连接外网  \n树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)   \n因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器   \n这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   \n\n修改**/etc/config/network** 添加Wwan    \n```\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改后如下:  \n```\nconfig interface 'loopback'\n        option ifname 'lo'\n        option proto 'static'\n        option ipaddr '127.0.0.1'\n        option netmask '255.0.0.0'\n\nconfig globals 'globals'\n        option ula_prefix 'fdd5:579e:a386::/48'\n\nconfig interface 'lan'\n        option type 'bridge'\n        option ifname 'eth0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\nconfig interface 'Wwan'\n        option proto 'dhcp'\n```\n\n修改**/etc/config/wireless**  \n默认为AP热点:\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'OpenWrt'\n        option encryption 'none'\n```\n修改为STA连接我们的wifi\n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'Wwan'\n        option mode 'sta'\n        option ssid 'SUMMER'\n        option encryption 'psk2'\n        option key '1234512345'\n```\n执行**/etc/init.d/network restart**重启网络服务  \n\n通过路由器的管理页面此时应当发现连接上了路由器  \n如果这一步存在问题 可以先设置disable '0'在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到   \nssh登录后尝试ping一下看看是否能正常连网   \n\n## 让树莓派作为软路由 \n和上面不同 这个是用网线连接外网 ap热点保留 \n先用网线连接树莓派 修改wireless的disable为0 重启网络服务\n\n需要重启树莓派  \nnetwork  \n```\n\nconfig interface 'lan'\n        option ifname 'wlan0'\n        option proto 'static'\n        option ipaddr '192.168.1.1'\n        option netmask '255.255.255.0'\n        option ip6assign '60'\n\nconfig interface 'wan'\n        option ifname 'eth0'\n        option proto 'dhcp'\n```\n\nwireless  \n```\nconfig wifi-device 'radio0'\n        option type 'mac80211'\n        option channel '11'\n        option hwmode '11g'\n        option path 'platform/soc/3f300000.mmcnr/mmc_host/mmc1/mmc1:0001/mmc1:0001:1'\n        option htmode 'HT20'\n        option disabled '0'\n\nconfig wifi-iface 'default_radio0'\n        option device 'radio0'\n        option network 'lan'\n        option mode 'ap'\n        option ssid 'SUMMER_RPI'\n        option encryption 'psk2'\n        option key 'aaaaaaaaaa'\n```\n\n\n\n## 更新opkg     \n```\nopkg update\n```\n此时可以通过opkg list查看所有支持的包 \n手动安装可以opkg install 命令   \n这里推荐先安装luci web管理服务   \n\n## 安装luci包和fdisk包    \n```\npokg install luci  \nopkg install luci-theme-bootstrap  \n```\n进入后台页面[http://192.168.1.1/](http://192.168.1.1/)   \n账号root  密码空  \n设置主题为bootstrap  \n\n```\nopkg install fdisk\n```\n安装完毕此时应该改还剩余80M空间   \n可以通过```df -h```命令查看  \n\n## 挂载剩余tf卡空间  \n通过命令```fdisk -l```查看当前TF卡的挂载情况  \n对空闲硬盘进行分区\n```\nfdisk /dev/mmcblk0\n```\n\n## 安装kcp  \n```\nopkg install kcptun-client\n```\n编辑/etc/config/kcptun 进行配置  \n删除多余参数,修改关键option, 注意启用  \n```\nconfig client\n        option disabled 0\n        option bind_address '0.0.0.0'\n        option local_port 12948\n        option server '4.2.4.73'\n        option server_port 18224 \n        option mode 'fast2'\n```\n\n## 安装ss\n使用luci后台或者opkg安装:  \n```\nopkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev\n```\nshadowsocks-libev-ss-local\nshadowsocks-libev-ss-rules\nshadowsocks-libev-ss-redir\nshadowsocks-libev-ss-tunnel\nshadowsocks-libev-config\niptables-mod-conntrack-extra\nluci-app-shadowsocks-libev\n\n1. 在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   \n2. 在local instances下启用ss local  端口1080  (点击disable按钮)\n\n此时启动了一个1080的ss端口连接服务器  (socks5端口)\n\n点击Save&Apply进行保存  \n\n然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   \n\n\n\n## 透明代理转发  \n启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   \n\n\n可能问题 \n检查IP转发\ncat /proc/sys/net/ipv4/ip_forward\n若为0\necho 'net.ipv4.ip_forward = 1' >> /etc/sysctl.conf\nsysctl -p\n\n\n可能问题 DNS污染  \n需要开启resole固定 \n以及转发 \nhttps://wangchujiang.com/linux-command/c/iptables.html\nhttps://gist.github.com/wen-long/8644243\n\n\n\n\n\n\n## wifi 5G时区问题   \n可能导致找不到wifi信号或者连上去后很快断开   \n\n修改/etc/config/system\n```\nconfig system\n        option timezone 'CST-8'\n        option zonename 'Asia/Shanghai'\n```\n修改/etc/config/wireless\n```\n        option country 'CN'\n```\n\n中国开放的5G频道为\n36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  \n\nopkg安装iw  iwinfo命令  \n\n通过```iwinfo wlan0 ***``` 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   \n\n例如通过```iwinfo wlan0 htmodelist```可以查看支持的htmode  \n例如通过```iwinfo wlan0 freqlist```可以查看支持的频段  \n\n通过iw list查看设备支持的工作模式 \niw wlan0 info\niw phy0 info\n\niw reg get 获取频段和信道宽度\n### 补充信息 \nhttps://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width   \n\nHT20 High Throughput 20MHz, 802.11n\nHT40 High Throughput 40MHz, 802.11n\nHT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.\nHT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.\nVHT20 Very High Throughput 20MHz, Supported by 802.11ac\nVHT40 Very High Throughput 40MHz, Supported by 802.11ac\nVHT80 Very High Throughput 80MHz, Supported by 802.11ac\nVHT160 Very High Throughput 160MHz, Supported by 802.11ac\nNOHT disables 11n\n\n可能得组合 \n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'104'\n\toption\thwmode\t\t'11a'\n\toption\thtmode\t\t'HT20'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'7'\n\toption\thwmode\t\t'11ng'\n\toption\thtmode\t\t'HT40+'\n```\n\n```\nconfig\twifi-device\t\t'radio0'\n\toption\tchannel\t\t'36'\n\toption\thwmode\t\t'11na'\n\toption\thtmode\t\t'HT40+'\n```\n\n\n\n### 快照版本问题  \n如果安装的是快照版本 会有以下几个问题:  \n1. 没有luci   需要手动安装   \n2. 快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    \n\n快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)   \n\n\n","slug":"2020-10-22-glm","published":1,"updated":"2020-10-23T02:31:45.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiyc8rfp0001505h0ljgapy1","content":"<h2><span id=\"glm常用函数解释说明\">GLM常用函数解释说明</span></h2><p>GLM默认使用右手坐标系，如果要改成默认左手坐标系，使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLM_FORCE_LEFT_HANDED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>&lt;glm/trigonometric.hpp&gt;<br>GLM_FUNC_DECL GLM_CONSTEXPR vec&lt; L, T, Q &gt; radians (vec&lt; L, T, Q &gt; const &amp;degrees)<br>将角度转化为弧度。</p>\n<p>&lt;glm/gtx/transform.hpp&gt;<br>GLM_FUNC_DECL mat&lt; 4, 4, T, Q &gt; rotate (T angle, vec&lt; 3, T, Q &gt; const &amp;v)<br>使用一个用弧度(radians)表示的角度(degrees)，以及一个用3个标量(scalar)表示的坐标(axis)，来构建一个4X4的旋转矩阵(rotate matrix)。</p>\n<p>&lt;glm/gtc/matrix_transform.hpp&gt;<br>GLM_FUNC_DECL mat&lt;4, 4, T, Q&gt; lookAt (vec&lt;3, T, Q&gt; const &amp;eye, vec&lt;3, T, Q&gt; const &amp;center, vec&lt;3, T, Q&gt; const &amp;up)<br>基于默认的偏手坐标系来构建一个给定视图矩阵(view matrix)的视角(look)</p>\n<p>GLM_FUNC_DECL mat&lt;4, 4, T, defaultp&gt; perspective (T fovy, T aspect, T near, T far)<br>为一个对称透视图截锥(symmetric perspective-view frustum)创建矩阵，基于默认的偏手坐标系和默认的近剪裁面距离、远剪裁面距离</p>\n<p>参数说明：</p>\n<p>fovy 相机视角宽度<br>aspect 长宽比率<br>near 近面裁剪距离<br>far 远面裁剪距离<br>如果要修改默认的近/远剪裁面，使用：</p>\n<p> GLM_FORCE_DEPTH_ZERO_TO_ONE</p>\n<h2><span id=\"下载镜像文件并烧录到tf卡\">下载镜像文件并烧录到tf卡</span></h2><p><a href=\"https://win32diskimager.download/\" target=\"_blank\" rel=\"noopener\">win32diskimager</a><br>把下载的镜像通过这个工具烧录到tf卡中<br>这里唯一要注意的是如果有多个U盘设备 要正确选择好  </p>\n<h2><span id=\"启动树莓派\">启动树莓派</span></h2><ol>\n<li>插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   </li>\n<li>插电  等待与20-30秒  </li>\n<li>正常情况下电脑会被分配一个<strong>192.168.1.X</strong>的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  </li>\n<li>默认的ssh地址是<a href=\"mailto:root@192.168.1.1\">root@192.168.1.1</a> 端口是22  没有密码   </li>\n</ol>\n<h2><span id=\"让树莓派连接外网\">让树莓派连接外网</span></h2><p>树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)<br>因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器<br>这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   </p>\n<p>修改<strong>/etc/config/network</strong> 添加Wwan    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改后如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;loopback&#39;</span><br><span class=\"line\">        option ifname &#39;lo&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;127.0.0.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.0.0.0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#39;globals&#39;</span><br><span class=\"line\">        option ula_prefix &#39;fdd5:579e:a386::&#x2F;48&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option type &#39;bridge&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>/etc/config/wireless</strong><br>默认为AP热点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;OpenWrt&#39;</span><br><span class=\"line\">        option encryption &#39;none&#39;</span><br></pre></td></tr></table></figure>\n<p>修改为STA连接我们的wifi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;Wwan&#39;</span><br><span class=\"line\">        option mode &#39;sta&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;1234512345&#39;</span><br></pre></td></tr></table></figure>\n<p>执行<strong>/etc/init.d/network restart</strong>重启网络服务  </p>\n<p>通过路由器的管理页面此时应当发现连接上了路由器<br>如果这一步存在问题 可以先设置disable ‘0’在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到<br>ssh登录后尝试ping一下看看是否能正常连网   </p>\n<h2><span id=\"让树莓派作为软路由\">让树莓派作为软路由</span></h2><p>和上面不同 这个是用网线连接外网 ap热点保留<br>先用网线连接树莓派 修改wireless的disable为0 重启网络服务</p>\n<p>需要重启树莓派<br>network  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option ifname &#39;wlan0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;wan&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>wireless  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER_RPI&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;aaaaaaaaaa&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"更新opkg\">更新opkg</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n<p>此时可以通过opkg list查看所有支持的包<br>手动安装可以opkg install 命令<br>这里推荐先安装luci web管理服务   </p>\n<h2><span id=\"安装luci包和fdisk包\">安装luci包和fdisk包</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pokg install luci  </span><br><span class=\"line\">opkg install luci-theme-bootstrap</span><br></pre></td></tr></table></figure>\n<p>进入后台页面<a href=\"http://192.168.1.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.1/</a><br>账号root  密码空<br>设置主题为bootstrap  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install fdisk</span><br></pre></td></tr></table></figure>\n<p>安装完毕此时应该改还剩余80M空间<br>可以通过<code>df -h</code>命令查看  </p>\n<h2><span id=\"挂载剩余tf卡空间\">挂载剩余tf卡空间</span></h2><p>通过命令<code>fdisk -l</code>查看当前TF卡的挂载情况<br>对空闲硬盘进行分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk &#x2F;dev&#x2F;mmcblk0</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"安装kcp\">安装kcp</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install kcptun-client</span><br></pre></td></tr></table></figure>\n<p>编辑/etc/config/kcptun 进行配置<br>删除多余参数,修改关键option, 注意启用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config client</span><br><span class=\"line\">        option disabled 0</span><br><span class=\"line\">        option bind_address &#39;0.0.0.0&#39;</span><br><span class=\"line\">        option local_port 12948</span><br><span class=\"line\">        option server &#39;4.2.4.73&#39;</span><br><span class=\"line\">        option server_port 18224 </span><br><span class=\"line\">        option mode &#39;fast2&#39;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"安装ss\">安装ss</span></h2><p>使用luci后台或者opkg安装:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev-ss-local<br>shadowsocks-libev-ss-rules<br>shadowsocks-libev-ss-redir<br>shadowsocks-libev-ss-tunnel<br>shadowsocks-libev-config<br>iptables-mod-conntrack-extra<br>luci-app-shadowsocks-libev</p>\n<ol>\n<li>在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   </li>\n<li>在local instances下启用ss local  端口1080  (点击disable按钮)</li>\n</ol>\n<p>此时启动了一个1080的ss端口连接服务器  (socks5端口)</p>\n<p>点击Save&amp;Apply进行保存  </p>\n<p>然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   </p>\n<h2><span id=\"透明代理转发\">透明代理转发</span></h2><p>启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   </p>\n<p>可能问题<br>检查IP转发<br>cat /proc/sys/net/ipv4/ip_forward<br>若为0<br>echo ‘net.ipv4.ip_forward = 1’ &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<p>可能问题 DNS污染<br>需要开启resole固定<br>以及转发<br><a href=\"https://wangchujiang.com/linux-command/c/iptables.html\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command/c/iptables.html</a><br><a href=\"https://gist.github.com/wen-long/8644243\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/wen-long/8644243</a></p>\n<h2><span id=\"wifi-5g时区问题\">wifi 5G时区问题</span></h2><p>可能导致找不到wifi信号或者连上去后很快断开   </p>\n<p>修改/etc/config/system</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config system</span><br><span class=\"line\">        option timezone &#39;CST-8&#39;</span><br><span class=\"line\">        option zonename &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>\n<p>修改/etc/config/wireless</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option country &#39;CN&#39;</span><br></pre></td></tr></table></figure>\n\n<p>中国开放的5G频道为<br>36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  </p>\n<p>opkg安装iw  iwinfo命令  </p>\n<p>通过<code>iwinfo wlan0 ***</code> 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   </p>\n<p>例如通过<code>iwinfo wlan0 htmodelist</code>可以查看支持的htmode<br>例如通过<code>iwinfo wlan0 freqlist</code>可以查看支持的频段  </p>\n<p>通过iw list查看设备支持的工作模式<br>iw wlan0 info<br>iw phy0 info</p>\n<p>iw reg get 获取频段和信道宽度</p>\n<h3><span id=\"补充信息\">补充信息</span></h3><p><a href=\"https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width</a>   </p>\n<p>HT20 High Throughput 20MHz, 802.11n<br>HT40 High Throughput 40MHz, 802.11n<br>HT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.<br>HT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.<br>VHT20 Very High Throughput 20MHz, Supported by 802.11ac<br>VHT40 Very High Throughput 40MHz, Supported by 802.11ac<br>VHT80 Very High Throughput 80MHz, Supported by 802.11ac<br>VHT160 Very High Throughput 160MHz, Supported by 802.11ac<br>NOHT disables 11n</p>\n<p>可能得组合 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;104&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11a&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT20&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;7&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11ng&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;36&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11na&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3><span id=\"快照版本问题\">快照版本问题</span></h3><p>如果安装的是快照版本 会有以下几个问题:  </p>\n<ol>\n<li>没有luci   需要手动安装   </li>\n<li>快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    </li>\n</ol>\n<p>快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GLM常用函数解释说明\"><a href=\"#GLM常用函数解释说明\" class=\"headerlink\" title=\"GLM常用函数解释说明\"></a>GLM常用函数解释说明</h2><p>GLM默认使用右手坐标系，如果要改成默认左手坐标系，使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLM_FORCE_LEFT_HANDED</span><br></pre></td></tr></table></figure>\n\n\n\n<p>&lt;glm/trigonometric.hpp&gt;<br>GLM_FUNC_DECL GLM_CONSTEXPR vec&lt; L, T, Q &gt; radians (vec&lt; L, T, Q &gt; const &amp;degrees)<br>将角度转化为弧度。</p>\n<p>&lt;glm/gtx/transform.hpp&gt;<br>GLM_FUNC_DECL mat&lt; 4, 4, T, Q &gt; rotate (T angle, vec&lt; 3, T, Q &gt; const &amp;v)<br>使用一个用弧度(radians)表示的角度(degrees)，以及一个用3个标量(scalar)表示的坐标(axis)，来构建一个4X4的旋转矩阵(rotate matrix)。</p>\n<p>&lt;glm/gtc/matrix_transform.hpp&gt;<br>GLM_FUNC_DECL mat&lt;4, 4, T, Q&gt; lookAt (vec&lt;3, T, Q&gt; const &amp;eye, vec&lt;3, T, Q&gt; const &amp;center, vec&lt;3, T, Q&gt; const &amp;up)<br>基于默认的偏手坐标系来构建一个给定视图矩阵(view matrix)的视角(look)</p>\n<p>GLM_FUNC_DECL mat&lt;4, 4, T, defaultp&gt; perspective (T fovy, T aspect, T near, T far)<br>为一个对称透视图截锥(symmetric perspective-view frustum)创建矩阵，基于默认的偏手坐标系和默认的近剪裁面距离、远剪裁面距离</p>\n<p>参数说明：</p>\n<p>fovy 相机视角宽度<br>aspect 长宽比率<br>near 近面裁剪距离<br>far 远面裁剪距离<br>如果要修改默认的近/远剪裁面，使用：</p>\n<p> GLM_FORCE_DEPTH_ZERO_TO_ONE</p>\n<h2 id=\"下载镜像文件并烧录到tf卡\"><a href=\"#下载镜像文件并烧录到tf卡\" class=\"headerlink\" title=\"下载镜像文件并烧录到tf卡\"></a>下载镜像文件并烧录到tf卡</h2><p><a href=\"https://win32diskimager.download/\" target=\"_blank\" rel=\"noopener\">win32diskimager</a><br>把下载的镜像通过这个工具烧录到tf卡中<br>这里唯一要注意的是如果有多个U盘设备 要正确选择好  </p>\n<h2 id=\"启动树莓派\"><a href=\"#启动树莓派\" class=\"headerlink\" title=\"启动树莓派\"></a>启动树莓派</h2><ol>\n<li>插入tf卡  把电脑的网线插入树莓派的网线口(装好openwrt的树莓派相当于一个路由器)   </li>\n<li>插电  等待与20-30秒  </li>\n<li>正常情况下电脑会被分配一个<strong>192.168.1.X</strong>的IP地址 此时树莓派的网络地址是192.168.1.1 如果没成功检查是否存在网络IP段的冲突问题或者本级的DHCP等网络问题  </li>\n<li>默认的ssh地址是<a href=\"mailto:root@192.168.1.1\">root@192.168.1.1</a> 端口是22  没有密码   </li>\n</ol>\n<h2 id=\"让树莓派连接外网\"><a href=\"#让树莓派连接外网\" class=\"headerlink\" title=\"让树莓派连接外网\"></a>让树莓派连接外网</h2><p>树莓派有一个集成的wifi和一个网络端口  默认情况下wifi的配置是ap热点并且处于关闭(系统第一次启动不插网线应该是打开状态)<br>因此要想让树莓派能连外网并且可以连ssh  至少有一个网卡连我们的电脑 另外一个网卡连外网路由器<br>这里使用的方法是先通过网线连接树莓派 然后开启wireless并且设置为sta客户端模式连外网   </p>\n<p>修改<strong>/etc/config/network</strong> 添加Wwan    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改后如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config interface &#39;loopback&#39;</span><br><span class=\"line\">        option ifname &#39;lo&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;127.0.0.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.0.0.0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config globals &#39;globals&#39;</span><br><span class=\"line\">        option ula_prefix &#39;fdd5:579e:a386::&#x2F;48&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option type &#39;bridge&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\">config interface &#39;Wwan&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>修改<strong>/etc/config/wireless</strong><br>默认为AP热点:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;OpenWrt&#39;</span><br><span class=\"line\">        option encryption &#39;none&#39;</span><br></pre></td></tr></table></figure>\n<p>修改为STA连接我们的wifi</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;Wwan&#39;</span><br><span class=\"line\">        option mode &#39;sta&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;1234512345&#39;</span><br></pre></td></tr></table></figure>\n<p>执行<strong>/etc/init.d/network restart</strong>重启网络服务  </p>\n<p>通过路由器的管理页面此时应当发现连接上了路由器<br>如果这一步存在问题 可以先设置disable ‘0’在不该AP mod类型的情况下看看作为ap热点模式是否能正常搜索到<br>ssh登录后尝试ping一下看看是否能正常连网   </p>\n<h2 id=\"让树莓派作为软路由\"><a href=\"#让树莓派作为软路由\" class=\"headerlink\" title=\"让树莓派作为软路由\"></a>让树莓派作为软路由</h2><p>和上面不同 这个是用网线连接外网 ap热点保留<br>先用网线连接树莓派 修改wireless的disable为0 重启网络服务</p>\n<p>需要重启树莓派<br>network  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">config interface &#39;lan&#39;</span><br><span class=\"line\">        option ifname &#39;wlan0&#39;</span><br><span class=\"line\">        option proto &#39;static&#39;</span><br><span class=\"line\">        option ipaddr &#39;192.168.1.1&#39;</span><br><span class=\"line\">        option netmask &#39;255.255.255.0&#39;</span><br><span class=\"line\">        option ip6assign &#39;60&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config interface &#39;wan&#39;</span><br><span class=\"line\">        option ifname &#39;eth0&#39;</span><br><span class=\"line\">        option proto &#39;dhcp&#39;</span><br></pre></td></tr></table></figure>\n\n<p>wireless  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config wifi-device &#39;radio0&#39;</span><br><span class=\"line\">        option type &#39;mac80211&#39;</span><br><span class=\"line\">        option channel &#39;11&#39;</span><br><span class=\"line\">        option hwmode &#39;11g&#39;</span><br><span class=\"line\">        option path &#39;platform&#x2F;soc&#x2F;3f300000.mmcnr&#x2F;mmc_host&#x2F;mmc1&#x2F;mmc1:0001&#x2F;mmc1:0001:1&#39;</span><br><span class=\"line\">        option htmode &#39;HT20&#39;</span><br><span class=\"line\">        option disabled &#39;0&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">config wifi-iface &#39;default_radio0&#39;</span><br><span class=\"line\">        option device &#39;radio0&#39;</span><br><span class=\"line\">        option network &#39;lan&#39;</span><br><span class=\"line\">        option mode &#39;ap&#39;</span><br><span class=\"line\">        option ssid &#39;SUMMER_RPI&#39;</span><br><span class=\"line\">        option encryption &#39;psk2&#39;</span><br><span class=\"line\">        option key &#39;aaaaaaaaaa&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"更新opkg\"><a href=\"#更新opkg\" class=\"headerlink\" title=\"更新opkg\"></a>更新opkg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg update</span><br></pre></td></tr></table></figure>\n<p>此时可以通过opkg list查看所有支持的包<br>手动安装可以opkg install 命令<br>这里推荐先安装luci web管理服务   </p>\n<h2 id=\"安装luci包和fdisk包\"><a href=\"#安装luci包和fdisk包\" class=\"headerlink\" title=\"安装luci包和fdisk包\"></a>安装luci包和fdisk包</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pokg install luci  </span><br><span class=\"line\">opkg install luci-theme-bootstrap</span><br></pre></td></tr></table></figure>\n<p>进入后台页面<a href=\"http://192.168.1.1/\" target=\"_blank\" rel=\"noopener\">http://192.168.1.1/</a><br>账号root  密码空<br>设置主题为bootstrap  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install fdisk</span><br></pre></td></tr></table></figure>\n<p>安装完毕此时应该改还剩余80M空间<br>可以通过<code>df -h</code>命令查看  </p>\n<h2 id=\"挂载剩余tf卡空间\"><a href=\"#挂载剩余tf卡空间\" class=\"headerlink\" title=\"挂载剩余tf卡空间\"></a>挂载剩余tf卡空间</h2><p>通过命令<code>fdisk -l</code>查看当前TF卡的挂载情况<br>对空闲硬盘进行分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk &#x2F;dev&#x2F;mmcblk0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装kcp\"><a href=\"#安装kcp\" class=\"headerlink\" title=\"安装kcp\"></a>安装kcp</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install kcptun-client</span><br></pre></td></tr></table></figure>\n<p>编辑/etc/config/kcptun 进行配置<br>删除多余参数,修改关键option, 注意启用  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config client</span><br><span class=\"line\">        option disabled 0</span><br><span class=\"line\">        option bind_address &#39;0.0.0.0&#39;</span><br><span class=\"line\">        option local_port 12948</span><br><span class=\"line\">        option server &#39;4.2.4.73&#39;</span><br><span class=\"line\">        option server_port 18224 </span><br><span class=\"line\">        option mode &#39;fast2&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h2><p>使用luci后台或者opkg安装:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">opkg install shadowsocks-libev-ss-local shadowsocks-libev-ss-rules shadowsocks-libev-ss-redir shadowsocks-libev-ss-tunnel shadowsocks-libev-config iptables-mod-conntrack-extra luci-app-shadowsocks-libev</span><br></pre></td></tr></table></figure>\n<p>shadowsocks-libev-ss-local<br>shadowsocks-libev-ss-rules<br>shadowsocks-libev-ss-redir<br>shadowsocks-libev-ss-tunnel<br>shadowsocks-libev-config<br>iptables-mod-conntrack-extra<br>luci-app-shadowsocks-libev</p>\n<ol>\n<li>在luci后台的Service下面的Shadowsocks下填写remote server信息为本地kcp监听端口   </li>\n<li>在local instances下启用ss local  端口1080  (点击disable按钮)</li>\n</ol>\n<p>此时启动了一个1080的ss端口连接服务器  (socks5端口)</p>\n<p>点击Save&amp;Apply进行保存  </p>\n<p>然后在本地电脑上使用chrome+switchyOmega新建一个socks5代理连接youtube进行测试 .   </p>\n<h2 id=\"透明代理转发\"><a href=\"#透明代理转发\" class=\"headerlink\" title=\"透明代理转发\"></a>透明代理转发</h2><p>启用Local Instances ss_redir.hi  启用Redir Rules并更改Local-out default为forward   </p>\n<p>可能问题<br>检查IP转发<br>cat /proc/sys/net/ipv4/ip_forward<br>若为0<br>echo ‘net.ipv4.ip_forward = 1’ &gt;&gt; /etc/sysctl.conf<br>sysctl -p</p>\n<p>可能问题 DNS污染<br>需要开启resole固定<br>以及转发<br><a href=\"https://wangchujiang.com/linux-command/c/iptables.html\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command/c/iptables.html</a><br><a href=\"https://gist.github.com/wen-long/8644243\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/wen-long/8644243</a></p>\n<h2 id=\"wifi-5G时区问题\"><a href=\"#wifi-5G时区问题\" class=\"headerlink\" title=\"wifi 5G时区问题\"></a>wifi 5G时区问题</h2><p>可能导致找不到wifi信号或者连上去后很快断开   </p>\n<p>修改/etc/config/system</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config system</span><br><span class=\"line\">        option timezone &#39;CST-8&#39;</span><br><span class=\"line\">        option zonename &#39;Asia&#x2F;Shanghai&#39;</span><br></pre></td></tr></table></figure>\n<p>修改/etc/config/wireless</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">option country &#39;CN&#39;</span><br></pre></td></tr></table></figure>\n\n<p>中国开放的5G频道为<br>36, 40, 44, 48, 52, 56, 60, 64, 149,153, 157, 161, 165  </p>\n<p>opkg安装iw  iwinfo命令  </p>\n<p>通过<code>iwinfo wlan0 ***</code> 可以查看无线网卡的当前信息 以及支持的信号强度  模式等   </p>\n<p>例如通过<code>iwinfo wlan0 htmodelist</code>可以查看支持的htmode<br>例如通过<code>iwinfo wlan0 freqlist</code>可以查看支持的频段  </p>\n<p>通过iw list查看设备支持的工作模式<br>iw wlan0 info<br>iw phy0 info</p>\n<p>iw reg get 获取频段和信道宽度</p>\n<h3 id=\"补充信息\"><a href=\"#补充信息\" class=\"headerlink\" title=\"补充信息\"></a>补充信息</h3><p><a href=\"https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width\" target=\"_blank\" rel=\"noopener\">https://openwrt.org/docs/guide-user/network/wifi/basic#htmodethe_wi-fi_channel_width</a>   </p>\n<p>HT20 High Throughput 20MHz, 802.11n<br>HT40 High Throughput 40MHz, 802.11n<br>HT40- High Throughput 40MHz, 802.11n, control channel is bellow extension channel.<br>HT40+ High Throughput 40MHz, 802.11n, control channel is above extension channel.<br>VHT20 Very High Throughput 20MHz, Supported by 802.11ac<br>VHT40 Very High Throughput 40MHz, Supported by 802.11ac<br>VHT80 Very High Throughput 80MHz, Supported by 802.11ac<br>VHT160 Very High Throughput 160MHz, Supported by 802.11ac<br>NOHT disables 11n</p>\n<p>可能得组合 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;104&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11a&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT20&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;7&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11ng&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config\twifi-device\t\t&#39;radio0&#39;</span><br><span class=\"line\">\toption\tchannel\t\t&#39;36&#39;</span><br><span class=\"line\">\toption\thwmode\t\t&#39;11na&#39;</span><br><span class=\"line\">\toption\thtmode\t\t&#39;HT40+&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"快照版本问题\"><a href=\"#快照版本问题\" class=\"headerlink\" title=\"快照版本问题\"></a>快照版本问题</h3><p>如果安装的是快照版本 会有以下几个问题:  </p>\n<ol>\n<li>没有luci   需要手动安装   </li>\n<li>快照版本为自动构建且软件源对应自动构建的构建版号  导致一旦下个快照产生(通常几个小时?)就会导致软件源无法正常使用    </li>\n</ol>\n<p>快照版本的好处是可以刷完TF卡后直接启动而不需要任何引导步骤(通常至少需要一个USB键盘和HDMI+显示器)</p>\n"},{"title":"GCC 内联汇编编写","date":"2021-04-01T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n本文阐述了GCC提供的内联汇编功能的使用和用法    \n本文主要为了阐述zperf性能分析器的核心编写逻辑.  \n\n<!-- toc -->  \n\n## 概述   \n\n在这篇文章中, 主要介绍的是(GCC)内联汇编函数的基本格式和用法, 这里先介绍两个基本概念.    \n\n### 内联(inline):  \n在C++中, inline关键字首先是**C++语言层面的修饰符**,  如同static/ const等.   \n该关键字的作用是将函数声明为一个内联(inline)函数: inline关键字作为指示器传递给优化器\"**优先采用函数的内联替换而非进行函数调用**\".    \n> 即内联函数原本的优化目的 不使用控制转移指令跳转到函数体, 而是直接拷贝函数体到发生调用的位置, 从而达到避免函数调用的开销以及传参和返回等开销.    \n\n这里容易产生混淆的地方在于, 该修饰符对于上述优化的指示并非强制,  并且编译器拥有对任何未标注inline的函数的使用内联替换的自由(在编译的优化原则内);  \n也因此在实际的实践中,  **inline关键字对于函数的含义也从'优先内联'实际变成了'容许多次定义'**,  并且该inline关键字在语义上的实际变化也**在C++17得到的标准化的定义和进一步的扩展**,  并进一步扫清了\"header only\"支持的剩余障碍.     \n\n\n### 内联汇编  \n内联汇编提供了在C/C++代码中直接嵌入汇编代码的能力, 其中, 'asm'关键字充当了汇编指令和'C/C++'代码之间的接口.   \n\n<!-- more --> \n\n## GCC汇编基本语法  \n\nGCC 使用AT&T/UNIX汇编语法, 这里主要给出和INTEL的基础差别, 更多详细内容查看对应的汇编手册, 或者[汇编语法和惯例](https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/)   \n\n\n* Source-Destination Ordering 操作数顺序  \n    AT&T语法中操作数的方向与Intel汇编相反; \n    在Intel语法中, 第一个操作数是目标, 第二个操作数是源; 而在AT&T语法中是反过来的.  \n    AT&T 语法: ```Op-code src dst```\n    Intel语法: ```Op-code dst src```   \n    \n\n* 寄存器命名: \n  * 寄存器名称以%为前缀, Intel无前缀.  例如如果使用寄存器```eax```,  AT&T汇编需要写成```%eax```   \n\n* 立即操作数  \n  * AT&T立即数以$为前缀, Intel无前缀   例如 立即数1987 AT&T汇编要写成```$1987```  \n  * 十六进制立即数 AT&T以0x为次前缀,  Intel以h为后缀进行修饰.  例如16进制 0x1987 \n    * AT&T汇编: ```$0x1987```\n    * Intel汇编: ```1987h```\n  \n* 操作数大小  \n  * AT&T语法: 存储操作数的大小由操作码名称的最后一个字符确定, 'b', 'w', 'l' 对应字节码对应8位, 16位,32位.  \n    * 例如: ```movl    %eax, %ebx  ```  \n  * Intel语法: 添加前置修饰符 例如'byte ptr' 'word ptr' 'dword ptr'来实现   \n    * 例如: ```mov         qword ptr [rax+8],0 ```  \n\n* 内存操作数  \n  * AT&T汇编中的语法```segment:displacement(base register, index register, scale factor)```\n  * Intel等效语法  ```segment:[base register + displacement + index register * scale factor]```   \n\n* 简单对比示例如下:  \n\n|      AT&T Code                     |       Intel Code             |\n|------------------------------------|------------------------------|\n|  movl    $1,%eax                   | mov     eax,1                |   \n|  movl    $0xff,%ebx                | mov     ebx,0ffh             |   \n|  int     $0x80                     | int     80h                  |   \n|  movl    %eax, %ebx                | mov     ebx, eax             |\n|  movl    (%ecx),%eax               | mov     eax,[ecx]            |\n|  movl    3(%ebx),%eax              | mov     eax,[ebx+3]          | \n|  movl    0x20(%ebx),%eax           | mov     eax,[ebx+20h]        |\n|  addl    (%ebx,%ecx,0x2),%eax      | add     eax,[ebx+ecx*2h]     |\n|  leal    (%ebx,%ecx),%eax          | lea     eax,[ebx+ecx]        |\n|  subl    -0x20(%ebx,%ecx,0x4),%eax | sub     eax,[ebx+ecx*4h-20h] |\n\n## 基本内联语法  \n\n基本内联汇编的格式非常简单, 基本形式是   \n```C\nasm(\"assembly code\");\n```\n举个例子:  \n```C\nasm(\"movl %ecx %eax\"); /* moves the contents of ecx to eax */\n__asm__(\"movb %bh (%eax)\"); /*moves the byte from bh to the memory pointed by eax */\n```\n关键字```__asm__``` 和```asm```等价, 前者从代码规范上来说一般不容易和逻辑代码冲突(C++03标准开始明确规定__前缀为编译器保留关键字).   \n\n如果我们有多行指令, 则每行用双引号引起来, 并添加指令后缀```\\n\\t```  例如:  \n```C\n __asm__ (\"movl %eax, %ebx\\n\\t\"\n          \"movl $56, %esi\\n\\t\"\n          \"movl %ecx, $label(%edx,%ebx,$4)\\n\\t\"\n          \"movb %ah, (%ebx)\");\n```\n\n以上的汇编编写还存在一个问题, 即编译器对对我们嵌入的汇编代码带来的寄存器修改一无所知,  要么我们避免修改编译器用到的寄存器, 要么在修改前后做好恢复,  因此, 我们通常使用extended asm, 通过指定的规范, 编译器会正确的帮我们处理好这个问题.    \n\n## 扩展汇编:  \n\n在扩展汇编中, 我们可以指定操作数, 包括指定输入寄存器, 指定输出寄存器, 指定会被破坏的寄存器列表;  通过这些指定和规则约束, 编译器则会在汇编生成过程中避免使用到该类寄存器(最坏情况下编译器生成对应的压栈和恢复等操作), 以及对内联汇编选择合适的优化等, 我们则可以把精力放在我们需要关心的逻辑本身上.   \n其基本格式为:   \n```C\nasm ( assembler template \n    : output operands                  /* optional */\n    : input operands                   /* optional */\n    : list of clobbered registers      /* optional */\n    );\n```\n\n\n* assembler template 汇编模版由汇编指令组成; \n* operands 每个操作数由一个 操作数约束 字符串来描述, 后面跟括号中的C表达式.   \n* 使用冒号将汇编程序模版和后面的输出操作数分开, 后面可选operands相同, 如果没有更多内容则可以简略(中间不可省略)   \n* 操作数的总数有限制 (约为10个或者为设备描述的最大个数决定)   \n\n举例如下:  \n```C\nasm (\"cld\\n\\t\"\n    \"rep\\n\\t\"\n    \"stosl\"\n    : /* no output registers */\n    : \"c\" (count), \"a\" (fill_value), \"D\" (dest)\n    : \"%ecx\", \"%edi\" \n    );\n```\n\n\n完整的描述为\n>  输入:  从C/C++的4字节变量fill_value中读取数据存入寄存器%eax, count存入%ecx, dest存储%edi  \n\n>  执行:  \n  > cld使DF复位为0: 设置stosl保存eax值后的偏移方向为自增  \n  > rep指令则重复后续单个指令```(%ecx)```次   \n  > stosl 将eax中的值保存到ES:EDI指向的地址中, 如果DF=0则自增4字节, 如果DF=1(std)则自减4字节. (l后缀为4字节 q为8字节)    \n\n> 输出: 没有输出   \n\n> 破坏清单: 显式声明%ecx和%edi是被修改使用的寄存器    \n\n\n再举个例子: 可变寄存器使用  \n```C\nint a=10, b;\nasm (\"movl %1, %%eax; \n        movl %%eax, %0;\"\n        :\"=r\"(b)        /* output */\n        :\"r\"(a)         /* input */\n        :\"%eax\"         /* clobbered register */\n        );       \n```\n赋值a给b;   \nr 是操作数的约束, 即告诉GCC可以使用任何寄存器.   \neax 需要在这里显式声明   \n\n\n\n### assembler template 汇编模板  \n汇编器模板包含插入到C程序内部的汇编指令集  \n格式如下:  \n* 每条汇编指令都应该用双引号引起来 或者整个指令组都应该用双引号引起来  \n* 每条汇编指令还应以定界符结尾: \n  * 有效的定界符是换行符(\\n)和分号(;);  \n  * '\\n'后可以跟一个制表符'\\t' \n  * **与C/C++表达式相对应的操作数**由%0, %1 ...等表示   \n  \n\n### operands 操作数  \nC/C++表达式用作'asm'中汇编指令的操作数  \n* 每个操作数首先被写成双引号中的操作数约束(operand constraint), 对于输出操作数还有一个约束修饰符'='  \n* 然后后面跟随代表操作数的C/C++表达式  \n* \"约束 constraint\" 主要用于确定操作数的寻址模式, 还用于指定要使用的寄存器.  (文后有对应常用constraint的表格)   \n* 如果使用多个操作数, 以逗号','分隔   \n* 在汇编模版中, 每个操作数均由数字引用. 编号方法如下: 如果一共有N个操作数, 包括输入和输出, 也包括指定寄存器, 第一个为0, 按书写顺序递增;   \n* 输出操作数表达式必须为左值  输入操作数不受此限制  \n* 在输入输出中出现的寄存器属于隐式破坏声明, 不比添加到破坏清单内.  \n\n举几个例子:   \n将数字乘以5  \n```C\nasm (\"leal (%1,%1,4), %0\"\n        : \"=r\" (five_times_x)\n        : \"r\" (x) \n        );\n```\n\n输入和输出使用同一个寄存器(数字约束)\n```C\nasm (\"leal (%0,%0,4), %0\"\n        : \"=r\" (five_times_x)\n        : \"0\" (x) \n        );\n```\n\n输入输出使用同一寄存器并指定  \n```C\n        asm (\"leal (%%ecx,%%ecx,4), %%ecx\"\n             : \"=c\" (x)\n             : \"c\" (x) \n             );\n```\n\n\n### clobber-list 破坏清单  \n\n我们必须在clobber-list中列出那些可能被指令破坏的寄存器   即asm函数中第三个':'之后的字段   \n其目的是为了通知gcc我们将自己使用和修改它们 因此gcc不会假定它加载到这些寄存器中的值将是有效的.   \n在这里不需要也不应该列出输入和输出寄存器, 因为gcc'知道'. 而在汇编模版中的汇编指令隐式或者显式使用了其他寄存器 则必须在此列出.   \n如果我们的指令不可预测的方式修改了内存, 那么需要在clobber-list中添加'memory'.  gcc将不能在整个汇编程序中将内存缓存到寄存器中;   \n如果受影响的内存未在输入和输出中列出, 那么我们还必须添加volatile关键字.   \n如果指令可能更改了条件代码寄存器CCR 那么需要添加'cc'  \n\n### __volatile__  \n```C\n__asm__ __volatile__ ( ... : ... : ... : ...);\n__asm__ __volatile__ ( ... : ... : ... : ...);\n```\n\n如果汇编语句必须在放置它的位置执行 (即 为了优化而不能从循环中移出), 则将关键字volatile放在asm之后和()之前   \n如果不是确定需要volatile则不要添加, 因为会损失一些可能的性能上的优化   \n\n\n## constraints  约束  \n约束可以说明操作数是否可以在寄存器中, 以及哪种寄存器;   \n该操作数是否可以是一个内存引用, 以及哪种地址;  \n操作数是否可以是立即数常量, 以及它可能具有哪些可能的值(即值的范围)等等   \n\n### 常用约束   \n```\nasm (\"movl %%eax, %0\\n\" :\"=r\"(myval));\n```\n**当指定\"r\"约束时, gcc可以将变量保留在任何可用的GPR中. 要指定寄存器, 必须使用特定的寄存器约束直接指定寄存器名称 如下表:**   \n\n| r |    Register(s)     |\n|---|--------------------|\n| a |   %eax, %ax, %al   |\n| b |   %ebx, %bx, %bl   |\n| c |   %ecx, %cx, %cl   |\n| d |   %edx, %dx, %dl   |\n| S |   %esi, %si        |\n| D |   %edi, %di        |\n\n\n**内存操作数约束(m)**  \n当操作数在内存中时, 对它们执行的任何操作都将直接在内存位置发生, 这与寄存器约束相反;  \n后者首先将值存储在要修改的寄存器中, 然后将其写回到内存位置  \n通常仅在绝对必要的指令约束条件下使用该寄存器约束条件,  因为寄存器约束会加快处理速度  \n如果需要在asm内部更新C变量, 并且确实不想使用寄存器来保存其值, 则可以最有效地使用内存约束.   \n例如 值存储在内存位置loc中:  \n```\nasm(\"sidt %0\\n\" : :\"m\"(loc));\n```\n\n**Matching(Digit) constraints 数字约束**  \n\n在某些情况下, 单个变量既可以用作输入操作数, 也可以用作输出操作数   \n可以通过使用匹配约束在asm中指定此类情况  \n```\nasm (\"incl %0\" :\"=a\"(var):\"0\"(var));\n```\n\n为了匹配约束, 将寄存器%eax用作输入和输出变量   \n将var输入读取到%eax, 并在递增后将更新的%eax再次存储在var中   \n这里的0指定与第0个输出变量相同的约束   \n也就是说 它指定var的输出实例应仅存储在%eax中  \n\n* 从变量读取输入或修改变量并将修改写回到同一变量的情况  \n* 在不需要输入和输出操作数的单独实例的情况下   \n* 使用匹配约束的最重要作用是它们导致有效使用可用寄存器   \n\n**其他约束**   \n* \"m\": 允许使用内存操作数,该内存操作数通常具有机器支持的任何类型的地址.  \n* \"o\": 允许使用内存操作数,但前提是该地址是可偏移的.也就是说,在地址上加上一个小的偏移量就可以得到一个有效的地址.   \n* \"V\": 不可偏移的内存操作数.换句话说,任何符合\"m\"约束但不符合\"o\"约束的事物.   \n* \"i\": 允许使用立即数整数（具有恒定值的一个）.这包括符号常量,其值仅在组装时才知道.   \n* \"n\": 允许使用具有已知数值的立即整数操作数.许多系统不能支持小于一字宽的操作数的汇编时常数.这些操作数的约束应使用\"n\"而不是\"i\".  \n* \"g\": 允许使用任何寄存器,内存或立即数整数,但不是通用寄存器的寄存器除外.   \n\n\n\n**其他约束(X86)**   \n\n* \"r\": 寄存器操作数约束,请参见上面给出的表.  \n* \"q\": 注册a,b,c或d.  \n* \"I\": 在0到31范围内的常数（用于32位移位）.  \n* \"J\": 范围0到63中的常数（用于64位移位）.  \n* \"K\": 0xff.  \n* \"L\": 0xffff.  \n* \"M\": 0、1、2或3（用于lea指令的移位）.  \n* \"N\": 在0到255之间的常数（用于out指令）.  \n* \"f\": 浮点寄存器  \n* \"t\": 第一个（栈顶）浮点寄存器  \n* \"u\": 第二个浮点寄存器   \n* \"A\": 指定\"a\"或\"d\"寄存器.这主要用于要返回的64位整数值,其中\"d\"寄存器保存最高有效位,而\"a\"寄存器保存最低有效位.   \n\n\n### Constraint Modifiers  约束修饰符  \n* ```=```: 表示该操作数对于该指令是只写的 先前的值将被丢弃 并由输出数据替换   \n* ```&```: 表示此操作数是早期指令操作数 在使用输入操作数完成指令之前对其进行了修改  因此此操作数不能位于用作输入操作数或任何存储器地址一部分的寄存器中 如果将输入操作数仅用作输入 则在写入早期结果之前 将输入操作数绑定到早期生成器操作数   \n\n## 一些有用的案例   \n\n更多可查看linux源码  \n\n``` C++\n/usr/src/linux/include/asm/*.h\n```\n  \n**两个数相加**  \n\n``` C\nint main(void)\n{\n        int foo = 10, bar = 15;\n        __asm__ __volatile__(\"addl  %%ebx,%%eax\"\n                             :\"=a\"(foo)\n                             :\"a\"(foo), \"b\"(bar)\n                             );\n        printf(\"foo+bar=%d\\n\", foo);\n        return 0;\n}\n```\n\n**原子加法: 要求GCC将foo存储在%eax中, 将bar存储在%ebx中，将结果存储在%eax中**   \n\n```C\n __asm__ __volatile__(\n                      \"   lock       ;\\n\"\n                      \"   addl %1,%0 ;\\n\"\n                      : \"=m\"  (my_var)\n                      : \"ir\"  (my_int), \"m\" (my_var)\n                      :                                 /* no clobber-list */\n                      );\n```\n\n\n\n\n**rawcmpxchg**  \n\n```C\n\t__typeof__(*(ptr)) __ret;\t\n\t__typeof__(*(ptr)) __old = (old);\n\t__typeof__(*(ptr)) __new = (new);\n\t\tvolatile u8 *__ptr = (volatile u8 *)(ptr); \n\t\tasm volatile(lock \"cmpxchgb %2,%1\" \n\t\t\t     : \"=a\" (__ret), \"+m\" (*__ptr) \n\t\t\t     : \"q\" (__new), \"0\" (__old) \n\t\t\t     : \"memory\");\n```\n\n","source":"_posts/2021-04-02-gcc-inline-assembly.md","raw":"---\ntitle: GCC 内联汇编编写  \ndate: 2021-04-02\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n本文阐述了GCC提供的内联汇编功能的使用和用法    \n本文主要为了阐述zperf性能分析器的核心编写逻辑.  \n\n<!-- toc -->  \n\n## 概述   \n\n在这篇文章中, 主要介绍的是(GCC)内联汇编函数的基本格式和用法, 这里先介绍两个基本概念.    \n\n### 内联(inline):  \n在C++中, inline关键字首先是**C++语言层面的修饰符**,  如同static/ const等.   \n该关键字的作用是将函数声明为一个内联(inline)函数: inline关键字作为指示器传递给优化器\"**优先采用函数的内联替换而非进行函数调用**\".    \n> 即内联函数原本的优化目的 不使用控制转移指令跳转到函数体, 而是直接拷贝函数体到发生调用的位置, 从而达到避免函数调用的开销以及传参和返回等开销.    \n\n这里容易产生混淆的地方在于, 该修饰符对于上述优化的指示并非强制,  并且编译器拥有对任何未标注inline的函数的使用内联替换的自由(在编译的优化原则内);  \n也因此在实际的实践中,  **inline关键字对于函数的含义也从'优先内联'实际变成了'容许多次定义'**,  并且该inline关键字在语义上的实际变化也**在C++17得到的标准化的定义和进一步的扩展**,  并进一步扫清了\"header only\"支持的剩余障碍.     \n\n\n### 内联汇编  \n内联汇编提供了在C/C++代码中直接嵌入汇编代码的能力, 其中, 'asm'关键字充当了汇编指令和'C/C++'代码之间的接口.   \n\n<!-- more --> \n\n## GCC汇编基本语法  \n\nGCC 使用AT&T/UNIX汇编语法, 这里主要给出和INTEL的基础差别, 更多详细内容查看对应的汇编手册, 或者[汇编语法和惯例](https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/)   \n\n\n* Source-Destination Ordering 操作数顺序  \n    AT&T语法中操作数的方向与Intel汇编相反; \n    在Intel语法中, 第一个操作数是目标, 第二个操作数是源; 而在AT&T语法中是反过来的.  \n    AT&T 语法: ```Op-code src dst```\n    Intel语法: ```Op-code dst src```   \n    \n\n* 寄存器命名: \n  * 寄存器名称以%为前缀, Intel无前缀.  例如如果使用寄存器```eax```,  AT&T汇编需要写成```%eax```   \n\n* 立即操作数  \n  * AT&T立即数以$为前缀, Intel无前缀   例如 立即数1987 AT&T汇编要写成```$1987```  \n  * 十六进制立即数 AT&T以0x为次前缀,  Intel以h为后缀进行修饰.  例如16进制 0x1987 \n    * AT&T汇编: ```$0x1987```\n    * Intel汇编: ```1987h```\n  \n* 操作数大小  \n  * AT&T语法: 存储操作数的大小由操作码名称的最后一个字符确定, 'b', 'w', 'l' 对应字节码对应8位, 16位,32位.  \n    * 例如: ```movl    %eax, %ebx  ```  \n  * Intel语法: 添加前置修饰符 例如'byte ptr' 'word ptr' 'dword ptr'来实现   \n    * 例如: ```mov         qword ptr [rax+8],0 ```  \n\n* 内存操作数  \n  * AT&T汇编中的语法```segment:displacement(base register, index register, scale factor)```\n  * Intel等效语法  ```segment:[base register + displacement + index register * scale factor]```   \n\n* 简单对比示例如下:  \n\n|      AT&T Code                     |       Intel Code             |\n|------------------------------------|------------------------------|\n|  movl    $1,%eax                   | mov     eax,1                |   \n|  movl    $0xff,%ebx                | mov     ebx,0ffh             |   \n|  int     $0x80                     | int     80h                  |   \n|  movl    %eax, %ebx                | mov     ebx, eax             |\n|  movl    (%ecx),%eax               | mov     eax,[ecx]            |\n|  movl    3(%ebx),%eax              | mov     eax,[ebx+3]          | \n|  movl    0x20(%ebx),%eax           | mov     eax,[ebx+20h]        |\n|  addl    (%ebx,%ecx,0x2),%eax      | add     eax,[ebx+ecx*2h]     |\n|  leal    (%ebx,%ecx),%eax          | lea     eax,[ebx+ecx]        |\n|  subl    -0x20(%ebx,%ecx,0x4),%eax | sub     eax,[ebx+ecx*4h-20h] |\n\n## 基本内联语法  \n\n基本内联汇编的格式非常简单, 基本形式是   \n```C\nasm(\"assembly code\");\n```\n举个例子:  \n```C\nasm(\"movl %ecx %eax\"); /* moves the contents of ecx to eax */\n__asm__(\"movb %bh (%eax)\"); /*moves the byte from bh to the memory pointed by eax */\n```\n关键字```__asm__``` 和```asm```等价, 前者从代码规范上来说一般不容易和逻辑代码冲突(C++03标准开始明确规定__前缀为编译器保留关键字).   \n\n如果我们有多行指令, 则每行用双引号引起来, 并添加指令后缀```\\n\\t```  例如:  \n```C\n __asm__ (\"movl %eax, %ebx\\n\\t\"\n          \"movl $56, %esi\\n\\t\"\n          \"movl %ecx, $label(%edx,%ebx,$4)\\n\\t\"\n          \"movb %ah, (%ebx)\");\n```\n\n以上的汇编编写还存在一个问题, 即编译器对对我们嵌入的汇编代码带来的寄存器修改一无所知,  要么我们避免修改编译器用到的寄存器, 要么在修改前后做好恢复,  因此, 我们通常使用extended asm, 通过指定的规范, 编译器会正确的帮我们处理好这个问题.    \n\n## 扩展汇编:  \n\n在扩展汇编中, 我们可以指定操作数, 包括指定输入寄存器, 指定输出寄存器, 指定会被破坏的寄存器列表;  通过这些指定和规则约束, 编译器则会在汇编生成过程中避免使用到该类寄存器(最坏情况下编译器生成对应的压栈和恢复等操作), 以及对内联汇编选择合适的优化等, 我们则可以把精力放在我们需要关心的逻辑本身上.   \n其基本格式为:   \n```C\nasm ( assembler template \n    : output operands                  /* optional */\n    : input operands                   /* optional */\n    : list of clobbered registers      /* optional */\n    );\n```\n\n\n* assembler template 汇编模版由汇编指令组成; \n* operands 每个操作数由一个 操作数约束 字符串来描述, 后面跟括号中的C表达式.   \n* 使用冒号将汇编程序模版和后面的输出操作数分开, 后面可选operands相同, 如果没有更多内容则可以简略(中间不可省略)   \n* 操作数的总数有限制 (约为10个或者为设备描述的最大个数决定)   \n\n举例如下:  \n```C\nasm (\"cld\\n\\t\"\n    \"rep\\n\\t\"\n    \"stosl\"\n    : /* no output registers */\n    : \"c\" (count), \"a\" (fill_value), \"D\" (dest)\n    : \"%ecx\", \"%edi\" \n    );\n```\n\n\n完整的描述为\n>  输入:  从C/C++的4字节变量fill_value中读取数据存入寄存器%eax, count存入%ecx, dest存储%edi  \n\n>  执行:  \n  > cld使DF复位为0: 设置stosl保存eax值后的偏移方向为自增  \n  > rep指令则重复后续单个指令```(%ecx)```次   \n  > stosl 将eax中的值保存到ES:EDI指向的地址中, 如果DF=0则自增4字节, 如果DF=1(std)则自减4字节. (l后缀为4字节 q为8字节)    \n\n> 输出: 没有输出   \n\n> 破坏清单: 显式声明%ecx和%edi是被修改使用的寄存器    \n\n\n再举个例子: 可变寄存器使用  \n```C\nint a=10, b;\nasm (\"movl %1, %%eax; \n        movl %%eax, %0;\"\n        :\"=r\"(b)        /* output */\n        :\"r\"(a)         /* input */\n        :\"%eax\"         /* clobbered register */\n        );       \n```\n赋值a给b;   \nr 是操作数的约束, 即告诉GCC可以使用任何寄存器.   \neax 需要在这里显式声明   \n\n\n\n### assembler template 汇编模板  \n汇编器模板包含插入到C程序内部的汇编指令集  \n格式如下:  \n* 每条汇编指令都应该用双引号引起来 或者整个指令组都应该用双引号引起来  \n* 每条汇编指令还应以定界符结尾: \n  * 有效的定界符是换行符(\\n)和分号(;);  \n  * '\\n'后可以跟一个制表符'\\t' \n  * **与C/C++表达式相对应的操作数**由%0, %1 ...等表示   \n  \n\n### operands 操作数  \nC/C++表达式用作'asm'中汇编指令的操作数  \n* 每个操作数首先被写成双引号中的操作数约束(operand constraint), 对于输出操作数还有一个约束修饰符'='  \n* 然后后面跟随代表操作数的C/C++表达式  \n* \"约束 constraint\" 主要用于确定操作数的寻址模式, 还用于指定要使用的寄存器.  (文后有对应常用constraint的表格)   \n* 如果使用多个操作数, 以逗号','分隔   \n* 在汇编模版中, 每个操作数均由数字引用. 编号方法如下: 如果一共有N个操作数, 包括输入和输出, 也包括指定寄存器, 第一个为0, 按书写顺序递增;   \n* 输出操作数表达式必须为左值  输入操作数不受此限制  \n* 在输入输出中出现的寄存器属于隐式破坏声明, 不比添加到破坏清单内.  \n\n举几个例子:   \n将数字乘以5  \n```C\nasm (\"leal (%1,%1,4), %0\"\n        : \"=r\" (five_times_x)\n        : \"r\" (x) \n        );\n```\n\n输入和输出使用同一个寄存器(数字约束)\n```C\nasm (\"leal (%0,%0,4), %0\"\n        : \"=r\" (five_times_x)\n        : \"0\" (x) \n        );\n```\n\n输入输出使用同一寄存器并指定  \n```C\n        asm (\"leal (%%ecx,%%ecx,4), %%ecx\"\n             : \"=c\" (x)\n             : \"c\" (x) \n             );\n```\n\n\n### clobber-list 破坏清单  \n\n我们必须在clobber-list中列出那些可能被指令破坏的寄存器   即asm函数中第三个':'之后的字段   \n其目的是为了通知gcc我们将自己使用和修改它们 因此gcc不会假定它加载到这些寄存器中的值将是有效的.   \n在这里不需要也不应该列出输入和输出寄存器, 因为gcc'知道'. 而在汇编模版中的汇编指令隐式或者显式使用了其他寄存器 则必须在此列出.   \n如果我们的指令不可预测的方式修改了内存, 那么需要在clobber-list中添加'memory'.  gcc将不能在整个汇编程序中将内存缓存到寄存器中;   \n如果受影响的内存未在输入和输出中列出, 那么我们还必须添加volatile关键字.   \n如果指令可能更改了条件代码寄存器CCR 那么需要添加'cc'  \n\n### __volatile__  \n```C\n__asm__ __volatile__ ( ... : ... : ... : ...);\n__asm__ __volatile__ ( ... : ... : ... : ...);\n```\n\n如果汇编语句必须在放置它的位置执行 (即 为了优化而不能从循环中移出), 则将关键字volatile放在asm之后和()之前   \n如果不是确定需要volatile则不要添加, 因为会损失一些可能的性能上的优化   \n\n\n## constraints  约束  \n约束可以说明操作数是否可以在寄存器中, 以及哪种寄存器;   \n该操作数是否可以是一个内存引用, 以及哪种地址;  \n操作数是否可以是立即数常量, 以及它可能具有哪些可能的值(即值的范围)等等   \n\n### 常用约束   \n```\nasm (\"movl %%eax, %0\\n\" :\"=r\"(myval));\n```\n**当指定\"r\"约束时, gcc可以将变量保留在任何可用的GPR中. 要指定寄存器, 必须使用特定的寄存器约束直接指定寄存器名称 如下表:**   \n\n| r |    Register(s)     |\n|---|--------------------|\n| a |   %eax, %ax, %al   |\n| b |   %ebx, %bx, %bl   |\n| c |   %ecx, %cx, %cl   |\n| d |   %edx, %dx, %dl   |\n| S |   %esi, %si        |\n| D |   %edi, %di        |\n\n\n**内存操作数约束(m)**  \n当操作数在内存中时, 对它们执行的任何操作都将直接在内存位置发生, 这与寄存器约束相反;  \n后者首先将值存储在要修改的寄存器中, 然后将其写回到内存位置  \n通常仅在绝对必要的指令约束条件下使用该寄存器约束条件,  因为寄存器约束会加快处理速度  \n如果需要在asm内部更新C变量, 并且确实不想使用寄存器来保存其值, 则可以最有效地使用内存约束.   \n例如 值存储在内存位置loc中:  \n```\nasm(\"sidt %0\\n\" : :\"m\"(loc));\n```\n\n**Matching(Digit) constraints 数字约束**  \n\n在某些情况下, 单个变量既可以用作输入操作数, 也可以用作输出操作数   \n可以通过使用匹配约束在asm中指定此类情况  \n```\nasm (\"incl %0\" :\"=a\"(var):\"0\"(var));\n```\n\n为了匹配约束, 将寄存器%eax用作输入和输出变量   \n将var输入读取到%eax, 并在递增后将更新的%eax再次存储在var中   \n这里的0指定与第0个输出变量相同的约束   \n也就是说 它指定var的输出实例应仅存储在%eax中  \n\n* 从变量读取输入或修改变量并将修改写回到同一变量的情况  \n* 在不需要输入和输出操作数的单独实例的情况下   \n* 使用匹配约束的最重要作用是它们导致有效使用可用寄存器   \n\n**其他约束**   \n* \"m\": 允许使用内存操作数,该内存操作数通常具有机器支持的任何类型的地址.  \n* \"o\": 允许使用内存操作数,但前提是该地址是可偏移的.也就是说,在地址上加上一个小的偏移量就可以得到一个有效的地址.   \n* \"V\": 不可偏移的内存操作数.换句话说,任何符合\"m\"约束但不符合\"o\"约束的事物.   \n* \"i\": 允许使用立即数整数（具有恒定值的一个）.这包括符号常量,其值仅在组装时才知道.   \n* \"n\": 允许使用具有已知数值的立即整数操作数.许多系统不能支持小于一字宽的操作数的汇编时常数.这些操作数的约束应使用\"n\"而不是\"i\".  \n* \"g\": 允许使用任何寄存器,内存或立即数整数,但不是通用寄存器的寄存器除外.   \n\n\n\n**其他约束(X86)**   \n\n* \"r\": 寄存器操作数约束,请参见上面给出的表.  \n* \"q\": 注册a,b,c或d.  \n* \"I\": 在0到31范围内的常数（用于32位移位）.  \n* \"J\": 范围0到63中的常数（用于64位移位）.  \n* \"K\": 0xff.  \n* \"L\": 0xffff.  \n* \"M\": 0、1、2或3（用于lea指令的移位）.  \n* \"N\": 在0到255之间的常数（用于out指令）.  \n* \"f\": 浮点寄存器  \n* \"t\": 第一个（栈顶）浮点寄存器  \n* \"u\": 第二个浮点寄存器   \n* \"A\": 指定\"a\"或\"d\"寄存器.这主要用于要返回的64位整数值,其中\"d\"寄存器保存最高有效位,而\"a\"寄存器保存最低有效位.   \n\n\n### Constraint Modifiers  约束修饰符  \n* ```=```: 表示该操作数对于该指令是只写的 先前的值将被丢弃 并由输出数据替换   \n* ```&```: 表示此操作数是早期指令操作数 在使用输入操作数完成指令之前对其进行了修改  因此此操作数不能位于用作输入操作数或任何存储器地址一部分的寄存器中 如果将输入操作数仅用作输入 则在写入早期结果之前 将输入操作数绑定到早期生成器操作数   \n\n## 一些有用的案例   \n\n更多可查看linux源码  \n\n``` C++\n/usr/src/linux/include/asm/*.h\n```\n  \n**两个数相加**  \n\n``` C\nint main(void)\n{\n        int foo = 10, bar = 15;\n        __asm__ __volatile__(\"addl  %%ebx,%%eax\"\n                             :\"=a\"(foo)\n                             :\"a\"(foo), \"b\"(bar)\n                             );\n        printf(\"foo+bar=%d\\n\", foo);\n        return 0;\n}\n```\n\n**原子加法: 要求GCC将foo存储在%eax中, 将bar存储在%ebx中，将结果存储在%eax中**   \n\n```C\n __asm__ __volatile__(\n                      \"   lock       ;\\n\"\n                      \"   addl %1,%0 ;\\n\"\n                      : \"=m\"  (my_var)\n                      : \"ir\"  (my_int), \"m\" (my_var)\n                      :                                 /* no clobber-list */\n                      );\n```\n\n\n\n\n**rawcmpxchg**  \n\n```C\n\t__typeof__(*(ptr)) __ret;\t\n\t__typeof__(*(ptr)) __old = (old);\n\t__typeof__(*(ptr)) __new = (new);\n\t\tvolatile u8 *__ptr = (volatile u8 *)(ptr); \n\t\tasm volatile(lock \"cmpxchgb %2,%1\" \n\t\t\t     : \"=a\" (__ret), \"+m\" (*__ptr) \n\t\t\t     : \"q\" (__new), \"0\" (__old) \n\t\t\t     : \"memory\");\n```\n\n","slug":"2021-04-02-gcc-inline-assembly","published":1,"updated":"2021-04-02T14:57:41.781Z","_id":"ckn0f8la50000ug5h0hnacywt","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本文阐述了GCC提供的内联汇编功能的使用和用法<br>本文主要为了阐述zperf性能分析器的核心编写逻辑.</p>\n<!-- toc -->\n\n<ul>\n<li><a href=\"#概述\">概述</a><ul>\n<li><a href=\"#内联inline\">内联(inline):</a></li>\n<li><a href=\"#内联汇编\">内联汇编</a></li>\n</ul>\n</li>\n<li><a href=\"#gcc汇编基本语法\">GCC汇编基本语法</a></li>\n<li><a href=\"#基本内联语法\">基本内联语法</a></li>\n<li><a href=\"#扩展汇编\">扩展汇编:</a><ul>\n<li><a href=\"#assembler-template-汇编模板\">assembler template 汇编模板</a></li>\n<li><a href=\"#operands-操作数\">operands 操作数</a></li>\n<li><a href=\"#clobber-list-破坏清单\">clobber-list 破坏清单</a></li>\n<li><a href=\"#__volatile__\"><strong>volatile</strong></a></li>\n</ul>\n</li>\n<li><a href=\"#constraints-约束\">constraints 约束</a><ul>\n<li><a href=\"#常用约束\">常用约束</a></li>\n<li><a href=\"#constraint-modifiers-约束修饰符\">Constraint Modifiers  约束修饰符</a></li>\n</ul>\n</li>\n<li><a href=\"#一些有用的案例\">一些有用的案例</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2><span id=\"概述\">概述</span></h2><p>在这篇文章中, 主要介绍的是(GCC)内联汇编函数的基本格式和用法, 这里先介绍两个基本概念.    </p>\n<h3><span id=\"内联inline\">内联(inline):</span></h3><p>在C++中, inline关键字首先是<strong>C++语言层面的修饰符</strong>,  如同static/ const等.<br>该关键字的作用是将函数声明为一个内联(inline)函数: inline关键字作为指示器传递给优化器”<strong>优先采用函数的内联替换而非进行函数调用</strong>“.    </p>\n<blockquote>\n<p>即内联函数原本的优化目的 不使用控制转移指令跳转到函数体, 而是直接拷贝函数体到发生调用的位置, 从而达到避免函数调用的开销以及传参和返回等开销.    </p>\n</blockquote>\n<p>这里容易产生混淆的地方在于, 该修饰符对于上述优化的指示并非强制,  并且编译器拥有对任何未标注inline的函数的使用内联替换的自由(在编译的优化原则内);<br>也因此在实际的实践中,  <strong>inline关键字对于函数的含义也从’优先内联’实际变成了’容许多次定义’</strong>,  并且该inline关键字在语义上的实际变化也<strong>在C++17得到的标准化的定义和进一步的扩展</strong>,  并进一步扫清了”header only”支持的剩余障碍.     </p>\n<h3><span id=\"内联汇编\">内联汇编</span></h3><p>内联汇编提供了在C/C++代码中直接嵌入汇编代码的能力, 其中, ‘asm’关键字充当了汇编指令和’C/C++’代码之间的接口.   </p>\n<a id=\"more\"></a> \n\n<h2><span id=\"gcc汇编基本语法\">GCC汇编基本语法</span></h2><p>GCC 使用AT&amp;T/UNIX汇编语法, 这里主要给出和INTEL的基础差别, 更多详细内容查看对应的汇编手册, 或者<a href=\"https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/\">汇编语法和惯例</a>   </p>\n<ul>\n<li>Source-Destination Ordering 操作数顺序<br>  AT&amp;T语法中操作数的方向与Intel汇编相反;<br>  在Intel语法中, 第一个操作数是目标, 第二个操作数是源; 而在AT&amp;T语法中是反过来的.<br>  AT&amp;T 语法: <code>Op-code src dst</code><br>  Intel语法: <code>Op-code dst src</code>   </li>\n</ul>\n<ul>\n<li><p>寄存器命名: </p>\n<ul>\n<li>寄存器名称以%为前缀, Intel无前缀.  例如如果使用寄存器<code>eax</code>,  AT&amp;T汇编需要写成<code>%eax</code>   </li>\n</ul>\n</li>\n<li><p>立即操作数  </p>\n<ul>\n<li>AT&amp;T立即数以$为前缀, Intel无前缀   例如 立即数1987 AT&amp;T汇编要写成<code>$1987</code>  </li>\n<li>十六进制立即数 AT&amp;T以0x为次前缀,  Intel以h为后缀进行修饰.  例如16进制 0x1987 <ul>\n<li>AT&amp;T汇编: <code>$0x1987</code></li>\n<li>Intel汇编: <code>1987h</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作数大小  </p>\n<ul>\n<li>AT&amp;T语法: 存储操作数的大小由操作码名称的最后一个字符确定, ‘b’, ‘w’, ‘l’ 对应字节码对应8位, 16位,32位.  <ul>\n<li>例如: <code>movl    %eax, %ebx</code>  </li>\n</ul>\n</li>\n<li>Intel语法: 添加前置修饰符 例如’byte ptr’ ‘word ptr’ ‘dword ptr’来实现   <ul>\n<li>例如: <code>mov         qword ptr [rax+8],0</code>  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内存操作数  </p>\n<ul>\n<li>AT&amp;T汇编中的语法<code>segment:displacement(base register, index register, scale factor)</code></li>\n<li>Intel等效语法  <code>segment:[base register + displacement + index register * scale factor]</code>   </li>\n</ul>\n</li>\n<li><p>简单对比示例如下:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T Code</th>\n<th>Intel Code</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movl    $1,%eax</td>\n<td>mov     eax,1</td>\n</tr>\n<tr>\n<td>movl    $0xff,%ebx</td>\n<td>mov     ebx,0ffh</td>\n</tr>\n<tr>\n<td>int     $0x80</td>\n<td>int     80h</td>\n</tr>\n<tr>\n<td>movl    %eax, %ebx</td>\n<td>mov     ebx, eax</td>\n</tr>\n<tr>\n<td>movl    (%ecx),%eax</td>\n<td>mov     eax,[ecx]</td>\n</tr>\n<tr>\n<td>movl    3(%ebx),%eax</td>\n<td>mov     eax,[ebx+3]</td>\n</tr>\n<tr>\n<td>movl    0x20(%ebx),%eax</td>\n<td>mov     eax,[ebx+20h]</td>\n</tr>\n<tr>\n<td>addl    (%ebx,%ecx,0x2),%eax</td>\n<td>add     eax,[ebx+ecx*2h]</td>\n</tr>\n<tr>\n<td>leal    (%ebx,%ecx),%eax</td>\n<td>lea     eax,[ebx+ecx]</td>\n</tr>\n<tr>\n<td>subl    -0x20(%ebx,%ecx,0x4),%eax</td>\n<td>sub     eax,[ebx+ecx*4h-20h]</td>\n</tr>\n</tbody></table>\n<h2><span id=\"基本内联语法\">基本内联语法</span></h2><p>基本内联汇编的格式非常简单, 基本形式是   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span>(<span class=\"string\">\"assembly code\"</span>);</span><br></pre></td></tr></table></figure>\n<p>举个例子:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span>(<span class=\"string\">\"movl %ecx %eax\"</span>); <span class=\"comment\">/* moves the contents of ecx to eax */</span></span><br><span class=\"line\">__asm__(<span class=\"string\">\"movb %bh (%eax)\"</span>); <span class=\"comment\">/*moves the byte from bh to the memory pointed by eax */</span></span><br></pre></td></tr></table></figure>\n<p>关键字<code>__asm__</code> 和<code>asm</code>等价, 前者从代码规范上来说一般不容易和逻辑代码冲突(C++03标准开始明确规定__前缀为编译器保留关键字).   </p>\n<p>如果我们有多行指令, 则每行用双引号引起来, 并添加指令后缀<code>\\n\\t</code>  例如:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ (<span class=\"string\">\"movl %eax, %ebx\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movl $56, %esi\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movl %ecx, $label(%edx,%ebx,$4)\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movb %ah, (%ebx)\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上的汇编编写还存在一个问题, 即编译器对对我们嵌入的汇编代码带来的寄存器修改一无所知,  要么我们避免修改编译器用到的寄存器, 要么在修改前后做好恢复,  因此, 我们通常使用extended asm, 通过指定的规范, 编译器会正确的帮我们处理好这个问题.    </p>\n<h2><span id=\"扩展汇编\">扩展汇编:</span></h2><p>在扩展汇编中, 我们可以指定操作数, 包括指定输入寄存器, 指定输出寄存器, 指定会被破坏的寄存器列表;  通过这些指定和规则约束, 编译器则会在汇编生成过程中避免使用到该类寄存器(最坏情况下编译器生成对应的压栈和恢复等操作), 以及对内联汇编选择合适的优化等, 我们则可以把精力放在我们需要关心的逻辑本身上.<br>其基本格式为:   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> ( assembler <span class=\"keyword\">template</span> </span><br><span class=\"line\">    : output operands                  <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    : input operands                   <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    : <span class=\"built_in\">list</span> of clobbered registers      <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>assembler template 汇编模版由汇编指令组成; </li>\n<li>operands 每个操作数由一个 操作数约束 字符串来描述, 后面跟括号中的C表达式.   </li>\n<li>使用冒号将汇编程序模版和后面的输出操作数分开, 后面可选operands相同, 如果没有更多内容则可以简略(中间不可省略)   </li>\n<li>操作数的总数有限制 (约为10个或者为设备描述的最大个数决定)   </li>\n</ul>\n<p>举例如下:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"cld\\n\\t\"</span></span><br><span class=\"line\">    <span class=\"string\">\"rep\\n\\t\"</span></span><br><span class=\"line\">    <span class=\"string\">\"stosl\"</span></span><br><span class=\"line\">    : <span class=\"comment\">/* no output registers */</span></span><br><span class=\"line\">    : <span class=\"string\">\"c\"</span> (count), <span class=\"string\">\"a\"</span> (fill_value), <span class=\"string\">\"D\"</span> (dest)</span><br><span class=\"line\">    : <span class=\"string\">\"%ecx\"</span>, <span class=\"string\">\"%edi\"</span> </span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<p>完整的描述为</p>\n<blockquote>\n<p> 输入:  从C/C++的4字节变量fill_value中读取数据存入寄存器%eax, count存入%ecx, dest存储%edi  </p>\n</blockquote>\n<blockquote>\n<p> 执行:<br>cld使DF复位为0: 设置stosl保存eax值后的偏移方向为自增<br>rep指令则重复后续单个指令<code>(%ecx)</code>次<br>stosl 将eax中的值保存到ES:EDI指向的地址中, 如果DF=0则自增4字节, 如果DF=1(std)则自减4字节. (l后缀为4字节 q为8字节)    </p>\n</blockquote>\n<blockquote>\n<p>输出: 没有输出   </p>\n</blockquote>\n<blockquote>\n<p>破坏清单: 显式声明%ecx和%edi是被修改使用的寄存器    </p>\n</blockquote>\n<p>再举个例子: 可变寄存器使用  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>, b;</span><br><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"movl %1, %%eax; </span></span><br><span class=\"line\"><span class=\"string\">        movl %%eax, %0;\"</span></span><br><span class=\"line\">        :<span class=\"string\">\"=r\"</span>(b)        <span class=\"comment\">/* output */</span></span><br><span class=\"line\">        :<span class=\"string\">\"r\"</span>(a)         <span class=\"comment\">/* input */</span></span><br><span class=\"line\">        :<span class=\"string\">\"%eax\"</span>         <span class=\"comment\">/* clobbered register */</span></span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n<p>赋值a给b;<br>r 是操作数的约束, 即告诉GCC可以使用任何寄存器.<br>eax 需要在这里显式声明   </p>\n<h3><span id=\"assembler-template-汇编模板\">assembler template 汇编模板</span></h3><p>汇编器模板包含插入到C程序内部的汇编指令集<br>格式如下:  </p>\n<ul>\n<li>每条汇编指令都应该用双引号引起来 或者整个指令组都应该用双引号引起来  </li>\n<li>每条汇编指令还应以定界符结尾: <ul>\n<li>有效的定界符是换行符(\\n)和分号(;);  </li>\n<li>‘\\n’后可以跟一个制表符’\\t’ </li>\n<li><strong>与C/C++表达式相对应的操作数</strong>由%0, %1 …等表示   </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"operands-操作数\">operands 操作数</span></h3><p>C/C++表达式用作’asm’中汇编指令的操作数  </p>\n<ul>\n<li>每个操作数首先被写成双引号中的操作数约束(operand constraint), 对于输出操作数还有一个约束修饰符’=’  </li>\n<li>然后后面跟随代表操作数的C/C++表达式  </li>\n<li>“约束 constraint” 主要用于确定操作数的寻址模式, 还用于指定要使用的寄存器.  (文后有对应常用constraint的表格)   </li>\n<li>如果使用多个操作数, 以逗号’,’分隔   </li>\n<li>在汇编模版中, 每个操作数均由数字引用. 编号方法如下: 如果一共有N个操作数, 包括输入和输出, 也包括指定寄存器, 第一个为0, 按书写顺序递增;   </li>\n<li>输出操作数表达式必须为左值  输入操作数不受此限制  </li>\n<li>在输入输出中出现的寄存器属于隐式破坏声明, 不比添加到破坏清单内.  </li>\n</ul>\n<p>举几个例子:<br>将数字乘以5  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%1,%1,4), %0\"</span></span><br><span class=\"line\">        : <span class=\"string\">\"=r\"</span> (five_times_x)</span><br><span class=\"line\">        : <span class=\"string\">\"r\"</span> (x) </span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<p>输入和输出使用同一个寄存器(数字约束)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%0,%0,4), %0\"</span></span><br><span class=\"line\">        : <span class=\"string\">\"=r\"</span> (five_times_x)</span><br><span class=\"line\">        : <span class=\"string\">\"0\"</span> (x) </span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<p>输入输出使用同一寄存器并指定  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%%ecx,%%ecx,4), %%ecx\"</span></span><br><span class=\"line\">     : <span class=\"string\">\"=c\"</span> (x)</span><br><span class=\"line\">     : <span class=\"string\">\"c\"</span> (x) </span><br><span class=\"line\">     );</span><br></pre></td></tr></table></figure>\n\n\n<h3><span id=\"clobber-list-破坏清单\">clobber-list 破坏清单</span></h3><p>我们必须在clobber-list中列出那些可能被指令破坏的寄存器   即asm函数中第三个’:’之后的字段<br>其目的是为了通知gcc我们将自己使用和修改它们 因此gcc不会假定它加载到这些寄存器中的值将是有效的.<br>在这里不需要也不应该列出输入和输出寄存器, 因为gcc’知道’. 而在汇编模版中的汇编指令隐式或者显式使用了其他寄存器 则必须在此列出.<br>如果我们的指令不可预测的方式修改了内存, 那么需要在clobber-list中添加’memory’.  gcc将不能在整个汇编程序中将内存缓存到寄存器中;<br>如果受影响的内存未在输入和输出中列出, 那么我们还必须添加volatile关键字.<br>如果指令可能更改了条件代码寄存器CCR 那么需要添加’cc’  </p>\n<h3><span id=\"volatile\"><strong>volatile</strong></span></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ __volatile__ ( ... : ... : ... : ...);</span><br><span class=\"line\">__asm__ __volatile__ ( ... : ... : ... : ...);</span><br></pre></td></tr></table></figure>\n\n<p>如果汇编语句必须在放置它的位置执行 (即 为了优化而不能从循环中移出), 则将关键字volatile放在asm之后和()之前<br>如果不是确定需要volatile则不要添加, 因为会损失一些可能的性能上的优化   </p>\n<h2><span id=\"constraints-约束\">constraints  约束</span></h2><p>约束可以说明操作数是否可以在寄存器中, 以及哪种寄存器;<br>该操作数是否可以是一个内存引用, 以及哪种地址;<br>操作数是否可以是立即数常量, 以及它可能具有哪些可能的值(即值的范围)等等   </p>\n<h3><span id=\"常用约束\">常用约束</span></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm (&quot;movl %%eax, %0\\n&quot; :&quot;&#x3D;r&quot;(myval));</span><br></pre></td></tr></table></figure>\n<p><strong>当指定”r”约束时, gcc可以将变量保留在任何可用的GPR中. 要指定寄存器, 必须使用特定的寄存器约束直接指定寄存器名称 如下表:</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>r</th>\n<th>Register(s)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>%eax, %ax, %al</td>\n</tr>\n<tr>\n<td>b</td>\n<td>%ebx, %bx, %bl</td>\n</tr>\n<tr>\n<td>c</td>\n<td>%ecx, %cx, %cl</td>\n</tr>\n<tr>\n<td>d</td>\n<td>%edx, %dx, %dl</td>\n</tr>\n<tr>\n<td>S</td>\n<td>%esi, %si</td>\n</tr>\n<tr>\n<td>D</td>\n<td>%edi, %di</td>\n</tr>\n</tbody></table>\n<p><strong>内存操作数约束(m)</strong><br>当操作数在内存中时, 对它们执行的任何操作都将直接在内存位置发生, 这与寄存器约束相反;<br>后者首先将值存储在要修改的寄存器中, 然后将其写回到内存位置<br>通常仅在绝对必要的指令约束条件下使用该寄存器约束条件,  因为寄存器约束会加快处理速度<br>如果需要在asm内部更新C变量, 并且确实不想使用寄存器来保存其值, 则可以最有效地使用内存约束.<br>例如 值存储在内存位置loc中:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm(&quot;sidt %0\\n&quot; : :&quot;m&quot;(loc));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matching(Digit) constraints 数字约束</strong>  </p>\n<p>在某些情况下, 单个变量既可以用作输入操作数, 也可以用作输出操作数<br>可以通过使用匹配约束在asm中指定此类情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm (&quot;incl %0&quot; :&quot;&#x3D;a&quot;(var):&quot;0&quot;(var));</span><br></pre></td></tr></table></figure>\n\n<p>为了匹配约束, 将寄存器%eax用作输入和输出变量<br>将var输入读取到%eax, 并在递增后将更新的%eax再次存储在var中<br>这里的0指定与第0个输出变量相同的约束<br>也就是说 它指定var的输出实例应仅存储在%eax中  </p>\n<ul>\n<li>从变量读取输入或修改变量并将修改写回到同一变量的情况  </li>\n<li>在不需要输入和输出操作数的单独实例的情况下   </li>\n<li>使用匹配约束的最重要作用是它们导致有效使用可用寄存器   </li>\n</ul>\n<p><strong>其他约束</strong>   </p>\n<ul>\n<li>“m”: 允许使用内存操作数,该内存操作数通常具有机器支持的任何类型的地址.  </li>\n<li>“o”: 允许使用内存操作数,但前提是该地址是可偏移的.也就是说,在地址上加上一个小的偏移量就可以得到一个有效的地址.   </li>\n<li>“V”: 不可偏移的内存操作数.换句话说,任何符合”m”约束但不符合”o”约束的事物.   </li>\n<li>“i”: 允许使用立即数整数（具有恒定值的一个）.这包括符号常量,其值仅在组装时才知道.   </li>\n<li>“n”: 允许使用具有已知数值的立即整数操作数.许多系统不能支持小于一字宽的操作数的汇编时常数.这些操作数的约束应使用”n”而不是”i”.  </li>\n<li>“g”: 允许使用任何寄存器,内存或立即数整数,但不是通用寄存器的寄存器除外.   </li>\n</ul>\n<p><strong>其他约束(X86)</strong>   </p>\n<ul>\n<li>“r”: 寄存器操作数约束,请参见上面给出的表.  </li>\n<li>“q”: 注册a,b,c或d.  </li>\n<li>“I”: 在0到31范围内的常数（用于32位移位）.  </li>\n<li>“J”: 范围0到63中的常数（用于64位移位）.  </li>\n<li>“K”: 0xff.  </li>\n<li>“L”: 0xffff.  </li>\n<li>“M”: 0、1、2或3（用于lea指令的移位）.  </li>\n<li>“N”: 在0到255之间的常数（用于out指令）.  </li>\n<li>“f”: 浮点寄存器  </li>\n<li>“t”: 第一个（栈顶）浮点寄存器  </li>\n<li>“u”: 第二个浮点寄存器   </li>\n<li>“A”: 指定”a”或”d”寄存器.这主要用于要返回的64位整数值,其中”d”寄存器保存最高有效位,而”a”寄存器保存最低有效位.   </li>\n</ul>\n<h3><span id=\"constraint-modifiers-约束修饰符\">Constraint Modifiers  约束修饰符</span></h3><ul>\n<li><code>=</code>: 表示该操作数对于该指令是只写的 先前的值将被丢弃 并由输出数据替换   </li>\n<li><code>&amp;</code>: 表示此操作数是早期指令操作数 在使用输入操作数完成指令之前对其进行了修改  因此此操作数不能位于用作输入操作数或任何存储器地址一部分的寄存器中 如果将输入操作数仅用作输入 则在写入早期结果之前 将输入操作数绑定到早期生成器操作数   </li>\n</ul>\n<h2><span id=\"一些有用的案例\">一些有用的案例</span></h2><p>更多可查看linux源码  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/src/linux/include/<span class=\"keyword\">asm</span><span class=\"comment\">/*.h</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>两个数相加</strong>  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> foo = <span class=\"number\">10</span>, bar = <span class=\"number\">15</span>;</span><br><span class=\"line\">        __asm__ __volatile__(<span class=\"string\">\"addl  %%ebx,%%eax\"</span></span><br><span class=\"line\">                             :<span class=\"string\">\"=a\"</span>(foo)</span><br><span class=\"line\">                             :<span class=\"string\">\"a\"</span>(foo), <span class=\"string\">\"b\"</span>(bar)</span><br><span class=\"line\">                             );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo+bar=%d\\n\"</span>, foo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>原子加法: 要求GCC将foo存储在%eax中, 将bar存储在%ebx中，将结果存储在%eax中</strong>   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ __volatile__(</span><br><span class=\"line\">                     <span class=\"string\">\"   lock       ;\\n\"</span></span><br><span class=\"line\">                     <span class=\"string\">\"   addl %1,%0 ;\\n\"</span></span><br><span class=\"line\">                     : <span class=\"string\">\"=m\"</span>  (my_var)</span><br><span class=\"line\">                     : <span class=\"string\">\"ir\"</span>  (my_int), <span class=\"string\">\"m\"</span> (my_var)</span><br><span class=\"line\">                     :                                 <span class=\"comment\">/* no clobber-list */</span></span><br><span class=\"line\">                     );</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>rawcmpxchg</strong>  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__typeof__(*(ptr)) __ret;\t</span><br><span class=\"line\">__typeof__(*(ptr)) __old = (old);</span><br><span class=\"line\">__typeof__(*(ptr)) __new = (<span class=\"keyword\">new</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> u8 *__ptr = (<span class=\"keyword\">volatile</span> u8 *)(ptr); </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">asm</span> <span class=\"title\">volatile</span><span class=\"params\">(lock <span class=\"string\">\"cmpxchgb %2,%1\"</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"=a\"</span> (__ret), <span class=\"string\">\"+m\"</span> (*__ptr) </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"q\"</span> (__new), <span class=\"string\">\"0\"</span> (__old) </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"memory\"</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>本文阐述了GCC提供的内联汇编功能的使用和用法<br>本文主要为了阐述zperf性能分析器的核心编写逻辑.</p>\n<!-- toc -->\n\n<ul>\n<li><a href=\"#概述\">概述</a><ul>\n<li><a href=\"#内联inline\">内联(inline):</a></li>\n<li><a href=\"#内联汇编\">内联汇编</a></li>\n</ul>\n</li>\n<li><a href=\"#gcc汇编基本语法\">GCC汇编基本语法</a></li>\n<li><a href=\"#基本内联语法\">基本内联语法</a></li>\n<li><a href=\"#扩展汇编\">扩展汇编:</a><ul>\n<li><a href=\"#assembler-template-汇编模板\">assembler template 汇编模板</a></li>\n<li><a href=\"#operands-操作数\">operands 操作数</a></li>\n<li><a href=\"#clobber-list-破坏清单\">clobber-list 破坏清单</a></li>\n<li><a href=\"#__volatile__\"><strong>volatile</strong></a></li>\n</ul>\n</li>\n<li><a href=\"#constraints-约束\">constraints 约束</a><ul>\n<li><a href=\"#常用约束\">常用约束</a></li>\n<li><a href=\"#constraint-modifiers-约束修饰符\">Constraint Modifiers  约束修饰符</a></li>\n</ul>\n</li>\n<li><a href=\"#一些有用的案例\">一些有用的案例</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>在这篇文章中, 主要介绍的是(GCC)内联汇编函数的基本格式和用法, 这里先介绍两个基本概念.    </p>\n<h3 id=\"内联-inline\"><a href=\"#内联-inline\" class=\"headerlink\" title=\"内联(inline):\"></a>内联(inline):</h3><p>在C++中, inline关键字首先是<strong>C++语言层面的修饰符</strong>,  如同static/ const等.<br>该关键字的作用是将函数声明为一个内联(inline)函数: inline关键字作为指示器传递给优化器”<strong>优先采用函数的内联替换而非进行函数调用</strong>“.    </p>\n<blockquote>\n<p>即内联函数原本的优化目的 不使用控制转移指令跳转到函数体, 而是直接拷贝函数体到发生调用的位置, 从而达到避免函数调用的开销以及传参和返回等开销.    </p>\n</blockquote>\n<p>这里容易产生混淆的地方在于, 该修饰符对于上述优化的指示并非强制,  并且编译器拥有对任何未标注inline的函数的使用内联替换的自由(在编译的优化原则内);<br>也因此在实际的实践中,  <strong>inline关键字对于函数的含义也从’优先内联’实际变成了’容许多次定义’</strong>,  并且该inline关键字在语义上的实际变化也<strong>在C++17得到的标准化的定义和进一步的扩展</strong>,  并进一步扫清了”header only”支持的剩余障碍.     </p>\n<h3 id=\"内联汇编\"><a href=\"#内联汇编\" class=\"headerlink\" title=\"内联汇编\"></a>内联汇编</h3><p>内联汇编提供了在C/C++代码中直接嵌入汇编代码的能力, 其中, ‘asm’关键字充当了汇编指令和’C/C++’代码之间的接口.   </p>","more":"<h2 id=\"GCC汇编基本语法\"><a href=\"#GCC汇编基本语法\" class=\"headerlink\" title=\"GCC汇编基本语法\"></a>GCC汇编基本语法</h2><p>GCC 使用AT&amp;T/UNIX汇编语法, 这里主要给出和INTEL的基础差别, 更多详细内容查看对应的汇编手册, 或者<a href=\"https://zsummer.github.io/2019/12/11/2019-12-11-asm-syntax/\">汇编语法和惯例</a>   </p>\n<ul>\n<li>Source-Destination Ordering 操作数顺序<br>  AT&amp;T语法中操作数的方向与Intel汇编相反;<br>  在Intel语法中, 第一个操作数是目标, 第二个操作数是源; 而在AT&amp;T语法中是反过来的.<br>  AT&amp;T 语法: <code>Op-code src dst</code><br>  Intel语法: <code>Op-code dst src</code>   </li>\n</ul>\n<ul>\n<li><p>寄存器命名: </p>\n<ul>\n<li>寄存器名称以%为前缀, Intel无前缀.  例如如果使用寄存器<code>eax</code>,  AT&amp;T汇编需要写成<code>%eax</code>   </li>\n</ul>\n</li>\n<li><p>立即操作数  </p>\n<ul>\n<li>AT&amp;T立即数以$为前缀, Intel无前缀   例如 立即数1987 AT&amp;T汇编要写成<code>$1987</code>  </li>\n<li>十六进制立即数 AT&amp;T以0x为次前缀,  Intel以h为后缀进行修饰.  例如16进制 0x1987 <ul>\n<li>AT&amp;T汇编: <code>$0x1987</code></li>\n<li>Intel汇编: <code>1987h</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作数大小  </p>\n<ul>\n<li>AT&amp;T语法: 存储操作数的大小由操作码名称的最后一个字符确定, ‘b’, ‘w’, ‘l’ 对应字节码对应8位, 16位,32位.  <ul>\n<li>例如: <code>movl    %eax, %ebx</code>  </li>\n</ul>\n</li>\n<li>Intel语法: 添加前置修饰符 例如’byte ptr’ ‘word ptr’ ‘dword ptr’来实现   <ul>\n<li>例如: <code>mov         qword ptr [rax+8],0</code>  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内存操作数  </p>\n<ul>\n<li>AT&amp;T汇编中的语法<code>segment:displacement(base register, index register, scale factor)</code></li>\n<li>Intel等效语法  <code>segment:[base register + displacement + index register * scale factor]</code>   </li>\n</ul>\n</li>\n<li><p>简单对比示例如下:  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>AT&amp;T Code</th>\n<th>Intel Code</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>movl    $1,%eax</td>\n<td>mov     eax,1</td>\n</tr>\n<tr>\n<td>movl    $0xff,%ebx</td>\n<td>mov     ebx,0ffh</td>\n</tr>\n<tr>\n<td>int     $0x80</td>\n<td>int     80h</td>\n</tr>\n<tr>\n<td>movl    %eax, %ebx</td>\n<td>mov     ebx, eax</td>\n</tr>\n<tr>\n<td>movl    (%ecx),%eax</td>\n<td>mov     eax,[ecx]</td>\n</tr>\n<tr>\n<td>movl    3(%ebx),%eax</td>\n<td>mov     eax,[ebx+3]</td>\n</tr>\n<tr>\n<td>movl    0x20(%ebx),%eax</td>\n<td>mov     eax,[ebx+20h]</td>\n</tr>\n<tr>\n<td>addl    (%ebx,%ecx,0x2),%eax</td>\n<td>add     eax,[ebx+ecx*2h]</td>\n</tr>\n<tr>\n<td>leal    (%ebx,%ecx),%eax</td>\n<td>lea     eax,[ebx+ecx]</td>\n</tr>\n<tr>\n<td>subl    -0x20(%ebx,%ecx,0x4),%eax</td>\n<td>sub     eax,[ebx+ecx*4h-20h]</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本内联语法\"><a href=\"#基本内联语法\" class=\"headerlink\" title=\"基本内联语法\"></a>基本内联语法</h2><p>基本内联汇编的格式非常简单, 基本形式是   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span>(<span class=\"string\">\"assembly code\"</span>);</span><br></pre></td></tr></table></figure>\n<p>举个例子:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span>(<span class=\"string\">\"movl %ecx %eax\"</span>); <span class=\"comment\">/* moves the contents of ecx to eax */</span></span><br><span class=\"line\">__asm__(<span class=\"string\">\"movb %bh (%eax)\"</span>); <span class=\"comment\">/*moves the byte from bh to the memory pointed by eax */</span></span><br></pre></td></tr></table></figure>\n<p>关键字<code>__asm__</code> 和<code>asm</code>等价, 前者从代码规范上来说一般不容易和逻辑代码冲突(C++03标准开始明确规定__前缀为编译器保留关键字).   </p>\n<p>如果我们有多行指令, 则每行用双引号引起来, 并添加指令后缀<code>\\n\\t</code>  例如:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ (<span class=\"string\">\"movl %eax, %ebx\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movl $56, %esi\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movl %ecx, $label(%edx,%ebx,$4)\\n\\t\"</span></span><br><span class=\"line\">         <span class=\"string\">\"movb %ah, (%ebx)\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上的汇编编写还存在一个问题, 即编译器对对我们嵌入的汇编代码带来的寄存器修改一无所知,  要么我们避免修改编译器用到的寄存器, 要么在修改前后做好恢复,  因此, 我们通常使用extended asm, 通过指定的规范, 编译器会正确的帮我们处理好这个问题.    </p>\n<h2 id=\"扩展汇编\"><a href=\"#扩展汇编\" class=\"headerlink\" title=\"扩展汇编:\"></a>扩展汇编:</h2><p>在扩展汇编中, 我们可以指定操作数, 包括指定输入寄存器, 指定输出寄存器, 指定会被破坏的寄存器列表;  通过这些指定和规则约束, 编译器则会在汇编生成过程中避免使用到该类寄存器(最坏情况下编译器生成对应的压栈和恢复等操作), 以及对内联汇编选择合适的优化等, 我们则可以把精力放在我们需要关心的逻辑本身上.<br>其基本格式为:   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> ( assembler <span class=\"keyword\">template</span> </span><br><span class=\"line\">    : output operands                  <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    : input operands                   <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    : <span class=\"built_in\">list</span> of clobbered registers      <span class=\"comment\">/* optional */</span></span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>assembler template 汇编模版由汇编指令组成; </li>\n<li>operands 每个操作数由一个 操作数约束 字符串来描述, 后面跟括号中的C表达式.   </li>\n<li>使用冒号将汇编程序模版和后面的输出操作数分开, 后面可选operands相同, 如果没有更多内容则可以简略(中间不可省略)   </li>\n<li>操作数的总数有限制 (约为10个或者为设备描述的最大个数决定)   </li>\n</ul>\n<p>举例如下:  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"cld\\n\\t\"</span></span><br><span class=\"line\">    <span class=\"string\">\"rep\\n\\t\"</span></span><br><span class=\"line\">    <span class=\"string\">\"stosl\"</span></span><br><span class=\"line\">    : <span class=\"comment\">/* no output registers */</span></span><br><span class=\"line\">    : <span class=\"string\">\"c\"</span> (count), <span class=\"string\">\"a\"</span> (fill_value), <span class=\"string\">\"D\"</span> (dest)</span><br><span class=\"line\">    : <span class=\"string\">\"%ecx\"</span>, <span class=\"string\">\"%edi\"</span> </span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n\n<p>完整的描述为</p>\n<blockquote>\n<p> 输入:  从C/C++的4字节变量fill_value中读取数据存入寄存器%eax, count存入%ecx, dest存储%edi  </p>\n</blockquote>\n<blockquote>\n<p> 执行:<br>cld使DF复位为0: 设置stosl保存eax值后的偏移方向为自增<br>rep指令则重复后续单个指令<code>(%ecx)</code>次<br>stosl 将eax中的值保存到ES:EDI指向的地址中, 如果DF=0则自增4字节, 如果DF=1(std)则自减4字节. (l后缀为4字节 q为8字节)    </p>\n</blockquote>\n<blockquote>\n<p>输出: 没有输出   </p>\n</blockquote>\n<blockquote>\n<p>破坏清单: 显式声明%ecx和%edi是被修改使用的寄存器    </p>\n</blockquote>\n<p>再举个例子: 可变寄存器使用  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">10</span>, b;</span><br><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"movl %1, %%eax; </span></span><br><span class=\"line\"><span class=\"string\">        movl %%eax, %0;\"</span></span><br><span class=\"line\">        :<span class=\"string\">\"=r\"</span>(b)        <span class=\"comment\">/* output */</span></span><br><span class=\"line\">        :<span class=\"string\">\"r\"</span>(a)         <span class=\"comment\">/* input */</span></span><br><span class=\"line\">        :<span class=\"string\">\"%eax\"</span>         <span class=\"comment\">/* clobbered register */</span></span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n<p>赋值a给b;<br>r 是操作数的约束, 即告诉GCC可以使用任何寄存器.<br>eax 需要在这里显式声明   </p>\n<h3 id=\"assembler-template-汇编模板\"><a href=\"#assembler-template-汇编模板\" class=\"headerlink\" title=\"assembler template 汇编模板\"></a>assembler template 汇编模板</h3><p>汇编器模板包含插入到C程序内部的汇编指令集<br>格式如下:  </p>\n<ul>\n<li>每条汇编指令都应该用双引号引起来 或者整个指令组都应该用双引号引起来  </li>\n<li>每条汇编指令还应以定界符结尾: <ul>\n<li>有效的定界符是换行符(\\n)和分号(;);  </li>\n<li>‘\\n’后可以跟一个制表符’\\t’ </li>\n<li><strong>与C/C++表达式相对应的操作数</strong>由%0, %1 …等表示   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"operands-操作数\"><a href=\"#operands-操作数\" class=\"headerlink\" title=\"operands 操作数\"></a>operands 操作数</h3><p>C/C++表达式用作’asm’中汇编指令的操作数  </p>\n<ul>\n<li>每个操作数首先被写成双引号中的操作数约束(operand constraint), 对于输出操作数还有一个约束修饰符’=’  </li>\n<li>然后后面跟随代表操作数的C/C++表达式  </li>\n<li>“约束 constraint” 主要用于确定操作数的寻址模式, 还用于指定要使用的寄存器.  (文后有对应常用constraint的表格)   </li>\n<li>如果使用多个操作数, 以逗号’,’分隔   </li>\n<li>在汇编模版中, 每个操作数均由数字引用. 编号方法如下: 如果一共有N个操作数, 包括输入和输出, 也包括指定寄存器, 第一个为0, 按书写顺序递增;   </li>\n<li>输出操作数表达式必须为左值  输入操作数不受此限制  </li>\n<li>在输入输出中出现的寄存器属于隐式破坏声明, 不比添加到破坏清单内.  </li>\n</ul>\n<p>举几个例子:<br>将数字乘以5  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%1,%1,4), %0\"</span></span><br><span class=\"line\">        : <span class=\"string\">\"=r\"</span> (five_times_x)</span><br><span class=\"line\">        : <span class=\"string\">\"r\"</span> (x) </span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<p>输入和输出使用同一个寄存器(数字约束)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%0,%0,4), %0\"</span></span><br><span class=\"line\">        : <span class=\"string\">\"=r\"</span> (five_times_x)</span><br><span class=\"line\">        : <span class=\"string\">\"0\"</span> (x) </span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n\n<p>输入输出使用同一寄存器并指定  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">asm</span> (<span class=\"string\">\"leal (%%ecx,%%ecx,4), %%ecx\"</span></span><br><span class=\"line\">     : <span class=\"string\">\"=c\"</span> (x)</span><br><span class=\"line\">     : <span class=\"string\">\"c\"</span> (x) </span><br><span class=\"line\">     );</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"clobber-list-破坏清单\"><a href=\"#clobber-list-破坏清单\" class=\"headerlink\" title=\"clobber-list 破坏清单\"></a>clobber-list 破坏清单</h3><p>我们必须在clobber-list中列出那些可能被指令破坏的寄存器   即asm函数中第三个’:’之后的字段<br>其目的是为了通知gcc我们将自己使用和修改它们 因此gcc不会假定它加载到这些寄存器中的值将是有效的.<br>在这里不需要也不应该列出输入和输出寄存器, 因为gcc’知道’. 而在汇编模版中的汇编指令隐式或者显式使用了其他寄存器 则必须在此列出.<br>如果我们的指令不可预测的方式修改了内存, 那么需要在clobber-list中添加’memory’.  gcc将不能在整个汇编程序中将内存缓存到寄存器中;<br>如果受影响的内存未在输入和输出中列出, 那么我们还必须添加volatile关键字.<br>如果指令可能更改了条件代码寄存器CCR 那么需要添加’cc’  </p>\n<h3 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a><strong>volatile</strong></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ __volatile__ ( ... : ... : ... : ...);</span><br><span class=\"line\">__asm__ __volatile__ ( ... : ... : ... : ...);</span><br></pre></td></tr></table></figure>\n\n<p>如果汇编语句必须在放置它的位置执行 (即 为了优化而不能从循环中移出), 则将关键字volatile放在asm之后和()之前<br>如果不是确定需要volatile则不要添加, 因为会损失一些可能的性能上的优化   </p>\n<h2 id=\"constraints-约束\"><a href=\"#constraints-约束\" class=\"headerlink\" title=\"constraints  约束\"></a>constraints  约束</h2><p>约束可以说明操作数是否可以在寄存器中, 以及哪种寄存器;<br>该操作数是否可以是一个内存引用, 以及哪种地址;<br>操作数是否可以是立即数常量, 以及它可能具有哪些可能的值(即值的范围)等等   </p>\n<h3 id=\"常用约束\"><a href=\"#常用约束\" class=\"headerlink\" title=\"常用约束\"></a>常用约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm (&quot;movl %%eax, %0\\n&quot; :&quot;&#x3D;r&quot;(myval));</span><br></pre></td></tr></table></figure>\n<p><strong>当指定”r”约束时, gcc可以将变量保留在任何可用的GPR中. 要指定寄存器, 必须使用特定的寄存器约束直接指定寄存器名称 如下表:</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>r</th>\n<th>Register(s)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>a</td>\n<td>%eax, %ax, %al</td>\n</tr>\n<tr>\n<td>b</td>\n<td>%ebx, %bx, %bl</td>\n</tr>\n<tr>\n<td>c</td>\n<td>%ecx, %cx, %cl</td>\n</tr>\n<tr>\n<td>d</td>\n<td>%edx, %dx, %dl</td>\n</tr>\n<tr>\n<td>S</td>\n<td>%esi, %si</td>\n</tr>\n<tr>\n<td>D</td>\n<td>%edi, %di</td>\n</tr>\n</tbody></table>\n<p><strong>内存操作数约束(m)</strong><br>当操作数在内存中时, 对它们执行的任何操作都将直接在内存位置发生, 这与寄存器约束相反;<br>后者首先将值存储在要修改的寄存器中, 然后将其写回到内存位置<br>通常仅在绝对必要的指令约束条件下使用该寄存器约束条件,  因为寄存器约束会加快处理速度<br>如果需要在asm内部更新C变量, 并且确实不想使用寄存器来保存其值, 则可以最有效地使用内存约束.<br>例如 值存储在内存位置loc中:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm(&quot;sidt %0\\n&quot; : :&quot;m&quot;(loc));</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matching(Digit) constraints 数字约束</strong>  </p>\n<p>在某些情况下, 单个变量既可以用作输入操作数, 也可以用作输出操作数<br>可以通过使用匹配约束在asm中指定此类情况  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asm (&quot;incl %0&quot; :&quot;&#x3D;a&quot;(var):&quot;0&quot;(var));</span><br></pre></td></tr></table></figure>\n\n<p>为了匹配约束, 将寄存器%eax用作输入和输出变量<br>将var输入读取到%eax, 并在递增后将更新的%eax再次存储在var中<br>这里的0指定与第0个输出变量相同的约束<br>也就是说 它指定var的输出实例应仅存储在%eax中  </p>\n<ul>\n<li>从变量读取输入或修改变量并将修改写回到同一变量的情况  </li>\n<li>在不需要输入和输出操作数的单独实例的情况下   </li>\n<li>使用匹配约束的最重要作用是它们导致有效使用可用寄存器   </li>\n</ul>\n<p><strong>其他约束</strong>   </p>\n<ul>\n<li>“m”: 允许使用内存操作数,该内存操作数通常具有机器支持的任何类型的地址.  </li>\n<li>“o”: 允许使用内存操作数,但前提是该地址是可偏移的.也就是说,在地址上加上一个小的偏移量就可以得到一个有效的地址.   </li>\n<li>“V”: 不可偏移的内存操作数.换句话说,任何符合”m”约束但不符合”o”约束的事物.   </li>\n<li>“i”: 允许使用立即数整数（具有恒定值的一个）.这包括符号常量,其值仅在组装时才知道.   </li>\n<li>“n”: 允许使用具有已知数值的立即整数操作数.许多系统不能支持小于一字宽的操作数的汇编时常数.这些操作数的约束应使用”n”而不是”i”.  </li>\n<li>“g”: 允许使用任何寄存器,内存或立即数整数,但不是通用寄存器的寄存器除外.   </li>\n</ul>\n<p><strong>其他约束(X86)</strong>   </p>\n<ul>\n<li>“r”: 寄存器操作数约束,请参见上面给出的表.  </li>\n<li>“q”: 注册a,b,c或d.  </li>\n<li>“I”: 在0到31范围内的常数（用于32位移位）.  </li>\n<li>“J”: 范围0到63中的常数（用于64位移位）.  </li>\n<li>“K”: 0xff.  </li>\n<li>“L”: 0xffff.  </li>\n<li>“M”: 0、1、2或3（用于lea指令的移位）.  </li>\n<li>“N”: 在0到255之间的常数（用于out指令）.  </li>\n<li>“f”: 浮点寄存器  </li>\n<li>“t”: 第一个（栈顶）浮点寄存器  </li>\n<li>“u”: 第二个浮点寄存器   </li>\n<li>“A”: 指定”a”或”d”寄存器.这主要用于要返回的64位整数值,其中”d”寄存器保存最高有效位,而”a”寄存器保存最低有效位.   </li>\n</ul>\n<h3 id=\"Constraint-Modifiers-约束修饰符\"><a href=\"#Constraint-Modifiers-约束修饰符\" class=\"headerlink\" title=\"Constraint Modifiers  约束修饰符\"></a>Constraint Modifiers  约束修饰符</h3><ul>\n<li><code>=</code>: 表示该操作数对于该指令是只写的 先前的值将被丢弃 并由输出数据替换   </li>\n<li><code>&amp;</code>: 表示此操作数是早期指令操作数 在使用输入操作数完成指令之前对其进行了修改  因此此操作数不能位于用作输入操作数或任何存储器地址一部分的寄存器中 如果将输入操作数仅用作输入 则在写入早期结果之前 将输入操作数绑定到早期生成器操作数   </li>\n</ul>\n<h2 id=\"一些有用的案例\"><a href=\"#一些有用的案例\" class=\"headerlink\" title=\"一些有用的案例\"></a>一些有用的案例</h2><p>更多可查看linux源码  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/src/linux/include/<span class=\"keyword\">asm</span><span class=\"comment\">/*.h</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>两个数相加</strong>  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> foo = <span class=\"number\">10</span>, bar = <span class=\"number\">15</span>;</span><br><span class=\"line\">        __asm__ __volatile__(<span class=\"string\">\"addl  %%ebx,%%eax\"</span></span><br><span class=\"line\">                             :<span class=\"string\">\"=a\"</span>(foo)</span><br><span class=\"line\">                             :<span class=\"string\">\"a\"</span>(foo), <span class=\"string\">\"b\"</span>(bar)</span><br><span class=\"line\">                             );</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"foo+bar=%d\\n\"</span>, foo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>原子加法: 要求GCC将foo存储在%eax中, 将bar存储在%ebx中，将结果存储在%eax中</strong>   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__asm__ __volatile__(</span><br><span class=\"line\">                     <span class=\"string\">\"   lock       ;\\n\"</span></span><br><span class=\"line\">                     <span class=\"string\">\"   addl %1,%0 ;\\n\"</span></span><br><span class=\"line\">                     : <span class=\"string\">\"=m\"</span>  (my_var)</span><br><span class=\"line\">                     : <span class=\"string\">\"ir\"</span>  (my_int), <span class=\"string\">\"m\"</span> (my_var)</span><br><span class=\"line\">                     :                                 <span class=\"comment\">/* no clobber-list */</span></span><br><span class=\"line\">                     );</span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><strong>rawcmpxchg</strong>  </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__typeof__(*(ptr)) __ret;\t</span><br><span class=\"line\">__typeof__(*(ptr)) __old = (old);</span><br><span class=\"line\">__typeof__(*(ptr)) __new = (<span class=\"keyword\">new</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> u8 *__ptr = (<span class=\"keyword\">volatile</span> u8 *)(ptr); </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">asm</span> <span class=\"title\">volatile</span><span class=\"params\">(lock <span class=\"string\">\"cmpxchgb %2,%1\"</span> </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"=a\"</span> (__ret), <span class=\"string\">\"+m\"</span> (*__ptr) </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"q\"</span> (__new), <span class=\"string\">\"0\"</span> (__old) </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t     : <span class=\"string\">\"memory\"</span>)</span></span>;</span><br></pre></td></tr></table></figure>"},{"title":"devtoolset","date":"2021-02-18T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## 安装环境\n```\nyum install epel-release centos-release-scl scl-utils scl-utils-build\n```\n\n## 查看完整列表(scl为源可更改)\n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" list available\n```\n\n## 搜索 安装  \n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" search ****\nyum --disablerepo=\"*\" --enablerepo=\"scl\" install ****\nyum --disablerepo=\"*\" --enablerepo=\"scl\" update ****\n```\n\n<!-- more --> \n## 安装devtoolset  \n```\nyum --disablerepo=\"*\" --enablerepo=\"*scl*\" install devtoolset-10\n```\n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" install devtoolset-10*\n```\n\n## 使用scl command   \n```\nscl enable python33 <command>\n```\n\n## 启用和切换 (当前会话有效)\n```\nscl enable devtoolset-8 bash\n```\n```\nsource /opt/rh/devtoolset-3/enable\n```\n```\nscl enable python33 bash\n```\n\n\n## 查看已安装的SCL RPM \n```\nscl --list\nscl -l\n```\n\n## 安装多个gcc版本  \n```\nyum --enablerepo=tlinux-testing install devtoolset-9-gcc*\n```\n\n```\nyum --enablerepo=tlinux-testing install devtoolset-7-gcc*\n```\n","source":"_posts/2021-04-13-scl-devtoolset.md","raw":"\n---\ntitle: devtoolset\ndate: 2021-02-19\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## 安装环境\n```\nyum install epel-release centos-release-scl scl-utils scl-utils-build\n```\n\n## 查看完整列表(scl为源可更改)\n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" list available\n```\n\n## 搜索 安装  \n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" search ****\nyum --disablerepo=\"*\" --enablerepo=\"scl\" install ****\nyum --disablerepo=\"*\" --enablerepo=\"scl\" update ****\n```\n\n<!-- more --> \n## 安装devtoolset  \n```\nyum --disablerepo=\"*\" --enablerepo=\"*scl*\" install devtoolset-10\n```\n```\nyum --disablerepo=\"*\" --enablerepo=\"scl\" install devtoolset-10*\n```\n\n## 使用scl command   \n```\nscl enable python33 <command>\n```\n\n## 启用和切换 (当前会话有效)\n```\nscl enable devtoolset-8 bash\n```\n```\nsource /opt/rh/devtoolset-3/enable\n```\n```\nscl enable python33 bash\n```\n\n\n## 查看已安装的SCL RPM \n```\nscl --list\nscl -l\n```\n\n## 安装多个gcc版本  \n```\nyum --enablerepo=tlinux-testing install devtoolset-9-gcc*\n```\n\n```\nyum --enablerepo=tlinux-testing install devtoolset-7-gcc*\n```\n","slug":"2021-04-13-scl-devtoolset","published":1,"updated":"2021-06-08T06:33:27.484Z","_id":"ckp4x5akd00004g5hary264p1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"安装环境\">安装环境</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release centos-release-scl scl-utils scl-utils-build</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"查看完整列表scl为源可更改\">查看完整列表(scl为源可更改)</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; list available</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"搜索-安装\">搜索 安装</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; search ****</span><br><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; install ****</span><br><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; update ****</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a> \n<h2><span id=\"安装devtoolset\">安装devtoolset</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;*scl*&quot; install devtoolset-10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; install devtoolset-10*</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"使用scl-command\">使用scl command</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable python33 &lt;command&gt;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"启用和切换-当前会话有效\">启用和切换 (当前会话有效)</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable devtoolset-8 bash</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;opt&#x2F;rh&#x2F;devtoolset-3&#x2F;enable</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable python33 bash</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"查看已安装的scl-rpm\">查看已安装的SCL RPM</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl --list</span><br><span class=\"line\">scl -l</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"安装多个gcc版本\">安装多个gcc版本</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --enablerepo&#x3D;tlinux-testing install devtoolset-9-gcc*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --enablerepo&#x3D;tlinux-testing install devtoolset-7-gcc*</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release centos-release-scl scl-utils scl-utils-build</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看完整列表-scl为源可更改\"><a href=\"#查看完整列表-scl为源可更改\" class=\"headerlink\" title=\"查看完整列表(scl为源可更改)\"></a>查看完整列表(scl为源可更改)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; list available</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"搜索-安装\"><a href=\"#搜索-安装\" class=\"headerlink\" title=\"搜索 安装\"></a>搜索 安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; search ****</span><br><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; install ****</span><br><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; update ****</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装devtoolset\"><a href=\"#安装devtoolset\" class=\"headerlink\" title=\"安装devtoolset\"></a>安装devtoolset</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;*scl*&quot; install devtoolset-10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;scl&quot; install devtoolset-10*</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用scl-command\"><a href=\"#使用scl-command\" class=\"headerlink\" title=\"使用scl command\"></a>使用scl command</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable python33 &lt;command&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用和切换-当前会话有效\"><a href=\"#启用和切换-当前会话有效\" class=\"headerlink\" title=\"启用和切换 (当前会话有效)\"></a>启用和切换 (当前会话有效)</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable devtoolset-8 bash</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &#x2F;opt&#x2F;rh&#x2F;devtoolset-3&#x2F;enable</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl enable python33 bash</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"查看已安装的SCL-RPM\"><a href=\"#查看已安装的SCL-RPM\" class=\"headerlink\" title=\"查看已安装的SCL RPM\"></a>查看已安装的SCL RPM</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scl --list</span><br><span class=\"line\">scl -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装多个gcc版本\"><a href=\"#安装多个gcc版本\" class=\"headerlink\" title=\"安装多个gcc版本\"></a>安装多个gcc版本</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --enablerepo&#x3D;tlinux-testing install devtoolset-9-gcc*</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum --enablerepo&#x3D;tlinux-testing install devtoolset-7-gcc*</span><br></pre></td></tr></table></figure>"},{"title":"常用计时工具性能对比","date":"2021-02-18T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n\n\n| 接口                             | 计时精度 | 自身消耗 | 跨平台能力 | 综合稳定性 | 备注                       |\n|----------------------------------|----------|----------|------------|------------|----------------------------|\n| C库函数 time(NULL) WIN32         | 1s       | 32ns     | 高         | 高         |                            |\n| C库函数 time(NULL) linux         | 1s       | 35ns     | 高         | 高         |                            |\n| C库函数 time(NULL) MAC           | 1s       | 155ns    | 高         | 高         |                            |\n| C库函数 clock WIN32              | 1ms      | 38ns     | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock linux              | 1us      | 216ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock linux(Intel X5650) | 1us      | 766ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock MAC                | 1us      | 476ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C++ chrono system_clock WIN32    | 100ns    | 33ns     | 高         | 中         |                            |\n| C++ chrono system_clock linux    | 1ns      | 50ns     | 高         | 中         |                            |\n| C++ chrono steady_clock WIN32    | 100ns    | 44ns     | 高         | 中         |                            |\n| C++ chrono steady_clock linux    | 1ns      | 50ns     | 高         | 中         |                            |\n| QueryPerformanceCounter          | 1ns      | 28ns     | 无         | 高         |                            |\n| GetSystemTimeAsFileTime          | 1us      | 4~23ns   | 无         | 中         |                            |\n| clock_gettime                    | 1ns      | 50ns     | 无         | 差         | 优先CLOCK_REALTIME选项     |\n| lfence;rdtsc   WIN32             | 0.3ns    | 13ns     | 高         | 高         | 手写跨平台汇编             |\n| lfence;rdtsc   linux             | 0.3ns    | 13ns     | 高         | 高         | 手写跨平台汇编             |\n| mfence;rdtsc   WIN32             | 0.3ns    | 22ns     | 高         | 高         | 手写跨平台汇编             |\n| mfence;rdtsc   linux             | 0.3ns    | 22ns     | 高         | 高         | 手写跨平台汇编             |\n| lock;rdtsc     WIN32             | 0.3ns    | 15ns     | 高         | 高         | 手写跨平台汇编             |\n| lock;rdtsc     linux             | 0.3ns    | 15ns     | 高         | 高         | 手写跨平台汇编             |\n| rdtsc        WIN32               | 0.3ns    | 7ns      | 高         | 高         | 手写跨平台汇编             |\n| rdtsc        linux               | 0.3ns    | 7ns      | 高         | 高         | 手写跨平台汇编             |\n| rdtscp                           | 0.3ns    | 16ns     | 高         | 差         | 双路X5650 2.58us~2.28s抖动 |\n\n\n\n* clock_gettime\n  * 相同CPU不同选项下甚至DEBUG/RELEASE下的区别差异都较大  多台不同硬件和linux发行版下相对稳定可用的为CLOCK_REALTIME  \n  * 计数精度为1ns    获取消耗18ns  \n  * 如果需要使用需要先本地测试, 性能消耗可能不符合预期(参考rdtscp数据)  \n* rdtsc  \n    * 计数精度为0.4ns左右 取决于主频   获取消耗7ns （18 circle） \n* rdtscp  \n    * 计数精度为0.4ns左右 取决于主频   获取消耗2.58us (X5650双路CPU下600us/2.28s)  \n* load fence rdtsc   \n  * 计数精度为0.4ns左右 取决于主频   获取消耗9ns  (24 CPU CIRCLE)  (MAC 13ns)\n* load&store fence rdtsc   \n  * 计数精度为0.4ns左右 取决于主频   获取消耗15ns \n  * \n* __rdtsc (WIN32)  \n  * 计数精度为0.4ns左右 取决于主频   获取消耗9ns (24 CPU CIRCLE) \n\n* 对比测试  \n  * 寄存器操作 1个circle   \n  * L1 cache hit  3个circle  (不考虑在流水线中等情况)  \n  * L2 cache hit  12个circle    \n  * L3 cache hit  38个circle  \n  * 主内存 65ns   \n  * NUMA内存 相比主内存增加总线访问延迟 约40ns   \n\n  * 三元赋值一般约8个circle (存在指令并行,预读等和其他周围代码一起统计会有推算上的偏差)\n  * s64类型两次乘法一次除法计算一次三元赋值和若干普通赋值的cpu统计代码消耗约为3.71ns  (大样本均摊) \n  * s64类型两次乘法           一次三元赋值和若干普通赋值的cpu统计代码消耗约为2.93ns  (大样本均摊) \n  * 4次加法赋值 1.59ns  (大样本均摊)   \n\n* 小结   \n  *  一般CPU主频是2.5\\~4Ghz之间(对本文来说为标频, 睿频无意义),  标频通常代表着高精度计数的极限(INTEL平台下和同时和ART硬件有关)\n     *  计数极限为标频倒数 按照主流CPU的标频而言  通常最高精度在0.4\\~0.2ns左右;  \n     *  读取和使用计数也需要执行指令 执行指令需要CPU计算    \n     *  读取和使用计数可能涉及到指令以及计数的缓存内存操作等     \n     *  不加保护的rdtsc约7ns (本文I7 3.7g主频CPU)  \n  \n  * std::chrono的稳定性和精度均为良好 并且跨平台性最好(C++11标准)   \n    * 通常在20\\~65ns左右(大概测试了3台windows 5台linux 1台mac (均是INTEL CPU))  \n    * 100ns以下的获取损耗 以及1ns精度   \n  \n  * rdtsc精度最高 速度最快 稳定性最好 但是需要确认CPU体系和版本保证可用(当前只针对INTEL/AMD上市年份在07/08年以后的新CPU)   \n    * 通常稳定在10ns以下或者说在30个CPU周期之内, 几乎不受编译选项和平台影响, 并且不同CPU损耗接近;\n    * 横向对比则相当于4次三元取值指令的性能开销   \n    * 对于指令级粒度的性能测试,  以及进行高频函数的性能统计采样中,  更小的性能开销和更高的精度具有不可取代的作用和价值.     \n      * 对于9ns的代码段进行独立性能测试 rdtsc测试为11~15ns, chrono测试为44~50ns  (对应每秒1亿次规模的代码段进行性能对比 rdtsc 44.4% chrono 422%  提高了10倍的精度 chrono统计的数据在该级别基本无意义) \n      * 对于80ns的代码段进行独立性能测试 rdtsc测试为82~85ns, chrono测试为100~122ns  (对应每秒1千万次规模的代码段进行性能对比 rdtsc 4.4%,  chrono 48.4% 提高了10倍的精度 rdtsc在该级别已经非常精准, chrono偏差较大) \n  \n  \n  * 该小结中未列举到的其他方案 存在以下问题不推荐使用 \n    * 性能开销太大或者不稳定  \n    * 精度不够或者不稳定  \n    * 不同编译选项或者平台差异过大  \n","source":"_posts/2021-04-02-perf-clock.md","raw":"\n---\ntitle: 常用计时工具性能对比  \ndate: 2021-02-19\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n\n\n| 接口                             | 计时精度 | 自身消耗 | 跨平台能力 | 综合稳定性 | 备注                       |\n|----------------------------------|----------|----------|------------|------------|----------------------------|\n| C库函数 time(NULL) WIN32         | 1s       | 32ns     | 高         | 高         |                            |\n| C库函数 time(NULL) linux         | 1s       | 35ns     | 高         | 高         |                            |\n| C库函数 time(NULL) MAC           | 1s       | 155ns    | 高         | 高         |                            |\n| C库函数 clock WIN32              | 1ms      | 38ns     | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock linux              | 1us      | 216ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock linux(Intel X5650) | 1us      | 766ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C库函数 clock MAC                | 1us      | 476ns    | 高         | 差         | 测试精度误差100ms左右      |\n| C++ chrono system_clock WIN32    | 100ns    | 33ns     | 高         | 中         |                            |\n| C++ chrono system_clock linux    | 1ns      | 50ns     | 高         | 中         |                            |\n| C++ chrono steady_clock WIN32    | 100ns    | 44ns     | 高         | 中         |                            |\n| C++ chrono steady_clock linux    | 1ns      | 50ns     | 高         | 中         |                            |\n| QueryPerformanceCounter          | 1ns      | 28ns     | 无         | 高         |                            |\n| GetSystemTimeAsFileTime          | 1us      | 4~23ns   | 无         | 中         |                            |\n| clock_gettime                    | 1ns      | 50ns     | 无         | 差         | 优先CLOCK_REALTIME选项     |\n| lfence;rdtsc   WIN32             | 0.3ns    | 13ns     | 高         | 高         | 手写跨平台汇编             |\n| lfence;rdtsc   linux             | 0.3ns    | 13ns     | 高         | 高         | 手写跨平台汇编             |\n| mfence;rdtsc   WIN32             | 0.3ns    | 22ns     | 高         | 高         | 手写跨平台汇编             |\n| mfence;rdtsc   linux             | 0.3ns    | 22ns     | 高         | 高         | 手写跨平台汇编             |\n| lock;rdtsc     WIN32             | 0.3ns    | 15ns     | 高         | 高         | 手写跨平台汇编             |\n| lock;rdtsc     linux             | 0.3ns    | 15ns     | 高         | 高         | 手写跨平台汇编             |\n| rdtsc        WIN32               | 0.3ns    | 7ns      | 高         | 高         | 手写跨平台汇编             |\n| rdtsc        linux               | 0.3ns    | 7ns      | 高         | 高         | 手写跨平台汇编             |\n| rdtscp                           | 0.3ns    | 16ns     | 高         | 差         | 双路X5650 2.58us~2.28s抖动 |\n\n\n\n* clock_gettime\n  * 相同CPU不同选项下甚至DEBUG/RELEASE下的区别差异都较大  多台不同硬件和linux发行版下相对稳定可用的为CLOCK_REALTIME  \n  * 计数精度为1ns    获取消耗18ns  \n  * 如果需要使用需要先本地测试, 性能消耗可能不符合预期(参考rdtscp数据)  \n* rdtsc  \n    * 计数精度为0.4ns左右 取决于主频   获取消耗7ns （18 circle） \n* rdtscp  \n    * 计数精度为0.4ns左右 取决于主频   获取消耗2.58us (X5650双路CPU下600us/2.28s)  \n* load fence rdtsc   \n  * 计数精度为0.4ns左右 取决于主频   获取消耗9ns  (24 CPU CIRCLE)  (MAC 13ns)\n* load&store fence rdtsc   \n  * 计数精度为0.4ns左右 取决于主频   获取消耗15ns \n  * \n* __rdtsc (WIN32)  \n  * 计数精度为0.4ns左右 取决于主频   获取消耗9ns (24 CPU CIRCLE) \n\n* 对比测试  \n  * 寄存器操作 1个circle   \n  * L1 cache hit  3个circle  (不考虑在流水线中等情况)  \n  * L2 cache hit  12个circle    \n  * L3 cache hit  38个circle  \n  * 主内存 65ns   \n  * NUMA内存 相比主内存增加总线访问延迟 约40ns   \n\n  * 三元赋值一般约8个circle (存在指令并行,预读等和其他周围代码一起统计会有推算上的偏差)\n  * s64类型两次乘法一次除法计算一次三元赋值和若干普通赋值的cpu统计代码消耗约为3.71ns  (大样本均摊) \n  * s64类型两次乘法           一次三元赋值和若干普通赋值的cpu统计代码消耗约为2.93ns  (大样本均摊) \n  * 4次加法赋值 1.59ns  (大样本均摊)   \n\n* 小结   \n  *  一般CPU主频是2.5\\~4Ghz之间(对本文来说为标频, 睿频无意义),  标频通常代表着高精度计数的极限(INTEL平台下和同时和ART硬件有关)\n     *  计数极限为标频倒数 按照主流CPU的标频而言  通常最高精度在0.4\\~0.2ns左右;  \n     *  读取和使用计数也需要执行指令 执行指令需要CPU计算    \n     *  读取和使用计数可能涉及到指令以及计数的缓存内存操作等     \n     *  不加保护的rdtsc约7ns (本文I7 3.7g主频CPU)  \n  \n  * std::chrono的稳定性和精度均为良好 并且跨平台性最好(C++11标准)   \n    * 通常在20\\~65ns左右(大概测试了3台windows 5台linux 1台mac (均是INTEL CPU))  \n    * 100ns以下的获取损耗 以及1ns精度   \n  \n  * rdtsc精度最高 速度最快 稳定性最好 但是需要确认CPU体系和版本保证可用(当前只针对INTEL/AMD上市年份在07/08年以后的新CPU)   \n    * 通常稳定在10ns以下或者说在30个CPU周期之内, 几乎不受编译选项和平台影响, 并且不同CPU损耗接近;\n    * 横向对比则相当于4次三元取值指令的性能开销   \n    * 对于指令级粒度的性能测试,  以及进行高频函数的性能统计采样中,  更小的性能开销和更高的精度具有不可取代的作用和价值.     \n      * 对于9ns的代码段进行独立性能测试 rdtsc测试为11~15ns, chrono测试为44~50ns  (对应每秒1亿次规模的代码段进行性能对比 rdtsc 44.4% chrono 422%  提高了10倍的精度 chrono统计的数据在该级别基本无意义) \n      * 对于80ns的代码段进行独立性能测试 rdtsc测试为82~85ns, chrono测试为100~122ns  (对应每秒1千万次规模的代码段进行性能对比 rdtsc 4.4%,  chrono 48.4% 提高了10倍的精度 rdtsc在该级别已经非常精准, chrono偏差较大) \n  \n  \n  * 该小结中未列举到的其他方案 存在以下问题不推荐使用 \n    * 性能开销太大或者不稳定  \n    * 精度不够或者不稳定  \n    * 不同编译选项或者平台差异过大  \n","slug":"2021-04-02-perf-clock","published":1,"updated":"2021-06-10T11:37:13.626Z","_id":"ckp4x5am800024g5hexemd0bk","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>计时精度</th>\n<th>自身消耗</th>\n<th>跨平台能力</th>\n<th>综合稳定性</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C库函数 time(NULL) WIN32</td>\n<td>1s</td>\n<td>32ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 time(NULL) linux</td>\n<td>1s</td>\n<td>35ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 time(NULL) MAC</td>\n<td>1s</td>\n<td>155ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 clock WIN32</td>\n<td>1ms</td>\n<td>38ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock linux</td>\n<td>1us</td>\n<td>216ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock linux(Intel X5650)</td>\n<td>1us</td>\n<td>766ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock MAC</td>\n<td>1us</td>\n<td>476ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C++ chrono system_clock WIN32</td>\n<td>100ns</td>\n<td>33ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono system_clock linux</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono steady_clock WIN32</td>\n<td>100ns</td>\n<td>44ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono steady_clock linux</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>QueryPerformanceCounter</td>\n<td>1ns</td>\n<td>28ns</td>\n<td>无</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>GetSystemTimeAsFileTime</td>\n<td>1us</td>\n<td>4~23ns</td>\n<td>无</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>clock_gettime</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>无</td>\n<td>差</td>\n<td>优先CLOCK_REALTIME选项</td>\n</tr>\n<tr>\n<td>lfence;rdtsc   WIN32</td>\n<td>0.3ns</td>\n<td>13ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lfence;rdtsc   linux</td>\n<td>0.3ns</td>\n<td>13ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>mfence;rdtsc   WIN32</td>\n<td>0.3ns</td>\n<td>22ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>mfence;rdtsc   linux</td>\n<td>0.3ns</td>\n<td>22ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lock;rdtsc     WIN32</td>\n<td>0.3ns</td>\n<td>15ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lock;rdtsc     linux</td>\n<td>0.3ns</td>\n<td>15ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtsc        WIN32</td>\n<td>0.3ns</td>\n<td>7ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtsc        linux</td>\n<td>0.3ns</td>\n<td>7ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtscp</td>\n<td>0.3ns</td>\n<td>16ns</td>\n<td>高</td>\n<td>差</td>\n<td>双路X5650 2.58us~2.28s抖动</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>clock_gettime</p>\n<ul>\n<li>相同CPU不同选项下甚至DEBUG/RELEASE下的区别差异都较大  多台不同硬件和linux发行版下相对稳定可用的为CLOCK_REALTIME  </li>\n<li>计数精度为1ns    获取消耗18ns  </li>\n<li>如果需要使用需要先本地测试, 性能消耗可能不符合预期(参考rdtscp数据)  </li>\n</ul>\n</li>\n<li><p>rdtsc  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗7ns （18 circle） </li>\n</ul>\n</li>\n<li><p>rdtscp  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗2.58us (X5650双路CPU下600us/2.28s)  </li>\n</ul>\n</li>\n<li><p>load fence rdtsc   </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗9ns  (24 CPU CIRCLE)  (MAC 13ns)</li>\n</ul>\n</li>\n<li><p>load&amp;store fence rdtsc   </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗15ns </li>\n<li></li>\n</ul>\n</li>\n<li><p>__rdtsc (WIN32)  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗9ns (24 CPU CIRCLE) </li>\n</ul>\n</li>\n<li><p>对比测试  </p>\n<ul>\n<li><p>寄存器操作 1个circle   </p>\n</li>\n<li><p>L1 cache hit  3个circle  (不考虑在流水线中等情况)  </p>\n</li>\n<li><p>L2 cache hit  12个circle    </p>\n</li>\n<li><p>L3 cache hit  38个circle  </p>\n</li>\n<li><p>主内存 65ns   </p>\n</li>\n<li><p>NUMA内存 相比主内存增加总线访问延迟 约40ns   </p>\n</li>\n<li><p>三元赋值一般约8个circle (存在指令并行,预读等和其他周围代码一起统计会有推算上的偏差)</p>\n</li>\n<li><p>s64类型两次乘法一次除法计算一次三元赋值和若干普通赋值的cpu统计代码消耗约为3.71ns  (大样本均摊) </p>\n</li>\n<li><p>s64类型两次乘法           一次三元赋值和若干普通赋值的cpu统计代码消耗约为2.93ns  (大样本均摊) </p>\n</li>\n<li><p>4次加法赋值 1.59ns  (大样本均摊)   </p>\n</li>\n</ul>\n</li>\n<li><p>小结   </p>\n<ul>\n<li><p>一般CPU主频是2.5~4Ghz之间(对本文来说为标频, 睿频无意义),  标频通常代表着高精度计数的极限(INTEL平台下和同时和ART硬件有关)</p>\n<ul>\n<li>计数极限为标频倒数 按照主流CPU的标频而言  通常最高精度在0.4~0.2ns左右;  </li>\n<li>读取和使用计数也需要执行指令 执行指令需要CPU计算    </li>\n<li>读取和使用计数可能涉及到指令以及计数的缓存内存操作等     </li>\n<li>不加保护的rdtsc约7ns (本文I7 3.7g主频CPU)  </li>\n</ul>\n</li>\n<li><p>std::chrono的稳定性和精度均为良好 并且跨平台性最好(C++11标准)   </p>\n<ul>\n<li>通常在20~65ns左右(大概测试了3台windows 5台linux 1台mac (均是INTEL CPU))  </li>\n<li>100ns以下的获取损耗 以及1ns精度   </li>\n</ul>\n</li>\n<li><p>rdtsc精度最高 速度最快 稳定性最好 但是需要确认CPU体系和版本保证可用(当前只针对INTEL/AMD上市年份在07/08年以后的新CPU)   </p>\n<ul>\n<li>通常稳定在10ns以下或者说在30个CPU周期之内, 几乎不受编译选项和平台影响, 并且不同CPU损耗接近;</li>\n<li>横向对比则相当于4次三元取值指令的性能开销   </li>\n<li>对于指令级粒度的性能测试,  以及进行高频函数的性能统计采样中,  更小的性能开销和更高的精度具有不可取代的作用和价值.     <ul>\n<li>对于9ns的代码段进行独立性能测试 rdtsc测试为11<del>15ns, chrono测试为44</del>50ns  (对应每秒1亿次规模的代码段进行性能对比 rdtsc 44.4% chrono 422%  提高了10倍的精度 chrono统计的数据在该级别基本无意义) </li>\n<li>对于80ns的代码段进行独立性能测试 rdtsc测试为82<del>85ns, chrono测试为100</del>122ns  (对应每秒1千万次规模的代码段进行性能对比 rdtsc 4.4%,  chrono 48.4% 提高了10倍的精度 rdtsc在该级别已经非常精准, chrono偏差较大) </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>该小结中未列举到的其他方案 存在以下问题不推荐使用 <ul>\n<li>性能开销太大或者不稳定  </li>\n<li>精度不够或者不稳定  </li>\n<li>不同编译选项或者平台差异过大</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>接口</th>\n<th>计时精度</th>\n<th>自身消耗</th>\n<th>跨平台能力</th>\n<th>综合稳定性</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>C库函数 time(NULL) WIN32</td>\n<td>1s</td>\n<td>32ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 time(NULL) linux</td>\n<td>1s</td>\n<td>35ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 time(NULL) MAC</td>\n<td>1s</td>\n<td>155ns</td>\n<td>高</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>C库函数 clock WIN32</td>\n<td>1ms</td>\n<td>38ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock linux</td>\n<td>1us</td>\n<td>216ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock linux(Intel X5650)</td>\n<td>1us</td>\n<td>766ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C库函数 clock MAC</td>\n<td>1us</td>\n<td>476ns</td>\n<td>高</td>\n<td>差</td>\n<td>测试精度误差100ms左右</td>\n</tr>\n<tr>\n<td>C++ chrono system_clock WIN32</td>\n<td>100ns</td>\n<td>33ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono system_clock linux</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono steady_clock WIN32</td>\n<td>100ns</td>\n<td>44ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>C++ chrono steady_clock linux</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>高</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>QueryPerformanceCounter</td>\n<td>1ns</td>\n<td>28ns</td>\n<td>无</td>\n<td>高</td>\n<td></td>\n</tr>\n<tr>\n<td>GetSystemTimeAsFileTime</td>\n<td>1us</td>\n<td>4~23ns</td>\n<td>无</td>\n<td>中</td>\n<td></td>\n</tr>\n<tr>\n<td>clock_gettime</td>\n<td>1ns</td>\n<td>50ns</td>\n<td>无</td>\n<td>差</td>\n<td>优先CLOCK_REALTIME选项</td>\n</tr>\n<tr>\n<td>lfence;rdtsc   WIN32</td>\n<td>0.3ns</td>\n<td>13ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lfence;rdtsc   linux</td>\n<td>0.3ns</td>\n<td>13ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>mfence;rdtsc   WIN32</td>\n<td>0.3ns</td>\n<td>22ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>mfence;rdtsc   linux</td>\n<td>0.3ns</td>\n<td>22ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lock;rdtsc     WIN32</td>\n<td>0.3ns</td>\n<td>15ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>lock;rdtsc     linux</td>\n<td>0.3ns</td>\n<td>15ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtsc        WIN32</td>\n<td>0.3ns</td>\n<td>7ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtsc        linux</td>\n<td>0.3ns</td>\n<td>7ns</td>\n<td>高</td>\n<td>高</td>\n<td>手写跨平台汇编</td>\n</tr>\n<tr>\n<td>rdtscp</td>\n<td>0.3ns</td>\n<td>16ns</td>\n<td>高</td>\n<td>差</td>\n<td>双路X5650 2.58us~2.28s抖动</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>clock_gettime</p>\n<ul>\n<li>相同CPU不同选项下甚至DEBUG/RELEASE下的区别差异都较大  多台不同硬件和linux发行版下相对稳定可用的为CLOCK_REALTIME  </li>\n<li>计数精度为1ns    获取消耗18ns  </li>\n<li>如果需要使用需要先本地测试, 性能消耗可能不符合预期(参考rdtscp数据)  </li>\n</ul>\n</li>\n<li><p>rdtsc  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗7ns （18 circle） </li>\n</ul>\n</li>\n<li><p>rdtscp  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗2.58us (X5650双路CPU下600us/2.28s)  </li>\n</ul>\n</li>\n<li><p>load fence rdtsc   </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗9ns  (24 CPU CIRCLE)  (MAC 13ns)</li>\n</ul>\n</li>\n<li><p>load&amp;store fence rdtsc   </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗15ns </li>\n<li></li>\n</ul>\n</li>\n<li><p>__rdtsc (WIN32)  </p>\n<ul>\n<li>计数精度为0.4ns左右 取决于主频   获取消耗9ns (24 CPU CIRCLE) </li>\n</ul>\n</li>\n<li><p>对比测试  </p>\n<ul>\n<li><p>寄存器操作 1个circle   </p>\n</li>\n<li><p>L1 cache hit  3个circle  (不考虑在流水线中等情况)  </p>\n</li>\n<li><p>L2 cache hit  12个circle    </p>\n</li>\n<li><p>L3 cache hit  38个circle  </p>\n</li>\n<li><p>主内存 65ns   </p>\n</li>\n<li><p>NUMA内存 相比主内存增加总线访问延迟 约40ns   </p>\n</li>\n<li><p>三元赋值一般约8个circle (存在指令并行,预读等和其他周围代码一起统计会有推算上的偏差)</p>\n</li>\n<li><p>s64类型两次乘法一次除法计算一次三元赋值和若干普通赋值的cpu统计代码消耗约为3.71ns  (大样本均摊) </p>\n</li>\n<li><p>s64类型两次乘法           一次三元赋值和若干普通赋值的cpu统计代码消耗约为2.93ns  (大样本均摊) </p>\n</li>\n<li><p>4次加法赋值 1.59ns  (大样本均摊)   </p>\n</li>\n</ul>\n</li>\n<li><p>小结   </p>\n<ul>\n<li><p>一般CPU主频是2.5~4Ghz之间(对本文来说为标频, 睿频无意义),  标频通常代表着高精度计数的极限(INTEL平台下和同时和ART硬件有关)</p>\n<ul>\n<li>计数极限为标频倒数 按照主流CPU的标频而言  通常最高精度在0.4~0.2ns左右;  </li>\n<li>读取和使用计数也需要执行指令 执行指令需要CPU计算    </li>\n<li>读取和使用计数可能涉及到指令以及计数的缓存内存操作等     </li>\n<li>不加保护的rdtsc约7ns (本文I7 3.7g主频CPU)  </li>\n</ul>\n</li>\n<li><p>std::chrono的稳定性和精度均为良好 并且跨平台性最好(C++11标准)   </p>\n<ul>\n<li>通常在20~65ns左右(大概测试了3台windows 5台linux 1台mac (均是INTEL CPU))  </li>\n<li>100ns以下的获取损耗 以及1ns精度   </li>\n</ul>\n</li>\n<li><p>rdtsc精度最高 速度最快 稳定性最好 但是需要确认CPU体系和版本保证可用(当前只针对INTEL/AMD上市年份在07/08年以后的新CPU)   </p>\n<ul>\n<li>通常稳定在10ns以下或者说在30个CPU周期之内, 几乎不受编译选项和平台影响, 并且不同CPU损耗接近;</li>\n<li>横向对比则相当于4次三元取值指令的性能开销   </li>\n<li>对于指令级粒度的性能测试,  以及进行高频函数的性能统计采样中,  更小的性能开销和更高的精度具有不可取代的作用和价值.     <ul>\n<li>对于9ns的代码段进行独立性能测试 rdtsc测试为11<del>15ns, chrono测试为44</del>50ns  (对应每秒1亿次规模的代码段进行性能对比 rdtsc 44.4% chrono 422%  提高了10倍的精度 chrono统计的数据在该级别基本无意义) </li>\n<li>对于80ns的代码段进行独立性能测试 rdtsc测试为82<del>85ns, chrono测试为100</del>122ns  (对应每秒1千万次规模的代码段进行性能对比 rdtsc 4.4%,  chrono 48.4% 提高了10倍的精度 rdtsc在该级别已经非常精准, chrono偏差较大) </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>该小结中未列举到的其他方案 存在以下问题不推荐使用 <ul>\n<li>性能开销太大或者不稳定  </li>\n<li>精度不够或者不稳定  </li>\n<li>不同编译选项或者平台差异过大</li>\n</ul>\n</li>\n</ul>\n"},{"title":"高性能编程:序","date":"2021-05-09T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## 硬件环境和技术趋势   \n\n### 带宽胜于延迟   \n  > 带宽是指的给定时间内能完成的总工作量, 延迟是一个事件从开始到结束所经历的时间.   \n  > 在过去的20\\~40年里, CPU, 内存, 网络, 硬盘等, 其带宽的改进为300\\~25000倍, 而延迟的改进仅为6\\~8倍   \n* 处理器性能和存储器性能差距越来越大   \n  > 在过去的20\\~40年里, 处理器性能提升(05年后变化较小)带来的单位时间内的存储请求提高了约10000倍, 但是存储器的访问性能改进仅为6\\~8倍  \n<!-- more -->\n### 充分利用并行   \n在带宽胜于延迟的硬件发展和技术趋势下, 要充分发挥硬件的性能, 并行是其最重要的方法之一.    \n* 位级并行   \n  * Processing Unit处理位宽, 寄存器位宽, 数据总线位宽等 \n  * 例如64位机相对32位机增加了一倍的处理位宽, 也就意味着一个CPU周期内能处理的信息量提升了两倍.   \n* 指令级并行  \n  * (单指令流多数据流)SIMD指令集(向量处理器) (数据并行)  \n    * MMX: 可以将64位的寄存器作为```2*32```或者```8*8``` 进行整数的并行计算, 但其寄存器为借用的FPU的寄存器.   \n    * SSE: 有1,2,3,4代, 相对MMX主要区别是有了自己专属的128位长的寄存器, 并且支持浮点数的并行计算.  \n    * AVX: 除了进一步增加位宽(AVX2为256位,AVX-512为512位)外还支持三指令, 但有可能触发降频  \n  * 指令流水线(顺序)   \n    * 通常一条指令有多个过程, 例如取址, 译码, 执行, 访存, 回写, 如果没有流水线技术则一般一个CPU周期内只能完成一个过程, 即多个CPU周期才能执行完一个指令,  而通过重叠执行多个指令, 理想情况下可以达到每个CPU周期完成一条指令. 但因指令之间的资源冲突问题, 可能导致更多的延迟, 以及长流水线被打断带来的冲洗(清空)操作会带来响应的性能惩罚(bypass/forwarding和分支预测会缓解问题).  \n  * 指令多发射(超标量处理器)  \n    * 超标量处理器可以通过将多个指令同时分派到处理器上的不同执行单元，从而在一个时钟周期内执行多个指令.  \n  * 同时多线程(SMT 超标量)   \n    * 在一个CPU核心上同时执行多个线程, 见intel的超线程实现方案.  \n  * 乱序执行 \n    * 不同的指令其运算周期不同, 特别是指令管道和内存访问的速度差,  乱序执行会对发送的指令请求进行重排序, 以达到在等待的过程中插入更多指令的执行而不是总是空等   \n* 任务并行   \n  * 线程, 进程等  \n  \n### 局部性原理  \n\n在计算机科学的发展过程中 贯穿软件和硬件, 几乎无差别覆盖所有对性能和延迟有要求的应用领域, 一次又一次拯救了性能瓶颈危机, 各类优化的基石. 或许很少提及但却一直在使用和遵循的原理, 即**局部性原理**:   \n程序常常重复使用他们最近用过的数据和指令, 一条广泛适用的经验规律是: **一个程序90%的执行时间花费在仅10%的代码中**;  局部性类型分为三种基本形式:   \n* **空间局部性(Spatial locality)**   \n  * 地址临近的项目很可能会在短时间内再次访问  \n  * 内存/数据局部性\n    * 连续定义的多个局部变量, 函数调用参数,  结构体内的成员数据等  \n  * 顺序局部性      \n    * 当线性排列和访问相关数据元素时会发生顺序局部性, 例如: 指令的顺序读取, 数组的连续读取  \n* **时间局部性(Temporal locality)**  \n  * 最近时间内访问过的内容(指令,内存等)会在短时间内被再次访问   \n  * 例如: 调用一个函数时, 传入的参数会很快再次被使用到  \n\n* **分支局部性(Branch locality)**   \n  * 几乎所有处理器都采用的条件分支动态预测方案, 其根据分支指令发生转移的历史来进行预测, 准确率90%以上.\n\n举例场景  \n  * 硬件的发展, CPU性能的提升和存储硬件的性能提升差异   \n  * CPU的分支预测, Memory Hierarchy, \n  * 数据库的实质   \n  * 游戏中的同步模型   \n  * 视频的压缩技术   \n  * 内存分配器和meta设计  \n  \n\n### 计算机的定量设计原理: Amdahl定律和性能提升的表示方法  \n> 在计算机体系结构中，阿姆达尔定律（或阿姆达尔论点[1]）是一个公式，该公式给出了在固定工作负载下任务执行的延迟的理论上的加速，这可以预期其资源得到了改善的系统。它以计算机科学家Gene Amdahl的名字命名，并于1967年在AFIPS春季联合计算机会议上发表。  \n\n其定律可以用以下公式描述: \n$$S = \\frac{1} {(1-p) + \\frac{p}{s} } $$\n\n$S$ 延迟是整个任务执行的理论上的加速  \n$s$ 是任务的一部分得益于改进的系统资源   \n$p$ 是受益于最初占用改进资源的部分的执行时间比例    \n\n**该定律的主要思想是: 当我们对系统的某个部分加速时, 其对整体性能的影响取决于该部分的重要性和加速程度.**   \n> 例如:  \n> 系统某部分的初始耗时比例为60%(s=0.6);  \n> 我们对该部分做了重大改进并获得了巨大的性能提升, 获得加速比为3(s=3);\n> 但是获得的系统加速比最终为1.67(倍);    \n\nnotes:   \n> **性能提升最好的表示方法是用比例的形式$T_{old}/T_{new}$, 如果有所改进, 则比值大于1. 一般用后缀\"X\"表示比例, 例如1.67X, 读作'1.67倍' ;**       \n> 该表示相对传统百分比方法而言更为清晰:\n> > 通常百分比适用于变化小的情况, 并且存在以下模糊的定义部分:    \n> > 例如这种变化是用$100*(T_{old}-T_{new})/T_{new}$还是$100*(T_{old}-T_{new})/T_{old}$  ?   \n> > 以及与简单的说性能提升为2.2倍, 百分比的120%的性能提升更难理解.   \n\n\n## 编写高效程序和性能优化   \n\n首先, 写程序最主要的目标是使它在所有可能的情况下都能正确工作,  一个运行的很快但是会给出错误结果的程序没有任何用处.   \n\n但是另外一方面, 很多情景下让程序跑得很快(包括响应速度甚至性能功耗比)也是一个重要的考虑因素, 这在游戏中的gameplay部分体现的更为淋漓尽致.  \n\n编写高效程序需要做到以下几点(局部性原理贯穿所有层级):  \n* 高级设计: 选择合适的算法和数据结构     \n* 编码原则: 编写编译器能识别并优化成高效可执行代码的源代码;(隐含:需要理解编译器优化的的原理和其局限性)   \n* 低级优化: 充分利用硬件的功能并充分发挥硬件的性能.    \n\n\n程序优化的步骤:  \n* 确认并分析性能瓶颈  \n* 理解工作的目标, 并重新审视工作代码是否遵循'编写高效程序'的几个基本要点.  \n* 选择合适的算法和数据结构, 必要时根据时间和人力成本是否需要重构设计.    \n* 消除不必要的工作, 包括不必要的设计和流程, 不必要的代码和调用   \n* 对热点代码进行针对硬件特性的低级优化, 减少对硬件不友好的代码, 尽可能的发挥硬件的性能.   \n\n代码优化基本原则:优化不应带来可见的副作用改变  \n* 如非必要, 尽可能进行局部的替换和改善, 减少优化带来的修改规模.   \n* 如非必要, 尽可能的使用简洁的代码, 避免优化带来的可读性损失   \n* 如非必要, 尽可能保持代码的通用性, 避免过度牺牲可扩展性和灵活性.  \n\nnotes:   \n> 如何保证的程序的正确性, 参见'安全编程';   \n\n\n\n\n","source":"_posts/2021-05-10-localization.md","raw":"\n---\ntitle: 高性能编程:序\ndate: 2021-05-10\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## 硬件环境和技术趋势   \n\n### 带宽胜于延迟   \n  > 带宽是指的给定时间内能完成的总工作量, 延迟是一个事件从开始到结束所经历的时间.   \n  > 在过去的20\\~40年里, CPU, 内存, 网络, 硬盘等, 其带宽的改进为300\\~25000倍, 而延迟的改进仅为6\\~8倍   \n* 处理器性能和存储器性能差距越来越大   \n  > 在过去的20\\~40年里, 处理器性能提升(05年后变化较小)带来的单位时间内的存储请求提高了约10000倍, 但是存储器的访问性能改进仅为6\\~8倍  \n<!-- more -->\n### 充分利用并行   \n在带宽胜于延迟的硬件发展和技术趋势下, 要充分发挥硬件的性能, 并行是其最重要的方法之一.    \n* 位级并行   \n  * Processing Unit处理位宽, 寄存器位宽, 数据总线位宽等 \n  * 例如64位机相对32位机增加了一倍的处理位宽, 也就意味着一个CPU周期内能处理的信息量提升了两倍.   \n* 指令级并行  \n  * (单指令流多数据流)SIMD指令集(向量处理器) (数据并行)  \n    * MMX: 可以将64位的寄存器作为```2*32```或者```8*8``` 进行整数的并行计算, 但其寄存器为借用的FPU的寄存器.   \n    * SSE: 有1,2,3,4代, 相对MMX主要区别是有了自己专属的128位长的寄存器, 并且支持浮点数的并行计算.  \n    * AVX: 除了进一步增加位宽(AVX2为256位,AVX-512为512位)外还支持三指令, 但有可能触发降频  \n  * 指令流水线(顺序)   \n    * 通常一条指令有多个过程, 例如取址, 译码, 执行, 访存, 回写, 如果没有流水线技术则一般一个CPU周期内只能完成一个过程, 即多个CPU周期才能执行完一个指令,  而通过重叠执行多个指令, 理想情况下可以达到每个CPU周期完成一条指令. 但因指令之间的资源冲突问题, 可能导致更多的延迟, 以及长流水线被打断带来的冲洗(清空)操作会带来响应的性能惩罚(bypass/forwarding和分支预测会缓解问题).  \n  * 指令多发射(超标量处理器)  \n    * 超标量处理器可以通过将多个指令同时分派到处理器上的不同执行单元，从而在一个时钟周期内执行多个指令.  \n  * 同时多线程(SMT 超标量)   \n    * 在一个CPU核心上同时执行多个线程, 见intel的超线程实现方案.  \n  * 乱序执行 \n    * 不同的指令其运算周期不同, 特别是指令管道和内存访问的速度差,  乱序执行会对发送的指令请求进行重排序, 以达到在等待的过程中插入更多指令的执行而不是总是空等   \n* 任务并行   \n  * 线程, 进程等  \n  \n### 局部性原理  \n\n在计算机科学的发展过程中 贯穿软件和硬件, 几乎无差别覆盖所有对性能和延迟有要求的应用领域, 一次又一次拯救了性能瓶颈危机, 各类优化的基石. 或许很少提及但却一直在使用和遵循的原理, 即**局部性原理**:   \n程序常常重复使用他们最近用过的数据和指令, 一条广泛适用的经验规律是: **一个程序90%的执行时间花费在仅10%的代码中**;  局部性类型分为三种基本形式:   \n* **空间局部性(Spatial locality)**   \n  * 地址临近的项目很可能会在短时间内再次访问  \n  * 内存/数据局部性\n    * 连续定义的多个局部变量, 函数调用参数,  结构体内的成员数据等  \n  * 顺序局部性      \n    * 当线性排列和访问相关数据元素时会发生顺序局部性, 例如: 指令的顺序读取, 数组的连续读取  \n* **时间局部性(Temporal locality)**  \n  * 最近时间内访问过的内容(指令,内存等)会在短时间内被再次访问   \n  * 例如: 调用一个函数时, 传入的参数会很快再次被使用到  \n\n* **分支局部性(Branch locality)**   \n  * 几乎所有处理器都采用的条件分支动态预测方案, 其根据分支指令发生转移的历史来进行预测, 准确率90%以上.\n\n举例场景  \n  * 硬件的发展, CPU性能的提升和存储硬件的性能提升差异   \n  * CPU的分支预测, Memory Hierarchy, \n  * 数据库的实质   \n  * 游戏中的同步模型   \n  * 视频的压缩技术   \n  * 内存分配器和meta设计  \n  \n\n### 计算机的定量设计原理: Amdahl定律和性能提升的表示方法  \n> 在计算机体系结构中，阿姆达尔定律（或阿姆达尔论点[1]）是一个公式，该公式给出了在固定工作负载下任务执行的延迟的理论上的加速，这可以预期其资源得到了改善的系统。它以计算机科学家Gene Amdahl的名字命名，并于1967年在AFIPS春季联合计算机会议上发表。  \n\n其定律可以用以下公式描述: \n$$S = \\frac{1} {(1-p) + \\frac{p}{s} } $$\n\n$S$ 延迟是整个任务执行的理论上的加速  \n$s$ 是任务的一部分得益于改进的系统资源   \n$p$ 是受益于最初占用改进资源的部分的执行时间比例    \n\n**该定律的主要思想是: 当我们对系统的某个部分加速时, 其对整体性能的影响取决于该部分的重要性和加速程度.**   \n> 例如:  \n> 系统某部分的初始耗时比例为60%(s=0.6);  \n> 我们对该部分做了重大改进并获得了巨大的性能提升, 获得加速比为3(s=3);\n> 但是获得的系统加速比最终为1.67(倍);    \n\nnotes:   \n> **性能提升最好的表示方法是用比例的形式$T_{old}/T_{new}$, 如果有所改进, 则比值大于1. 一般用后缀\"X\"表示比例, 例如1.67X, 读作'1.67倍' ;**       \n> 该表示相对传统百分比方法而言更为清晰:\n> > 通常百分比适用于变化小的情况, 并且存在以下模糊的定义部分:    \n> > 例如这种变化是用$100*(T_{old}-T_{new})/T_{new}$还是$100*(T_{old}-T_{new})/T_{old}$  ?   \n> > 以及与简单的说性能提升为2.2倍, 百分比的120%的性能提升更难理解.   \n\n\n## 编写高效程序和性能优化   \n\n首先, 写程序最主要的目标是使它在所有可能的情况下都能正确工作,  一个运行的很快但是会给出错误结果的程序没有任何用处.   \n\n但是另外一方面, 很多情景下让程序跑得很快(包括响应速度甚至性能功耗比)也是一个重要的考虑因素, 这在游戏中的gameplay部分体现的更为淋漓尽致.  \n\n编写高效程序需要做到以下几点(局部性原理贯穿所有层级):  \n* 高级设计: 选择合适的算法和数据结构     \n* 编码原则: 编写编译器能识别并优化成高效可执行代码的源代码;(隐含:需要理解编译器优化的的原理和其局限性)   \n* 低级优化: 充分利用硬件的功能并充分发挥硬件的性能.    \n\n\n程序优化的步骤:  \n* 确认并分析性能瓶颈  \n* 理解工作的目标, 并重新审视工作代码是否遵循'编写高效程序'的几个基本要点.  \n* 选择合适的算法和数据结构, 必要时根据时间和人力成本是否需要重构设计.    \n* 消除不必要的工作, 包括不必要的设计和流程, 不必要的代码和调用   \n* 对热点代码进行针对硬件特性的低级优化, 减少对硬件不友好的代码, 尽可能的发挥硬件的性能.   \n\n代码优化基本原则:优化不应带来可见的副作用改变  \n* 如非必要, 尽可能进行局部的替换和改善, 减少优化带来的修改规模.   \n* 如非必要, 尽可能的使用简洁的代码, 避免优化带来的可读性损失   \n* 如非必要, 尽可能保持代码的通用性, 避免过度牺牲可扩展性和灵活性.  \n\nnotes:   \n> 如何保证的程序的正确性, 参见'安全编程';   \n\n\n\n\n","slug":"2021-05-10-localization","published":1,"updated":"2021-06-08T06:32:10.997Z","_id":"ckp4x5uu400044g5h8f53hynh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"硬件环境和技术趋势\">硬件环境和技术趋势</span></h2><h3><span id=\"带宽胜于延迟\">带宽胜于延迟</span></h3><blockquote>\n<p>带宽是指的给定时间内能完成的总工作量, 延迟是一个事件从开始到结束所经历的时间.<br>在过去的20~40年里, CPU, 内存, 网络, 硬盘等, 其带宽的改进为300~25000倍, 而延迟的改进仅为6~8倍   </p>\n</blockquote>\n<ul>\n<li>处理器性能和存储器性能差距越来越大   <blockquote>\n<p>在过去的20~40年里, 处理器性能提升(05年后变化较小)带来的单位时间内的存储请求提高了约10000倍, 但是存储器的访问性能改进仅为6~8倍  </p>\n</blockquote>\n<a id=\"more\"></a>\n<h3><span id=\"充分利用并行\">充分利用并行</span></h3>在带宽胜于延迟的硬件发展和技术趋势下, 要充分发挥硬件的性能, 并行是其最重要的方法之一.    </li>\n<li>位级并行   <ul>\n<li>Processing Unit处理位宽, 寄存器位宽, 数据总线位宽等 </li>\n<li>例如64位机相对32位机增加了一倍的处理位宽, 也就意味着一个CPU周期内能处理的信息量提升了两倍.   </li>\n</ul>\n</li>\n<li>指令级并行  <ul>\n<li>(单指令流多数据流)SIMD指令集(向量处理器) (数据并行)  <ul>\n<li>MMX: 可以将64位的寄存器作为<code>2*32</code>或者<code>8*8</code> 进行整数的并行计算, 但其寄存器为借用的FPU的寄存器.   </li>\n<li>SSE: 有1,2,3,4代, 相对MMX主要区别是有了自己专属的128位长的寄存器, 并且支持浮点数的并行计算.  </li>\n<li>AVX: 除了进一步增加位宽(AVX2为256位,AVX-512为512位)外还支持三指令, 但有可能触发降频  </li>\n</ul>\n</li>\n<li>指令流水线(顺序)   <ul>\n<li>通常一条指令有多个过程, 例如取址, 译码, 执行, 访存, 回写, 如果没有流水线技术则一般一个CPU周期内只能完成一个过程, 即多个CPU周期才能执行完一个指令,  而通过重叠执行多个指令, 理想情况下可以达到每个CPU周期完成一条指令. 但因指令之间的资源冲突问题, 可能导致更多的延迟, 以及长流水线被打断带来的冲洗(清空)操作会带来响应的性能惩罚(bypass/forwarding和分支预测会缓解问题).  </li>\n</ul>\n</li>\n<li>指令多发射(超标量处理器)  <ul>\n<li>超标量处理器可以通过将多个指令同时分派到处理器上的不同执行单元，从而在一个时钟周期内执行多个指令.  </li>\n</ul>\n</li>\n<li>同时多线程(SMT 超标量)   <ul>\n<li>在一个CPU核心上同时执行多个线程, 见intel的超线程实现方案.  </li>\n</ul>\n</li>\n<li>乱序执行 <ul>\n<li>不同的指令其运算周期不同, 特别是指令管道和内存访问的速度差,  乱序执行会对发送的指令请求进行重排序, 以达到在等待的过程中插入更多指令的执行而不是总是空等   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>任务并行   <ul>\n<li>线程, 进程等  </li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"局部性原理\">局部性原理</span></h3><p>在计算机科学的发展过程中 贯穿软件和硬件, 几乎无差别覆盖所有对性能和延迟有要求的应用领域, 一次又一次拯救了性能瓶颈危机, 各类优化的基石. 或许很少提及但却一直在使用和遵循的原理, 即<strong>局部性原理</strong>:<br>程序常常重复使用他们最近用过的数据和指令, 一条广泛适用的经验规律是: <strong>一个程序90%的执行时间花费在仅10%的代码中</strong>;  局部性类型分为三种基本形式:   </p>\n<ul>\n<li><p><strong>空间局部性(Spatial locality)</strong>   </p>\n<ul>\n<li>地址临近的项目很可能会在短时间内再次访问  </li>\n<li>内存/数据局部性<ul>\n<li>连续定义的多个局部变量, 函数调用参数,  结构体内的成员数据等  </li>\n</ul>\n</li>\n<li>顺序局部性      <ul>\n<li>当线性排列和访问相关数据元素时会发生顺序局部性, 例如: 指令的顺序读取, 数组的连续读取  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>时间局部性(Temporal locality)</strong>  </p>\n<ul>\n<li>最近时间内访问过的内容(指令,内存等)会在短时间内被再次访问   </li>\n<li>例如: 调用一个函数时, 传入的参数会很快再次被使用到  </li>\n</ul>\n</li>\n<li><p><strong>分支局部性(Branch locality)</strong>   </p>\n<ul>\n<li>几乎所有处理器都采用的条件分支动态预测方案, 其根据分支指令发生转移的历史来进行预测, 准确率90%以上.</li>\n</ul>\n</li>\n</ul>\n<p>举例场景  </p>\n<ul>\n<li>硬件的发展, CPU性能的提升和存储硬件的性能提升差异   </li>\n<li>CPU的分支预测, Memory Hierarchy, </li>\n<li>数据库的实质   </li>\n<li>游戏中的同步模型   </li>\n<li>视频的压缩技术   </li>\n<li>内存分配器和meta设计  </li>\n</ul>\n<h3><span id=\"计算机的定量设计原理-amdahl定律和性能提升的表示方法\">计算机的定量设计原理: Amdahl定律和性能提升的表示方法</span></h3><blockquote>\n<p>在计算机体系结构中，阿姆达尔定律（或阿姆达尔论点[1]）是一个公式，该公式给出了在固定工作负载下任务执行的延迟的理论上的加速，这可以预期其资源得到了改善的系统。它以计算机科学家Gene Amdahl的名字命名，并于1967年在AFIPS春季联合计算机会议上发表。  </p>\n</blockquote>\n<p>其定律可以用以下公式描述:<br>$$S = \\frac{1} {(1-p) + \\frac{p}{s} } $$</p>\n<p>$S$ 延迟是整个任务执行的理论上的加速<br>$s$ 是任务的一部分得益于改进的系统资源<br>$p$ 是受益于最初占用改进资源的部分的执行时间比例    </p>\n<p><strong>该定律的主要思想是: 当我们对系统的某个部分加速时, 其对整体性能的影响取决于该部分的重要性和加速程度.</strong>   </p>\n<blockquote>\n<p>例如:<br>系统某部分的初始耗时比例为60%(s=0.6);<br>我们对该部分做了重大改进并获得了巨大的性能提升, 获得加速比为3(s=3);<br>但是获得的系统加速比最终为1.67(倍);    </p>\n</blockquote>\n<p>notes:   </p>\n<blockquote>\n<p><strong>性能提升最好的表示方法是用比例的形式$T_{old}/T_{new}$, 如果有所改进, 则比值大于1. 一般用后缀”X”表示比例, 例如1.67X, 读作’1.67倍’ ;</strong><br>该表示相对传统百分比方法而言更为清晰:</p>\n<blockquote>\n<p>通常百分比适用于变化小的情况, 并且存在以下模糊的定义部分:<br>例如这种变化是用$100<em>(T_{old}-T_{new})/T_{new}$还是$100</em>(T_{old}-T_{new})/T_{old}$  ?<br>以及与简单的说性能提升为2.2倍, 百分比的120%的性能提升更难理解.   </p>\n</blockquote>\n</blockquote>\n<h2><span id=\"编写高效程序和性能优化\">编写高效程序和性能优化</span></h2><p>首先, 写程序最主要的目标是使它在所有可能的情况下都能正确工作,  一个运行的很快但是会给出错误结果的程序没有任何用处.   </p>\n<p>但是另外一方面, 很多情景下让程序跑得很快(包括响应速度甚至性能功耗比)也是一个重要的考虑因素, 这在游戏中的gameplay部分体现的更为淋漓尽致.  </p>\n<p>编写高效程序需要做到以下几点(局部性原理贯穿所有层级):  </p>\n<ul>\n<li>高级设计: 选择合适的算法和数据结构     </li>\n<li>编码原则: 编写编译器能识别并优化成高效可执行代码的源代码;(隐含:需要理解编译器优化的的原理和其局限性)   </li>\n<li>低级优化: 充分利用硬件的功能并充分发挥硬件的性能.    </li>\n</ul>\n<p>程序优化的步骤:  </p>\n<ul>\n<li>确认并分析性能瓶颈  </li>\n<li>理解工作的目标, 并重新审视工作代码是否遵循’编写高效程序’的几个基本要点.  </li>\n<li>选择合适的算法和数据结构, 必要时根据时间和人力成本是否需要重构设计.    </li>\n<li>消除不必要的工作, 包括不必要的设计和流程, 不必要的代码和调用   </li>\n<li>对热点代码进行针对硬件特性的低级优化, 减少对硬件不友好的代码, 尽可能的发挥硬件的性能.   </li>\n</ul>\n<p>代码优化基本原则:优化不应带来可见的副作用改变  </p>\n<ul>\n<li>如非必要, 尽可能进行局部的替换和改善, 减少优化带来的修改规模.   </li>\n<li>如非必要, 尽可能的使用简洁的代码, 避免优化带来的可读性损失   </li>\n<li>如非必要, 尽可能保持代码的通用性, 避免过度牺牲可扩展性和灵活性.  </li>\n</ul>\n<p>notes:   </p>\n<blockquote>\n<p>如何保证的程序的正确性, 参见’安全编程’;</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"硬件环境和技术趋势\"><a href=\"#硬件环境和技术趋势\" class=\"headerlink\" title=\"硬件环境和技术趋势\"></a>硬件环境和技术趋势</h2><h3 id=\"带宽胜于延迟\"><a href=\"#带宽胜于延迟\" class=\"headerlink\" title=\"带宽胜于延迟\"></a>带宽胜于延迟</h3><blockquote>\n<p>带宽是指的给定时间内能完成的总工作量, 延迟是一个事件从开始到结束所经历的时间.<br>在过去的20~40年里, CPU, 内存, 网络, 硬盘等, 其带宽的改进为300~25000倍, 而延迟的改进仅为6~8倍   </p>\n</blockquote>\n<ul>\n<li>处理器性能和存储器性能差距越来越大   <blockquote>\n<p>在过去的20~40年里, 处理器性能提升(05年后变化较小)带来的单位时间内的存储请求提高了约10000倍, 但是存储器的访问性能改进仅为6~8倍  </p>\n</blockquote>","more":"<h3 id=\"充分利用并行\"><a href=\"#充分利用并行\" class=\"headerlink\" title=\"充分利用并行\"></a>充分利用并行</h3>在带宽胜于延迟的硬件发展和技术趋势下, 要充分发挥硬件的性能, 并行是其最重要的方法之一.    </li>\n<li>位级并行   <ul>\n<li>Processing Unit处理位宽, 寄存器位宽, 数据总线位宽等 </li>\n<li>例如64位机相对32位机增加了一倍的处理位宽, 也就意味着一个CPU周期内能处理的信息量提升了两倍.   </li>\n</ul>\n</li>\n<li>指令级并行  <ul>\n<li>(单指令流多数据流)SIMD指令集(向量处理器) (数据并行)  <ul>\n<li>MMX: 可以将64位的寄存器作为<code>2*32</code>或者<code>8*8</code> 进行整数的并行计算, 但其寄存器为借用的FPU的寄存器.   </li>\n<li>SSE: 有1,2,3,4代, 相对MMX主要区别是有了自己专属的128位长的寄存器, 并且支持浮点数的并行计算.  </li>\n<li>AVX: 除了进一步增加位宽(AVX2为256位,AVX-512为512位)外还支持三指令, 但有可能触发降频  </li>\n</ul>\n</li>\n<li>指令流水线(顺序)   <ul>\n<li>通常一条指令有多个过程, 例如取址, 译码, 执行, 访存, 回写, 如果没有流水线技术则一般一个CPU周期内只能完成一个过程, 即多个CPU周期才能执行完一个指令,  而通过重叠执行多个指令, 理想情况下可以达到每个CPU周期完成一条指令. 但因指令之间的资源冲突问题, 可能导致更多的延迟, 以及长流水线被打断带来的冲洗(清空)操作会带来响应的性能惩罚(bypass/forwarding和分支预测会缓解问题).  </li>\n</ul>\n</li>\n<li>指令多发射(超标量处理器)  <ul>\n<li>超标量处理器可以通过将多个指令同时分派到处理器上的不同执行单元，从而在一个时钟周期内执行多个指令.  </li>\n</ul>\n</li>\n<li>同时多线程(SMT 超标量)   <ul>\n<li>在一个CPU核心上同时执行多个线程, 见intel的超线程实现方案.  </li>\n</ul>\n</li>\n<li>乱序执行 <ul>\n<li>不同的指令其运算周期不同, 特别是指令管道和内存访问的速度差,  乱序执行会对发送的指令请求进行重排序, 以达到在等待的过程中插入更多指令的执行而不是总是空等   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>任务并行   <ul>\n<li>线程, 进程等  </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"局部性原理\"><a href=\"#局部性原理\" class=\"headerlink\" title=\"局部性原理\"></a>局部性原理</h3><p>在计算机科学的发展过程中 贯穿软件和硬件, 几乎无差别覆盖所有对性能和延迟有要求的应用领域, 一次又一次拯救了性能瓶颈危机, 各类优化的基石. 或许很少提及但却一直在使用和遵循的原理, 即<strong>局部性原理</strong>:<br>程序常常重复使用他们最近用过的数据和指令, 一条广泛适用的经验规律是: <strong>一个程序90%的执行时间花费在仅10%的代码中</strong>;  局部性类型分为三种基本形式:   </p>\n<ul>\n<li><p><strong>空间局部性(Spatial locality)</strong>   </p>\n<ul>\n<li>地址临近的项目很可能会在短时间内再次访问  </li>\n<li>内存/数据局部性<ul>\n<li>连续定义的多个局部变量, 函数调用参数,  结构体内的成员数据等  </li>\n</ul>\n</li>\n<li>顺序局部性      <ul>\n<li>当线性排列和访问相关数据元素时会发生顺序局部性, 例如: 指令的顺序读取, 数组的连续读取  </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>时间局部性(Temporal locality)</strong>  </p>\n<ul>\n<li>最近时间内访问过的内容(指令,内存等)会在短时间内被再次访问   </li>\n<li>例如: 调用一个函数时, 传入的参数会很快再次被使用到  </li>\n</ul>\n</li>\n<li><p><strong>分支局部性(Branch locality)</strong>   </p>\n<ul>\n<li>几乎所有处理器都采用的条件分支动态预测方案, 其根据分支指令发生转移的历史来进行预测, 准确率90%以上.</li>\n</ul>\n</li>\n</ul>\n<p>举例场景  </p>\n<ul>\n<li>硬件的发展, CPU性能的提升和存储硬件的性能提升差异   </li>\n<li>CPU的分支预测, Memory Hierarchy, </li>\n<li>数据库的实质   </li>\n<li>游戏中的同步模型   </li>\n<li>视频的压缩技术   </li>\n<li>内存分配器和meta设计  </li>\n</ul>\n<h3 id=\"计算机的定量设计原理-Amdahl定律和性能提升的表示方法\"><a href=\"#计算机的定量设计原理-Amdahl定律和性能提升的表示方法\" class=\"headerlink\" title=\"计算机的定量设计原理: Amdahl定律和性能提升的表示方法\"></a>计算机的定量设计原理: Amdahl定律和性能提升的表示方法</h3><blockquote>\n<p>在计算机体系结构中，阿姆达尔定律（或阿姆达尔论点[1]）是一个公式，该公式给出了在固定工作负载下任务执行的延迟的理论上的加速，这可以预期其资源得到了改善的系统。它以计算机科学家Gene Amdahl的名字命名，并于1967年在AFIPS春季联合计算机会议上发表。  </p>\n</blockquote>\n<p>其定律可以用以下公式描述:<br>$$S = \\frac{1} {(1-p) + \\frac{p}{s} } $$</p>\n<p>$S$ 延迟是整个任务执行的理论上的加速<br>$s$ 是任务的一部分得益于改进的系统资源<br>$p$ 是受益于最初占用改进资源的部分的执行时间比例    </p>\n<p><strong>该定律的主要思想是: 当我们对系统的某个部分加速时, 其对整体性能的影响取决于该部分的重要性和加速程度.</strong>   </p>\n<blockquote>\n<p>例如:<br>系统某部分的初始耗时比例为60%(s=0.6);<br>我们对该部分做了重大改进并获得了巨大的性能提升, 获得加速比为3(s=3);<br>但是获得的系统加速比最终为1.67(倍);    </p>\n</blockquote>\n<p>notes:   </p>\n<blockquote>\n<p><strong>性能提升最好的表示方法是用比例的形式$T_{old}/T_{new}$, 如果有所改进, 则比值大于1. 一般用后缀”X”表示比例, 例如1.67X, 读作’1.67倍’ ;</strong><br>该表示相对传统百分比方法而言更为清晰:</p>\n<blockquote>\n<p>通常百分比适用于变化小的情况, 并且存在以下模糊的定义部分:<br>例如这种变化是用$100<em>(T_{old}-T_{new})/T_{new}$还是$100</em>(T_{old}-T_{new})/T_{old}$  ?<br>以及与简单的说性能提升为2.2倍, 百分比的120%的性能提升更难理解.   </p>\n</blockquote>\n</blockquote>\n<h2 id=\"编写高效程序和性能优化\"><a href=\"#编写高效程序和性能优化\" class=\"headerlink\" title=\"编写高效程序和性能优化\"></a>编写高效程序和性能优化</h2><p>首先, 写程序最主要的目标是使它在所有可能的情况下都能正确工作,  一个运行的很快但是会给出错误结果的程序没有任何用处.   </p>\n<p>但是另外一方面, 很多情景下让程序跑得很快(包括响应速度甚至性能功耗比)也是一个重要的考虑因素, 这在游戏中的gameplay部分体现的更为淋漓尽致.  </p>\n<p>编写高效程序需要做到以下几点(局部性原理贯穿所有层级):  </p>\n<ul>\n<li>高级设计: 选择合适的算法和数据结构     </li>\n<li>编码原则: 编写编译器能识别并优化成高效可执行代码的源代码;(隐含:需要理解编译器优化的的原理和其局限性)   </li>\n<li>低级优化: 充分利用硬件的功能并充分发挥硬件的性能.    </li>\n</ul>\n<p>程序优化的步骤:  </p>\n<ul>\n<li>确认并分析性能瓶颈  </li>\n<li>理解工作的目标, 并重新审视工作代码是否遵循’编写高效程序’的几个基本要点.  </li>\n<li>选择合适的算法和数据结构, 必要时根据时间和人力成本是否需要重构设计.    </li>\n<li>消除不必要的工作, 包括不必要的设计和流程, 不必要的代码和调用   </li>\n<li>对热点代码进行针对硬件特性的低级优化, 减少对硬件不友好的代码, 尽可能的发挥硬件的性能.   </li>\n</ul>\n<p>代码优化基本原则:优化不应带来可见的副作用改变  </p>\n<ul>\n<li>如非必要, 尽可能进行局部的替换和改善, 减少优化带来的修改规模.   </li>\n<li>如非必要, 尽可能的使用简洁的代码, 避免优化带来的可读性损失   </li>\n<li>如非必要, 尽可能保持代码的通用性, 避免过度牺牲可扩展性和灵活性.  </li>\n</ul>\n<p>notes:   </p>\n<blockquote>\n<p>如何保证的程序的正确性, 参见’安全编程’;</p>\n</blockquote>"},{"title":"高性能编程:内存访问性能分析和常见数据结构","date":"2021-06-03T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## CPU CACHE   \n在计算机系统中，CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处理器的频率。\n\n当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。\n\n缓存之所以有效，主要是因为程序运行时对内存的访问呈现局部性（Locality）特征。这种局部性既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality）。有效利用这种局部性，缓存可以达到极高的命中率。\n\n在处理器看来，缓存是一个透明部件。因此，程序员通常无法直接干预对缓存的操作。但是，确实可以根据缓存的特点对程序代码实施特定优化，从而更好地利用缓存。\n\n<!-- more -->\n\n### 基础结构   \n基础术语:\n\n* cache set   \n  * a \"row\" in the cache; 在层级关系中, cache分为多个条目, 每行条目称为set;    \n\n* cache block/ cache line :\n  * cache 存储的最小单元, 一般包含多个字节; 在讲cache实现的地方一般使用block; (2021)常见的X86-64服务器上多为64字节;   \n  * 数据以cache block固定大小在内存和缓存之间传输\n\n* cache tag \n  * 每块数据都对应一个tag用来作为数据的身份标识, 通常一个缓存位置可以映射不同的内存, 使用tag进行区分.    \n* valid bit  \n  * 对应block位置是否存在有效缓存  \n* cache offset \n  * 对应block大小的偏移量  \n\n基础访问流程:   \n* 通过给定内存地址定位该内存所在的cache set    \n* 检查该set下所有的cache block关联的cache tag, 如果发现匹配则存在block; (通常电路设计中是并行检查, 电路成本比较昂贵)    \n* 如果找到匹配的block, 检查valid bit位, 为1则代表缓存有效     \n\n基础的cache映射结构, 主流为组关联结构, 为方便描述, set数量定义为N, 每个set下的block数量定义为M:   \n* 直接映射 Direct-mapped cache   \n  * N*1 结构,  每个set只有一个block   \n  * 优点: 实现结构简单 定位到set后直接检查唯一的一个block即可确认缓存是否命中.    \n  * 缺点: 缓存利用率低, 并且存在更多的冲突      \n* 全相连 Fully associative cache  \n  * 1*M结构, 只有一个set, 所有block都在一个set下面    \n  * 优点: 缓存利用率高, 冲突少, 并且有多种替换的算法可以使用      \n  * 缺点: 硬件昂贵, 映射过程耗电且慢(需要执行完所有检查, 要么硬件昂贵 要么遍历访问带来更长的延迟)  \n* N路组相连 Set-associative cache  \n  * N*M结构, 直接映射和全相连都相当于组相连的特例情况, 是一个折中方案   \n  * 优点和缺点, 相比直接映射和全相连, 比较经济, 大多数CPU都是N路组相连, core I7或者志强一般 L1,L2是4~8路组相连, L3是8~16路组相连   \n\n\n## 内存读取的性能层级   \n* L1 cache  \n  * 一般访问消耗的指令周期约为3  \n* L2 cache  \n  * 一般访问消耗的指令周期约为9~11  \n* L3 cache  \n  * 一般访问消耗的指令周期约为40~60  \n* 内存   \n  * 一般访问消耗的指令周期约为265~290\n\n测试方法:   \n一般通过构建一个远大于L3 cache大小的内存块,  以大于cache line的stride长度进行步进回环访问,  则可以统计出来L1, L2, L3的实际缓存大小和访问延迟.  细节可参见zperf的cpu_cache_test   \n\n内存的访问延迟一般是超过100ns, 在NUMA的多路CPU系统中, 访问远程内存会有更多的延迟(一般至少增加50% 一般为一倍).  \n\n从寄存器到内存性能差异约在300~450倍,  从L1到内存性能差异在100~150倍左右,  很明显, 想要优化性能, 除了尽可能的利用好指令级并行计算, 所有涉及到存储访问的地方都需要尽可能的提高缓存友好型.    \n\n\n\n## 优化案例   \n\n见zperf的cpu_cache_matrix测试 可以有效提高二维或者三维空间的管理性能  \n\n\n\n## reference\nNUMA基础结构示意  \n* NUMA   \n  * NODE1 (对应一个socket 一个屋里CPU插槽)\n    * Core (物理)核心1  \n      * Threads 超线程核心(超标量CPU的同时多线程, 逻辑核)   \n      * Threads  \n      * ALU\n      * FPU\n      * L1 Cache\n      * L2 Cache  \n    * Core 核心2  \n    * Core 核心...  \n    * Uncore \n      * 内存控制器 MC (现在已经移入CPU 叫iMC)  通过iMC直接访问的内存叫本地内存  \n      * PCIe Root Complex(现在也已经移入CPU )   \n      * QPI switch 通过QPI链路再通过iMC访问的内存称为远程内存 intel ivy bridge下的NUMA平台延迟增加一倍   \n      * L3缓存  \n      * CBox  \n      * 其他外设控制器   \n  * NODE2\n  * NODE...","source":"_posts/2021-06-04-latency-mem-test.md","raw":"\n---\ntitle: 高性能编程:内存访问性能分析和常见数据结构  \ndate: 2021-06-04\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## CPU CACHE   \n在计算机系统中，CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处理器的频率。\n\n当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。\n\n缓存之所以有效，主要是因为程序运行时对内存的访问呈现局部性（Locality）特征。这种局部性既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality）。有效利用这种局部性，缓存可以达到极高的命中率。\n\n在处理器看来，缓存是一个透明部件。因此，程序员通常无法直接干预对缓存的操作。但是，确实可以根据缓存的特点对程序代码实施特定优化，从而更好地利用缓存。\n\n<!-- more -->\n\n### 基础结构   \n基础术语:\n\n* cache set   \n  * a \"row\" in the cache; 在层级关系中, cache分为多个条目, 每行条目称为set;    \n\n* cache block/ cache line :\n  * cache 存储的最小单元, 一般包含多个字节; 在讲cache实现的地方一般使用block; (2021)常见的X86-64服务器上多为64字节;   \n  * 数据以cache block固定大小在内存和缓存之间传输\n\n* cache tag \n  * 每块数据都对应一个tag用来作为数据的身份标识, 通常一个缓存位置可以映射不同的内存, 使用tag进行区分.    \n* valid bit  \n  * 对应block位置是否存在有效缓存  \n* cache offset \n  * 对应block大小的偏移量  \n\n基础访问流程:   \n* 通过给定内存地址定位该内存所在的cache set    \n* 检查该set下所有的cache block关联的cache tag, 如果发现匹配则存在block; (通常电路设计中是并行检查, 电路成本比较昂贵)    \n* 如果找到匹配的block, 检查valid bit位, 为1则代表缓存有效     \n\n基础的cache映射结构, 主流为组关联结构, 为方便描述, set数量定义为N, 每个set下的block数量定义为M:   \n* 直接映射 Direct-mapped cache   \n  * N*1 结构,  每个set只有一个block   \n  * 优点: 实现结构简单 定位到set后直接检查唯一的一个block即可确认缓存是否命中.    \n  * 缺点: 缓存利用率低, 并且存在更多的冲突      \n* 全相连 Fully associative cache  \n  * 1*M结构, 只有一个set, 所有block都在一个set下面    \n  * 优点: 缓存利用率高, 冲突少, 并且有多种替换的算法可以使用      \n  * 缺点: 硬件昂贵, 映射过程耗电且慢(需要执行完所有检查, 要么硬件昂贵 要么遍历访问带来更长的延迟)  \n* N路组相连 Set-associative cache  \n  * N*M结构, 直接映射和全相连都相当于组相连的特例情况, 是一个折中方案   \n  * 优点和缺点, 相比直接映射和全相连, 比较经济, 大多数CPU都是N路组相连, core I7或者志强一般 L1,L2是4~8路组相连, L3是8~16路组相连   \n\n\n## 内存读取的性能层级   \n* L1 cache  \n  * 一般访问消耗的指令周期约为3  \n* L2 cache  \n  * 一般访问消耗的指令周期约为9~11  \n* L3 cache  \n  * 一般访问消耗的指令周期约为40~60  \n* 内存   \n  * 一般访问消耗的指令周期约为265~290\n\n测试方法:   \n一般通过构建一个远大于L3 cache大小的内存块,  以大于cache line的stride长度进行步进回环访问,  则可以统计出来L1, L2, L3的实际缓存大小和访问延迟.  细节可参见zperf的cpu_cache_test   \n\n内存的访问延迟一般是超过100ns, 在NUMA的多路CPU系统中, 访问远程内存会有更多的延迟(一般至少增加50% 一般为一倍).  \n\n从寄存器到内存性能差异约在300~450倍,  从L1到内存性能差异在100~150倍左右,  很明显, 想要优化性能, 除了尽可能的利用好指令级并行计算, 所有涉及到存储访问的地方都需要尽可能的提高缓存友好型.    \n\n\n\n## 优化案例   \n\n见zperf的cpu_cache_matrix测试 可以有效提高二维或者三维空间的管理性能  \n\n\n\n## reference\nNUMA基础结构示意  \n* NUMA   \n  * NODE1 (对应一个socket 一个屋里CPU插槽)\n    * Core (物理)核心1  \n      * Threads 超线程核心(超标量CPU的同时多线程, 逻辑核)   \n      * Threads  \n      * ALU\n      * FPU\n      * L1 Cache\n      * L2 Cache  \n    * Core 核心2  \n    * Core 核心...  \n    * Uncore \n      * 内存控制器 MC (现在已经移入CPU 叫iMC)  通过iMC直接访问的内存叫本地内存  \n      * PCIe Root Complex(现在也已经移入CPU )   \n      * QPI switch 通过QPI链路再通过iMC访问的内存称为远程内存 intel ivy bridge下的NUMA平台延迟增加一倍   \n      * L3缓存  \n      * CBox  \n      * 其他外设控制器   \n  * NODE2\n  * NODE...","slug":"2021-06-04-latency-mem-test","published":1,"updated":"2021-06-08T06:32:00.935Z","_id":"ckpnnznqf00005c5h655s95uv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"cpu-cache\">CPU CACHE</span></h2><p>在计算机系统中，CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处理器的频率。</p>\n<p>当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。</p>\n<p>缓存之所以有效，主要是因为程序运行时对内存的访问呈现局部性（Locality）特征。这种局部性既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality）。有效利用这种局部性，缓存可以达到极高的命中率。</p>\n<p>在处理器看来，缓存是一个透明部件。因此，程序员通常无法直接干预对缓存的操作。但是，确实可以根据缓存的特点对程序代码实施特定优化，从而更好地利用缓存。</p>\n<a id=\"more\"></a>\n\n<h3><span id=\"基础结构\">基础结构</span></h3><p>基础术语:</p>\n<ul>\n<li><p>cache set   </p>\n<ul>\n<li>a “row” in the cache; 在层级关系中, cache分为多个条目, 每行条目称为set;    </li>\n</ul>\n</li>\n<li><p>cache block/ cache line :</p>\n<ul>\n<li>cache 存储的最小单元, 一般包含多个字节; 在讲cache实现的地方一般使用block; (2021)常见的X86-64服务器上多为64字节;   </li>\n<li>数据以cache block固定大小在内存和缓存之间传输</li>\n</ul>\n</li>\n<li><p>cache tag </p>\n<ul>\n<li>每块数据都对应一个tag用来作为数据的身份标识, 通常一个缓存位置可以映射不同的内存, 使用tag进行区分.    </li>\n</ul>\n</li>\n<li><p>valid bit  </p>\n<ul>\n<li>对应block位置是否存在有效缓存  </li>\n</ul>\n</li>\n<li><p>cache offset </p>\n<ul>\n<li>对应block大小的偏移量  </li>\n</ul>\n</li>\n</ul>\n<p>基础访问流程:   </p>\n<ul>\n<li>通过给定内存地址定位该内存所在的cache set    </li>\n<li>检查该set下所有的cache block关联的cache tag, 如果发现匹配则存在block; (通常电路设计中是并行检查, 电路成本比较昂贵)    </li>\n<li>如果找到匹配的block, 检查valid bit位, 为1则代表缓存有效     </li>\n</ul>\n<p>基础的cache映射结构, 主流为组关联结构, 为方便描述, set数量定义为N, 每个set下的block数量定义为M:   </p>\n<ul>\n<li>直接映射 Direct-mapped cache   <ul>\n<li>N*1 结构,  每个set只有一个block   </li>\n<li>优点: 实现结构简单 定位到set后直接检查唯一的一个block即可确认缓存是否命中.    </li>\n<li>缺点: 缓存利用率低, 并且存在更多的冲突      </li>\n</ul>\n</li>\n<li>全相连 Fully associative cache  <ul>\n<li>1*M结构, 只有一个set, 所有block都在一个set下面    </li>\n<li>优点: 缓存利用率高, 冲突少, 并且有多种替换的算法可以使用      </li>\n<li>缺点: 硬件昂贵, 映射过程耗电且慢(需要执行完所有检查, 要么硬件昂贵 要么遍历访问带来更长的延迟)  </li>\n</ul>\n</li>\n<li>N路组相连 Set-associative cache  <ul>\n<li>N*M结构, 直接映射和全相连都相当于组相连的特例情况, 是一个折中方案   </li>\n<li>优点和缺点, 相比直接映射和全相连, 比较经济, 大多数CPU都是N路组相连, core I7或者志强一般 L1,L2是4<del>8路组相连, L3是8</del>16路组相连   </li>\n</ul>\n</li>\n</ul>\n<h2><span id=\"内存读取的性能层级\">内存读取的性能层级</span></h2><ul>\n<li>L1 cache  <ul>\n<li>一般访问消耗的指令周期约为3  </li>\n</ul>\n</li>\n<li>L2 cache  <ul>\n<li>一般访问消耗的指令周期约为9~11  </li>\n</ul>\n</li>\n<li>L3 cache  <ul>\n<li>一般访问消耗的指令周期约为40~60  </li>\n</ul>\n</li>\n<li>内存   <ul>\n<li>一般访问消耗的指令周期约为265~290</li>\n</ul>\n</li>\n</ul>\n<p>测试方法:<br>一般通过构建一个远大于L3 cache大小的内存块,  以大于cache line的stride长度进行步进回环访问,  则可以统计出来L1, L2, L3的实际缓存大小和访问延迟.  细节可参见zperf的cpu_cache_test   </p>\n<p>内存的访问延迟一般是超过100ns, 在NUMA的多路CPU系统中, 访问远程内存会有更多的延迟(一般至少增加50% 一般为一倍).  </p>\n<p>从寄存器到内存性能差异约在300<del>450倍,  从L1到内存性能差异在100</del>150倍左右,  很明显, 想要优化性能, 除了尽可能的利用好指令级并行计算, 所有涉及到存储访问的地方都需要尽可能的提高缓存友好型.    </p>\n<h2><span id=\"优化案例\">优化案例</span></h2><p>见zperf的cpu_cache_matrix测试 可以有效提高二维或者三维空间的管理性能  </p>\n<h2><span id=\"reference\">reference</span></h2><p>NUMA基础结构示意  </p>\n<ul>\n<li>NUMA   <ul>\n<li>NODE1 (对应一个socket 一个屋里CPU插槽)<ul>\n<li>Core (物理)核心1  <ul>\n<li>Threads 超线程核心(超标量CPU的同时多线程, 逻辑核)   </li>\n<li>Threads  </li>\n<li>ALU</li>\n<li>FPU</li>\n<li>L1 Cache</li>\n<li>L2 Cache  </li>\n</ul>\n</li>\n<li>Core 核心2  </li>\n<li>Core 核心…  </li>\n<li>Uncore <ul>\n<li>内存控制器 MC (现在已经移入CPU 叫iMC)  通过iMC直接访问的内存叫本地内存  </li>\n<li>PCIe Root Complex(现在也已经移入CPU )   </li>\n<li>QPI switch 通过QPI链路再通过iMC访问的内存称为远程内存 intel ivy bridge下的NUMA平台延迟增加一倍   </li>\n<li>L3缓存  </li>\n<li>CBox  </li>\n<li>其他外设控制器   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>NODE2</li>\n<li>NODE…</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"CPU-CACHE\"><a href=\"#CPU-CACHE\" class=\"headerlink\" title=\"CPU CACHE\"></a>CPU CACHE</h2><p>在计算机系统中，CPU高速缓存（英语：CPU Cache，在本文中简称缓存）是用于减少处理器访问内存所需平均时间的部件。在金字塔式存储体系中它位于自顶向下的第二层，仅次于CPU寄存器。其容量远小于内存，但速度却可以接近处理器的频率。</p>\n<p>当处理器发出内存访问请求时，会先查看缓存内是否有请求数据。如果存在（命中），则不经访问内存直接返回该数据；如果不存在（失效），则要先把内存中的相应数据载入缓存，再将其返回处理器。</p>\n<p>缓存之所以有效，主要是因为程序运行时对内存的访问呈现局部性（Locality）特征。这种局部性既包括空间局部性（Spatial Locality），也包括时间局部性（Temporal Locality）。有效利用这种局部性，缓存可以达到极高的命中率。</p>\n<p>在处理器看来，缓存是一个透明部件。因此，程序员通常无法直接干预对缓存的操作。但是，确实可以根据缓存的特点对程序代码实施特定优化，从而更好地利用缓存。</p>","more":"<h3 id=\"基础结构\"><a href=\"#基础结构\" class=\"headerlink\" title=\"基础结构\"></a>基础结构</h3><p>基础术语:</p>\n<ul>\n<li><p>cache set   </p>\n<ul>\n<li>a “row” in the cache; 在层级关系中, cache分为多个条目, 每行条目称为set;    </li>\n</ul>\n</li>\n<li><p>cache block/ cache line :</p>\n<ul>\n<li>cache 存储的最小单元, 一般包含多个字节; 在讲cache实现的地方一般使用block; (2021)常见的X86-64服务器上多为64字节;   </li>\n<li>数据以cache block固定大小在内存和缓存之间传输</li>\n</ul>\n</li>\n<li><p>cache tag </p>\n<ul>\n<li>每块数据都对应一个tag用来作为数据的身份标识, 通常一个缓存位置可以映射不同的内存, 使用tag进行区分.    </li>\n</ul>\n</li>\n<li><p>valid bit  </p>\n<ul>\n<li>对应block位置是否存在有效缓存  </li>\n</ul>\n</li>\n<li><p>cache offset </p>\n<ul>\n<li>对应block大小的偏移量  </li>\n</ul>\n</li>\n</ul>\n<p>基础访问流程:   </p>\n<ul>\n<li>通过给定内存地址定位该内存所在的cache set    </li>\n<li>检查该set下所有的cache block关联的cache tag, 如果发现匹配则存在block; (通常电路设计中是并行检查, 电路成本比较昂贵)    </li>\n<li>如果找到匹配的block, 检查valid bit位, 为1则代表缓存有效     </li>\n</ul>\n<p>基础的cache映射结构, 主流为组关联结构, 为方便描述, set数量定义为N, 每个set下的block数量定义为M:   </p>\n<ul>\n<li>直接映射 Direct-mapped cache   <ul>\n<li>N*1 结构,  每个set只有一个block   </li>\n<li>优点: 实现结构简单 定位到set后直接检查唯一的一个block即可确认缓存是否命中.    </li>\n<li>缺点: 缓存利用率低, 并且存在更多的冲突      </li>\n</ul>\n</li>\n<li>全相连 Fully associative cache  <ul>\n<li>1*M结构, 只有一个set, 所有block都在一个set下面    </li>\n<li>优点: 缓存利用率高, 冲突少, 并且有多种替换的算法可以使用      </li>\n<li>缺点: 硬件昂贵, 映射过程耗电且慢(需要执行完所有检查, 要么硬件昂贵 要么遍历访问带来更长的延迟)  </li>\n</ul>\n</li>\n<li>N路组相连 Set-associative cache  <ul>\n<li>N*M结构, 直接映射和全相连都相当于组相连的特例情况, 是一个折中方案   </li>\n<li>优点和缺点, 相比直接映射和全相连, 比较经济, 大多数CPU都是N路组相连, core I7或者志强一般 L1,L2是4<del>8路组相连, L3是8</del>16路组相连   </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存读取的性能层级\"><a href=\"#内存读取的性能层级\" class=\"headerlink\" title=\"内存读取的性能层级\"></a>内存读取的性能层级</h2><ul>\n<li>L1 cache  <ul>\n<li>一般访问消耗的指令周期约为3  </li>\n</ul>\n</li>\n<li>L2 cache  <ul>\n<li>一般访问消耗的指令周期约为9~11  </li>\n</ul>\n</li>\n<li>L3 cache  <ul>\n<li>一般访问消耗的指令周期约为40~60  </li>\n</ul>\n</li>\n<li>内存   <ul>\n<li>一般访问消耗的指令周期约为265~290</li>\n</ul>\n</li>\n</ul>\n<p>测试方法:<br>一般通过构建一个远大于L3 cache大小的内存块,  以大于cache line的stride长度进行步进回环访问,  则可以统计出来L1, L2, L3的实际缓存大小和访问延迟.  细节可参见zperf的cpu_cache_test   </p>\n<p>内存的访问延迟一般是超过100ns, 在NUMA的多路CPU系统中, 访问远程内存会有更多的延迟(一般至少增加50% 一般为一倍).  </p>\n<p>从寄存器到内存性能差异约在300<del>450倍,  从L1到内存性能差异在100</del>150倍左右,  很明显, 想要优化性能, 除了尽可能的利用好指令级并行计算, 所有涉及到存储访问的地方都需要尽可能的提高缓存友好型.    </p>\n<h2 id=\"优化案例\"><a href=\"#优化案例\" class=\"headerlink\" title=\"优化案例\"></a>优化案例</h2><p>见zperf的cpu_cache_matrix测试 可以有效提高二维或者三维空间的管理性能  </p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><p>NUMA基础结构示意  </p>\n<ul>\n<li>NUMA   <ul>\n<li>NODE1 (对应一个socket 一个屋里CPU插槽)<ul>\n<li>Core (物理)核心1  <ul>\n<li>Threads 超线程核心(超标量CPU的同时多线程, 逻辑核)   </li>\n<li>Threads  </li>\n<li>ALU</li>\n<li>FPU</li>\n<li>L1 Cache</li>\n<li>L2 Cache  </li>\n</ul>\n</li>\n<li>Core 核心2  </li>\n<li>Core 核心…  </li>\n<li>Uncore <ul>\n<li>内存控制器 MC (现在已经移入CPU 叫iMC)  通过iMC直接访问的内存叫本地内存  </li>\n<li>PCIe Root Complex(现在也已经移入CPU )   </li>\n<li>QPI switch 通过QPI链路再通过iMC访问的内存称为远程内存 intel ivy bridge下的NUMA平台延迟增加一倍   </li>\n<li>L3缓存  </li>\n<li>CBox  </li>\n<li>其他外设控制器   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>NODE2</li>\n<li>NODE…</li>\n</ul>\n</li>\n</ul>"},{"title":"windows下安装WSL","date":"2021-07-01T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## 环境安装    \n[安装指导](https://docs.microsoft.com/en-us/windows/wsl/install-win10)  \n* 打开windows 功能   \n  * **适用于linux的windows子系统**  \n  * **虚拟机平台**  \n  * 使用管理员权限打开命令行  \n  ```\n  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n  ```\n\n\n* 下载wsl_update_x64.msi\n[WSL2 Linux kernel update package for x64 machines](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)  \n```\nwsl --set-default-version 2\n```\n\n* 安装debian\nmicrosoft store 选择Debian\n  \n\n* 设置root密码   \n```\nsudo passwd root\n```\n\n\n\n## secureCRT连接local shell  \n* file->open local shell   \n* 更改路径cmd.exe为bash.exe  \n\n## cmake recent call 错误  \n```\n1. Create file wsl.conf in /etc/ with content: \n\n# /etc/wsl.conf\n[automount]\noptions = \"metadata\"\nenabled = true\n\n2. Reboot your wsl\nwsl.exe -t Ubuntu // (or other e.g. Debian)\n```\n","source":"_posts/2021-07-02-wsl.md","raw":"\n---\ntitle: windows下安装WSL   \ndate: 2021-07-02\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## 环境安装    \n[安装指导](https://docs.microsoft.com/en-us/windows/wsl/install-win10)  \n* 打开windows 功能   \n  * **适用于linux的windows子系统**  \n  * **虚拟机平台**  \n  * 使用管理员权限打开命令行  \n  ```\n  dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n  ```\n\n\n* 下载wsl_update_x64.msi\n[WSL2 Linux kernel update package for x64 machines](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi)  \n```\nwsl --set-default-version 2\n```\n\n* 安装debian\nmicrosoft store 选择Debian\n  \n\n* 设置root密码   \n```\nsudo passwd root\n```\n\n\n\n## secureCRT连接local shell  \n* file->open local shell   \n* 更改路径cmd.exe为bash.exe  \n\n## cmake recent call 错误  \n```\n1. Create file wsl.conf in /etc/ with content: \n\n# /etc/wsl.conf\n[automount]\noptions = \"metadata\"\nenabled = true\n\n2. Reboot your wsl\nwsl.exe -t Ubuntu // (or other e.g. Debian)\n```\n","slug":"2021-07-02-wsl","published":1,"updated":"2021-09-15T07:25:22.744Z","_id":"ckqm99m550000w85h5s69fgqx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2><span id=\"环境安装\">环境安装</span></h2><p><a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\" rel=\"noopener\">安装指导</a>  </p>\n<ul>\n<li>打开windows 功能   <ul>\n<li><strong>适用于linux的windows子系统</strong>  </li>\n<li><strong>虚拟机平台</strong>  </li>\n<li>使用管理员权限打开命令行  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>下载wsl_update_x64.msi<br><a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\" target=\"_blank\" rel=\"noopener\">WSL2 Linux kernel update package for x64 machines</a>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装debian<br>microsoft store 选择Debian</p>\n</li>\n</ul>\n<ul>\n<li>设置root密码   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h2><span id=\"securecrt连接local-shell\">secureCRT连接local shell</span></h2><ul>\n<li>file-&gt;open local shell   </li>\n<li>更改路径cmd.exe为bash.exe  </li>\n</ul>\n<h2><span id=\"cmake-recent-call-错误\">cmake recent call 错误</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Create file wsl.conf in &#x2F;etc&#x2F; with content: </span><br><span class=\"line\"></span><br><span class=\"line\"># &#x2F;etc&#x2F;wsl.conf</span><br><span class=\"line\">[automount]</span><br><span class=\"line\">options &#x3D; &quot;metadata&quot;</span><br><span class=\"line\">enabled &#x3D; true</span><br><span class=\"line\"></span><br><span class=\"line\">2. Reboot your wsl</span><br><span class=\"line\">wsl.exe -t Ubuntu &#x2F;&#x2F; (or other e.g. Debian)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境安装\"><a href=\"#环境安装\" class=\"headerlink\" title=\"环境安装\"></a>环境安装</h2><p><a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\" target=\"_blank\" rel=\"noopener\">安装指导</a>  </p>\n<ul>\n<li>打开windows 功能   <ul>\n<li><strong>适用于linux的windows子系统</strong>  </li>\n<li><strong>虚拟机平台</strong>  </li>\n<li>使用管理员权限打开命令行  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>下载wsl_update_x64.msi<br><a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\" target=\"_blank\" rel=\"noopener\">WSL2 Linux kernel update package for x64 machines</a>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --set-default-version 2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装debian<br>microsoft store 选择Debian</p>\n</li>\n</ul>\n<ul>\n<li>设置root密码   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo passwd root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h2 id=\"secureCRT连接local-shell\"><a href=\"#secureCRT连接local-shell\" class=\"headerlink\" title=\"secureCRT连接local shell\"></a>secureCRT连接local shell</h2><ul>\n<li>file-&gt;open local shell   </li>\n<li>更改路径cmd.exe为bash.exe  </li>\n</ul>\n<h2 id=\"cmake-recent-call-错误\"><a href=\"#cmake-recent-call-错误\" class=\"headerlink\" title=\"cmake recent call 错误\"></a>cmake recent call 错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Create file wsl.conf in &#x2F;etc&#x2F; with content: </span><br><span class=\"line\"></span><br><span class=\"line\"># &#x2F;etc&#x2F;wsl.conf</span><br><span class=\"line\">[automount]</span><br><span class=\"line\">options &#x3D; &quot;metadata&quot;</span><br><span class=\"line\">enabled &#x3D; true</span><br><span class=\"line\"></span><br><span class=\"line\">2. Reboot your wsl</span><br><span class=\"line\">wsl.exe -t Ubuntu &#x2F;&#x2F; (or other e.g. Debian)</span><br></pre></td></tr></table></figure>\n"},{"title":"开发环境配置","date":"2021-07-01T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n## Sublime   \n```\n  // windows下使用unix换行符  \n  \"default_line_ending\": \"unix\",\n  // 制表符对应空格数量  \n  \"tab_size\": 4,\n  // 制表符改为空格  \n  \"translate_tabs_to_spaces\": false,\n```\n\n\n## VS\n* 选项->文本编辑器->C/C++->常规   自动换行  \n* 选项->文本编辑器->C/C++->制表符  插入空格  \n* 选项->文本编辑器->C/C++->代码样式->格式设置  关闭clangformat  \n\n \n## VSCODE\ninstall \"Remote - WSL\"  \ninstall \"Markdown All in One\"   \ninstall \"GitHub Theme\"  \n设置选项搜索\"eol\" 设置为LF  \n设置选项搜索\"font\" 设置字体 Hack, Hack, Hack  \n\n## 备注   \nCR（Carriage Return）代表回车（转义序列\\r），将光标移动到当前行的开头。  \nLF（Line Feed）代表“换行”，但你可能更熟悉术语换行符（转义序列 \\n）。 (unix)  \nCRLF (windows采用)   \n\n\n## git   \n```git config --global core.autocrlf [true|false|input]```   \n* autocrlf: true  \n  * 文件检出到本地为CRLF, 提交文件时替换为LF.  \n* autocrlf: input    \n  * 文件检出到本地不转换, 提交文件时替换为LF.  \n* autocrlf: false  \n  * 不做任何处理   \n\n```git config --global core.safecrlf [true|false|warn]```  \n* safecrlf: true  \n  * 拒绝提交混合换行符  \n* safecrlf: false\n  * 不做检查   \n* safecrlf: warn\n  * 提交混合换行符时给出警告     \n\n## SecureCRT   \nSession Options 进行修改  保存到默认主题:   \n\n* Terminal-> Send Protocol NO-OP  ervery 60 second   \n* Terminal->Appearance Font 11pt   encoding UTF-8   \n\n\n\n## dos2unix  \n批量转换换行符  \n```\nfind ./ -name *.h | xargs dos2unix\n```","source":"_posts/2021-09-15-dev_env.md","raw":"\n---\ntitle: 开发环境配置     \ndate: 2021-07-02\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n## Sublime   \n```\n  // windows下使用unix换行符  \n  \"default_line_ending\": \"unix\",\n  // 制表符对应空格数量  \n  \"tab_size\": 4,\n  // 制表符改为空格  \n  \"translate_tabs_to_spaces\": false,\n```\n\n\n## VS\n* 选项->文本编辑器->C/C++->常规   自动换行  \n* 选项->文本编辑器->C/C++->制表符  插入空格  \n* 选项->文本编辑器->C/C++->代码样式->格式设置  关闭clangformat  \n\n \n## VSCODE\ninstall \"Remote - WSL\"  \ninstall \"Markdown All in One\"   \ninstall \"GitHub Theme\"  \n设置选项搜索\"eol\" 设置为LF  \n设置选项搜索\"font\" 设置字体 Hack, Hack, Hack  \n\n## 备注   \nCR（Carriage Return）代表回车（转义序列\\r），将光标移动到当前行的开头。  \nLF（Line Feed）代表“换行”，但你可能更熟悉术语换行符（转义序列 \\n）。 (unix)  \nCRLF (windows采用)   \n\n\n## git   \n```git config --global core.autocrlf [true|false|input]```   \n* autocrlf: true  \n  * 文件检出到本地为CRLF, 提交文件时替换为LF.  \n* autocrlf: input    \n  * 文件检出到本地不转换, 提交文件时替换为LF.  \n* autocrlf: false  \n  * 不做任何处理   \n\n```git config --global core.safecrlf [true|false|warn]```  \n* safecrlf: true  \n  * 拒绝提交混合换行符  \n* safecrlf: false\n  * 不做检查   \n* safecrlf: warn\n  * 提交混合换行符时给出警告     \n\n## SecureCRT   \nSession Options 进行修改  保存到默认主题:   \n\n* Terminal-> Send Protocol NO-OP  ervery 60 second   \n* Terminal->Appearance Font 11pt   encoding UTF-8   \n\n\n\n## dos2unix  \n批量转换换行符  \n```\nfind ./ -name *.h | xargs dos2unix\n```","slug":"2021-09-15-dev_env","published":1,"updated":"2021-09-15T07:30:22.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw0fhbvx0000tk2mheyi1b5m","content":"<h2><span id=\"sublime\">Sublime</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; windows下使用unix换行符  </span><br><span class=\"line\">&quot;default_line_ending&quot;: &quot;unix&quot;,</span><br><span class=\"line\">&#x2F;&#x2F; 制表符对应空格数量  </span><br><span class=\"line\">&quot;tab_size&quot;: 4,</span><br><span class=\"line\">&#x2F;&#x2F; 制表符改为空格  </span><br><span class=\"line\">&quot;translate_tabs_to_spaces&quot;: false,</span><br></pre></td></tr></table></figure>\n\n\n<h2><span id=\"vs\">VS</span></h2><ul>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;常规   自动换行  </li>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;制表符  插入空格  </li>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;代码样式-&gt;格式设置  关闭clangformat  </li>\n</ul>\n<h2><span id=\"vscode\">VSCODE</span></h2><p>install “Remote - WSL”<br>install “Markdown All in One”<br>install “GitHub Theme”<br>设置选项搜索”eol” 设置为LF<br>设置选项搜索”font” 设置字体 Hack, Hack, Hack  </p>\n<h2><span id=\"备注\">备注</span></h2><p>CR（Carriage Return）代表回车（转义序列\\r），将光标移动到当前行的开头。<br>LF（Line Feed）代表“换行”，但你可能更熟悉术语换行符（转义序列 \\n）。 (unix)<br>CRLF (windows采用)   </p>\n<h2><span id=\"git\">git</span></h2><figure class=\"highlight plain\"><figcaption><span>config --global core.autocrlf [true|false|input]```   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* autocrlf: true  </span><br><span class=\"line\">  * 文件检出到本地为CRLF, 提交文件时替换为LF.  </span><br><span class=\"line\">* autocrlf: input    </span><br><span class=\"line\">  * 文件检出到本地不转换, 提交文件时替换为LF.  </span><br><span class=\"line\">* autocrlf: false  </span><br><span class=\"line\">  * 不做任何处理   </span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;git config --global core.safecrlf [true|false|warn]&#96;&#96;&#96;  </span><br><span class=\"line\">* safecrlf: true  </span><br><span class=\"line\">  * 拒绝提交混合换行符  </span><br><span class=\"line\">* safecrlf: false</span><br><span class=\"line\">  * 不做检查   </span><br><span class=\"line\">* safecrlf: warn</span><br><span class=\"line\">  * 提交混合换行符时给出警告     </span><br><span class=\"line\"></span><br><span class=\"line\">## SecureCRT   </span><br><span class=\"line\">Session Options 进行修改  保存到默认主题:   </span><br><span class=\"line\"></span><br><span class=\"line\">* Terminal-&gt; Send Protocol NO-OP  ervery 60 second   </span><br><span class=\"line\">* Terminal-&gt;Appearance Font 11pt   encoding UTF-8   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## dos2unix  </span><br><span class=\"line\">批量转换换行符</span><br></pre></td></tr></table></figure>\n<p>find ./ -name *.h | xargs dos2unix<br>```</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Sublime\"><a href=\"#Sublime\" class=\"headerlink\" title=\"Sublime\"></a>Sublime</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; windows下使用unix换行符  </span><br><span class=\"line\">&quot;default_line_ending&quot;: &quot;unix&quot;,</span><br><span class=\"line\">&#x2F;&#x2F; 制表符对应空格数量  </span><br><span class=\"line\">&quot;tab_size&quot;: 4,</span><br><span class=\"line\">&#x2F;&#x2F; 制表符改为空格  </span><br><span class=\"line\">&quot;translate_tabs_to_spaces&quot;: false,</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"VS\"><a href=\"#VS\" class=\"headerlink\" title=\"VS\"></a>VS</h2><ul>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;常规   自动换行  </li>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;制表符  插入空格  </li>\n<li>选项-&gt;文本编辑器-&gt;C/C++-&gt;代码样式-&gt;格式设置  关闭clangformat  </li>\n</ul>\n<h2 id=\"VSCODE\"><a href=\"#VSCODE\" class=\"headerlink\" title=\"VSCODE\"></a>VSCODE</h2><p>install “Remote - WSL”<br>install “Markdown All in One”<br>install “GitHub Theme”<br>设置选项搜索”eol” 设置为LF<br>设置选项搜索”font” 设置字体 Hack, Hack, Hack  </p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>CR（Carriage Return）代表回车（转义序列\\r），将光标移动到当前行的开头。<br>LF（Line Feed）代表“换行”，但你可能更熟悉术语换行符（转义序列 \\n）。 (unix)<br>CRLF (windows采用)   </p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><figure class=\"highlight plain\"><figcaption><span>config --global core.autocrlf [true|false|input]```   </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* autocrlf: true  </span><br><span class=\"line\">  * 文件检出到本地为CRLF, 提交文件时替换为LF.  </span><br><span class=\"line\">* autocrlf: input    </span><br><span class=\"line\">  * 文件检出到本地不转换, 提交文件时替换为LF.  </span><br><span class=\"line\">* autocrlf: false  </span><br><span class=\"line\">  * 不做任何处理   </span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;git config --global core.safecrlf [true|false|warn]&#96;&#96;&#96;  </span><br><span class=\"line\">* safecrlf: true  </span><br><span class=\"line\">  * 拒绝提交混合换行符  </span><br><span class=\"line\">* safecrlf: false</span><br><span class=\"line\">  * 不做检查   </span><br><span class=\"line\">* safecrlf: warn</span><br><span class=\"line\">  * 提交混合换行符时给出警告     </span><br><span class=\"line\"></span><br><span class=\"line\">## SecureCRT   </span><br><span class=\"line\">Session Options 进行修改  保存到默认主题:   </span><br><span class=\"line\"></span><br><span class=\"line\">* Terminal-&gt; Send Protocol NO-OP  ervery 60 second   </span><br><span class=\"line\">* Terminal-&gt;Appearance Font 11pt   encoding UTF-8   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## dos2unix  </span><br><span class=\"line\">批量转换换行符</span><br></pre></td></tr></table></figure>\n<p>find ./ -name *.h | xargs dos2unix<br>```</p>\n"},{"title":"OI卡常优化","date":"2021-11-14T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n# gcc-3.4.6为参考   \n\n\n\n## O0\n不做任何优化, 这是默认的编译选项.  \n\n## O1 \n-O和-O1:  对程序做部分编译优化, 对于大函数,优化编译占用稍微多的时间和相当大的内存. 使用本项优化, 编译器会尝试减小生成代码的尺寸, 以及缩短执行时间, 但并不执行需要占用大量编译时间的优化.  \n\n* fdefer-pop: 延迟栈的弹出时间. 当完成一个函数调用, 参数并不马上从栈中弹出, 而是在多个函数被调用后, 一次性弹出.    \n\n* fmerge-constants: 尝试横跨编译单元合并同样的常量(string constants and floating point constants)   \n\n* fthread-jumps: 如果某个跳转分支的目的地存在另一个条件比较,而且该条件比较包含在前一个比较语句之内,那么执行本项优化.根据条件是true或者false,前面那条分支重定向到第二条分支的目的地或者紧跟在第二条分支后面. \n\n* floop-optimize: 执行循环优化,将常量表达式从循环中移除, 简化判断循环的条件, 并且optionally do strength-reduction, 或者将循环打开等. 在大型复杂的循环中, 这种优化比较显著.  \n\n* fif-conversion: 尝试将条件跳转转换为等价的无分支型式. 优化实现方式包括条件移动, min, max, 设置标志, 以及abs指令, 以及一些算术技巧等.   \n\n* fif-conversion2基本意义相同, 没有找到更多的解释.  \n\n* fdelayed-branch: 这种技术试图根据指令周期时间重新安排指令.  它还试图把尽可能多的指令移动到条件分支前, 以便最充分的利用处理器的治理缓存.  \n\n* fguess-branch-probability: 当没有可用的profiling feedback或__builtin_expect时, 编译器采用随机模式猜测分支被执行的可能性, 并移动对应汇编代码的位置, 这有可能导致不同的编译器会编译出迥然不同的目标代码.  \n\n* fcprop-registers: 因为在函数中把寄存器分配给变量, 所以编译器执行第二次检查以便减少调度依赖性(两个段要求使用相同的寄存器)并且删除不必要的寄存器复制操作.  \n\n<!-- more -->\n## -O2\n比O1更高级的选项, 进行更多的优化. Gcc将执行几乎所有的不包含时间和空间折中的优化.    \n当设置O2选项时, 编译器并不进行循环打开（）loop unrolling以及函数内联.   \n与O1比较而言, O2优化增加了编译时间的基础上, 提高了生成代码的执行效率.    \nO2打开所有的O1选项, 并打开以下选项:  \n\n* fforce-mem: 在做算术操作前, 强制将内存数据copy到寄存器中以后再执行. 这会使所有的内存引用潜在的共同表达式, 进而产出更高效的代码, 当没有共同的子表达式时, 指令合并将排出个别的寄存器载入. 这种优化对于只涉及单一指令的变量, 这样也许不会有很大的优化效果. 但是对于再很多指令(必须数学操作)中都涉及到的变量来说, 这会时很显著的优化, 因为和访问内存中的值相比 ,处理器访问寄存器中的值要快的多.  \n\n* foptimize-sibling-calls: 优化相关的以及末尾递归的调用. 通常, 递归的函数调用可以被展开为一系列一般的指令,  而不是使用分支.  这样处理器的指令缓存能够加载展开的指令并且处理他们, 和指令保持为需要分支操作的单独函数调用相比, 这样更快.  \n\n* fstrength-reduce: 这种优化技术对循环执行优化并且删除迭代变量.  迭代变量是捆绑到循环计数器的变量, 比如使用变量, 然后使用循环计数器变量执行数学操作的for-next循环.  \n\n* fcse-follow-jumps: 在公用子表达式消元时, 当目标跳转不会被其他路径可达, 则扫描整个的跳转表达式. 例如, 当公用子表达式消元时遇到if...else...语句时, 当条为false时, 那么公用子表达式消元会跟随着跳转.    \n\n* fcse-skip-blocks: 与-fcse-follow-jumps类似, 不同的是, 根据特定条件, 跟随着cse跳转的会是整个的blocks \n\n* frerun-cse-after-loop: 在循环优化完成后, 重新进行公用子表达式消元操作.  \n\n* frerun-loop-opt: 两次运行循环优化 * fgcse: 执行全局公用子表达式消除pass. 这个pass还执行全局常量和copy propagation. 这些优化操作试图分析生成的汇编语言代码并且结合通用片段,  消除冗余的代码段. 如果代码使用计算性的goto, gcc指令推荐使用-fno-gcse选项.  \n\nl-fgcse-lm: 全局公用子表达式消除将试图移动那些仅仅被自身存储kill的装载操作的位置. 这将允许将循环内的load/store操作序列中的load转移到循环的外面（只需要装载一次）, 而在循环内改变成copy/store序列. 在选中-fgcse后, 默认打开.  \n\n* fgcse-sm: 当一个存储操作pass在一个全局公用子表达式消除的后面, 这个pass将试图将store操作转移到循环外面去. 如果与-fgcse-lm配合使用, 那么load/store操作将会转变为在循环前load, 在循环后store, 从而提高运行效率, 减少不必要的操作.  \n\n* fgcse-las: 全局公用子表达式消除pass将消除在store后面的不必要的load操作, 这些load与store通常是同一块存储单元（全部或局部） \n\nl-fdelete-null-pointer-checks: 通过对全局数据流的分析, 识别并排出无用的对空指针的检查. 编译器假设间接引用空指针将停止程序.  如果在间接引用之后检查指针, 它就不可能为空.  \n\n* fexpensive-optimizations: 进行一些从编译的角度来说代价高昂的优化（这种优化据说对于程序执行未必有很大的好处, 甚至有可能降低执行效率, 具体不是很清楚） \n\n* fregmove: 编译器试图重新分配move指令或者其他类似操作数等简单指令的寄存器数目, 以便最大化的捆绑寄存器的数目. 这种优化尤其对双操作数指令的机器帮助较大.  \n\n* fschedule-insns: 编译器尝试重新排列指令, 用以消除由于等待未准备好的数据而产生的延迟. 这种优化将对慢浮点运算的机器以及需要load memory的指令的执行有所帮助, 因为此时允许其他指令执行, 直到load memory的指令完成, 或浮点运算的指令再次需要cpu.  l \n\n-fschedule-insns2: 与-fschedule-insns相似. 但是当寄存器分配完成后, 会请求一个附加的指令计划pass. 这种优化对寄存器较小, 并且load memory操作时间大于一个时钟周期的机器有非常好的效果.  \n\n* fsched-interblock: 这种技术使编译器能够跨越指令块调度指令.  这可以非常灵活地移动指令以便等待期间完成的工作最大化.  \n\n* fsched-spec-load: 允许一些load指令进行一些投机性的动作. （具体不详）相同功能的还有-fsched-spec-load-dangerous, 允许更多的load指令进行投机性操作. 这两个选项在选中-fschedule-insns时默认打开.  \n\n* fcaller-saves: 通过存储和恢复call调用周围寄存器的方式, 使被call调用的value可以被分配给寄存器, 这种只会在看上去能产生更好的代码的时候才被使用. （如果调用多个函数, 这样能够节省时间, 因为只进行一次寄存器的保存和恢复操作, 而不是在每个函数调用中都进行. ） \n\n* fpeephole2: 允许计算机进行特定的观察孔优化(这个不晓得是什么意思), -fpeephole与-fpeephole2的差别在于不同的编译器采用不同的方式, 由的采用-fpeephole, 有的采用-fpeephole2, 也有两种都采用的.  \n\n* freorder-blocks: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性.  \n\n* freorder-functions: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性. 这种优化的实施依赖特定的已存在的信息: .text.hot用于告知访问频率较高的函数, .text.unlikely用于告知基本不被执行的函数.  \n\n* fstrict-aliasing: 这种技术强制实行高级语言的严格变量规则.  对于c和c++程序来说, 它确保不在数据类型之间共享变量. 例如, 整数变量不和单精度浮点变量使用相同的内存位置.  \n\n* funit-at-a-time: 在代码生成前, 先分析整个的汇编语言代码. 这将使一些额外的优化得以执行, 但是在编译器间需要消耗大量的内存. （有资料介绍说: 这使编译器可以重新安排不消耗大量时间的代码以便优化指令缓存. ） \n\n* falign-functions: 这个选项用于使函数对准内存中特定边界的开始位置.  大多数处理器按照页面读取内存, 并且确保全部函数代码位于单一内存页面内, 就不需要叫化代码所需的页面.  \n\n* falign-jumps: 对齐分支代码到2的n次方边界. 在这种情况下, 无需执行傀儡指令（dummy operations） \n\n* falign-loops: 对齐循环到2的n次幂边界. 期望可以对循环执行多次, 用以补偿运行dummy operations所花费的时间.  \n\n* falign-labels: 对齐分支到2的n次幂边界. 这种选项容易使代码速度变慢, 原因是需要插入一些dummy operations当分支抵达usual flow of the code. \n\n* fcrossjumping: 这是对跨越跳转的转换代码处理,  以便组合分散在程序各处的相同代码.  这样可以减少代码的长度,  但是也许不会对程序性能有直接影响.   \n\n\n\n## -O3\n比O2更进一步的进行优化. \n\n在包含了O2所有的优化的基础上, 又打开了以下优化选项:  \n\n* finline-functions: 内联简单的函数到被调用函数中. 由编译器启发式的决定哪些函数足够简单可以做这种内联优化. 默认情况下, 编译器限制内联的尺寸, 3.4.6中限制为600（具体含义不详, 指令条数或代码size？）可以通过-finline-limit=n改变这个长度. 这种优化技术不为函数创建单独的汇编语言代码,  而是把函数代码包含在调度程序的代码中.  对于多次被调用的函数来说, 为每次函数调用复制函数代码.  虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能.  \n\n* fweb: 构建用于保存变量的伪寄存器网络.  伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术. 这种优化会使得调试变得更加的不可能, 因为变量不再存放于原本的寄存器中.  \n\n* frename-registers: 在寄存器分配后, 通过使用registers left over来避免预定代码中的虚假依赖. 这会使调试变得非常困难, 因为变量不再存放于原本的寄存器中了.  \n\n* funswitch-loops: 将无变化的条件分支移出循环, 取而代之的将结果副本放入循环中.  \n\n\n\n ## -Os\n 主要是对程序的尺寸进行优化. 打开了大部分O2优化中不会增加程序大小的优化选项, 并对程序代码的大小做更深层的优化. （通常我们不需要这种优化）Os会关闭如下选项:  -falign-functions -falign-jumps -falign-loops  -falign-labels   -freorder-blocks   -fprefetch-loop-arrays  \n\n## -Og\n该标识会精心挑选部分与-g选项不冲突的优化选项, 当然就能提供合理的优化水平, 同时产生较好的可调试信息和对语言标准的遵循程度.  \n\n\n\n# OI卡常模版1  \n```\n\n#define OI 0\n#if defined(__GCC__) && (OI)\n#pragma GCC push_options\n\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n\n#pragma GCC target(\"avx\", \"sse2\")\n\n#endif\n\n// benchmark code  \n//...\n\n\n\n#if defined(__GCC__) && (OI)\n#pragma GCC pop_options\n#endif\n\n\n```\n\n# 卡常模版2\n```\n\n```","source":"_posts/2021-11-15-OI-optimize.md","raw":"\n---\ntitle: OI卡常优化     \ndate: 2021-11-15\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n# gcc-3.4.6为参考   \n\n\n\n## O0\n不做任何优化, 这是默认的编译选项.  \n\n## O1 \n-O和-O1:  对程序做部分编译优化, 对于大函数,优化编译占用稍微多的时间和相当大的内存. 使用本项优化, 编译器会尝试减小生成代码的尺寸, 以及缩短执行时间, 但并不执行需要占用大量编译时间的优化.  \n\n* fdefer-pop: 延迟栈的弹出时间. 当完成一个函数调用, 参数并不马上从栈中弹出, 而是在多个函数被调用后, 一次性弹出.    \n\n* fmerge-constants: 尝试横跨编译单元合并同样的常量(string constants and floating point constants)   \n\n* fthread-jumps: 如果某个跳转分支的目的地存在另一个条件比较,而且该条件比较包含在前一个比较语句之内,那么执行本项优化.根据条件是true或者false,前面那条分支重定向到第二条分支的目的地或者紧跟在第二条分支后面. \n\n* floop-optimize: 执行循环优化,将常量表达式从循环中移除, 简化判断循环的条件, 并且optionally do strength-reduction, 或者将循环打开等. 在大型复杂的循环中, 这种优化比较显著.  \n\n* fif-conversion: 尝试将条件跳转转换为等价的无分支型式. 优化实现方式包括条件移动, min, max, 设置标志, 以及abs指令, 以及一些算术技巧等.   \n\n* fif-conversion2基本意义相同, 没有找到更多的解释.  \n\n* fdelayed-branch: 这种技术试图根据指令周期时间重新安排指令.  它还试图把尽可能多的指令移动到条件分支前, 以便最充分的利用处理器的治理缓存.  \n\n* fguess-branch-probability: 当没有可用的profiling feedback或__builtin_expect时, 编译器采用随机模式猜测分支被执行的可能性, 并移动对应汇编代码的位置, 这有可能导致不同的编译器会编译出迥然不同的目标代码.  \n\n* fcprop-registers: 因为在函数中把寄存器分配给变量, 所以编译器执行第二次检查以便减少调度依赖性(两个段要求使用相同的寄存器)并且删除不必要的寄存器复制操作.  \n\n<!-- more -->\n## -O2\n比O1更高级的选项, 进行更多的优化. Gcc将执行几乎所有的不包含时间和空间折中的优化.    \n当设置O2选项时, 编译器并不进行循环打开（）loop unrolling以及函数内联.   \n与O1比较而言, O2优化增加了编译时间的基础上, 提高了生成代码的执行效率.    \nO2打开所有的O1选项, 并打开以下选项:  \n\n* fforce-mem: 在做算术操作前, 强制将内存数据copy到寄存器中以后再执行. 这会使所有的内存引用潜在的共同表达式, 进而产出更高效的代码, 当没有共同的子表达式时, 指令合并将排出个别的寄存器载入. 这种优化对于只涉及单一指令的变量, 这样也许不会有很大的优化效果. 但是对于再很多指令(必须数学操作)中都涉及到的变量来说, 这会时很显著的优化, 因为和访问内存中的值相比 ,处理器访问寄存器中的值要快的多.  \n\n* foptimize-sibling-calls: 优化相关的以及末尾递归的调用. 通常, 递归的函数调用可以被展开为一系列一般的指令,  而不是使用分支.  这样处理器的指令缓存能够加载展开的指令并且处理他们, 和指令保持为需要分支操作的单独函数调用相比, 这样更快.  \n\n* fstrength-reduce: 这种优化技术对循环执行优化并且删除迭代变量.  迭代变量是捆绑到循环计数器的变量, 比如使用变量, 然后使用循环计数器变量执行数学操作的for-next循环.  \n\n* fcse-follow-jumps: 在公用子表达式消元时, 当目标跳转不会被其他路径可达, 则扫描整个的跳转表达式. 例如, 当公用子表达式消元时遇到if...else...语句时, 当条为false时, 那么公用子表达式消元会跟随着跳转.    \n\n* fcse-skip-blocks: 与-fcse-follow-jumps类似, 不同的是, 根据特定条件, 跟随着cse跳转的会是整个的blocks \n\n* frerun-cse-after-loop: 在循环优化完成后, 重新进行公用子表达式消元操作.  \n\n* frerun-loop-opt: 两次运行循环优化 * fgcse: 执行全局公用子表达式消除pass. 这个pass还执行全局常量和copy propagation. 这些优化操作试图分析生成的汇编语言代码并且结合通用片段,  消除冗余的代码段. 如果代码使用计算性的goto, gcc指令推荐使用-fno-gcse选项.  \n\nl-fgcse-lm: 全局公用子表达式消除将试图移动那些仅仅被自身存储kill的装载操作的位置. 这将允许将循环内的load/store操作序列中的load转移到循环的外面（只需要装载一次）, 而在循环内改变成copy/store序列. 在选中-fgcse后, 默认打开.  \n\n* fgcse-sm: 当一个存储操作pass在一个全局公用子表达式消除的后面, 这个pass将试图将store操作转移到循环外面去. 如果与-fgcse-lm配合使用, 那么load/store操作将会转变为在循环前load, 在循环后store, 从而提高运行效率, 减少不必要的操作.  \n\n* fgcse-las: 全局公用子表达式消除pass将消除在store后面的不必要的load操作, 这些load与store通常是同一块存储单元（全部或局部） \n\nl-fdelete-null-pointer-checks: 通过对全局数据流的分析, 识别并排出无用的对空指针的检查. 编译器假设间接引用空指针将停止程序.  如果在间接引用之后检查指针, 它就不可能为空.  \n\n* fexpensive-optimizations: 进行一些从编译的角度来说代价高昂的优化（这种优化据说对于程序执行未必有很大的好处, 甚至有可能降低执行效率, 具体不是很清楚） \n\n* fregmove: 编译器试图重新分配move指令或者其他类似操作数等简单指令的寄存器数目, 以便最大化的捆绑寄存器的数目. 这种优化尤其对双操作数指令的机器帮助较大.  \n\n* fschedule-insns: 编译器尝试重新排列指令, 用以消除由于等待未准备好的数据而产生的延迟. 这种优化将对慢浮点运算的机器以及需要load memory的指令的执行有所帮助, 因为此时允许其他指令执行, 直到load memory的指令完成, 或浮点运算的指令再次需要cpu.  l \n\n-fschedule-insns2: 与-fschedule-insns相似. 但是当寄存器分配完成后, 会请求一个附加的指令计划pass. 这种优化对寄存器较小, 并且load memory操作时间大于一个时钟周期的机器有非常好的效果.  \n\n* fsched-interblock: 这种技术使编译器能够跨越指令块调度指令.  这可以非常灵活地移动指令以便等待期间完成的工作最大化.  \n\n* fsched-spec-load: 允许一些load指令进行一些投机性的动作. （具体不详）相同功能的还有-fsched-spec-load-dangerous, 允许更多的load指令进行投机性操作. 这两个选项在选中-fschedule-insns时默认打开.  \n\n* fcaller-saves: 通过存储和恢复call调用周围寄存器的方式, 使被call调用的value可以被分配给寄存器, 这种只会在看上去能产生更好的代码的时候才被使用. （如果调用多个函数, 这样能够节省时间, 因为只进行一次寄存器的保存和恢复操作, 而不是在每个函数调用中都进行. ） \n\n* fpeephole2: 允许计算机进行特定的观察孔优化(这个不晓得是什么意思), -fpeephole与-fpeephole2的差别在于不同的编译器采用不同的方式, 由的采用-fpeephole, 有的采用-fpeephole2, 也有两种都采用的.  \n\n* freorder-blocks: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性.  \n\n* freorder-functions: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性. 这种优化的实施依赖特定的已存在的信息: .text.hot用于告知访问频率较高的函数, .text.unlikely用于告知基本不被执行的函数.  \n\n* fstrict-aliasing: 这种技术强制实行高级语言的严格变量规则.  对于c和c++程序来说, 它确保不在数据类型之间共享变量. 例如, 整数变量不和单精度浮点变量使用相同的内存位置.  \n\n* funit-at-a-time: 在代码生成前, 先分析整个的汇编语言代码. 这将使一些额外的优化得以执行, 但是在编译器间需要消耗大量的内存. （有资料介绍说: 这使编译器可以重新安排不消耗大量时间的代码以便优化指令缓存. ） \n\n* falign-functions: 这个选项用于使函数对准内存中特定边界的开始位置.  大多数处理器按照页面读取内存, 并且确保全部函数代码位于单一内存页面内, 就不需要叫化代码所需的页面.  \n\n* falign-jumps: 对齐分支代码到2的n次方边界. 在这种情况下, 无需执行傀儡指令（dummy operations） \n\n* falign-loops: 对齐循环到2的n次幂边界. 期望可以对循环执行多次, 用以补偿运行dummy operations所花费的时间.  \n\n* falign-labels: 对齐分支到2的n次幂边界. 这种选项容易使代码速度变慢, 原因是需要插入一些dummy operations当分支抵达usual flow of the code. \n\n* fcrossjumping: 这是对跨越跳转的转换代码处理,  以便组合分散在程序各处的相同代码.  这样可以减少代码的长度,  但是也许不会对程序性能有直接影响.   \n\n\n\n## -O3\n比O2更进一步的进行优化. \n\n在包含了O2所有的优化的基础上, 又打开了以下优化选项:  \n\n* finline-functions: 内联简单的函数到被调用函数中. 由编译器启发式的决定哪些函数足够简单可以做这种内联优化. 默认情况下, 编译器限制内联的尺寸, 3.4.6中限制为600（具体含义不详, 指令条数或代码size？）可以通过-finline-limit=n改变这个长度. 这种优化技术不为函数创建单独的汇编语言代码,  而是把函数代码包含在调度程序的代码中.  对于多次被调用的函数来说, 为每次函数调用复制函数代码.  虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能.  \n\n* fweb: 构建用于保存变量的伪寄存器网络.  伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术. 这种优化会使得调试变得更加的不可能, 因为变量不再存放于原本的寄存器中.  \n\n* frename-registers: 在寄存器分配后, 通过使用registers left over来避免预定代码中的虚假依赖. 这会使调试变得非常困难, 因为变量不再存放于原本的寄存器中了.  \n\n* funswitch-loops: 将无变化的条件分支移出循环, 取而代之的将结果副本放入循环中.  \n\n\n\n ## -Os\n 主要是对程序的尺寸进行优化. 打开了大部分O2优化中不会增加程序大小的优化选项, 并对程序代码的大小做更深层的优化. （通常我们不需要这种优化）Os会关闭如下选项:  -falign-functions -falign-jumps -falign-loops  -falign-labels   -freorder-blocks   -fprefetch-loop-arrays  \n\n## -Og\n该标识会精心挑选部分与-g选项不冲突的优化选项, 当然就能提供合理的优化水平, 同时产生较好的可调试信息和对语言标准的遵循程度.  \n\n\n\n# OI卡常模版1  \n```\n\n#define OI 0\n#if defined(__GCC__) && (OI)\n#pragma GCC push_options\n\n#pragma GCC optimize(2)\n#pragma GCC optimize(3)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n\n#pragma GCC target(\"avx\", \"sse2\")\n\n#endif\n\n// benchmark code  \n//...\n\n\n\n#if defined(__GCC__) && (OI)\n#pragma GCC pop_options\n#endif\n\n\n```\n\n# 卡常模版2\n```\n\n```","slug":"2021-11-15-OI-optimize","published":1,"updated":"2021-11-15T08:53:11.310Z","_id":"ckw0fhbw50001tk2m2mstamvg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"gcc-346为参考\">gcc-3.4.6为参考</span></h1><h2><span id=\"o0\">O0</span></h2><p>不做任何优化, 这是默认的编译选项.  </p>\n<h2><span id=\"o1\">O1</span></h2><p>-O和-O1:  对程序做部分编译优化, 对于大函数,优化编译占用稍微多的时间和相当大的内存. 使用本项优化, 编译器会尝试减小生成代码的尺寸, 以及缩短执行时间, 但并不执行需要占用大量编译时间的优化.  </p>\n<ul>\n<li><p>fdefer-pop: 延迟栈的弹出时间. 当完成一个函数调用, 参数并不马上从栈中弹出, 而是在多个函数被调用后, 一次性弹出.    </p>\n</li>\n<li><p>fmerge-constants: 尝试横跨编译单元合并同样的常量(string constants and floating point constants)   </p>\n</li>\n<li><p>fthread-jumps: 如果某个跳转分支的目的地存在另一个条件比较,而且该条件比较包含在前一个比较语句之内,那么执行本项优化.根据条件是true或者false,前面那条分支重定向到第二条分支的目的地或者紧跟在第二条分支后面. </p>\n</li>\n<li><p>floop-optimize: 执行循环优化,将常量表达式从循环中移除, 简化判断循环的条件, 并且optionally do strength-reduction, 或者将循环打开等. 在大型复杂的循环中, 这种优化比较显著.  </p>\n</li>\n<li><p>fif-conversion: 尝试将条件跳转转换为等价的无分支型式. 优化实现方式包括条件移动, min, max, 设置标志, 以及abs指令, 以及一些算术技巧等.   </p>\n</li>\n<li><p>fif-conversion2基本意义相同, 没有找到更多的解释.  </p>\n</li>\n<li><p>fdelayed-branch: 这种技术试图根据指令周期时间重新安排指令.  它还试图把尽可能多的指令移动到条件分支前, 以便最充分的利用处理器的治理缓存.  </p>\n</li>\n<li><p>fguess-branch-probability: 当没有可用的profiling feedback或__builtin_expect时, 编译器采用随机模式猜测分支被执行的可能性, 并移动对应汇编代码的位置, 这有可能导致不同的编译器会编译出迥然不同的目标代码.  </p>\n</li>\n<li><p>fcprop-registers: 因为在函数中把寄存器分配给变量, 所以编译器执行第二次检查以便减少调度依赖性(两个段要求使用相同的寄存器)并且删除不必要的寄存器复制操作.  </p>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2><span id=\"-o2\">-O2</span></h2><p>比O1更高级的选项, 进行更多的优化. Gcc将执行几乎所有的不包含时间和空间折中的优化.<br>当设置O2选项时, 编译器并不进行循环打开（）loop unrolling以及函数内联.<br>与O1比较而言, O2优化增加了编译时间的基础上, 提高了生成代码的执行效率.<br>O2打开所有的O1选项, 并打开以下选项:  </p>\n<ul>\n<li><p>fforce-mem: 在做算术操作前, 强制将内存数据copy到寄存器中以后再执行. 这会使所有的内存引用潜在的共同表达式, 进而产出更高效的代码, 当没有共同的子表达式时, 指令合并将排出个别的寄存器载入. 这种优化对于只涉及单一指令的变量, 这样也许不会有很大的优化效果. 但是对于再很多指令(必须数学操作)中都涉及到的变量来说, 这会时很显著的优化, 因为和访问内存中的值相比 ,处理器访问寄存器中的值要快的多.  </p>\n</li>\n<li><p>foptimize-sibling-calls: 优化相关的以及末尾递归的调用. 通常, 递归的函数调用可以被展开为一系列一般的指令,  而不是使用分支.  这样处理器的指令缓存能够加载展开的指令并且处理他们, 和指令保持为需要分支操作的单独函数调用相比, 这样更快.  </p>\n</li>\n<li><p>fstrength-reduce: 这种优化技术对循环执行优化并且删除迭代变量.  迭代变量是捆绑到循环计数器的变量, 比如使用变量, 然后使用循环计数器变量执行数学操作的for-next循环.  </p>\n</li>\n<li><p>fcse-follow-jumps: 在公用子表达式消元时, 当目标跳转不会被其他路径可达, 则扫描整个的跳转表达式. 例如, 当公用子表达式消元时遇到if…else…语句时, 当条为false时, 那么公用子表达式消元会跟随着跳转.    </p>\n</li>\n<li><p>fcse-skip-blocks: 与-fcse-follow-jumps类似, 不同的是, 根据特定条件, 跟随着cse跳转的会是整个的blocks </p>\n</li>\n<li><p>frerun-cse-after-loop: 在循环优化完成后, 重新进行公用子表达式消元操作.  </p>\n</li>\n<li><p>frerun-loop-opt: 两次运行循环优化 * fgcse: 执行全局公用子表达式消除pass. 这个pass还执行全局常量和copy propagation. 这些优化操作试图分析生成的汇编语言代码并且结合通用片段,  消除冗余的代码段. 如果代码使用计算性的goto, gcc指令推荐使用-fno-gcse选项.  </p>\n</li>\n</ul>\n<p>l-fgcse-lm: 全局公用子表达式消除将试图移动那些仅仅被自身存储kill的装载操作的位置. 这将允许将循环内的load/store操作序列中的load转移到循环的外面（只需要装载一次）, 而在循环内改变成copy/store序列. 在选中-fgcse后, 默认打开.  </p>\n<ul>\n<li><p>fgcse-sm: 当一个存储操作pass在一个全局公用子表达式消除的后面, 这个pass将试图将store操作转移到循环外面去. 如果与-fgcse-lm配合使用, 那么load/store操作将会转变为在循环前load, 在循环后store, 从而提高运行效率, 减少不必要的操作.  </p>\n</li>\n<li><p>fgcse-las: 全局公用子表达式消除pass将消除在store后面的不必要的load操作, 这些load与store通常是同一块存储单元（全部或局部） </p>\n</li>\n</ul>\n<p>l-fdelete-null-pointer-checks: 通过对全局数据流的分析, 识别并排出无用的对空指针的检查. 编译器假设间接引用空指针将停止程序.  如果在间接引用之后检查指针, 它就不可能为空.  </p>\n<ul>\n<li><p>fexpensive-optimizations: 进行一些从编译的角度来说代价高昂的优化（这种优化据说对于程序执行未必有很大的好处, 甚至有可能降低执行效率, 具体不是很清楚） </p>\n</li>\n<li><p>fregmove: 编译器试图重新分配move指令或者其他类似操作数等简单指令的寄存器数目, 以便最大化的捆绑寄存器的数目. 这种优化尤其对双操作数指令的机器帮助较大.  </p>\n</li>\n<li><p>fschedule-insns: 编译器尝试重新排列指令, 用以消除由于等待未准备好的数据而产生的延迟. 这种优化将对慢浮点运算的机器以及需要load memory的指令的执行有所帮助, 因为此时允许其他指令执行, 直到load memory的指令完成, 或浮点运算的指令再次需要cpu.  l </p>\n</li>\n</ul>\n<p>-fschedule-insns2: 与-fschedule-insns相似. 但是当寄存器分配完成后, 会请求一个附加的指令计划pass. 这种优化对寄存器较小, 并且load memory操作时间大于一个时钟周期的机器有非常好的效果.  </p>\n<ul>\n<li><p>fsched-interblock: 这种技术使编译器能够跨越指令块调度指令.  这可以非常灵活地移动指令以便等待期间完成的工作最大化.  </p>\n</li>\n<li><p>fsched-spec-load: 允许一些load指令进行一些投机性的动作. （具体不详）相同功能的还有-fsched-spec-load-dangerous, 允许更多的load指令进行投机性操作. 这两个选项在选中-fschedule-insns时默认打开.  </p>\n</li>\n<li><p>fcaller-saves: 通过存储和恢复call调用周围寄存器的方式, 使被call调用的value可以被分配给寄存器, 这种只会在看上去能产生更好的代码的时候才被使用. （如果调用多个函数, 这样能够节省时间, 因为只进行一次寄存器的保存和恢复操作, 而不是在每个函数调用中都进行. ） </p>\n</li>\n<li><p>fpeephole2: 允许计算机进行特定的观察孔优化(这个不晓得是什么意思), -fpeephole与-fpeephole2的差别在于不同的编译器采用不同的方式, 由的采用-fpeephole, 有的采用-fpeephole2, 也有两种都采用的.  </p>\n</li>\n<li><p>freorder-blocks: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性.  </p>\n</li>\n<li><p>freorder-functions: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性. 这种优化的实施依赖特定的已存在的信息: .text.hot用于告知访问频率较高的函数, .text.unlikely用于告知基本不被执行的函数.  </p>\n</li>\n<li><p>fstrict-aliasing: 这种技术强制实行高级语言的严格变量规则.  对于c和c++程序来说, 它确保不在数据类型之间共享变量. 例如, 整数变量不和单精度浮点变量使用相同的内存位置.  </p>\n</li>\n<li><p>funit-at-a-time: 在代码生成前, 先分析整个的汇编语言代码. 这将使一些额外的优化得以执行, 但是在编译器间需要消耗大量的内存. （有资料介绍说: 这使编译器可以重新安排不消耗大量时间的代码以便优化指令缓存. ） </p>\n</li>\n<li><p>falign-functions: 这个选项用于使函数对准内存中特定边界的开始位置.  大多数处理器按照页面读取内存, 并且确保全部函数代码位于单一内存页面内, 就不需要叫化代码所需的页面.  </p>\n</li>\n<li><p>falign-jumps: 对齐分支代码到2的n次方边界. 在这种情况下, 无需执行傀儡指令（dummy operations） </p>\n</li>\n<li><p>falign-loops: 对齐循环到2的n次幂边界. 期望可以对循环执行多次, 用以补偿运行dummy operations所花费的时间.  </p>\n</li>\n<li><p>falign-labels: 对齐分支到2的n次幂边界. 这种选项容易使代码速度变慢, 原因是需要插入一些dummy operations当分支抵达usual flow of the code. </p>\n</li>\n<li><p>fcrossjumping: 这是对跨越跳转的转换代码处理,  以便组合分散在程序各处的相同代码.  这样可以减少代码的长度,  但是也许不会对程序性能有直接影响.   </p>\n</li>\n</ul>\n<h2><span id=\"-o3\">-O3</span></h2><p>比O2更进一步的进行优化. </p>\n<p>在包含了O2所有的优化的基础上, 又打开了以下优化选项:  </p>\n<ul>\n<li><p>finline-functions: 内联简单的函数到被调用函数中. 由编译器启发式的决定哪些函数足够简单可以做这种内联优化. 默认情况下, 编译器限制内联的尺寸, 3.4.6中限制为600（具体含义不详, 指令条数或代码size？）可以通过-finline-limit=n改变这个长度. 这种优化技术不为函数创建单独的汇编语言代码,  而是把函数代码包含在调度程序的代码中.  对于多次被调用的函数来说, 为每次函数调用复制函数代码.  虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能.  </p>\n</li>\n<li><p>fweb: 构建用于保存变量的伪寄存器网络.  伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术. 这种优化会使得调试变得更加的不可能, 因为变量不再存放于原本的寄存器中.  </p>\n</li>\n<li><p>frename-registers: 在寄存器分配后, 通过使用registers left over来避免预定代码中的虚假依赖. 这会使调试变得非常困难, 因为变量不再存放于原本的寄存器中了.  </p>\n</li>\n<li><p>funswitch-loops: 将无变化的条件分支移出循环, 取而代之的将结果副本放入循环中.  </p>\n</li>\n</ul>\n<h2><span id=\"-os\">-Os</span></h2><p> 主要是对程序的尺寸进行优化. 打开了大部分O2优化中不会增加程序大小的优化选项, 并对程序代码的大小做更深层的优化. （通常我们不需要这种优化）Os会关闭如下选项:  -falign-functions -falign-jumps -falign-loops  -falign-labels   -freorder-blocks   -fprefetch-loop-arrays  </p>\n<h2><span id=\"-og\">-Og</span></h2><p>该标识会精心挑选部分与-g选项不冲突的优化选项, 当然就能提供合理的优化水平, 同时产生较好的可调试信息和对语言标准的遵循程度.  </p>\n<h1><span id=\"oi卡常模版1\">OI卡常模版1</span></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#define OI 0</span><br><span class=\"line\">#if defined(__GCC__) &amp;&amp; (OI)</span><br><span class=\"line\">#pragma GCC push_options</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma GCC optimize(2)</span><br><span class=\"line\">#pragma GCC optimize(3)</span><br><span class=\"line\">#pragma GCC optimize(&quot;Ofast&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fgcse&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ffast-math&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;unroll-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-labels&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma GCC target(&quot;avx&quot;, &quot;sse2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; benchmark code  </span><br><span class=\"line\">&#x2F;&#x2F;...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__GCC__) &amp;&amp; (OI)</span><br><span class=\"line\">#pragma GCC pop_options</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<h1><span id=\"卡常模版2\">卡常模版2</span></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"gcc-3-4-6为参考\"><a href=\"#gcc-3-4-6为参考\" class=\"headerlink\" title=\"gcc-3.4.6为参考\"></a>gcc-3.4.6为参考</h1><h2 id=\"O0\"><a href=\"#O0\" class=\"headerlink\" title=\"O0\"></a>O0</h2><p>不做任何优化, 这是默认的编译选项.  </p>\n<h2 id=\"O1\"><a href=\"#O1\" class=\"headerlink\" title=\"O1\"></a>O1</h2><p>-O和-O1:  对程序做部分编译优化, 对于大函数,优化编译占用稍微多的时间和相当大的内存. 使用本项优化, 编译器会尝试减小生成代码的尺寸, 以及缩短执行时间, 但并不执行需要占用大量编译时间的优化.  </p>\n<ul>\n<li><p>fdefer-pop: 延迟栈的弹出时间. 当完成一个函数调用, 参数并不马上从栈中弹出, 而是在多个函数被调用后, 一次性弹出.    </p>\n</li>\n<li><p>fmerge-constants: 尝试横跨编译单元合并同样的常量(string constants and floating point constants)   </p>\n</li>\n<li><p>fthread-jumps: 如果某个跳转分支的目的地存在另一个条件比较,而且该条件比较包含在前一个比较语句之内,那么执行本项优化.根据条件是true或者false,前面那条分支重定向到第二条分支的目的地或者紧跟在第二条分支后面. </p>\n</li>\n<li><p>floop-optimize: 执行循环优化,将常量表达式从循环中移除, 简化判断循环的条件, 并且optionally do strength-reduction, 或者将循环打开等. 在大型复杂的循环中, 这种优化比较显著.  </p>\n</li>\n<li><p>fif-conversion: 尝试将条件跳转转换为等价的无分支型式. 优化实现方式包括条件移动, min, max, 设置标志, 以及abs指令, 以及一些算术技巧等.   </p>\n</li>\n<li><p>fif-conversion2基本意义相同, 没有找到更多的解释.  </p>\n</li>\n<li><p>fdelayed-branch: 这种技术试图根据指令周期时间重新安排指令.  它还试图把尽可能多的指令移动到条件分支前, 以便最充分的利用处理器的治理缓存.  </p>\n</li>\n<li><p>fguess-branch-probability: 当没有可用的profiling feedback或__builtin_expect时, 编译器采用随机模式猜测分支被执行的可能性, 并移动对应汇编代码的位置, 这有可能导致不同的编译器会编译出迥然不同的目标代码.  </p>\n</li>\n<li><p>fcprop-registers: 因为在函数中把寄存器分配给变量, 所以编译器执行第二次检查以便减少调度依赖性(两个段要求使用相同的寄存器)并且删除不必要的寄存器复制操作.  </p>\n</li>\n</ul>","more":"<h2 id=\"O2\"><a href=\"#O2\" class=\"headerlink\" title=\"-O2\"></a>-O2</h2><p>比O1更高级的选项, 进行更多的优化. Gcc将执行几乎所有的不包含时间和空间折中的优化.<br>当设置O2选项时, 编译器并不进行循环打开（）loop unrolling以及函数内联.<br>与O1比较而言, O2优化增加了编译时间的基础上, 提高了生成代码的执行效率.<br>O2打开所有的O1选项, 并打开以下选项:  </p>\n<ul>\n<li><p>fforce-mem: 在做算术操作前, 强制将内存数据copy到寄存器中以后再执行. 这会使所有的内存引用潜在的共同表达式, 进而产出更高效的代码, 当没有共同的子表达式时, 指令合并将排出个别的寄存器载入. 这种优化对于只涉及单一指令的变量, 这样也许不会有很大的优化效果. 但是对于再很多指令(必须数学操作)中都涉及到的变量来说, 这会时很显著的优化, 因为和访问内存中的值相比 ,处理器访问寄存器中的值要快的多.  </p>\n</li>\n<li><p>foptimize-sibling-calls: 优化相关的以及末尾递归的调用. 通常, 递归的函数调用可以被展开为一系列一般的指令,  而不是使用分支.  这样处理器的指令缓存能够加载展开的指令并且处理他们, 和指令保持为需要分支操作的单独函数调用相比, 这样更快.  </p>\n</li>\n<li><p>fstrength-reduce: 这种优化技术对循环执行优化并且删除迭代变量.  迭代变量是捆绑到循环计数器的变量, 比如使用变量, 然后使用循环计数器变量执行数学操作的for-next循环.  </p>\n</li>\n<li><p>fcse-follow-jumps: 在公用子表达式消元时, 当目标跳转不会被其他路径可达, 则扫描整个的跳转表达式. 例如, 当公用子表达式消元时遇到if…else…语句时, 当条为false时, 那么公用子表达式消元会跟随着跳转.    </p>\n</li>\n<li><p>fcse-skip-blocks: 与-fcse-follow-jumps类似, 不同的是, 根据特定条件, 跟随着cse跳转的会是整个的blocks </p>\n</li>\n<li><p>frerun-cse-after-loop: 在循环优化完成后, 重新进行公用子表达式消元操作.  </p>\n</li>\n<li><p>frerun-loop-opt: 两次运行循环优化 * fgcse: 执行全局公用子表达式消除pass. 这个pass还执行全局常量和copy propagation. 这些优化操作试图分析生成的汇编语言代码并且结合通用片段,  消除冗余的代码段. 如果代码使用计算性的goto, gcc指令推荐使用-fno-gcse选项.  </p>\n</li>\n</ul>\n<p>l-fgcse-lm: 全局公用子表达式消除将试图移动那些仅仅被自身存储kill的装载操作的位置. 这将允许将循环内的load/store操作序列中的load转移到循环的外面（只需要装载一次）, 而在循环内改变成copy/store序列. 在选中-fgcse后, 默认打开.  </p>\n<ul>\n<li><p>fgcse-sm: 当一个存储操作pass在一个全局公用子表达式消除的后面, 这个pass将试图将store操作转移到循环外面去. 如果与-fgcse-lm配合使用, 那么load/store操作将会转变为在循环前load, 在循环后store, 从而提高运行效率, 减少不必要的操作.  </p>\n</li>\n<li><p>fgcse-las: 全局公用子表达式消除pass将消除在store后面的不必要的load操作, 这些load与store通常是同一块存储单元（全部或局部） </p>\n</li>\n</ul>\n<p>l-fdelete-null-pointer-checks: 通过对全局数据流的分析, 识别并排出无用的对空指针的检查. 编译器假设间接引用空指针将停止程序.  如果在间接引用之后检查指针, 它就不可能为空.  </p>\n<ul>\n<li><p>fexpensive-optimizations: 进行一些从编译的角度来说代价高昂的优化（这种优化据说对于程序执行未必有很大的好处, 甚至有可能降低执行效率, 具体不是很清楚） </p>\n</li>\n<li><p>fregmove: 编译器试图重新分配move指令或者其他类似操作数等简单指令的寄存器数目, 以便最大化的捆绑寄存器的数目. 这种优化尤其对双操作数指令的机器帮助较大.  </p>\n</li>\n<li><p>fschedule-insns: 编译器尝试重新排列指令, 用以消除由于等待未准备好的数据而产生的延迟. 这种优化将对慢浮点运算的机器以及需要load memory的指令的执行有所帮助, 因为此时允许其他指令执行, 直到load memory的指令完成, 或浮点运算的指令再次需要cpu.  l </p>\n</li>\n</ul>\n<p>-fschedule-insns2: 与-fschedule-insns相似. 但是当寄存器分配完成后, 会请求一个附加的指令计划pass. 这种优化对寄存器较小, 并且load memory操作时间大于一个时钟周期的机器有非常好的效果.  </p>\n<ul>\n<li><p>fsched-interblock: 这种技术使编译器能够跨越指令块调度指令.  这可以非常灵活地移动指令以便等待期间完成的工作最大化.  </p>\n</li>\n<li><p>fsched-spec-load: 允许一些load指令进行一些投机性的动作. （具体不详）相同功能的还有-fsched-spec-load-dangerous, 允许更多的load指令进行投机性操作. 这两个选项在选中-fschedule-insns时默认打开.  </p>\n</li>\n<li><p>fcaller-saves: 通过存储和恢复call调用周围寄存器的方式, 使被call调用的value可以被分配给寄存器, 这种只会在看上去能产生更好的代码的时候才被使用. （如果调用多个函数, 这样能够节省时间, 因为只进行一次寄存器的保存和恢复操作, 而不是在每个函数调用中都进行. ） </p>\n</li>\n<li><p>fpeephole2: 允许计算机进行特定的观察孔优化(这个不晓得是什么意思), -fpeephole与-fpeephole2的差别在于不同的编译器采用不同的方式, 由的采用-fpeephole, 有的采用-fpeephole2, 也有两种都采用的.  </p>\n</li>\n<li><p>freorder-blocks: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性.  </p>\n</li>\n<li><p>freorder-functions: 在编译函数的时候重新安排基本的块, 目的在于减少分支的个数, 提高代码的局部性. 这种优化的实施依赖特定的已存在的信息: .text.hot用于告知访问频率较高的函数, .text.unlikely用于告知基本不被执行的函数.  </p>\n</li>\n<li><p>fstrict-aliasing: 这种技术强制实行高级语言的严格变量规则.  对于c和c++程序来说, 它确保不在数据类型之间共享变量. 例如, 整数变量不和单精度浮点变量使用相同的内存位置.  </p>\n</li>\n<li><p>funit-at-a-time: 在代码生成前, 先分析整个的汇编语言代码. 这将使一些额外的优化得以执行, 但是在编译器间需要消耗大量的内存. （有资料介绍说: 这使编译器可以重新安排不消耗大量时间的代码以便优化指令缓存. ） </p>\n</li>\n<li><p>falign-functions: 这个选项用于使函数对准内存中特定边界的开始位置.  大多数处理器按照页面读取内存, 并且确保全部函数代码位于单一内存页面内, 就不需要叫化代码所需的页面.  </p>\n</li>\n<li><p>falign-jumps: 对齐分支代码到2的n次方边界. 在这种情况下, 无需执行傀儡指令（dummy operations） </p>\n</li>\n<li><p>falign-loops: 对齐循环到2的n次幂边界. 期望可以对循环执行多次, 用以补偿运行dummy operations所花费的时间.  </p>\n</li>\n<li><p>falign-labels: 对齐分支到2的n次幂边界. 这种选项容易使代码速度变慢, 原因是需要插入一些dummy operations当分支抵达usual flow of the code. </p>\n</li>\n<li><p>fcrossjumping: 这是对跨越跳转的转换代码处理,  以便组合分散在程序各处的相同代码.  这样可以减少代码的长度,  但是也许不会对程序性能有直接影响.   </p>\n</li>\n</ul>\n<h2 id=\"O3\"><a href=\"#O3\" class=\"headerlink\" title=\"-O3\"></a>-O3</h2><p>比O2更进一步的进行优化. </p>\n<p>在包含了O2所有的优化的基础上, 又打开了以下优化选项:  </p>\n<ul>\n<li><p>finline-functions: 内联简单的函数到被调用函数中. 由编译器启发式的决定哪些函数足够简单可以做这种内联优化. 默认情况下, 编译器限制内联的尺寸, 3.4.6中限制为600（具体含义不详, 指令条数或代码size？）可以通过-finline-limit=n改变这个长度. 这种优化技术不为函数创建单独的汇编语言代码,  而是把函数代码包含在调度程序的代码中.  对于多次被调用的函数来说, 为每次函数调用复制函数代码.  虽然这样对于减少代码长度不利, 但是通过最充分的利用指令缓存代码, 而不是在每次函数调用时进行分支操作, 可以提高性能.  </p>\n</li>\n<li><p>fweb: 构建用于保存变量的伪寄存器网络.  伪寄存器包含数据, 就像他们是寄存器一样, 但是可以使用各种其他优化技术进行优化, 比如cse和loop优化技术. 这种优化会使得调试变得更加的不可能, 因为变量不再存放于原本的寄存器中.  </p>\n</li>\n<li><p>frename-registers: 在寄存器分配后, 通过使用registers left over来避免预定代码中的虚假依赖. 这会使调试变得非常困难, 因为变量不再存放于原本的寄存器中了.  </p>\n</li>\n<li><p>funswitch-loops: 将无变化的条件分支移出循环, 取而代之的将结果副本放入循环中.  </p>\n</li>\n</ul>\n<h2 id=\"Os\"><a href=\"#Os\" class=\"headerlink\" title=\"-Os\"></a>-Os</h2><p> 主要是对程序的尺寸进行优化. 打开了大部分O2优化中不会增加程序大小的优化选项, 并对程序代码的大小做更深层的优化. （通常我们不需要这种优化）Os会关闭如下选项:  -falign-functions -falign-jumps -falign-loops  -falign-labels   -freorder-blocks   -fprefetch-loop-arrays  </p>\n<h2 id=\"Og\"><a href=\"#Og\" class=\"headerlink\" title=\"-Og\"></a>-Og</h2><p>该标识会精心挑选部分与-g选项不冲突的优化选项, 当然就能提供合理的优化水平, 同时产生较好的可调试信息和对语言标准的遵循程度.  </p>\n<h1 id=\"OI卡常模版1\"><a href=\"#OI卡常模版1\" class=\"headerlink\" title=\"OI卡常模版1\"></a>OI卡常模版1</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#define OI 0</span><br><span class=\"line\">#if defined(__GCC__) &amp;&amp; (OI)</span><br><span class=\"line\">#pragma GCC push_options</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma GCC optimize(2)</span><br><span class=\"line\">#pragma GCC optimize(3)</span><br><span class=\"line\">#pragma GCC optimize(&quot;Ofast&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fgcse&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fgcse-lm&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fipa-sra&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-pre&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-vrp&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fpeephole2&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ffast-math&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fsched-spec&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;unroll-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-labels&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fdevirtualize&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcaller-saves&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcrossjumping&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fthread-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-funroll-loops&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fwhole-program&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-freorder-blocks&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fschedule-insns&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-tail-merge&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fschedule-insns2&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fstrict-aliasing&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fstrict-overflow&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-falign-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcse-skip-blocks&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fcse-follow-jumps&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fsched-interblock&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fpartial-inlining&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;no-stack-protector&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-freorder-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-findirect-inlining&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fhoist-adjacent-loads&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-frerun-cse-after-loop&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-small-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-finline-small-functions&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-ftree-switch-conversion&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-foptimize-sibling-calls&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fexpensive-optimizations&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-funsafe-loop-optimizations&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;inline-functions-called-once&quot;)</span><br><span class=\"line\">#pragma GCC optimize(&quot;-fdelete-null-pointer-checks&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma GCC target(&quot;avx&quot;, &quot;sse2&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; benchmark code  </span><br><span class=\"line\">&#x2F;&#x2F;...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#if defined(__GCC__) &amp;&amp; (OI)</span><br><span class=\"line\">#pragma GCC pop_options</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"卡常模版2\"><a href=\"#卡常模版2\" class=\"headerlink\" title=\"卡常模版2\"></a>卡常模版2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"detour_crowd-path_corridor","date":"2022-03-06T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n\n## 走廊空间: DetourPathCorridor.h :   class dtPathCorridor;          \n\n<!--more -->\n\n### 基本术语参考   \n\n* vertex: 多边形顶点\n* Corridor : 多边形组成的连通区域 : 走廊,  对于更上层的pathfinding而言, poly被被抽象为点与点的连通关系. 这里展开后则为走廊.    \n* poly: 多边形: 一个多边形包含基础的顶点信息和link信息和基础类型数据等.     \n* Surface:  表面(行走面), 概念上为行走面, 在这里的实现则为poly组成的mesh表面   \n* mesh: 网, 概念上指的是指的由poly组成行走面的数据结构方式, 即mesh;  连通图.   \n* Corners: 挂点, 概念上是指的corridor走廊中的边上的顶点  通常为墙角(pathfinding近似最优解, 也是期望, 但未必总是 例如tile带来的边界)   \n* moveAlongSurface: 约束在行走面上的位置移动处理  \n* neis,eighbour: 邻居, 避让中的邻居为agent; corridor中的邻居则是poly  \n* node: 一般为脚手架, 即用于临时性的list的节点.  navigation的实现封装层次较低, 不同结构中的node意义不同.   \n* edge: 概念上的边, 是link最主要的类型之一, 第一个边一般是指的下标0的顶点连向下一个顶点的边, 这里要注意 link是一个分离实现的链表, 一个当前poly的边可能有多个link标记属于当前边   \n*  visited: 可认为是爬过(访问过)     \n* Off-mesh connections: 概念上是连线, 实现是poly: 只有两个边两个顶点的poly, 可双向连通;  即第一个link指向第一个边(顶点0)且该link指向的poly不是出发点点poly的的时候为连出, 否则为连入.   处于off-mesh移动的agent无法进行避让处理(不做避让处理).     DT_OFFMESH_CON_BIDIR 标记为双向的offlink会同时添加在目标poly和源poly的link中.  而off-mesh poly本身没有双向还是单向的标记. 也不需要.   \n  \n\n数据结构   \n```C++\nclass dtPathCorridor\n{\n    float m_pos[3];  //该坐标位于'm_path[0]'中   \n    float m_target[3]; //目标点应位于'm_path[m_npath-1]'中  \n    \n    //初始化时候一次性预分配好poly数组所需要的内存;     \n    dtPolyRef* m_path;  //这里存储的是poly id数组组成的路径id   在这里概念上叫做corridor 即从起始点到目标点有效的走廊空间 \n    int m_npath;\n    int m_maxPath;\n};\n\n/// The current corridor position is expected to be within the first polygon in the path. The target \n/// is expected to be in the last polygon. \n\n```\n\n```\n/**\n@class dtPathCorridor\n@par\n\nThe corridor is loaded with a path, usually obtained from a #dtNavMeshQuery::findPath() query. The corridor\nis then used to plan local movement, with the corridor automatically updating as needed to deal with inaccurate \nagent locomotion.\n\nExample of a common use case:\n\n-# Construct the corridor object and call #init() to allocate its path buffer.\n-# Obtain a path from a #dtNavMeshQuery object.\n-# Use #reset() to set the agent's current position. (At the beginning of the path.)\n-# Use #setCorridor() to load the path and target.\n-# Use #findCorners() to plan movement. (This handles dynamic path straightening.)\n-# Use #movePosition() to feed agent movement back into the corridor. (The corridor will automatically adjust as needed.)\n-# If the target is moving, use #moveTargetPosition() to update the end of the corridor. \n   (The corridor will automatically adjust as needed.)\n-# Repeat the previous 3 steps to continue to move the agent.\n\nThe corridor position and target are always constrained to the navigation mesh.\n\nOne of the difficulties in maintaining a path is that floating point errors, locomotion inaccuracies, and/or local \nsteering can result in the agent crossing the boundary of the path corridor, temporarily invalidating the path. \nThis class uses local mesh queries to detect and update the corridor as needed to handle these types of issues. \n\nThe fact that local mesh queries are used to move the position and target locations results in two beahviors that \nneed to be considered:\n\nEvery time a move function is used there is a chance that the path will become non-optimial. Basically, the further \nthe target is moved from its original location, and the further the position is moved outside the original corridor, \nthe more likely the path will become non-optimal. This issue can be addressed by periodically running the \n#optimizePathTopology() and #optimizePathVisibility() methods.\n\nAll local mesh queries have distance limitations. (Review the #dtNavMeshQuery methods for details.) So the most accurate \nuse case is to move the position and target in small increments. If a large increment is used, then the corridor \nmay not be able to accurately find the new location.  Because of this limiation, if a position is moved in a large\nincrement, then compare the desired and resulting polygon references. If the two do not match, then path replanning \nmay be needed.  E.g. If you move the target, check #getLastPoly() to see if it is the expected polygon.\n\n*/\n```\n\n\ndtPathCorridor简述:   \n通过pathfinding给出来的poly path, 在pathfinding看来是一系列连通的点, 但是解开成poly后,  则是一系列相邻的poly组成的走廊空间.   \ncorridor则是在走廊空间中进行局部移动规划(pathfinding是高级路径规划), 包括如何从一个poly走向另外一个poly, 移动转向,  避让带来的局部更新等.    比喻的话, pathfinding相当于导航地图给出来的路线,   而corridor则是通过雷达&摄像头等实时扫描绘制出来用于驾驶决策的现场交通环境.   \n\n\n### dtPathCorridor   \n该函数设置新的路径和目标坐标点位置  但未处理起始点坐标.  \n```C++\n/// The current corridor position is expected to be within the first polygon in the path. The target \n/// is expected to be in the last polygon. \n/// @warning The size of the path must not exceed the size of corridor's path buffer set during #init().\nvoid dtPathCorridor::setCorridor(const float* target, const dtPolyRef* path, const int npath)\n{\n    dtVcopy(m_target, target);\n    memcpy(m_path, path, sizeof(dtPolyRef)*npath);\n    m_npath = npath;\n}\n```\n\n###  fixPathStart\n修复起始点坐标,  \n这里将会覆盖路径点中的第一个和第二个.    但是如果当前路径个数为1或者2  则会保留最后一个  \n0的作用略过.  \n```C++\nbool dtPathCorridor::fixPathStart(dtPolyRef safeRef, const float* safePos)\n{\n    dtVcopy(m_pos, safePos);\n    if (m_npath < 3 && m_npath > 0)\n    {\n        m_path[2] = m_path[m_npath-1];\n        m_path[0] = safeRef;\n        m_path[1] = 0;\n        m_npath = 3;\n    }\n    else\n    {\n        m_path[0] = safeRef;\n        m_path[1] = 0;\n    }\n    return true;\n}\n```\n\n### movePosition\n基于(约束于)navmesh行走面的内的位置变化(移动)处理, 新的位置仍然位于m_path[0]中.    \n* 这种移动可能导致组成走廊空间的拓扑非最优 以及 移动的路径非最优.  \n* 从旧的位置往新的位置沿着poly mesh行走面去找, 如果不在同一个poly则往相邻的poly去找,  如果不可达或者位置无效, 则得到的坐标和传入的期望位置可能会不同   \n* 找到新的有效位置后合并路径: 先通过moveAlongSurface找到从当前点到移动目标点的poly visited 路径, 然后用这个路径和现有路径进行合并. \n  * 例如如果新路径为已有路径的下个poly, 则减去当前poly(预期情况1);  \n  * 例如当前移动仍然在m_path[0]的poly内, 则合并去重(预期情况2) (这里其实发生不必要的拷贝请求(memmove对相同地址和长度的请求应该不会执行));\n  * 如果避让跑偏了走到了新的poly, 则把当前path整体后移, 把当前移动带来的新的走廊path拼接起来, 拼接过程会尽可能的优化掉重复的的路径, 但是按照这个拼接  从走廊上来说是增加了新的走廊长度 因此需要通过局部visted重新优化局部路径.   \n```C++\nbool dtPathCorridor::movePosition(const float* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)\n{\n    // Move along navmesh and update new position.\n    float result[3];\n    static const int MAX_VISITED = 16;\n    dtPolyRef visited[MAX_VISITED];\n    int nvisited = 0;\n    dtStatus status = navquery->moveAlongSurface(m_path[0], m_pos, npos, filter,\n                                                 result, visited, &nvisited, MAX_VISITED);\n    if (dtStatusSucceed(status)) {\n        m_npath = dtMergeCorridorStartMoved(m_path, m_npath, m_maxPath, visited, nvisited);\n        \n        // Adjust the position to stay on top of the navmesh.\n        float h = m_pos[1];\n        navquery->getPolyHeight(m_path[0], result, &h);\n        result[1] = h;\n        dtVcopy(m_pos, result);\n        return true;\n    }\n    return false;\n}\n```\n\n### dtNavMeshQuery::moveAlongSurface  \n\nDT_VERTS_PER_POLYGON = 6;  navigation中最大单个poly有6个顶点  \n沿着navmesh表面移动时, 最多stack ```MAX_STACK = 48``` 个poly节点, 超过后会丢弃.  \n每次移除当前poly并检查是否为目标点所在poly时, 如果没找到, 则添加所有符合条件的邻居到stack中,   \n每次stack邻居时, 这些邻居都通过pidx指向该poly(node) :  反向树结构 父节点不知道只节点, 但子节点知道父节点.   起始点所在poly为root node.      \n当我们找到目标点的所在的poly时候, 通过node->pidx 可以反向串起来完整的走廊空间.  逆序保存为 visited poly数组  \n每次visit一个poly时 会stack这个poly的所有邻居(过滤后)  \n \n\n```C++\ndtStatus dtNavMeshQuery::moveAlongSurface(dtPolyRef startRef, const float* startPos, const float* endPos,\n                                          const dtQueryFilter* filter,\n                                          float* resultPos, dtPolyRef* visited, int* visitedCount, const int maxVisitedSize) const\n{\n    //....   \n    dtNode* startNode = m_tinyNodePool->getNode(startRef);\n    startNode->pidx = 0;\n    startNode->cost = 0;\n    startNode->total = 0;\n    startNode->id = startRef;\n    startNode->flags = DT_NODE_CLOSED;\n    stack[nstack++] = startNode;\n\n\n    //....   \n\n    while (nstack)\n    {\n        // Pop front.\n        dtNode* curNode = stack[0];\n        for (int i = 0; i < nstack-1; ++i)\n            stack[i] = stack[i+1];\n        nstack--;\n        \n        //....   \n\n\n        // If target is inside the poly, stop search.\n        if (dtPointInPolygon(endPos, verts, nverts))\n        {\n            bestNode = curNode;\n            dtVcopy(bestPos, endPos);\n            break;\n        }\n\n        //....   \n        for (int i = 0, j = (int)curPoly->vertCount-1; i < (int)curPoly->vertCount; j = i++)\n        {\n             //....   \n            if (filter->passFilter(link->ref, neiTile, neiPoly))\n            {\n                if (nneis < MAX_NEIS)\n                    neis[nneis++] = link->ref;\n            }\n             //....   \n        }\n        for (int k = 0; k < nneis; ++k)\n        {\n            //....   \n            if (nstack < MAX_STACK)\n            {\n                neighbourNode->pidx = m_tinyNodePool->getNodeIdx(curNode);\n                neighbourNode->flags |= DT_NODE_CLOSED;\n                stack[nstack++] = neighbourNode;\n            }\n            //....   \n        }\n    }\n\n        int n = 0;\n    if (bestNode)\n    {\n        // Reverse the path.\n        dtNode* prev = 0;\n        dtNode* node = bestNode;\n        do\n        {\n            dtNode* next = m_tinyNodePool->getNodeAtIdx(node->pidx);\n            node->pidx = m_tinyNodePool->getNodeIdx(prev);\n            prev = node;\n            node = next;\n        }\n        while (node);\n        \n        // Store result\n        node = prev;\n        do\n        {\n            visited[n++] = node->id;\n            if (n >= maxVisitedSize)\n            {\n                status |= DT_BUFFER_TOO_SMALL;\n                break;\n            }\n            node = m_tinyNodePool->getNodeAtIdx(node->pidx);\n        }\n        while (node);\n    }\n    dtVcopy(resultPos, bestPos);\n    *visitedCount = n;\n}\n ```\n\n### dtMergeCorridorStartMoved\n合并path路径和visted路径.  见movePosition说明  \n\n ```C++\nint dtMergeCorridorStartMoved(dtPolyRef* path, const int npath, const int maxPath,\n\t\t\t\t\t\t\t  const dtPolyRef* visited, const int nvisited)\n{\n\tint furthestPath = -1;\n\tint furthestVisited = -1;\n\t\n\t// Find furthest common polygon.\n\tfor (int i = npath-1; i >= 0; --i)\n\t{\n\t\tbool found = false;\n\t\tfor (int j = nvisited-1; j >= 0; --j)\n\t\t{\n\t\t\tif (path[i] == visited[j])\n\t\t\t{\n\t\t\t\tfurthestPath = i;\n\t\t\t\tfurthestVisited = j;\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\tbreak;\n\t}\n\t\n\t// If no intersection found just return current path. \n\tif (furthestPath == -1 || furthestVisited == -1)\n\t\treturn npath;\n\t\n\t// Concatenate paths.\t\n\t\n\t// Adjust beginning of the buffer to include the visited.\n\tconst int req = nvisited - furthestVisited;\n\tconst int orig = dtMin(furthestPath+1, npath);\n\tint size = dtMax(0, npath-orig);\n\tif (req+size > maxPath)\n\t\tsize = maxPath-req;\n\tif (size)\n\t\tmemmove(path+req, path+orig, size*sizeof(dtPolyRef));\n\t\n\t// Store visited\n\tfor (int i = 0; i < req; ++i)\n\t\tpath[i] = visited[(nvisited-1)-i];\t\t\t\t\n\t\n\treturn req+size;\n}\n```\n\n\n\n## dtPathCorridor::findCorners\n走廊的关键实现之一 其核心是findStraightPath, 即查找直线路径上的拐点.   是agent移动能力的核心支持.   \n该函数从起点到终点查找拐点数量 失败或超过最大数量或者遇到off-link poly后停止    \n\n\n## optimizePathVisibility\n```g->params.updateFlags & DT_CROWD_OPTIMIZE_VIS```   \n该函数通过局部可视化优化agent在走廊中的移动路线  \n    其核心实现为朝目标点打一个射线, 如果可达则以可达走廊覆盖当前走廊  \n通常使用方式是, 从当前点打一个  跳过当前corner 到下一个corner的射线, 成功则拉直移动路径.  \n\n## optimizePathTopology  \nDT_CROWD_OPTIMIZE_TOPO\n和可视化不同, 这个是通过局部寻路进行修正和确认当前走廊是否为最优.   \n\n## moveTargetPosition\n和movePosition相似, 因目标发生变化而进行走廊调整 .   \n\n## DT_CROWD_SEPARATION\n\n## DT_CROWD_ANTICIPATE_TURNS","source":"_posts/2022-03-07-detour_crowd-path_corridor.md","raw":"\n---\ntitle: detour_crowd-path_corridor\ndate: 2022-03-07\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n\n## 走廊空间: DetourPathCorridor.h :   class dtPathCorridor;          \n\n<!--more -->\n\n### 基本术语参考   \n\n* vertex: 多边形顶点\n* Corridor : 多边形组成的连通区域 : 走廊,  对于更上层的pathfinding而言, poly被被抽象为点与点的连通关系. 这里展开后则为走廊.    \n* poly: 多边形: 一个多边形包含基础的顶点信息和link信息和基础类型数据等.     \n* Surface:  表面(行走面), 概念上为行走面, 在这里的实现则为poly组成的mesh表面   \n* mesh: 网, 概念上指的是指的由poly组成行走面的数据结构方式, 即mesh;  连通图.   \n* Corners: 挂点, 概念上是指的corridor走廊中的边上的顶点  通常为墙角(pathfinding近似最优解, 也是期望, 但未必总是 例如tile带来的边界)   \n* moveAlongSurface: 约束在行走面上的位置移动处理  \n* neis,eighbour: 邻居, 避让中的邻居为agent; corridor中的邻居则是poly  \n* node: 一般为脚手架, 即用于临时性的list的节点.  navigation的实现封装层次较低, 不同结构中的node意义不同.   \n* edge: 概念上的边, 是link最主要的类型之一, 第一个边一般是指的下标0的顶点连向下一个顶点的边, 这里要注意 link是一个分离实现的链表, 一个当前poly的边可能有多个link标记属于当前边   \n*  visited: 可认为是爬过(访问过)     \n* Off-mesh connections: 概念上是连线, 实现是poly: 只有两个边两个顶点的poly, 可双向连通;  即第一个link指向第一个边(顶点0)且该link指向的poly不是出发点点poly的的时候为连出, 否则为连入.   处于off-mesh移动的agent无法进行避让处理(不做避让处理).     DT_OFFMESH_CON_BIDIR 标记为双向的offlink会同时添加在目标poly和源poly的link中.  而off-mesh poly本身没有双向还是单向的标记. 也不需要.   \n  \n\n数据结构   \n```C++\nclass dtPathCorridor\n{\n    float m_pos[3];  //该坐标位于'm_path[0]'中   \n    float m_target[3]; //目标点应位于'm_path[m_npath-1]'中  \n    \n    //初始化时候一次性预分配好poly数组所需要的内存;     \n    dtPolyRef* m_path;  //这里存储的是poly id数组组成的路径id   在这里概念上叫做corridor 即从起始点到目标点有效的走廊空间 \n    int m_npath;\n    int m_maxPath;\n};\n\n/// The current corridor position is expected to be within the first polygon in the path. The target \n/// is expected to be in the last polygon. \n\n```\n\n```\n/**\n@class dtPathCorridor\n@par\n\nThe corridor is loaded with a path, usually obtained from a #dtNavMeshQuery::findPath() query. The corridor\nis then used to plan local movement, with the corridor automatically updating as needed to deal with inaccurate \nagent locomotion.\n\nExample of a common use case:\n\n-# Construct the corridor object and call #init() to allocate its path buffer.\n-# Obtain a path from a #dtNavMeshQuery object.\n-# Use #reset() to set the agent's current position. (At the beginning of the path.)\n-# Use #setCorridor() to load the path and target.\n-# Use #findCorners() to plan movement. (This handles dynamic path straightening.)\n-# Use #movePosition() to feed agent movement back into the corridor. (The corridor will automatically adjust as needed.)\n-# If the target is moving, use #moveTargetPosition() to update the end of the corridor. \n   (The corridor will automatically adjust as needed.)\n-# Repeat the previous 3 steps to continue to move the agent.\n\nThe corridor position and target are always constrained to the navigation mesh.\n\nOne of the difficulties in maintaining a path is that floating point errors, locomotion inaccuracies, and/or local \nsteering can result in the agent crossing the boundary of the path corridor, temporarily invalidating the path. \nThis class uses local mesh queries to detect and update the corridor as needed to handle these types of issues. \n\nThe fact that local mesh queries are used to move the position and target locations results in two beahviors that \nneed to be considered:\n\nEvery time a move function is used there is a chance that the path will become non-optimial. Basically, the further \nthe target is moved from its original location, and the further the position is moved outside the original corridor, \nthe more likely the path will become non-optimal. This issue can be addressed by periodically running the \n#optimizePathTopology() and #optimizePathVisibility() methods.\n\nAll local mesh queries have distance limitations. (Review the #dtNavMeshQuery methods for details.) So the most accurate \nuse case is to move the position and target in small increments. If a large increment is used, then the corridor \nmay not be able to accurately find the new location.  Because of this limiation, if a position is moved in a large\nincrement, then compare the desired and resulting polygon references. If the two do not match, then path replanning \nmay be needed.  E.g. If you move the target, check #getLastPoly() to see if it is the expected polygon.\n\n*/\n```\n\n\ndtPathCorridor简述:   \n通过pathfinding给出来的poly path, 在pathfinding看来是一系列连通的点, 但是解开成poly后,  则是一系列相邻的poly组成的走廊空间.   \ncorridor则是在走廊空间中进行局部移动规划(pathfinding是高级路径规划), 包括如何从一个poly走向另外一个poly, 移动转向,  避让带来的局部更新等.    比喻的话, pathfinding相当于导航地图给出来的路线,   而corridor则是通过雷达&摄像头等实时扫描绘制出来用于驾驶决策的现场交通环境.   \n\n\n### dtPathCorridor   \n该函数设置新的路径和目标坐标点位置  但未处理起始点坐标.  \n```C++\n/// The current corridor position is expected to be within the first polygon in the path. The target \n/// is expected to be in the last polygon. \n/// @warning The size of the path must not exceed the size of corridor's path buffer set during #init().\nvoid dtPathCorridor::setCorridor(const float* target, const dtPolyRef* path, const int npath)\n{\n    dtVcopy(m_target, target);\n    memcpy(m_path, path, sizeof(dtPolyRef)*npath);\n    m_npath = npath;\n}\n```\n\n###  fixPathStart\n修复起始点坐标,  \n这里将会覆盖路径点中的第一个和第二个.    但是如果当前路径个数为1或者2  则会保留最后一个  \n0的作用略过.  \n```C++\nbool dtPathCorridor::fixPathStart(dtPolyRef safeRef, const float* safePos)\n{\n    dtVcopy(m_pos, safePos);\n    if (m_npath < 3 && m_npath > 0)\n    {\n        m_path[2] = m_path[m_npath-1];\n        m_path[0] = safeRef;\n        m_path[1] = 0;\n        m_npath = 3;\n    }\n    else\n    {\n        m_path[0] = safeRef;\n        m_path[1] = 0;\n    }\n    return true;\n}\n```\n\n### movePosition\n基于(约束于)navmesh行走面的内的位置变化(移动)处理, 新的位置仍然位于m_path[0]中.    \n* 这种移动可能导致组成走廊空间的拓扑非最优 以及 移动的路径非最优.  \n* 从旧的位置往新的位置沿着poly mesh行走面去找, 如果不在同一个poly则往相邻的poly去找,  如果不可达或者位置无效, 则得到的坐标和传入的期望位置可能会不同   \n* 找到新的有效位置后合并路径: 先通过moveAlongSurface找到从当前点到移动目标点的poly visited 路径, 然后用这个路径和现有路径进行合并. \n  * 例如如果新路径为已有路径的下个poly, 则减去当前poly(预期情况1);  \n  * 例如当前移动仍然在m_path[0]的poly内, 则合并去重(预期情况2) (这里其实发生不必要的拷贝请求(memmove对相同地址和长度的请求应该不会执行));\n  * 如果避让跑偏了走到了新的poly, 则把当前path整体后移, 把当前移动带来的新的走廊path拼接起来, 拼接过程会尽可能的优化掉重复的的路径, 但是按照这个拼接  从走廊上来说是增加了新的走廊长度 因此需要通过局部visted重新优化局部路径.   \n```C++\nbool dtPathCorridor::movePosition(const float* npos, dtNavMeshQuery* navquery, const dtQueryFilter* filter)\n{\n    // Move along navmesh and update new position.\n    float result[3];\n    static const int MAX_VISITED = 16;\n    dtPolyRef visited[MAX_VISITED];\n    int nvisited = 0;\n    dtStatus status = navquery->moveAlongSurface(m_path[0], m_pos, npos, filter,\n                                                 result, visited, &nvisited, MAX_VISITED);\n    if (dtStatusSucceed(status)) {\n        m_npath = dtMergeCorridorStartMoved(m_path, m_npath, m_maxPath, visited, nvisited);\n        \n        // Adjust the position to stay on top of the navmesh.\n        float h = m_pos[1];\n        navquery->getPolyHeight(m_path[0], result, &h);\n        result[1] = h;\n        dtVcopy(m_pos, result);\n        return true;\n    }\n    return false;\n}\n```\n\n### dtNavMeshQuery::moveAlongSurface  \n\nDT_VERTS_PER_POLYGON = 6;  navigation中最大单个poly有6个顶点  \n沿着navmesh表面移动时, 最多stack ```MAX_STACK = 48``` 个poly节点, 超过后会丢弃.  \n每次移除当前poly并检查是否为目标点所在poly时, 如果没找到, 则添加所有符合条件的邻居到stack中,   \n每次stack邻居时, 这些邻居都通过pidx指向该poly(node) :  反向树结构 父节点不知道只节点, 但子节点知道父节点.   起始点所在poly为root node.      \n当我们找到目标点的所在的poly时候, 通过node->pidx 可以反向串起来完整的走廊空间.  逆序保存为 visited poly数组  \n每次visit一个poly时 会stack这个poly的所有邻居(过滤后)  \n \n\n```C++\ndtStatus dtNavMeshQuery::moveAlongSurface(dtPolyRef startRef, const float* startPos, const float* endPos,\n                                          const dtQueryFilter* filter,\n                                          float* resultPos, dtPolyRef* visited, int* visitedCount, const int maxVisitedSize) const\n{\n    //....   \n    dtNode* startNode = m_tinyNodePool->getNode(startRef);\n    startNode->pidx = 0;\n    startNode->cost = 0;\n    startNode->total = 0;\n    startNode->id = startRef;\n    startNode->flags = DT_NODE_CLOSED;\n    stack[nstack++] = startNode;\n\n\n    //....   \n\n    while (nstack)\n    {\n        // Pop front.\n        dtNode* curNode = stack[0];\n        for (int i = 0; i < nstack-1; ++i)\n            stack[i] = stack[i+1];\n        nstack--;\n        \n        //....   \n\n\n        // If target is inside the poly, stop search.\n        if (dtPointInPolygon(endPos, verts, nverts))\n        {\n            bestNode = curNode;\n            dtVcopy(bestPos, endPos);\n            break;\n        }\n\n        //....   \n        for (int i = 0, j = (int)curPoly->vertCount-1; i < (int)curPoly->vertCount; j = i++)\n        {\n             //....   \n            if (filter->passFilter(link->ref, neiTile, neiPoly))\n            {\n                if (nneis < MAX_NEIS)\n                    neis[nneis++] = link->ref;\n            }\n             //....   \n        }\n        for (int k = 0; k < nneis; ++k)\n        {\n            //....   \n            if (nstack < MAX_STACK)\n            {\n                neighbourNode->pidx = m_tinyNodePool->getNodeIdx(curNode);\n                neighbourNode->flags |= DT_NODE_CLOSED;\n                stack[nstack++] = neighbourNode;\n            }\n            //....   \n        }\n    }\n\n        int n = 0;\n    if (bestNode)\n    {\n        // Reverse the path.\n        dtNode* prev = 0;\n        dtNode* node = bestNode;\n        do\n        {\n            dtNode* next = m_tinyNodePool->getNodeAtIdx(node->pidx);\n            node->pidx = m_tinyNodePool->getNodeIdx(prev);\n            prev = node;\n            node = next;\n        }\n        while (node);\n        \n        // Store result\n        node = prev;\n        do\n        {\n            visited[n++] = node->id;\n            if (n >= maxVisitedSize)\n            {\n                status |= DT_BUFFER_TOO_SMALL;\n                break;\n            }\n            node = m_tinyNodePool->getNodeAtIdx(node->pidx);\n        }\n        while (node);\n    }\n    dtVcopy(resultPos, bestPos);\n    *visitedCount = n;\n}\n ```\n\n### dtMergeCorridorStartMoved\n合并path路径和visted路径.  见movePosition说明  \n\n ```C++\nint dtMergeCorridorStartMoved(dtPolyRef* path, const int npath, const int maxPath,\n\t\t\t\t\t\t\t  const dtPolyRef* visited, const int nvisited)\n{\n\tint furthestPath = -1;\n\tint furthestVisited = -1;\n\t\n\t// Find furthest common polygon.\n\tfor (int i = npath-1; i >= 0; --i)\n\t{\n\t\tbool found = false;\n\t\tfor (int j = nvisited-1; j >= 0; --j)\n\t\t{\n\t\t\tif (path[i] == visited[j])\n\t\t\t{\n\t\t\t\tfurthestPath = i;\n\t\t\t\tfurthestVisited = j;\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tif (found)\n\t\t\tbreak;\n\t}\n\t\n\t// If no intersection found just return current path. \n\tif (furthestPath == -1 || furthestVisited == -1)\n\t\treturn npath;\n\t\n\t// Concatenate paths.\t\n\t\n\t// Adjust beginning of the buffer to include the visited.\n\tconst int req = nvisited - furthestVisited;\n\tconst int orig = dtMin(furthestPath+1, npath);\n\tint size = dtMax(0, npath-orig);\n\tif (req+size > maxPath)\n\t\tsize = maxPath-req;\n\tif (size)\n\t\tmemmove(path+req, path+orig, size*sizeof(dtPolyRef));\n\t\n\t// Store visited\n\tfor (int i = 0; i < req; ++i)\n\t\tpath[i] = visited[(nvisited-1)-i];\t\t\t\t\n\t\n\treturn req+size;\n}\n```\n\n\n\n## dtPathCorridor::findCorners\n走廊的关键实现之一 其核心是findStraightPath, 即查找直线路径上的拐点.   是agent移动能力的核心支持.   \n该函数从起点到终点查找拐点数量 失败或超过最大数量或者遇到off-link poly后停止    \n\n\n## optimizePathVisibility\n```g->params.updateFlags & DT_CROWD_OPTIMIZE_VIS```   \n该函数通过局部可视化优化agent在走廊中的移动路线  \n    其核心实现为朝目标点打一个射线, 如果可达则以可达走廊覆盖当前走廊  \n通常使用方式是, 从当前点打一个  跳过当前corner 到下一个corner的射线, 成功则拉直移动路径.  \n\n## optimizePathTopology  \nDT_CROWD_OPTIMIZE_TOPO\n和可视化不同, 这个是通过局部寻路进行修正和确认当前走廊是否为最优.   \n\n## moveTargetPosition\n和movePosition相似, 因目标发生变化而进行走廊调整 .   \n\n## DT_CROWD_SEPARATION\n\n## DT_CROWD_ANTICIPATE_TURNS","slug":"2022-03-07-detour_crowd-path_corridor","published":1,"updated":"2022-03-09T04:00:58.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9h70000442m2gxcaxxl","content":"<h2><span id=\"走廊空间-detourpathcorridorh-class-dtpathcorridor\">走廊空间: DetourPathCorridor.h :   class dtPathCorridor;</span></h2><a id=\"more\"></a>\n\n<h3><span id=\"基本术语参考\">基本术语参考</span></h3><ul>\n<li>vertex: 多边形顶点</li>\n<li>Corridor : 多边形组成的连通区域 : 走廊,  对于更上层的pathfinding而言, poly被被抽象为点与点的连通关系. 这里展开后则为走廊.    </li>\n<li>poly: 多边形: 一个多边形包含基础的顶点信息和link信息和基础类型数据等.     </li>\n<li>Surface:  表面(行走面), 概念上为行走面, 在这里的实现则为poly组成的mesh表面   </li>\n<li>mesh: 网, 概念上指的是指的由poly组成行走面的数据结构方式, 即mesh;  连通图.   </li>\n<li>Corners: 挂点, 概念上是指的corridor走廊中的边上的顶点  通常为墙角(pathfinding近似最优解, 也是期望, 但未必总是 例如tile带来的边界)   </li>\n<li>moveAlongSurface: 约束在行走面上的位置移动处理  </li>\n<li>neis,eighbour: 邻居, 避让中的邻居为agent; corridor中的邻居则是poly  </li>\n<li>node: 一般为脚手架, 即用于临时性的list的节点.  navigation的实现封装层次较低, 不同结构中的node意义不同.   </li>\n<li>edge: 概念上的边, 是link最主要的类型之一, 第一个边一般是指的下标0的顶点连向下一个顶点的边, 这里要注意 link是一个分离实现的链表, 一个当前poly的边可能有多个link标记属于当前边   </li>\n<li>visited: 可认为是爬过(访问过)     </li>\n<li>Off-mesh connections: 概念上是连线, 实现是poly: 只有两个边两个顶点的poly, 可双向连通;  即第一个link指向第一个边(顶点0)且该link指向的poly不是出发点点poly的的时候为连出, 否则为连入.   处于off-mesh移动的agent无法进行避让处理(不做避让处理).     DT_OFFMESH_CON_BIDIR 标记为双向的offlink会同时添加在目标poly和源poly的link中.  而off-mesh poly本身没有双向还是单向的标记. 也不需要.   </li>\n</ul>\n<p>数据结构   </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dtPathCorridor</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> m_pos[<span class=\"number\">3</span>];  <span class=\"comment\">//该坐标位于'm_path[0]'中   </span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> m_target[<span class=\"number\">3</span>]; <span class=\"comment\">//目标点应位于'm_path[m_npath-1]'中  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化时候一次性预分配好poly数组所需要的内存;     </span></span><br><span class=\"line\">    dtPolyRef* m_path;  <span class=\"comment\">//这里存储的是poly id数组组成的路径id   在这里概念上叫做corridor 即从起始点到目标点有效的走廊空间 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_npath;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_maxPath;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The current corridor position is expected to be within the first polygon in the path. The target </span></span><br><span class=\"line\"><span class=\"comment\">/// is expected to be in the last polygon.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">@class dtPathCorridor</span><br><span class=\"line\">@par</span><br><span class=\"line\"></span><br><span class=\"line\">The corridor is loaded with a path, usually obtained from a #dtNavMeshQuery::findPath() query. The corridor</span><br><span class=\"line\">is then used to plan local movement, with the corridor automatically updating as needed to deal with inaccurate </span><br><span class=\"line\">agent locomotion.</span><br><span class=\"line\"></span><br><span class=\"line\">Example of a common use case:</span><br><span class=\"line\"></span><br><span class=\"line\">-# Construct the corridor object and call #init() to allocate its path buffer.</span><br><span class=\"line\">-# Obtain a path from a #dtNavMeshQuery object.</span><br><span class=\"line\">-# Use #reset() to set the agent&#39;s current position. (At the beginning of the path.)</span><br><span class=\"line\">-# Use #setCorridor() to load the path and target.</span><br><span class=\"line\">-# Use #findCorners() to plan movement. (This handles dynamic path straightening.)</span><br><span class=\"line\">-# Use #movePosition() to feed agent movement back into the corridor. (The corridor will automatically adjust as needed.)</span><br><span class=\"line\">-# If the target is moving, use #moveTargetPosition() to update the end of the corridor. </span><br><span class=\"line\">   (The corridor will automatically adjust as needed.)</span><br><span class=\"line\">-# Repeat the previous 3 steps to continue to move the agent.</span><br><span class=\"line\"></span><br><span class=\"line\">The corridor position and target are always constrained to the navigation mesh.</span><br><span class=\"line\"></span><br><span class=\"line\">One of the difficulties in maintaining a path is that floating point errors, locomotion inaccuracies, and&#x2F;or local </span><br><span class=\"line\">steering can result in the agent crossing the boundary of the path corridor, temporarily invalidating the path. </span><br><span class=\"line\">This class uses local mesh queries to detect and update the corridor as needed to handle these types of issues. </span><br><span class=\"line\"></span><br><span class=\"line\">The fact that local mesh queries are used to move the position and target locations results in two beahviors that </span><br><span class=\"line\">need to be considered:</span><br><span class=\"line\"></span><br><span class=\"line\">Every time a move function is used there is a chance that the path will become non-optimial. Basically, the further </span><br><span class=\"line\">the target is moved from its original location, and the further the position is moved outside the original corridor, </span><br><span class=\"line\">the more likely the path will become non-optimal. This issue can be addressed by periodically running the </span><br><span class=\"line\">#optimizePathTopology() and #optimizePathVisibility() methods.</span><br><span class=\"line\"></span><br><span class=\"line\">All local mesh queries have distance limitations. (Review the #dtNavMeshQuery methods for details.) So the most accurate </span><br><span class=\"line\">use case is to move the position and target in small increments. If a large increment is used, then the corridor </span><br><span class=\"line\">may not be able to accurately find the new location.  Because of this limiation, if a position is moved in a large</span><br><span class=\"line\">increment, then compare the desired and resulting polygon references. If the two do not match, then path replanning </span><br><span class=\"line\">may be needed.  E.g. If you move the target, check #getLastPoly() to see if it is the expected polygon.</span><br><span class=\"line\"></span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n<p>dtPathCorridor简述:<br>通过pathfinding给出来的poly path, 在pathfinding看来是一系列连通的点, 但是解开成poly后,  则是一系列相邻的poly组成的走廊空间.<br>corridor则是在走廊空间中进行局部移动规划(pathfinding是高级路径规划), 包括如何从一个poly走向另外一个poly, 移动转向,  避让带来的局部更新等.    比喻的话, pathfinding相当于导航地图给出来的路线,   而corridor则是通过雷达&amp;摄像头等实时扫描绘制出来用于驾驶决策的现场交通环境.   </p>\n<h3><span id=\"dtpathcorridor\">dtPathCorridor</span></h3><p>该函数设置新的路径和目标坐标点位置  但未处理起始点坐标.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// The current corridor position is expected to be within the first polygon in the path. The target </span></span><br><span class=\"line\"><span class=\"comment\">/// is expected to be in the last polygon. </span></span><br><span class=\"line\"><span class=\"comment\">/// @warning The size of the path must not exceed the size of corridor's path buffer set during #init().</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dtPathCorridor::setCorridor</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* target, <span class=\"keyword\">const</span> dtPolyRef* path, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> npath)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dtVcopy(m_target, target);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_path, path, <span class=\"keyword\">sizeof</span>(dtPolyRef)*npath);</span><br><span class=\"line\">    m_npath = npath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"fixpathstart\">fixPathStart</span></h3><p>修复起始点坐标,<br>这里将会覆盖路径点中的第一个和第二个.    但是如果当前路径个数为1或者2  则会保留最后一个<br>0的作用略过.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dtPathCorridor::fixPathStart</span><span class=\"params\">(dtPolyRef safeRef, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* safePos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dtVcopy(m_pos, safePos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_npath &lt; <span class=\"number\">3</span> &amp;&amp; m_npath &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_path[<span class=\"number\">2</span>] = m_path[m_npath<span class=\"number\">-1</span>];</span><br><span class=\"line\">        m_path[<span class=\"number\">0</span>] = safeRef;</span><br><span class=\"line\">        m_path[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        m_npath = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_path[<span class=\"number\">0</span>] = safeRef;</span><br><span class=\"line\">        m_path[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"moveposition\">movePosition</span></h3><p>基于(约束于)navmesh行走面的内的位置变化(移动)处理, 新的位置仍然位于m_path[0]中.    </p>\n<ul>\n<li>这种移动可能导致组成走廊空间的拓扑非最优 以及 移动的路径非最优.  </li>\n<li>从旧的位置往新的位置沿着poly mesh行走面去找, 如果不在同一个poly则往相邻的poly去找,  如果不可达或者位置无效, 则得到的坐标和传入的期望位置可能会不同   </li>\n<li>找到新的有效位置后合并路径: 先通过moveAlongSurface找到从当前点到移动目标点的poly visited 路径, 然后用这个路径和现有路径进行合并. <ul>\n<li>例如如果新路径为已有路径的下个poly, 则减去当前poly(预期情况1);  </li>\n<li>例如当前移动仍然在m_path[0]的poly内, 则合并去重(预期情况2) (这里其实发生不必要的拷贝请求(memmove对相同地址和长度的请求应该不会执行));</li>\n<li>如果避让跑偏了走到了新的poly, 则把当前path整体后移, 把当前移动带来的新的走廊path拼接起来, 拼接过程会尽可能的优化掉重复的的路径, 但是按照这个拼接  从走廊上来说是增加了新的走廊长度 因此需要通过局部visted重新优化局部路径.   <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dtPathCorridor::movePosition</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* npos, dtNavMeshQuery* navquery, <span class=\"keyword\">const</span> dtQueryFilter* filter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Move along navmesh and update new position.</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> result[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_VISITED = <span class=\"number\">16</span>;</span><br><span class=\"line\">    dtPolyRef visited[MAX_VISITED];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nvisited = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dtStatus status = navquery-&gt;moveAlongSurface(m_path[<span class=\"number\">0</span>], m_pos, npos, filter,</span><br><span class=\"line\">                                                 result, visited, &amp;nvisited, MAX_VISITED);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dtStatusSucceed(status)) &#123;</span><br><span class=\"line\">        m_npath = dtMergeCorridorStartMoved(m_path, m_npath, m_maxPath, visited, nvisited);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Adjust the position to stay on top of the navmesh.</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> h = m_pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">        navquery-&gt;getPolyHeight(m_path[<span class=\"number\">0</span>], result, &amp;h);</span><br><span class=\"line\">        result[<span class=\"number\">1</span>] = h;</span><br><span class=\"line\">        dtVcopy(m_pos, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"dtnavmeshquerymovealongsurface\">dtNavMeshQuery::moveAlongSurface</span></h3><p>DT_VERTS_PER_POLYGON = 6;  navigation中最大单个poly有6个顶点<br>沿着navmesh表面移动时, 最多stack <code>MAX_STACK = 48</code> 个poly节点, 超过后会丢弃.<br>每次移除当前poly并检查是否为目标点所在poly时, 如果没找到, 则添加所有符合条件的邻居到stack中,<br>每次stack邻居时, 这些邻居都通过pidx指向该poly(node) :  反向树结构 父节点不知道只节点, 但子节点知道父节点.   起始点所在poly为root node.<br>当我们找到目标点的所在的poly时候, 通过node-&gt;pidx 可以反向串起来完整的走廊空间.  逆序保存为 visited poly数组<br>每次visit一个poly时 会stack这个poly的所有邻居(过滤后)  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">dtStatus <span class=\"title\">dtNavMeshQuery::moveAlongSurface</span><span class=\"params\">(dtPolyRef startRef, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* startPos, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* endPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          <span class=\"keyword\">const</span> dtQueryFilter* filter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          <span class=\"keyword\">float</span>* resultPos, dtPolyRef* visited, <span class=\"keyword\">int</span>* visitedCount, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxVisitedSize)</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....   </span></span><br><span class=\"line\">    dtNode* startNode = m_tinyNodePool-&gt;getNode(startRef);</span><br><span class=\"line\">    startNode-&gt;pidx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;id = startRef;</span><br><span class=\"line\">    startNode-&gt;flags = DT_NODE_CLOSED;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[nstack++] = startNode;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//....   </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nstack)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Pop front.</span></span><br><span class=\"line\">        dtNode* curNode = <span class=\"built_in\">stack</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nstack<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">            <span class=\"built_in\">stack</span>[i] = <span class=\"built_in\">stack</span>[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        nstack--;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//....   </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If target is inside the poly, stop search.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dtPointInPolygon(endPos, verts, nverts))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bestNode = curNode;</span><br><span class=\"line\">            dtVcopy(bestPos, endPos);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//....   </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = (<span class=\"keyword\">int</span>)curPoly-&gt;vertCount<span class=\"number\">-1</span>; i &lt; (<span class=\"keyword\">int</span>)curPoly-&gt;vertCount; j = i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"comment\">//....   </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter-&gt;passFilter(link-&gt;ref, neiTile, neiPoly))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nneis &lt; MAX_NEIS)</span><br><span class=\"line\">                    neis[nneis++] = link-&gt;ref;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"comment\">//....   </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; nneis; ++k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//....   </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nstack &lt; MAX_STACK)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                neighbourNode-&gt;pidx = m_tinyNodePool-&gt;getNodeIdx(curNode);</span><br><span class=\"line\">                neighbourNode-&gt;flags |= DT_NODE_CLOSED;</span><br><span class=\"line\">                <span class=\"built_in\">stack</span>[nstack++] = neighbourNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//....   </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bestNode)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Reverse the path.</span></span><br><span class=\"line\">        dtNode* prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dtNode* node = bestNode;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dtNode* next = m_tinyNodePool-&gt;getNodeAtIdx(node-&gt;pidx);</span><br><span class=\"line\">            node-&gt;pidx = m_tinyNodePool-&gt;getNodeIdx(prev);</span><br><span class=\"line\">            prev = node;</span><br><span class=\"line\">            node = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Store result</span></span><br><span class=\"line\">        node = prev;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            visited[n++] = node-&gt;id;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &gt;= maxVisitedSize)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status |= DT_BUFFER_TOO_SMALL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = m_tinyNodePool-&gt;getNodeAtIdx(node-&gt;pidx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dtVcopy(resultPos, bestPos);</span><br><span class=\"line\">    *visitedCount = n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3><span id=\"dtmergecorridorstartmoved\">dtMergeCorridorStartMoved</span></h3><p>合并path路径和visted路径.  见movePosition说明  </p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dtMergeCorridorStartMoved</span><span class=\"params\">(dtPolyRef* path, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> npath, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxPath,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t\t  <span class=\"keyword\">const</span> dtPolyRef* visited, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nvisited)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> furthestPath = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> furthestVisited = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Find furthest common polygon.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = npath<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = nvisited<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (path[i] == visited[j])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tfurthestPath = i;</span><br><span class=\"line\">\t\t\t\tfurthestVisited = j;</span><br><span class=\"line\">\t\t\t\tfound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (found)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// If no intersection found just return current path. </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (furthestPath == <span class=\"number\">-1</span> || furthestVisited == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> npath;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Concatenate paths.\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Adjust beginning of the buffer to include the visited.</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> req = nvisited - furthestVisited;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> orig = dtMin(furthestPath+<span class=\"number\">1</span>, npath);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">size</span> = dtMax(<span class=\"number\">0</span>, npath-orig);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (req+<span class=\"built_in\">size</span> &gt; maxPath)</span><br><span class=\"line\">\t\t<span class=\"built_in\">size</span> = maxPath-req;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">size</span>)</span><br><span class=\"line\">\t\tmemmove(path+req, path+orig, <span class=\"built_in\">size</span>*<span class=\"keyword\">sizeof</span>(dtPolyRef));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Store visited</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; req; ++i)</span><br><span class=\"line\">\t\tpath[i] = visited[(nvisited<span class=\"number\">-1</span>)-i];\t\t\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> req+<span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2><span id=\"dtpathcorridorfindcorners\">dtPathCorridor::findCorners</span></h2><p>走廊的关键实现之一 其核心是findStraightPath, 即查找直线路径上的拐点.   是agent移动能力的核心支持.<br>该函数从起点到终点查找拐点数量 失败或超过最大数量或者遇到off-link poly后停止    </p>\n<h2><span id=\"optimizepathvisibility\">optimizePathVisibility</span></h2><p><code>g-&gt;params.updateFlags &amp; DT_CROWD_OPTIMIZE_VIS</code><br>该函数通过局部可视化优化agent在走廊中的移动路线<br>    其核心实现为朝目标点打一个射线, 如果可达则以可达走廊覆盖当前走廊<br>通常使用方式是, 从当前点打一个  跳过当前corner 到下一个corner的射线, 成功则拉直移动路径.  </p>\n<h2><span id=\"optimizepathtopology\">optimizePathTopology</span></h2><p>DT_CROWD_OPTIMIZE_TOPO<br>和可视化不同, 这个是通过局部寻路进行修正和确认当前走廊是否为最优.   </p>\n<h2><span id=\"movetargetposition\">moveTargetPosition</span></h2><p>和movePosition相似, 因目标发生变化而进行走廊调整 .   </p>\n<h2><span id=\"dt_crowd_separation\">DT_CROWD_SEPARATION</span></h2><h2><span id=\"dt_crowd_anticipate_turns\">DT_CROWD_ANTICIPATE_TURNS</span></h2>","site":{"data":{}},"excerpt":"<h2 id=\"走廊空间-DetourPathCorridor-h-class-dtPathCorridor\"><a href=\"#走廊空间-DetourPathCorridor-h-class-dtPathCorridor\" class=\"headerlink\" title=\"走廊空间: DetourPathCorridor.h :   class dtPathCorridor;\"></a>走廊空间: DetourPathCorridor.h :   class dtPathCorridor;</h2>","more":"<h3 id=\"基本术语参考\"><a href=\"#基本术语参考\" class=\"headerlink\" title=\"基本术语参考\"></a>基本术语参考</h3><ul>\n<li>vertex: 多边形顶点</li>\n<li>Corridor : 多边形组成的连通区域 : 走廊,  对于更上层的pathfinding而言, poly被被抽象为点与点的连通关系. 这里展开后则为走廊.    </li>\n<li>poly: 多边形: 一个多边形包含基础的顶点信息和link信息和基础类型数据等.     </li>\n<li>Surface:  表面(行走面), 概念上为行走面, 在这里的实现则为poly组成的mesh表面   </li>\n<li>mesh: 网, 概念上指的是指的由poly组成行走面的数据结构方式, 即mesh;  连通图.   </li>\n<li>Corners: 挂点, 概念上是指的corridor走廊中的边上的顶点  通常为墙角(pathfinding近似最优解, 也是期望, 但未必总是 例如tile带来的边界)   </li>\n<li>moveAlongSurface: 约束在行走面上的位置移动处理  </li>\n<li>neis,eighbour: 邻居, 避让中的邻居为agent; corridor中的邻居则是poly  </li>\n<li>node: 一般为脚手架, 即用于临时性的list的节点.  navigation的实现封装层次较低, 不同结构中的node意义不同.   </li>\n<li>edge: 概念上的边, 是link最主要的类型之一, 第一个边一般是指的下标0的顶点连向下一个顶点的边, 这里要注意 link是一个分离实现的链表, 一个当前poly的边可能有多个link标记属于当前边   </li>\n<li>visited: 可认为是爬过(访问过)     </li>\n<li>Off-mesh connections: 概念上是连线, 实现是poly: 只有两个边两个顶点的poly, 可双向连通;  即第一个link指向第一个边(顶点0)且该link指向的poly不是出发点点poly的的时候为连出, 否则为连入.   处于off-mesh移动的agent无法进行避让处理(不做避让处理).     DT_OFFMESH_CON_BIDIR 标记为双向的offlink会同时添加在目标poly和源poly的link中.  而off-mesh poly本身没有双向还是单向的标记. 也不需要.   </li>\n</ul>\n<p>数据结构   </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dtPathCorridor</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> m_pos[<span class=\"number\">3</span>];  <span class=\"comment\">//该坐标位于'm_path[0]'中   </span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> m_target[<span class=\"number\">3</span>]; <span class=\"comment\">//目标点应位于'm_path[m_npath-1]'中  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//初始化时候一次性预分配好poly数组所需要的内存;     </span></span><br><span class=\"line\">    dtPolyRef* m_path;  <span class=\"comment\">//这里存储的是poly id数组组成的路径id   在这里概念上叫做corridor 即从起始点到目标点有效的走廊空间 </span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_npath;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_maxPath;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// The current corridor position is expected to be within the first polygon in the path. The target </span></span><br><span class=\"line\"><span class=\"comment\">/// is expected to be in the last polygon.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">@class dtPathCorridor</span><br><span class=\"line\">@par</span><br><span class=\"line\"></span><br><span class=\"line\">The corridor is loaded with a path, usually obtained from a #dtNavMeshQuery::findPath() query. The corridor</span><br><span class=\"line\">is then used to plan local movement, with the corridor automatically updating as needed to deal with inaccurate </span><br><span class=\"line\">agent locomotion.</span><br><span class=\"line\"></span><br><span class=\"line\">Example of a common use case:</span><br><span class=\"line\"></span><br><span class=\"line\">-# Construct the corridor object and call #init() to allocate its path buffer.</span><br><span class=\"line\">-# Obtain a path from a #dtNavMeshQuery object.</span><br><span class=\"line\">-# Use #reset() to set the agent&#39;s current position. (At the beginning of the path.)</span><br><span class=\"line\">-# Use #setCorridor() to load the path and target.</span><br><span class=\"line\">-# Use #findCorners() to plan movement. (This handles dynamic path straightening.)</span><br><span class=\"line\">-# Use #movePosition() to feed agent movement back into the corridor. (The corridor will automatically adjust as needed.)</span><br><span class=\"line\">-# If the target is moving, use #moveTargetPosition() to update the end of the corridor. </span><br><span class=\"line\">   (The corridor will automatically adjust as needed.)</span><br><span class=\"line\">-# Repeat the previous 3 steps to continue to move the agent.</span><br><span class=\"line\"></span><br><span class=\"line\">The corridor position and target are always constrained to the navigation mesh.</span><br><span class=\"line\"></span><br><span class=\"line\">One of the difficulties in maintaining a path is that floating point errors, locomotion inaccuracies, and&#x2F;or local </span><br><span class=\"line\">steering can result in the agent crossing the boundary of the path corridor, temporarily invalidating the path. </span><br><span class=\"line\">This class uses local mesh queries to detect and update the corridor as needed to handle these types of issues. </span><br><span class=\"line\"></span><br><span class=\"line\">The fact that local mesh queries are used to move the position and target locations results in two beahviors that </span><br><span class=\"line\">need to be considered:</span><br><span class=\"line\"></span><br><span class=\"line\">Every time a move function is used there is a chance that the path will become non-optimial. Basically, the further </span><br><span class=\"line\">the target is moved from its original location, and the further the position is moved outside the original corridor, </span><br><span class=\"line\">the more likely the path will become non-optimal. This issue can be addressed by periodically running the </span><br><span class=\"line\">#optimizePathTopology() and #optimizePathVisibility() methods.</span><br><span class=\"line\"></span><br><span class=\"line\">All local mesh queries have distance limitations. (Review the #dtNavMeshQuery methods for details.) So the most accurate </span><br><span class=\"line\">use case is to move the position and target in small increments. If a large increment is used, then the corridor </span><br><span class=\"line\">may not be able to accurately find the new location.  Because of this limiation, if a position is moved in a large</span><br><span class=\"line\">increment, then compare the desired and resulting polygon references. If the two do not match, then path replanning </span><br><span class=\"line\">may be needed.  E.g. If you move the target, check #getLastPoly() to see if it is the expected polygon.</span><br><span class=\"line\"></span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>\n\n\n<p>dtPathCorridor简述:<br>通过pathfinding给出来的poly path, 在pathfinding看来是一系列连通的点, 但是解开成poly后,  则是一系列相邻的poly组成的走廊空间.<br>corridor则是在走廊空间中进行局部移动规划(pathfinding是高级路径规划), 包括如何从一个poly走向另外一个poly, 移动转向,  避让带来的局部更新等.    比喻的话, pathfinding相当于导航地图给出来的路线,   而corridor则是通过雷达&amp;摄像头等实时扫描绘制出来用于驾驶决策的现场交通环境.   </p>\n<h3 id=\"dtPathCorridor\"><a href=\"#dtPathCorridor\" class=\"headerlink\" title=\"dtPathCorridor\"></a>dtPathCorridor</h3><p>该函数设置新的路径和目标坐标点位置  但未处理起始点坐标.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// The current corridor position is expected to be within the first polygon in the path. The target </span></span><br><span class=\"line\"><span class=\"comment\">/// is expected to be in the last polygon. </span></span><br><span class=\"line\"><span class=\"comment\">/// @warning The size of the path must not exceed the size of corridor's path buffer set during #init().</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dtPathCorridor::setCorridor</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* target, <span class=\"keyword\">const</span> dtPolyRef* path, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> npath)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dtVcopy(m_target, target);</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(m_path, path, <span class=\"keyword\">sizeof</span>(dtPolyRef)*npath);</span><br><span class=\"line\">    m_npath = npath;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"fixPathStart\"><a href=\"#fixPathStart\" class=\"headerlink\" title=\"fixPathStart\"></a>fixPathStart</h3><p>修复起始点坐标,<br>这里将会覆盖路径点中的第一个和第二个.    但是如果当前路径个数为1或者2  则会保留最后一个<br>0的作用略过.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dtPathCorridor::fixPathStart</span><span class=\"params\">(dtPolyRef safeRef, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* safePos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dtVcopy(m_pos, safePos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m_npath &lt; <span class=\"number\">3</span> &amp;&amp; m_npath &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_path[<span class=\"number\">2</span>] = m_path[m_npath<span class=\"number\">-1</span>];</span><br><span class=\"line\">        m_path[<span class=\"number\">0</span>] = safeRef;</span><br><span class=\"line\">        m_path[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        m_npath = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        m_path[<span class=\"number\">0</span>] = safeRef;</span><br><span class=\"line\">        m_path[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"movePosition\"><a href=\"#movePosition\" class=\"headerlink\" title=\"movePosition\"></a>movePosition</h3><p>基于(约束于)navmesh行走面的内的位置变化(移动)处理, 新的位置仍然位于m_path[0]中.    </p>\n<ul>\n<li>这种移动可能导致组成走廊空间的拓扑非最优 以及 移动的路径非最优.  </li>\n<li>从旧的位置往新的位置沿着poly mesh行走面去找, 如果不在同一个poly则往相邻的poly去找,  如果不可达或者位置无效, 则得到的坐标和传入的期望位置可能会不同   </li>\n<li>找到新的有效位置后合并路径: 先通过moveAlongSurface找到从当前点到移动目标点的poly visited 路径, 然后用这个路径和现有路径进行合并. <ul>\n<li>例如如果新路径为已有路径的下个poly, 则减去当前poly(预期情况1);  </li>\n<li>例如当前移动仍然在m_path[0]的poly内, 则合并去重(预期情况2) (这里其实发生不必要的拷贝请求(memmove对相同地址和长度的请求应该不会执行));</li>\n<li>如果避让跑偏了走到了新的poly, 则把当前path整体后移, 把当前移动带来的新的走廊path拼接起来, 拼接过程会尽可能的优化掉重复的的路径, 但是按照这个拼接  从走廊上来说是增加了新的走廊长度 因此需要通过局部visted重新优化局部路径.   <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dtPathCorridor::movePosition</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* npos, dtNavMeshQuery* navquery, <span class=\"keyword\">const</span> dtQueryFilter* filter)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Move along navmesh and update new position.</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> result[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX_VISITED = <span class=\"number\">16</span>;</span><br><span class=\"line\">    dtPolyRef visited[MAX_VISITED];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nvisited = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dtStatus status = navquery-&gt;moveAlongSurface(m_path[<span class=\"number\">0</span>], m_pos, npos, filter,</span><br><span class=\"line\">                                                 result, visited, &amp;nvisited, MAX_VISITED);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dtStatusSucceed(status)) &#123;</span><br><span class=\"line\">        m_npath = dtMergeCorridorStartMoved(m_path, m_npath, m_maxPath, visited, nvisited);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Adjust the position to stay on top of the navmesh.</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> h = m_pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">        navquery-&gt;getPolyHeight(m_path[<span class=\"number\">0</span>], result, &amp;h);</span><br><span class=\"line\">        result[<span class=\"number\">1</span>] = h;</span><br><span class=\"line\">        dtVcopy(m_pos, result);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dtNavMeshQuery-moveAlongSurface\"><a href=\"#dtNavMeshQuery-moveAlongSurface\" class=\"headerlink\" title=\"dtNavMeshQuery::moveAlongSurface\"></a>dtNavMeshQuery::moveAlongSurface</h3><p>DT_VERTS_PER_POLYGON = 6;  navigation中最大单个poly有6个顶点<br>沿着navmesh表面移动时, 最多stack <code>MAX_STACK = 48</code> 个poly节点, 超过后会丢弃.<br>每次移除当前poly并检查是否为目标点所在poly时, 如果没找到, 则添加所有符合条件的邻居到stack中,<br>每次stack邻居时, 这些邻居都通过pidx指向该poly(node) :  反向树结构 父节点不知道只节点, 但子节点知道父节点.   起始点所在poly为root node.<br>当我们找到目标点的所在的poly时候, 通过node-&gt;pidx 可以反向串起来完整的走廊空间.  逆序保存为 visited poly数组<br>每次visit一个poly时 会stack这个poly的所有邻居(过滤后)  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">dtStatus <span class=\"title\">dtNavMeshQuery::moveAlongSurface</span><span class=\"params\">(dtPolyRef startRef, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* startPos, <span class=\"keyword\">const</span> <span class=\"keyword\">float</span>* endPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          <span class=\"keyword\">const</span> dtQueryFilter* filter,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                          <span class=\"keyword\">float</span>* resultPos, dtPolyRef* visited, <span class=\"keyword\">int</span>* visitedCount, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxVisitedSize)</span> <span class=\"keyword\">const</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//....   </span></span><br><span class=\"line\">    dtNode* startNode = m_tinyNodePool-&gt;getNode(startRef);</span><br><span class=\"line\">    startNode-&gt;pidx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    startNode-&gt;id = startRef;</span><br><span class=\"line\">    startNode-&gt;flags = DT_NODE_CLOSED;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[nstack++] = startNode;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//....   </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nstack)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Pop front.</span></span><br><span class=\"line\">        dtNode* curNode = <span class=\"built_in\">stack</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nstack<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">            <span class=\"built_in\">stack</span>[i] = <span class=\"built_in\">stack</span>[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        nstack--;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//....   </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If target is inside the poly, stop search.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dtPointInPolygon(endPos, verts, nverts))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bestNode = curNode;</span><br><span class=\"line\">            dtVcopy(bestPos, endPos);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//....   </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = (<span class=\"keyword\">int</span>)curPoly-&gt;vertCount<span class=\"number\">-1</span>; i &lt; (<span class=\"keyword\">int</span>)curPoly-&gt;vertCount; j = i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">             <span class=\"comment\">//....   </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (filter-&gt;passFilter(link-&gt;ref, neiTile, neiPoly))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nneis &lt; MAX_NEIS)</span><br><span class=\"line\">                    neis[nneis++] = link-&gt;ref;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"comment\">//....   </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; nneis; ++k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//....   </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nstack &lt; MAX_STACK)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                neighbourNode-&gt;pidx = m_tinyNodePool-&gt;getNodeIdx(curNode);</span><br><span class=\"line\">                neighbourNode-&gt;flags |= DT_NODE_CLOSED;</span><br><span class=\"line\">                <span class=\"built_in\">stack</span>[nstack++] = neighbourNode;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//....   </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bestNode)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Reverse the path.</span></span><br><span class=\"line\">        dtNode* prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dtNode* node = bestNode;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dtNode* next = m_tinyNodePool-&gt;getNodeAtIdx(node-&gt;pidx);</span><br><span class=\"line\">            node-&gt;pidx = m_tinyNodePool-&gt;getNodeIdx(prev);</span><br><span class=\"line\">            prev = node;</span><br><span class=\"line\">            node = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Store result</span></span><br><span class=\"line\">        node = prev;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            visited[n++] = node-&gt;id;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &gt;= maxVisitedSize)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                status |= DT_BUFFER_TOO_SMALL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node = m_tinyNodePool-&gt;getNodeAtIdx(node-&gt;pidx);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dtVcopy(resultPos, bestPos);</span><br><span class=\"line\">    *visitedCount = n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dtMergeCorridorStartMoved\"><a href=\"#dtMergeCorridorStartMoved\" class=\"headerlink\" title=\"dtMergeCorridorStartMoved\"></a>dtMergeCorridorStartMoved</h3><p>合并path路径和visted路径.  见movePosition说明  </p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dtMergeCorridorStartMoved</span><span class=\"params\">(dtPolyRef* path, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> npath, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxPath,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\t\t\t\t\t  <span class=\"keyword\">const</span> dtPolyRef* visited, <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> nvisited)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> furthestPath = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> furthestVisited = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Find furthest common polygon.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = npath<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> found = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = nvisited<span class=\"number\">-1</span>; j &gt;= <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (path[i] == visited[j])</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tfurthestPath = i;</span><br><span class=\"line\">\t\t\t\tfurthestVisited = j;</span><br><span class=\"line\">\t\t\t\tfound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (found)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// If no intersection found just return current path. </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (furthestPath == <span class=\"number\">-1</span> || furthestVisited == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> npath;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Concatenate paths.\t</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Adjust beginning of the buffer to include the visited.</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> req = nvisited - furthestVisited;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> orig = dtMin(furthestPath+<span class=\"number\">1</span>, npath);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">size</span> = dtMax(<span class=\"number\">0</span>, npath-orig);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (req+<span class=\"built_in\">size</span> &gt; maxPath)</span><br><span class=\"line\">\t\t<span class=\"built_in\">size</span> = maxPath-req;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">size</span>)</span><br><span class=\"line\">\t\tmemmove(path+req, path+orig, <span class=\"built_in\">size</span>*<span class=\"keyword\">sizeof</span>(dtPolyRef));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Store visited</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; req; ++i)</span><br><span class=\"line\">\t\tpath[i] = visited[(nvisited<span class=\"number\">-1</span>)-i];\t\t\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> req+<span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"dtPathCorridor-findCorners\"><a href=\"#dtPathCorridor-findCorners\" class=\"headerlink\" title=\"dtPathCorridor::findCorners\"></a>dtPathCorridor::findCorners</h2><p>走廊的关键实现之一 其核心是findStraightPath, 即查找直线路径上的拐点.   是agent移动能力的核心支持.<br>该函数从起点到终点查找拐点数量 失败或超过最大数量或者遇到off-link poly后停止    </p>\n<h2 id=\"optimizePathVisibility\"><a href=\"#optimizePathVisibility\" class=\"headerlink\" title=\"optimizePathVisibility\"></a>optimizePathVisibility</h2><p><code>g-&gt;params.updateFlags &amp; DT_CROWD_OPTIMIZE_VIS</code><br>该函数通过局部可视化优化agent在走廊中的移动路线<br>    其核心实现为朝目标点打一个射线, 如果可达则以可达走廊覆盖当前走廊<br>通常使用方式是, 从当前点打一个  跳过当前corner 到下一个corner的射线, 成功则拉直移动路径.  </p>\n<h2 id=\"optimizePathTopology\"><a href=\"#optimizePathTopology\" class=\"headerlink\" title=\"optimizePathTopology\"></a>optimizePathTopology</h2><p>DT_CROWD_OPTIMIZE_TOPO<br>和可视化不同, 这个是通过局部寻路进行修正和确认当前走廊是否为最优.   </p>\n<h2 id=\"moveTargetPosition\"><a href=\"#moveTargetPosition\" class=\"headerlink\" title=\"moveTargetPosition\"></a>moveTargetPosition</h2><p>和movePosition相似, 因目标发生变化而进行走廊调整 .   </p>\n<h2 id=\"DT-CROWD-SEPARATION\"><a href=\"#DT-CROWD-SEPARATION\" class=\"headerlink\" title=\"DT_CROWD_SEPARATION\"></a>DT_CROWD_SEPARATION</h2><h2 id=\"DT-CROWD-ANTICIPATE-TURNS\"><a href=\"#DT-CROWD-ANTICIPATE-TURNS\" class=\"headerlink\" title=\"DT_CROWD_ANTICIPATE_TURNS\"></a>DT_CROWD_ANTICIPATE_TURNS</h2>"},{"title":"ssh 设置根据用户和目标服务器地址自动匹配私钥登录","date":"2024-01-17T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n\n## 生成秘钥         \n```\nssh-keygen   \n\n-f 指定文件名 默认为id_rsa\n-t 指定类型 默认为rsa\n-C 指定注释 默认无\n```\n\n<!--more -->\n\n### 目标设备   \n将public key 附加到目标设备的目标用户的home目录下的文件  ```.ssh/authorized_keys``` 中   如果没有则创建  权限应为640\n\n\n### 跳板机设备   \n当前用户下\n create a ~/.ssh/config file\n```\nHost tabs\n     HostName tabs.com\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n\nHost scm.company.com\n     User       cap\n     IdentityFile       ~/.ssh/git_rsa\n\nHost project-staging\n     HostName 50.56.101.167\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n```\n\nlike\n```\nHost 99.99.88.99\n        User ssssummmmerrr\n        IdentityFile ~/.ssh/keys/udp\n```\n","source":"_posts/2024-01-18-ssh_rsa_autologin.md","raw":"\n---\ntitle: ssh 设置根据用户和目标服务器地址自动匹配私钥登录  \ndate: 2024-01-18\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n\n## 生成秘钥         \n```\nssh-keygen   \n\n-f 指定文件名 默认为id_rsa\n-t 指定类型 默认为rsa\n-C 指定注释 默认无\n```\n\n<!--more -->\n\n### 目标设备   \n将public key 附加到目标设备的目标用户的home目录下的文件  ```.ssh/authorized_keys``` 中   如果没有则创建  权限应为640\n\n\n### 跳板机设备   \n当前用户下\n create a ~/.ssh/config file\n```\nHost tabs\n     HostName tabs.com\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n\nHost scm.company.com\n     User       cap\n     IdentityFile       ~/.ssh/git_rsa\n\nHost project-staging\n     HostName 50.56.101.167\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n```\n\nlike\n```\nHost 99.99.88.99\n        User ssssummmmerrr\n        IdentityFile ~/.ssh/keys/udp\n```\n","slug":"2024-01-18-ssh_rsa_autologin","published":1,"updated":"2024-01-18T09:04:45.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9he0001442maigv5i5a","content":"<h2><span id=\"生成秘钥\">生成秘钥</span></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen   </span><br><span class=\"line\"></span><br><span class=\"line\">-f 指定文件名 默认为id_rsa</span><br><span class=\"line\">-t 指定类型 默认为rsa</span><br><span class=\"line\">-C 指定注释 默认无</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3><span id=\"目标设备\">目标设备</span></h3><p>将public key 附加到目标设备的目标用户的home目录下的文件  <code>.ssh/authorized_keys</code> 中   如果没有则创建  权限应为640</p>\n<h3><span id=\"跳板机设备\">跳板机设备</span></h3><p>当前用户下<br> create a ~/.ssh/config file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tabs</span><br><span class=\"line\">     HostName tabs.com</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host scm.company.com</span><br><span class=\"line\">     User       cap</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;git_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host project-staging</span><br><span class=\"line\">     HostName 50.56.101.167</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br></pre></td></tr></table></figure>\n\n<p>like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 99.99.88.99</span><br><span class=\"line\">        User ssssummmmerrr</span><br><span class=\"line\">        IdentityFile ~&#x2F;.ssh&#x2F;keys&#x2F;udp</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"生成秘钥\"><a href=\"#生成秘钥\" class=\"headerlink\" title=\"生成秘钥\"></a>生成秘钥</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen   </span><br><span class=\"line\"></span><br><span class=\"line\">-f 指定文件名 默认为id_rsa</span><br><span class=\"line\">-t 指定类型 默认为rsa</span><br><span class=\"line\">-C 指定注释 默认无</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"目标设备\"><a href=\"#目标设备\" class=\"headerlink\" title=\"目标设备\"></a>目标设备</h3><p>将public key 附加到目标设备的目标用户的home目录下的文件  <code>.ssh/authorized_keys</code> 中   如果没有则创建  权限应为640</p>\n<h3 id=\"跳板机设备\"><a href=\"#跳板机设备\" class=\"headerlink\" title=\"跳板机设备\"></a>跳板机设备</h3><p>当前用户下<br> create a ~/.ssh/config file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tabs</span><br><span class=\"line\">     HostName tabs.com</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host scm.company.com</span><br><span class=\"line\">     User       cap</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;git_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host project-staging</span><br><span class=\"line\">     HostName 50.56.101.167</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br></pre></td></tr></table></figure>\n\n<p>like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 99.99.88.99</span><br><span class=\"line\">        User ssssummmmerrr</span><br><span class=\"line\">        IdentityFile ~&#x2F;.ssh&#x2F;keys&#x2F;udp</span><br></pre></td></tr></table></figure>"},{"title":"MEMORY OVERCOMMIT","date":"2021-11-14T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n\nMemory Overcommit的意思是操作系统承诺给进程的内存大小超过了实际可用的内存.    \n一个保守的操作系统不会允许memory overcommit, 有多少就分配多少, 再申请就没有了, 这其实有些浪费内存, 因为进程实际使用到的内存往往比申请的内存要少  \n比如某个进程malloc()了200MB内存, 但实际上只用到了100MB, 按照UNIX/Linux的算法, 物理内存页的分配发生在使用的瞬间, 而不是在申请的瞬间, 也就是说未用到的100MB内存根本就没有分配, 这100MB内存就闲置了   \n下面这个概念很重要, 是理解memory overcommit的关键:  **commit(或overcommit)针对的是内存申请, 内存申请不等于内存分配, 内存只在实际用到的时候才分配.  **      \n\n<!-- more -->\n\nLinux是允许memory overcommit的, 只要你来申请内存我就给你, 寄希望于进程实际上用不到那么多内存, 但万一用到那么多了呢？那就会发生类似“银行挤兑”的危机, 现金(内存)不足了.    \nLinux设计了一个OOM killer机制(OOM = out-of-memory)来处理这种危机:  挑选一个进程出来杀死, 以腾出部分内存, 如果还不够就继续杀…也可通过设置内核参数 vm.panic_on_oom 使得发生OOM时自动重启系统.     \n这都是有风险的机制, 重启有可能造成业务中断, 杀死进程也有可能导致业务中断, Linux 2.6之后允许通过内核参数 vm.overcommit_memory 禁止memory overcommit.  \n\n\n\n内核参数 vm.overcommit_memory 接受三种取值:     \n\n* 0 – Heuristic overcommit handling. 这是缺省值, 它允许overcommit, 但过于明目张胆的overcommit会被拒绝, 比如malloc一次性申请的内存大小就超过了系统总内存.  Heuristic的意思是“试探式的”, 内核利用某种算法（对该算法的详细解释请看文末）猜测你的内存申请是否合理, 它认为不合理就会拒绝overcommit.     \n* 1 – Always overcommit. 允许overcommit, 对内存申请来者不拒.     \n* 2 – Don’t overcommit. 禁止overcommit.     \n\n\n\n关于禁止overcommit (vm.overcommit_memory=2) , 需要知道的是, 怎样才算是overcommit呢？kernel设有一个阈值, 申请的内存总数超过这个阈值就算overcommit, 在/proc/meminfo中可以看到这个阈值的大小:    \n```\n# grep -i commit /proc/meminfo\nCommitLimit:     5967744 kB\nCommitted_AS:    5363236 kB\n```\n\nCommitLimit 就是overcommit的阈值, 申请的内存总数超过CommitLimit的话就算是overcommit.  \n这个阈值是如何计算出来的呢？它既不是物理内存的大小, 也不是free memory的大小, 它是通过内核参数vm.overcommit_ratio或vm.overcommit_kbytes间接设置的, 公式如下:  \n```CommitLimit = (Physical RAM * vm.overcommit_ratio / 100) + Swap```\n\n注:  \nvm.overcommit_ratio 是内核参数, 缺省值是50, 表示物理内存的50%.  如果你不想使用比率, 也可以直接指定内存的字节数大小, 通过另一个内核参数 vm.overcommit_kbytes 即可; \n如果使用了huge pages, 那么需要从物理内存中减去, 公式变成:  \nCommitLimit = ([total RAM] – [total huge TLB RAM]) * vm.overcommit_ratio / 100 + swap\n参见https://access.redhat.com/solutions/665023\n\n/proc/meminfo中的 Committed_AS 表示所有进程已经申请的内存总大小, （注意是已经申请的, 不是已经分配的）, 如果 Committed_AS 超过 CommitLimit 就表示发生了 overcommit, 超出越多表示 overcommit 越严重.  Committed_AS 的含义换一种说法就是, 如果要绝对保证不发生OOM (out of memory) 需要多少物理内存.  \n\n“sar -r”是查看内存使用状况的常用工具, 它的输出结果中有两个与overcommit有关, kbcommit 和 %commit:  \nkbcommit对应/proc/meminfo中的 Committed_AS; \n%commit的计算公式并没有采用 CommitLimit作分母, 而是Committed_AS/(MemTotal+SwapTotal), 意思是_内存申请_占_物理内存与交换区之和_的百分比.  \n\n```\n$ sar -r \n \n05:00:01 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n05:10:01 PM    160576   3648460     95.78         0   1846212   4939368     62.74   1390292   1854880         4\n```\n\n\n## 附:  对Heuristic overcommit算法的解释  \n内核参数 vm.overcommit_memory 的值0, 1, 2对应的源代码如下, 其中heuristic overcommit对应的是OVERCOMMIT_GUESS:  \n```C++\n源文件:  source/include/linux/mman.h\n#define OVERCOMMIT_GUESS                0\n#define OVERCOMMIT_ALWAYS               1\n#define OVERCOMMIT_NEVER                2\n```\n\nHeuristic overcommit算法在以下函数中实现, 基本上可以这么理解:  \n单次申请的内存大小不能超过 【free memory + free swap + pagecache的大小 + SLAB中可回收的部分】, 否则本次申请就会失败.  \n\n```C++\n源文件:  source/mm/mmap.c 以RHEL内核2.6.32-642为例\n \n0120 /*\n0121  * Check that a process has enough memory to allocate a new virtual\n0122  * mapping. 0 means there is enough memory for the allocation to\n0123  * succeed and -ENOMEM implies there is not.\n0124  *\n0125  * We currently support three overcommit policies, which are set via the\n0126  * vm.overcommit_memory sysctl.  See Documentation/vm/overcommit-accounting\n0127  *\n0128  * Strict overcommit modes added 2002 Feb 26 by Alan Cox.\n0129  * Additional code 2002 Jul 20 by Robert Love.\n0130  *\n0131  * cap_sys_admin is 1 if the process has admin privileges, 0 otherwise.\n0132  *\n0133  * Note this is a helper function intended to be used by LSMs which\n0134  * wish to use this logic.\n0135  */\n0136 int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)\n0137 {\n0138         unsigned long free, allowed;\n0139 \n0140         vm_acct_memory(pages);\n0141 \n0142         /*\n0143          * Sometimes we want to use more memory than we have\n0144          */\n0145         if (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)\n0146                 return 0;\n0147 \n0148         if (sysctl_overcommit_memory == OVERCOMMIT_GUESS) { //Heuristic overcommit算法开始\n0149                 unsigned long n;\n0150 \n0151                 free = global_page_state(NR_FILE_PAGES); //pagecache汇总的页面数量\n0152                 free += get_nr_swap_pages(); //free swap的页面数\n0153 \n0154                 /*\n0155                  * Any slabs which are created with the\n0156                  * SLAB_RECLAIM_ACCOUNT flag claim to have contents\n0157                  * which are reclaimable, under pressure.  The dentry\n0158                  * cache and most inode caches should fall into this\n0159                  */\n0160                 free += global_page_state(NR_SLAB_RECLAIMABLE); //SLAB可回收的页面数\n0161 \n0162                 /*\n0163                  * Reserve some for root\n0164                  */\n0165                 if (!cap_sys_admin)\n0166                         free -= sysctl_admin_reserve_kbytes >> (PAGE_SHIFT - 10); //给root用户保留的页面数\n0167 \n0168                 if (free > pages)\n0169                         return 0;\n0170 \n0171                 /*\n0172                  * nr_free_pages() is very expensive on large systems,\n0173                  * only call if we're about to fail.\n0174                  */\n0175                 n = nr_free_pages(); //当前free memory页面数\n0176 \n0177                 /*\n0178                  * Leave reserved pages. The pages are not for anonymous pages.\n0179                  */\n0180                 if (n <= totalreserve_pages)\n0181                         goto error;\n0182                 else\n0183                         n -= totalreserve_pages;\n0184 \n0185                 /*\n0186                  * Leave the last 3% for root\n0187                  */\n0188                 if (!cap_sys_admin)\n0189                         n -= n / 32;\n0190                 free += n;\n0191 \n0192                 if (free > pages)\n0193                         return 0;\n0194 \n0195                 goto error;\n0196         }\n0197 \n0198         allowed = vm_commit_limit();\n0199         /*\n0200          * Reserve some for root\n0201          */\n0202         if (!cap_sys_admin)\n0203                 allowed -= sysctl_admin_reserve_kbytes >> (PAGE_SHIFT - 10);\n0204 \n0205         /* Don't let a single process grow too big:\n0206            leave 3% of the size of this process for other processes */\n0207         if (mm)\n0208                 allowed -= mm->total_vm / 32;\n0209 \n0210         if (percpu_counter_read_positive(&vm_committed_as) < allowed)\n0211                 return 0;\n0212 error:\n0213         vm_unacct_memory(pages);\n0214 \n0215         return -ENOMEM;\n0216 }\n```\n\noom_badness v2.6.39版本   \n缺页中断  \ndo_page_fault -> out_of_memory -> select_bad_process -> oom_badness。  \n在oom_badness即会对进程计算分数，分数越高被kill可能性越高。   \n该版本考虑维度如下：   \nrss、pagetable、swap使用量、是否root进程   \n```\n/**\n * oom_badness - heuristic function to determine which candidate task to kill\n * @p: task struct of which task we should calculate\n * @totalpages: total present RAM allowed for page allocation\n *\n * The heuristic for determining which task to kill is made to be as simple and\n * predictable as possible.  The goal is to return the highest value for the\n * task consuming the most memory to avoid subsequent oom failures.\n */\nunsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,\n              const nodemask_t *nodemask, unsigned long totalpages)\n{\n    int points;\n\n    if (oom_unkillable_task(p, mem, nodemask))\n        return 0;\n\n    p = find_lock_task_mm(p);\n    if (!p)\n        return 0;\n\n    /*\n     * Shortcut check for a thread sharing p->mm that is OOM_SCORE_ADJ_MIN\n     * so the entire heuristic doesn't need to be executed for something\n     * that cannot be killed.\n     */\n    if (atomic_read(&p->mm->oom_disable_count)) {\n        task_unlock(p);\n        return 0;\n    }\n\n    /*\n     * When the PF_OOM_ORIGIN bit is set, it indicates the task should have\n     * priority for oom killing.\n     */\n    if (p->flags & PF_OOM_ORIGIN) {\n        task_unlock(p);\n        return 1000;\n    }\n\n    /*\n     * The memory controller may have a limit of 0 bytes, so avoid a divide\n     * by zero, if necessary.\n     */\n    if (!totalpages)\n        totalpages = 1;\n\n    /*\n     * The baseline for the badness score is the proportion of RAM that each\n     * task's rss, pagetable and swap space use.\n     */\n    points = get_mm_rss(p->mm) + p->mm->nr_ptes;\n    points += get_mm_counter(p->mm, MM_SWAPENTS);\n\n    points *= 1000;\n    points /= totalpages;\n    task_unlock(p);\n\n    /*\n     * Root processes get 3% bonus, just like the __vm_enough_memory()\n     * implementation used by LSMs.\n     */\n    if (has_capability_noaudit(p, CAP_SYS_ADMIN))\n        points -= 30;\n\n    /*\n     * /proc/pid/oom_score_adj ranges from -1000 to +1000 such that it may\n     * either completely disable oom killing or always prefer a certain\n     * task.\n     */\n    points += p->signal->oom_score_adj;\n\n    /*\n     * Never return 0 for an eligible task that may be killed since it's\n     * possible that no single user task uses more than 0.1% of memory and\n     * no single admin tasks uses more than 3.0%.\n     */\n    if (points <= 0)\n        return 1;\n    return (points < 1000) ? points : 1000;\n}\n```\n\n## 关于mmap只读共享的测试    \n测试代码在github.com/zsummer/zbase/tests/mapping_test 中  \n\n* 文件系统的内存映射分page cache 和buffer cache;    \n* 只读共享就是单纯的page cache;    \n* page cache 也会用到内存产生实际的内存使用(本来就是这样).   \n* 文件系统的page cache带来的实际内存使用也会计算进该进程的'commit'中 如果有多个进程  每个进程都会计算到commit中.   用于oom打分    \n    * 操作系统中的commit则只有一个  \n\n\n从OOM角度来讲不区分共享内存 只考虑RSS(一直有有小的迭代 比如加入swap量, root进程判定等);     \npage cache的回收由kswapd周期检查 通过内存水位判定, 基础参数是min_free_kbytes   \n当前水线位置和详细信息在cat /proc/zoneinfo , 内存不够用时也会直接触发 .   \n因此 mmap文件的virt 地址空间和OOM没关系,   mmap带来的rss会在被OOM killer之前回收掉不会被kill.    \n","source":"_posts/2022-02-09-mmap-overcommit-oom.md","raw":"\n---\ntitle: MEMORY OVERCOMMIT     \ndate: 2021-11-15\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n\nMemory Overcommit的意思是操作系统承诺给进程的内存大小超过了实际可用的内存.    \n一个保守的操作系统不会允许memory overcommit, 有多少就分配多少, 再申请就没有了, 这其实有些浪费内存, 因为进程实际使用到的内存往往比申请的内存要少  \n比如某个进程malloc()了200MB内存, 但实际上只用到了100MB, 按照UNIX/Linux的算法, 物理内存页的分配发生在使用的瞬间, 而不是在申请的瞬间, 也就是说未用到的100MB内存根本就没有分配, 这100MB内存就闲置了   \n下面这个概念很重要, 是理解memory overcommit的关键:  **commit(或overcommit)针对的是内存申请, 内存申请不等于内存分配, 内存只在实际用到的时候才分配.  **      \n\n<!-- more -->\n\nLinux是允许memory overcommit的, 只要你来申请内存我就给你, 寄希望于进程实际上用不到那么多内存, 但万一用到那么多了呢？那就会发生类似“银行挤兑”的危机, 现金(内存)不足了.    \nLinux设计了一个OOM killer机制(OOM = out-of-memory)来处理这种危机:  挑选一个进程出来杀死, 以腾出部分内存, 如果还不够就继续杀…也可通过设置内核参数 vm.panic_on_oom 使得发生OOM时自动重启系统.     \n这都是有风险的机制, 重启有可能造成业务中断, 杀死进程也有可能导致业务中断, Linux 2.6之后允许通过内核参数 vm.overcommit_memory 禁止memory overcommit.  \n\n\n\n内核参数 vm.overcommit_memory 接受三种取值:     \n\n* 0 – Heuristic overcommit handling. 这是缺省值, 它允许overcommit, 但过于明目张胆的overcommit会被拒绝, 比如malloc一次性申请的内存大小就超过了系统总内存.  Heuristic的意思是“试探式的”, 内核利用某种算法（对该算法的详细解释请看文末）猜测你的内存申请是否合理, 它认为不合理就会拒绝overcommit.     \n* 1 – Always overcommit. 允许overcommit, 对内存申请来者不拒.     \n* 2 – Don’t overcommit. 禁止overcommit.     \n\n\n\n关于禁止overcommit (vm.overcommit_memory=2) , 需要知道的是, 怎样才算是overcommit呢？kernel设有一个阈值, 申请的内存总数超过这个阈值就算overcommit, 在/proc/meminfo中可以看到这个阈值的大小:    \n```\n# grep -i commit /proc/meminfo\nCommitLimit:     5967744 kB\nCommitted_AS:    5363236 kB\n```\n\nCommitLimit 就是overcommit的阈值, 申请的内存总数超过CommitLimit的话就算是overcommit.  \n这个阈值是如何计算出来的呢？它既不是物理内存的大小, 也不是free memory的大小, 它是通过内核参数vm.overcommit_ratio或vm.overcommit_kbytes间接设置的, 公式如下:  \n```CommitLimit = (Physical RAM * vm.overcommit_ratio / 100) + Swap```\n\n注:  \nvm.overcommit_ratio 是内核参数, 缺省值是50, 表示物理内存的50%.  如果你不想使用比率, 也可以直接指定内存的字节数大小, 通过另一个内核参数 vm.overcommit_kbytes 即可; \n如果使用了huge pages, 那么需要从物理内存中减去, 公式变成:  \nCommitLimit = ([total RAM] – [total huge TLB RAM]) * vm.overcommit_ratio / 100 + swap\n参见https://access.redhat.com/solutions/665023\n\n/proc/meminfo中的 Committed_AS 表示所有进程已经申请的内存总大小, （注意是已经申请的, 不是已经分配的）, 如果 Committed_AS 超过 CommitLimit 就表示发生了 overcommit, 超出越多表示 overcommit 越严重.  Committed_AS 的含义换一种说法就是, 如果要绝对保证不发生OOM (out of memory) 需要多少物理内存.  \n\n“sar -r”是查看内存使用状况的常用工具, 它的输出结果中有两个与overcommit有关, kbcommit 和 %commit:  \nkbcommit对应/proc/meminfo中的 Committed_AS; \n%commit的计算公式并没有采用 CommitLimit作分母, 而是Committed_AS/(MemTotal+SwapTotal), 意思是_内存申请_占_物理内存与交换区之和_的百分比.  \n\n```\n$ sar -r \n \n05:00:01 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty\n05:10:01 PM    160576   3648460     95.78         0   1846212   4939368     62.74   1390292   1854880         4\n```\n\n\n## 附:  对Heuristic overcommit算法的解释  \n内核参数 vm.overcommit_memory 的值0, 1, 2对应的源代码如下, 其中heuristic overcommit对应的是OVERCOMMIT_GUESS:  \n```C++\n源文件:  source/include/linux/mman.h\n#define OVERCOMMIT_GUESS                0\n#define OVERCOMMIT_ALWAYS               1\n#define OVERCOMMIT_NEVER                2\n```\n\nHeuristic overcommit算法在以下函数中实现, 基本上可以这么理解:  \n单次申请的内存大小不能超过 【free memory + free swap + pagecache的大小 + SLAB中可回收的部分】, 否则本次申请就会失败.  \n\n```C++\n源文件:  source/mm/mmap.c 以RHEL内核2.6.32-642为例\n \n0120 /*\n0121  * Check that a process has enough memory to allocate a new virtual\n0122  * mapping. 0 means there is enough memory for the allocation to\n0123  * succeed and -ENOMEM implies there is not.\n0124  *\n0125  * We currently support three overcommit policies, which are set via the\n0126  * vm.overcommit_memory sysctl.  See Documentation/vm/overcommit-accounting\n0127  *\n0128  * Strict overcommit modes added 2002 Feb 26 by Alan Cox.\n0129  * Additional code 2002 Jul 20 by Robert Love.\n0130  *\n0131  * cap_sys_admin is 1 if the process has admin privileges, 0 otherwise.\n0132  *\n0133  * Note this is a helper function intended to be used by LSMs which\n0134  * wish to use this logic.\n0135  */\n0136 int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)\n0137 {\n0138         unsigned long free, allowed;\n0139 \n0140         vm_acct_memory(pages);\n0141 \n0142         /*\n0143          * Sometimes we want to use more memory than we have\n0144          */\n0145         if (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)\n0146                 return 0;\n0147 \n0148         if (sysctl_overcommit_memory == OVERCOMMIT_GUESS) { //Heuristic overcommit算法开始\n0149                 unsigned long n;\n0150 \n0151                 free = global_page_state(NR_FILE_PAGES); //pagecache汇总的页面数量\n0152                 free += get_nr_swap_pages(); //free swap的页面数\n0153 \n0154                 /*\n0155                  * Any slabs which are created with the\n0156                  * SLAB_RECLAIM_ACCOUNT flag claim to have contents\n0157                  * which are reclaimable, under pressure.  The dentry\n0158                  * cache and most inode caches should fall into this\n0159                  */\n0160                 free += global_page_state(NR_SLAB_RECLAIMABLE); //SLAB可回收的页面数\n0161 \n0162                 /*\n0163                  * Reserve some for root\n0164                  */\n0165                 if (!cap_sys_admin)\n0166                         free -= sysctl_admin_reserve_kbytes >> (PAGE_SHIFT - 10); //给root用户保留的页面数\n0167 \n0168                 if (free > pages)\n0169                         return 0;\n0170 \n0171                 /*\n0172                  * nr_free_pages() is very expensive on large systems,\n0173                  * only call if we're about to fail.\n0174                  */\n0175                 n = nr_free_pages(); //当前free memory页面数\n0176 \n0177                 /*\n0178                  * Leave reserved pages. The pages are not for anonymous pages.\n0179                  */\n0180                 if (n <= totalreserve_pages)\n0181                         goto error;\n0182                 else\n0183                         n -= totalreserve_pages;\n0184 \n0185                 /*\n0186                  * Leave the last 3% for root\n0187                  */\n0188                 if (!cap_sys_admin)\n0189                         n -= n / 32;\n0190                 free += n;\n0191 \n0192                 if (free > pages)\n0193                         return 0;\n0194 \n0195                 goto error;\n0196         }\n0197 \n0198         allowed = vm_commit_limit();\n0199         /*\n0200          * Reserve some for root\n0201          */\n0202         if (!cap_sys_admin)\n0203                 allowed -= sysctl_admin_reserve_kbytes >> (PAGE_SHIFT - 10);\n0204 \n0205         /* Don't let a single process grow too big:\n0206            leave 3% of the size of this process for other processes */\n0207         if (mm)\n0208                 allowed -= mm->total_vm / 32;\n0209 \n0210         if (percpu_counter_read_positive(&vm_committed_as) < allowed)\n0211                 return 0;\n0212 error:\n0213         vm_unacct_memory(pages);\n0214 \n0215         return -ENOMEM;\n0216 }\n```\n\noom_badness v2.6.39版本   \n缺页中断  \ndo_page_fault -> out_of_memory -> select_bad_process -> oom_badness。  \n在oom_badness即会对进程计算分数，分数越高被kill可能性越高。   \n该版本考虑维度如下：   \nrss、pagetable、swap使用量、是否root进程   \n```\n/**\n * oom_badness - heuristic function to determine which candidate task to kill\n * @p: task struct of which task we should calculate\n * @totalpages: total present RAM allowed for page allocation\n *\n * The heuristic for determining which task to kill is made to be as simple and\n * predictable as possible.  The goal is to return the highest value for the\n * task consuming the most memory to avoid subsequent oom failures.\n */\nunsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,\n              const nodemask_t *nodemask, unsigned long totalpages)\n{\n    int points;\n\n    if (oom_unkillable_task(p, mem, nodemask))\n        return 0;\n\n    p = find_lock_task_mm(p);\n    if (!p)\n        return 0;\n\n    /*\n     * Shortcut check for a thread sharing p->mm that is OOM_SCORE_ADJ_MIN\n     * so the entire heuristic doesn't need to be executed for something\n     * that cannot be killed.\n     */\n    if (atomic_read(&p->mm->oom_disable_count)) {\n        task_unlock(p);\n        return 0;\n    }\n\n    /*\n     * When the PF_OOM_ORIGIN bit is set, it indicates the task should have\n     * priority for oom killing.\n     */\n    if (p->flags & PF_OOM_ORIGIN) {\n        task_unlock(p);\n        return 1000;\n    }\n\n    /*\n     * The memory controller may have a limit of 0 bytes, so avoid a divide\n     * by zero, if necessary.\n     */\n    if (!totalpages)\n        totalpages = 1;\n\n    /*\n     * The baseline for the badness score is the proportion of RAM that each\n     * task's rss, pagetable and swap space use.\n     */\n    points = get_mm_rss(p->mm) + p->mm->nr_ptes;\n    points += get_mm_counter(p->mm, MM_SWAPENTS);\n\n    points *= 1000;\n    points /= totalpages;\n    task_unlock(p);\n\n    /*\n     * Root processes get 3% bonus, just like the __vm_enough_memory()\n     * implementation used by LSMs.\n     */\n    if (has_capability_noaudit(p, CAP_SYS_ADMIN))\n        points -= 30;\n\n    /*\n     * /proc/pid/oom_score_adj ranges from -1000 to +1000 such that it may\n     * either completely disable oom killing or always prefer a certain\n     * task.\n     */\n    points += p->signal->oom_score_adj;\n\n    /*\n     * Never return 0 for an eligible task that may be killed since it's\n     * possible that no single user task uses more than 0.1% of memory and\n     * no single admin tasks uses more than 3.0%.\n     */\n    if (points <= 0)\n        return 1;\n    return (points < 1000) ? points : 1000;\n}\n```\n\n## 关于mmap只读共享的测试    \n测试代码在github.com/zsummer/zbase/tests/mapping_test 中  \n\n* 文件系统的内存映射分page cache 和buffer cache;    \n* 只读共享就是单纯的page cache;    \n* page cache 也会用到内存产生实际的内存使用(本来就是这样).   \n* 文件系统的page cache带来的实际内存使用也会计算进该进程的'commit'中 如果有多个进程  每个进程都会计算到commit中.   用于oom打分    \n    * 操作系统中的commit则只有一个  \n\n\n从OOM角度来讲不区分共享内存 只考虑RSS(一直有有小的迭代 比如加入swap量, root进程判定等);     \npage cache的回收由kswapd周期检查 通过内存水位判定, 基础参数是min_free_kbytes   \n当前水线位置和详细信息在cat /proc/zoneinfo , 内存不够用时也会直接触发 .   \n因此 mmap文件的virt 地址空间和OOM没关系,   mmap带来的rss会在被OOM killer之前回收掉不会被kill.    \n","slug":"2022-02-09-mmap-overcommit-oom","published":1,"updated":"2022-02-11T11:22:16.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9hg0002442m4pdk3lux","content":"<p>Memory Overcommit的意思是操作系统承诺给进程的内存大小超过了实际可用的内存.<br>一个保守的操作系统不会允许memory overcommit, 有多少就分配多少, 再申请就没有了, 这其实有些浪费内存, 因为进程实际使用到的内存往往比申请的内存要少<br>比如某个进程malloc()了200MB内存, 但实际上只用到了100MB, 按照UNIX/Linux的算法, 物理内存页的分配发生在使用的瞬间, 而不是在申请的瞬间, 也就是说未用到的100MB内存根本就没有分配, 这100MB内存就闲置了<br>下面这个概念很重要, 是理解memory overcommit的关键:  *<em>commit(或overcommit)针对的是内存申请, 内存申请不等于内存分配, 内存只在实际用到的时候才分配.  *</em>      </p>\n<a id=\"more\"></a>\n\n<p>Linux是允许memory overcommit的, 只要你来申请内存我就给你, 寄希望于进程实际上用不到那么多内存, 但万一用到那么多了呢？那就会发生类似“银行挤兑”的危机, 现金(内存)不足了.<br>Linux设计了一个OOM killer机制(OOM = out-of-memory)来处理这种危机:  挑选一个进程出来杀死, 以腾出部分内存, 如果还不够就继续杀…也可通过设置内核参数 vm.panic_on_oom 使得发生OOM时自动重启系统.<br>这都是有风险的机制, 重启有可能造成业务中断, 杀死进程也有可能导致业务中断, Linux 2.6之后允许通过内核参数 vm.overcommit_memory 禁止memory overcommit.  </p>\n<p>内核参数 vm.overcommit_memory 接受三种取值:     </p>\n<ul>\n<li>0 – Heuristic overcommit handling. 这是缺省值, 它允许overcommit, 但过于明目张胆的overcommit会被拒绝, 比如malloc一次性申请的内存大小就超过了系统总内存.  Heuristic的意思是“试探式的”, 内核利用某种算法（对该算法的详细解释请看文末）猜测你的内存申请是否合理, 它认为不合理就会拒绝overcommit.     </li>\n<li>1 – Always overcommit. 允许overcommit, 对内存申请来者不拒.     </li>\n<li>2 – Don’t overcommit. 禁止overcommit.     </li>\n</ul>\n<p>关于禁止overcommit (vm.overcommit_memory=2) , 需要知道的是, 怎样才算是overcommit呢？kernel设有一个阈值, 申请的内存总数超过这个阈值就算overcommit, 在/proc/meminfo中可以看到这个阈值的大小:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grep -i commit &#x2F;proc&#x2F;meminfo</span><br><span class=\"line\">CommitLimit:     5967744 kB</span><br><span class=\"line\">Committed_AS:    5363236 kB</span><br></pre></td></tr></table></figure>\n\n<p>CommitLimit 就是overcommit的阈值, 申请的内存总数超过CommitLimit的话就算是overcommit.<br>这个阈值是如何计算出来的呢？它既不是物理内存的大小, 也不是free memory的大小, 它是通过内核参数vm.overcommit_ratio或vm.overcommit_kbytes间接设置的, 公式如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">注:  </span><br><span class=\"line\">vm.overcommit_ratio 是内核参数, 缺省值是50, 表示物理内存的50%.  如果你不想使用比率, 也可以直接指定内存的字节数大小, 通过另一个内核参数 vm.overcommit_kbytes 即可; </span><br><span class=\"line\">如果使用了huge pages, 那么需要从物理内存中减去, 公式变成:  </span><br><span class=\"line\">CommitLimit &#x3D; ([total RAM] – [total huge TLB RAM]) * vm.overcommit_ratio &#x2F; 100 + swap</span><br><span class=\"line\">参见https:&#x2F;&#x2F;access.redhat.com&#x2F;solutions&#x2F;665023</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;proc&#x2F;meminfo中的 Committed_AS 表示所有进程已经申请的内存总大小, （注意是已经申请的, 不是已经分配的）, 如果 Committed_AS 超过 CommitLimit 就表示发生了 overcommit, 超出越多表示 overcommit 越严重.  Committed_AS 的含义换一种说法就是, 如果要绝对保证不发生OOM (out of memory) 需要多少物理内存.  </span><br><span class=\"line\"></span><br><span class=\"line\">“sar -r”是查看内存使用状况的常用工具, 它的输出结果中有两个与overcommit有关, kbcommit 和 %commit:  </span><br><span class=\"line\">kbcommit对应&#x2F;proc&#x2F;meminfo中的 Committed_AS; </span><br><span class=\"line\">%commit的计算公式并没有采用 CommitLimit作分母, 而是Committed_AS&#x2F;(MemTotal+SwapTotal), 意思是_内存申请_占_物理内存与交换区之和_的百分比.</span><br></pre></td></tr></table></figure>\n<p>$ sar -r </p>\n<p>05:00:01 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty<br>05:10:01 PM    160576   3648460     95.78         0   1846212   4939368     62.74   1390292   1854880         4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 附:  对Heuristic overcommit算法的解释  </span><br><span class=\"line\">内核参数 vm.overcommit_memory 的值0, 1, 2对应的源代码如下, 其中heuristic overcommit对应的是OVERCOMMIT_GUESS:  </span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">源文件:  source&#x2F;include&#x2F;linux&#x2F;mman.h</span><br><span class=\"line\">#define OVERCOMMIT_GUESS                0</span><br><span class=\"line\">#define OVERCOMMIT_ALWAYS               1</span><br><span class=\"line\">#define OVERCOMMIT_NEVER                2</span><br></pre></td></tr></table></figure>\n\n<p>Heuristic overcommit算法在以下函数中实现, 基本上可以这么理解:<br>单次申请的内存大小不能超过 【free memory + free swap + pagecache的大小 + SLAB中可回收的部分】, 否则本次申请就会失败.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">源文件:  source/mm/mmap.c 以RHEL内核<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-642</span>为例</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"number\">0120</span> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0121  * Check that a process has enough memory to allocate a new virtual</span></span><br><span class=\"line\"><span class=\"comment\">0122  * mapping. 0 means there is enough memory for the allocation to</span></span><br><span class=\"line\"><span class=\"comment\">0123  * succeed and -ENOMEM implies there is not.</span></span><br><span class=\"line\"><span class=\"comment\">0124  *</span></span><br><span class=\"line\"><span class=\"comment\">0125  * We currently support three overcommit policies, which are set via the</span></span><br><span class=\"line\"><span class=\"comment\">0126  * vm.overcommit_memory sysctl.  See Documentation/vm/overcommit-accounting</span></span><br><span class=\"line\"><span class=\"comment\">0127  *</span></span><br><span class=\"line\"><span class=\"comment\">0128  * Strict overcommit modes added 2002 Feb 26 by Alan Cox.</span></span><br><span class=\"line\"><span class=\"comment\">0129  * Additional code 2002 Jul 20 by Robert Love.</span></span><br><span class=\"line\"><span class=\"comment\">0130  *</span></span><br><span class=\"line\"><span class=\"comment\">0131  * cap_sys_admin is 1 if the process has admin privileges, 0 otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">0132  *</span></span><br><span class=\"line\"><span class=\"comment\">0133  * Note this is a helper function intended to be used by LSMs which</span></span><br><span class=\"line\"><span class=\"comment\">0134  * wish to use this logic.</span></span><br><span class=\"line\"><span class=\"comment\">0135  */</span></span><br><span class=\"line\"><span class=\"number\">0136</span> <span class=\"keyword\">int</span> __vm_enough_memory(struct mm_struct *mm, <span class=\"keyword\">long</span> pages, <span class=\"keyword\">int</span> cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0137</span> &#123;</span><br><span class=\"line\"><span class=\"number\">0138</span>         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">free</span>, allowed;</span><br><span class=\"line\"><span class=\"number\">0139</span> </span><br><span class=\"line\"><span class=\"number\">0140</span>         vm_acct_memory(pages);</span><br><span class=\"line\"><span class=\"number\">0141</span> </span><br><span class=\"line\"><span class=\"number\">0142</span>         <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0143          * Sometimes we want to use more memory than we have</span></span><br><span class=\"line\"><span class=\"comment\">0144          */</span></span><br><span class=\"line\"><span class=\"number\">0145</span>         <span class=\"keyword\">if</span> (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)</span><br><span class=\"line\"><span class=\"number\">0146</span>                 <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0147</span> </span><br><span class=\"line\"><span class=\"number\">0148</span>         <span class=\"keyword\">if</span> (sysctl_overcommit_memory == OVERCOMMIT_GUESS) &#123; <span class=\"comment\">//Heuristic overcommit算法开始</span></span><br><span class=\"line\"><span class=\"number\">0149</span>                 <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> n;</span><br><span class=\"line\"><span class=\"number\">0150</span> </span><br><span class=\"line\"><span class=\"number\">0151</span>                 <span class=\"built_in\">free</span> = global_page_state(NR_FILE_PAGES); <span class=\"comment\">//pagecache汇总的页面数量</span></span><br><span class=\"line\"><span class=\"number\">0152</span>                 <span class=\"built_in\">free</span> += get_nr_swap_pages(); <span class=\"comment\">//free swap的页面数</span></span><br><span class=\"line\"><span class=\"number\">0153</span> </span><br><span class=\"line\"><span class=\"number\">0154</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0155                  * Any slabs which are created with the</span></span><br><span class=\"line\"><span class=\"comment\">0156                  * SLAB_RECLAIM_ACCOUNT flag claim to have contents</span></span><br><span class=\"line\"><span class=\"comment\">0157                  * which are reclaimable, under pressure.  The dentry</span></span><br><span class=\"line\"><span class=\"comment\">0158                  * cache and most inode caches should fall into this</span></span><br><span class=\"line\"><span class=\"comment\">0159                  */</span></span><br><span class=\"line\"><span class=\"number\">0160</span>                 <span class=\"built_in\">free</span> += global_page_state(NR_SLAB_RECLAIMABLE); <span class=\"comment\">//SLAB可回收的页面数</span></span><br><span class=\"line\"><span class=\"number\">0161</span> </span><br><span class=\"line\"><span class=\"number\">0162</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0163                  * Reserve some for root</span></span><br><span class=\"line\"><span class=\"comment\">0164                  */</span></span><br><span class=\"line\"><span class=\"number\">0165</span>                 <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0166</span>                         <span class=\"built_in\">free</span> -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class=\"number\">10</span>); <span class=\"comment\">//给root用户保留的页面数</span></span><br><span class=\"line\"><span class=\"number\">0167</span> </span><br><span class=\"line\"><span class=\"number\">0168</span>                 <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt; pages)</span><br><span class=\"line\"><span class=\"number\">0169</span>                         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0170</span> </span><br><span class=\"line\"><span class=\"number\">0171</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0172                  * nr_free_pages() is very expensive on large systems,</span></span><br><span class=\"line\"><span class=\"comment\">0173                  * only call if we're about to fail.</span></span><br><span class=\"line\"><span class=\"comment\">0174                  */</span></span><br><span class=\"line\"><span class=\"number\">0175</span>                 n = nr_free_pages(); <span class=\"comment\">//当前free memory页面数</span></span><br><span class=\"line\"><span class=\"number\">0176</span> </span><br><span class=\"line\"><span class=\"number\">0177</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0178                  * Leave reserved pages. The pages are not for anonymous pages.</span></span><br><span class=\"line\"><span class=\"comment\">0179                  */</span></span><br><span class=\"line\"><span class=\"number\">0180</span>                 <span class=\"keyword\">if</span> (n &lt;= totalreserve_pages)</span><br><span class=\"line\"><span class=\"number\">0181</span>                         <span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"number\">0182</span>                 <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"number\">0183</span>                         n -= totalreserve_pages;</span><br><span class=\"line\"><span class=\"number\">0184</span> </span><br><span class=\"line\"><span class=\"number\">0185</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0186                  * Leave the last 3% for root</span></span><br><span class=\"line\"><span class=\"comment\">0187                  */</span></span><br><span class=\"line\"><span class=\"number\">0188</span>                 <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0189</span>                         n -= n / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"number\">0190</span>                 <span class=\"built_in\">free</span> += n;</span><br><span class=\"line\"><span class=\"number\">0191</span> </span><br><span class=\"line\"><span class=\"number\">0192</span>                 <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt; pages)</span><br><span class=\"line\"><span class=\"number\">0193</span>                         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0194</span> </span><br><span class=\"line\"><span class=\"number\">0195</span>                 <span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"number\">0196</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">0197</span> </span><br><span class=\"line\"><span class=\"number\">0198</span>         allowed = vm_commit_limit();</span><br><span class=\"line\"><span class=\"number\">0199</span>         <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0200          * Reserve some for root</span></span><br><span class=\"line\"><span class=\"comment\">0201          */</span></span><br><span class=\"line\"><span class=\"number\">0202</span>         <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0203</span>                 allowed -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"number\">0204</span> </span><br><span class=\"line\"><span class=\"number\">0205</span>         <span class=\"comment\">/* Don't let a single process grow too big:</span></span><br><span class=\"line\"><span class=\"comment\">0206            leave 3% of the size of this process for other processes */</span></span><br><span class=\"line\"><span class=\"number\">0207</span>         <span class=\"keyword\">if</span> (mm)</span><br><span class=\"line\"><span class=\"number\">0208</span>                 allowed -= mm-&gt;total_vm / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"number\">0209</span> </span><br><span class=\"line\"><span class=\"number\">0210</span>         <span class=\"keyword\">if</span> (percpu_counter_read_positive(&amp;vm_committed_as) &lt; allowed)</span><br><span class=\"line\"><span class=\"number\">0211</span>                 <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0212</span> error:</span><br><span class=\"line\"><span class=\"number\">0213</span>         vm_unacct_memory(pages);</span><br><span class=\"line\"><span class=\"number\">0214</span> </span><br><span class=\"line\"><span class=\"number\">0215</span>         <span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"><span class=\"number\">0216</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>oom_badness v2.6.39版本<br>缺页中断<br>do_page_fault -&gt; out_of_memory -&gt; select_bad_process -&gt; oom_badness。<br>在oom_badness即会对进程计算分数，分数越高被kill可能性越高。<br>该版本考虑维度如下：<br>rss、pagetable、swap使用量、是否root进程   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * oom_badness - heuristic function to determine which candidate task to kill</span><br><span class=\"line\"> * @p: task struct of which task we should calculate</span><br><span class=\"line\"> * @totalpages: total present RAM allowed for page allocation</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * The heuristic for determining which task to kill is made to be as simple and</span><br><span class=\"line\"> * predictable as possible.  The goal is to return the highest value for the</span><br><span class=\"line\"> * task consuming the most memory to avoid subsequent oom failures.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">unsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,</span><br><span class=\"line\">              const nodemask_t *nodemask, unsigned long totalpages)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int points;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (oom_unkillable_task(p, mem, nodemask))</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    p &#x3D; find_lock_task_mm(p);</span><br><span class=\"line\">    if (!p)</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Shortcut check for a thread sharing p-&gt;mm that is OOM_SCORE_ADJ_MIN</span><br><span class=\"line\">     * so the entire heuristic doesn&#39;t need to be executed for something</span><br><span class=\"line\">     * that cannot be killed.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (atomic_read(&amp;p-&gt;mm-&gt;oom_disable_count)) &#123;</span><br><span class=\"line\">        task_unlock(p);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * When the PF_OOM_ORIGIN bit is set, it indicates the task should have</span><br><span class=\"line\">     * priority for oom killing.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (p-&gt;flags &amp; PF_OOM_ORIGIN) &#123;</span><br><span class=\"line\">        task_unlock(p);</span><br><span class=\"line\">        return 1000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * The memory controller may have a limit of 0 bytes, so avoid a divide</span><br><span class=\"line\">     * by zero, if necessary.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (!totalpages)</span><br><span class=\"line\">        totalpages &#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * The baseline for the badness score is the proportion of RAM that each</span><br><span class=\"line\">     * task&#39;s rss, pagetable and swap space use.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    points &#x3D; get_mm_rss(p-&gt;mm) + p-&gt;mm-&gt;nr_ptes;</span><br><span class=\"line\">    points +&#x3D; get_mm_counter(p-&gt;mm, MM_SWAPENTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    points *&#x3D; 1000;</span><br><span class=\"line\">    points &#x2F;&#x3D; totalpages;</span><br><span class=\"line\">    task_unlock(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Root processes get 3% bonus, just like the __vm_enough_memory()</span><br><span class=\"line\">     * implementation used by LSMs.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (has_capability_noaudit(p, CAP_SYS_ADMIN))</span><br><span class=\"line\">        points -&#x3D; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * &#x2F;proc&#x2F;pid&#x2F;oom_score_adj ranges from -1000 to +1000 such that it may</span><br><span class=\"line\">     * either completely disable oom killing or always prefer a certain</span><br><span class=\"line\">     * task.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    points +&#x3D; p-&gt;signal-&gt;oom_score_adj;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Never return 0 for an eligible task that may be killed since it&#39;s</span><br><span class=\"line\">     * possible that no single user task uses more than 0.1% of memory and</span><br><span class=\"line\">     * no single admin tasks uses more than 3.0%.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (points &lt;&#x3D; 0)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    return (points &lt; 1000) ? points : 1000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"关于mmap只读共享的测试\">关于mmap只读共享的测试</span></h2><p>测试代码在github.com/zsummer/zbase/tests/mapping_test 中  </p>\n<ul>\n<li>文件系统的内存映射分page cache 和buffer cache;    </li>\n<li>只读共享就是单纯的page cache;    </li>\n<li>page cache 也会用到内存产生实际的内存使用(本来就是这样).   </li>\n<li>文件系统的page cache带来的实际内存使用也会计算进该进程的’commit’中 如果有多个进程  每个进程都会计算到commit中.   用于oom打分    <ul>\n<li>操作系统中的commit则只有一个  </li>\n</ul>\n</li>\n</ul>\n<p>从OOM角度来讲不区分共享内存 只考虑RSS(一直有有小的迭代 比如加入swap量, root进程判定等);<br>page cache的回收由kswapd周期检查 通过内存水位判定, 基础参数是min_free_kbytes<br>当前水线位置和详细信息在cat /proc/zoneinfo , 内存不够用时也会直接触发 .<br>因此 mmap文件的virt 地址空间和OOM没关系,   mmap带来的rss会在被OOM killer之前回收掉不会被kill.</p>\n","site":{"data":{}},"excerpt":"<p>Memory Overcommit的意思是操作系统承诺给进程的内存大小超过了实际可用的内存.<br>一个保守的操作系统不会允许memory overcommit, 有多少就分配多少, 再申请就没有了, 这其实有些浪费内存, 因为进程实际使用到的内存往往比申请的内存要少<br>比如某个进程malloc()了200MB内存, 但实际上只用到了100MB, 按照UNIX/Linux的算法, 物理内存页的分配发生在使用的瞬间, 而不是在申请的瞬间, 也就是说未用到的100MB内存根本就没有分配, 这100MB内存就闲置了<br>下面这个概念很重要, 是理解memory overcommit的关键:  *<em>commit(或overcommit)针对的是内存申请, 内存申请不等于内存分配, 内存只在实际用到的时候才分配.  *</em>      </p>","more":"<p>Linux是允许memory overcommit的, 只要你来申请内存我就给你, 寄希望于进程实际上用不到那么多内存, 但万一用到那么多了呢？那就会发生类似“银行挤兑”的危机, 现金(内存)不足了.<br>Linux设计了一个OOM killer机制(OOM = out-of-memory)来处理这种危机:  挑选一个进程出来杀死, 以腾出部分内存, 如果还不够就继续杀…也可通过设置内核参数 vm.panic_on_oom 使得发生OOM时自动重启系统.<br>这都是有风险的机制, 重启有可能造成业务中断, 杀死进程也有可能导致业务中断, Linux 2.6之后允许通过内核参数 vm.overcommit_memory 禁止memory overcommit.  </p>\n<p>内核参数 vm.overcommit_memory 接受三种取值:     </p>\n<ul>\n<li>0 – Heuristic overcommit handling. 这是缺省值, 它允许overcommit, 但过于明目张胆的overcommit会被拒绝, 比如malloc一次性申请的内存大小就超过了系统总内存.  Heuristic的意思是“试探式的”, 内核利用某种算法（对该算法的详细解释请看文末）猜测你的内存申请是否合理, 它认为不合理就会拒绝overcommit.     </li>\n<li>1 – Always overcommit. 允许overcommit, 对内存申请来者不拒.     </li>\n<li>2 – Don’t overcommit. 禁止overcommit.     </li>\n</ul>\n<p>关于禁止overcommit (vm.overcommit_memory=2) , 需要知道的是, 怎样才算是overcommit呢？kernel设有一个阈值, 申请的内存总数超过这个阈值就算overcommit, 在/proc/meminfo中可以看到这个阈值的大小:    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># grep -i commit &#x2F;proc&#x2F;meminfo</span><br><span class=\"line\">CommitLimit:     5967744 kB</span><br><span class=\"line\">Committed_AS:    5363236 kB</span><br></pre></td></tr></table></figure>\n\n<p>CommitLimit 就是overcommit的阈值, 申请的内存总数超过CommitLimit的话就算是overcommit.<br>这个阈值是如何计算出来的呢？它既不是物理内存的大小, 也不是free memory的大小, 它是通过内核参数vm.overcommit_ratio或vm.overcommit_kbytes间接设置的, 公式如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">注:  </span><br><span class=\"line\">vm.overcommit_ratio 是内核参数, 缺省值是50, 表示物理内存的50%.  如果你不想使用比率, 也可以直接指定内存的字节数大小, 通过另一个内核参数 vm.overcommit_kbytes 即可; </span><br><span class=\"line\">如果使用了huge pages, 那么需要从物理内存中减去, 公式变成:  </span><br><span class=\"line\">CommitLimit &#x3D; ([total RAM] – [total huge TLB RAM]) * vm.overcommit_ratio &#x2F; 100 + swap</span><br><span class=\"line\">参见https:&#x2F;&#x2F;access.redhat.com&#x2F;solutions&#x2F;665023</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;proc&#x2F;meminfo中的 Committed_AS 表示所有进程已经申请的内存总大小, （注意是已经申请的, 不是已经分配的）, 如果 Committed_AS 超过 CommitLimit 就表示发生了 overcommit, 超出越多表示 overcommit 越严重.  Committed_AS 的含义换一种说法就是, 如果要绝对保证不发生OOM (out of memory) 需要多少物理内存.  </span><br><span class=\"line\"></span><br><span class=\"line\">“sar -r”是查看内存使用状况的常用工具, 它的输出结果中有两个与overcommit有关, kbcommit 和 %commit:  </span><br><span class=\"line\">kbcommit对应&#x2F;proc&#x2F;meminfo中的 Committed_AS; </span><br><span class=\"line\">%commit的计算公式并没有采用 CommitLimit作分母, 而是Committed_AS&#x2F;(MemTotal+SwapTotal), 意思是_内存申请_占_物理内存与交换区之和_的百分比.</span><br></pre></td></tr></table></figure>\n<p>$ sar -r </p>\n<p>05:00:01 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty<br>05:10:01 PM    160576   3648460     95.78         0   1846212   4939368     62.74   1390292   1854880         4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 附:  对Heuristic overcommit算法的解释  </span><br><span class=\"line\">内核参数 vm.overcommit_memory 的值0, 1, 2对应的源代码如下, 其中heuristic overcommit对应的是OVERCOMMIT_GUESS:  </span><br><span class=\"line\">&#96;&#96;&#96;C++</span><br><span class=\"line\">源文件:  source&#x2F;include&#x2F;linux&#x2F;mman.h</span><br><span class=\"line\">#define OVERCOMMIT_GUESS                0</span><br><span class=\"line\">#define OVERCOMMIT_ALWAYS               1</span><br><span class=\"line\">#define OVERCOMMIT_NEVER                2</span><br></pre></td></tr></table></figure>\n\n<p>Heuristic overcommit算法在以下函数中实现, 基本上可以这么理解:<br>单次申请的内存大小不能超过 【free memory + free swap + pagecache的大小 + SLAB中可回收的部分】, 否则本次申请就会失败.  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">源文件:  source/mm/mmap.c 以RHEL内核<span class=\"number\">2.6</span><span class=\"number\">.32</span><span class=\"number\">-642</span>为例</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"number\">0120</span> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0121  * Check that a process has enough memory to allocate a new virtual</span></span><br><span class=\"line\"><span class=\"comment\">0122  * mapping. 0 means there is enough memory for the allocation to</span></span><br><span class=\"line\"><span class=\"comment\">0123  * succeed and -ENOMEM implies there is not.</span></span><br><span class=\"line\"><span class=\"comment\">0124  *</span></span><br><span class=\"line\"><span class=\"comment\">0125  * We currently support three overcommit policies, which are set via the</span></span><br><span class=\"line\"><span class=\"comment\">0126  * vm.overcommit_memory sysctl.  See Documentation/vm/overcommit-accounting</span></span><br><span class=\"line\"><span class=\"comment\">0127  *</span></span><br><span class=\"line\"><span class=\"comment\">0128  * Strict overcommit modes added 2002 Feb 26 by Alan Cox.</span></span><br><span class=\"line\"><span class=\"comment\">0129  * Additional code 2002 Jul 20 by Robert Love.</span></span><br><span class=\"line\"><span class=\"comment\">0130  *</span></span><br><span class=\"line\"><span class=\"comment\">0131  * cap_sys_admin is 1 if the process has admin privileges, 0 otherwise.</span></span><br><span class=\"line\"><span class=\"comment\">0132  *</span></span><br><span class=\"line\"><span class=\"comment\">0133  * Note this is a helper function intended to be used by LSMs which</span></span><br><span class=\"line\"><span class=\"comment\">0134  * wish to use this logic.</span></span><br><span class=\"line\"><span class=\"comment\">0135  */</span></span><br><span class=\"line\"><span class=\"number\">0136</span> <span class=\"keyword\">int</span> __vm_enough_memory(struct mm_struct *mm, <span class=\"keyword\">long</span> pages, <span class=\"keyword\">int</span> cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0137</span> &#123;</span><br><span class=\"line\"><span class=\"number\">0138</span>         <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"built_in\">free</span>, allowed;</span><br><span class=\"line\"><span class=\"number\">0139</span> </span><br><span class=\"line\"><span class=\"number\">0140</span>         vm_acct_memory(pages);</span><br><span class=\"line\"><span class=\"number\">0141</span> </span><br><span class=\"line\"><span class=\"number\">0142</span>         <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0143          * Sometimes we want to use more memory than we have</span></span><br><span class=\"line\"><span class=\"comment\">0144          */</span></span><br><span class=\"line\"><span class=\"number\">0145</span>         <span class=\"keyword\">if</span> (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)</span><br><span class=\"line\"><span class=\"number\">0146</span>                 <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0147</span> </span><br><span class=\"line\"><span class=\"number\">0148</span>         <span class=\"keyword\">if</span> (sysctl_overcommit_memory == OVERCOMMIT_GUESS) &#123; <span class=\"comment\">//Heuristic overcommit算法开始</span></span><br><span class=\"line\"><span class=\"number\">0149</span>                 <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> n;</span><br><span class=\"line\"><span class=\"number\">0150</span> </span><br><span class=\"line\"><span class=\"number\">0151</span>                 <span class=\"built_in\">free</span> = global_page_state(NR_FILE_PAGES); <span class=\"comment\">//pagecache汇总的页面数量</span></span><br><span class=\"line\"><span class=\"number\">0152</span>                 <span class=\"built_in\">free</span> += get_nr_swap_pages(); <span class=\"comment\">//free swap的页面数</span></span><br><span class=\"line\"><span class=\"number\">0153</span> </span><br><span class=\"line\"><span class=\"number\">0154</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0155                  * Any slabs which are created with the</span></span><br><span class=\"line\"><span class=\"comment\">0156                  * SLAB_RECLAIM_ACCOUNT flag claim to have contents</span></span><br><span class=\"line\"><span class=\"comment\">0157                  * which are reclaimable, under pressure.  The dentry</span></span><br><span class=\"line\"><span class=\"comment\">0158                  * cache and most inode caches should fall into this</span></span><br><span class=\"line\"><span class=\"comment\">0159                  */</span></span><br><span class=\"line\"><span class=\"number\">0160</span>                 <span class=\"built_in\">free</span> += global_page_state(NR_SLAB_RECLAIMABLE); <span class=\"comment\">//SLAB可回收的页面数</span></span><br><span class=\"line\"><span class=\"number\">0161</span> </span><br><span class=\"line\"><span class=\"number\">0162</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0163                  * Reserve some for root</span></span><br><span class=\"line\"><span class=\"comment\">0164                  */</span></span><br><span class=\"line\"><span class=\"number\">0165</span>                 <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0166</span>                         <span class=\"built_in\">free</span> -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class=\"number\">10</span>); <span class=\"comment\">//给root用户保留的页面数</span></span><br><span class=\"line\"><span class=\"number\">0167</span> </span><br><span class=\"line\"><span class=\"number\">0168</span>                 <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt; pages)</span><br><span class=\"line\"><span class=\"number\">0169</span>                         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0170</span> </span><br><span class=\"line\"><span class=\"number\">0171</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0172                  * nr_free_pages() is very expensive on large systems,</span></span><br><span class=\"line\"><span class=\"comment\">0173                  * only call if we're about to fail.</span></span><br><span class=\"line\"><span class=\"comment\">0174                  */</span></span><br><span class=\"line\"><span class=\"number\">0175</span>                 n = nr_free_pages(); <span class=\"comment\">//当前free memory页面数</span></span><br><span class=\"line\"><span class=\"number\">0176</span> </span><br><span class=\"line\"><span class=\"number\">0177</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0178                  * Leave reserved pages. The pages are not for anonymous pages.</span></span><br><span class=\"line\"><span class=\"comment\">0179                  */</span></span><br><span class=\"line\"><span class=\"number\">0180</span>                 <span class=\"keyword\">if</span> (n &lt;= totalreserve_pages)</span><br><span class=\"line\"><span class=\"number\">0181</span>                         <span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"number\">0182</span>                 <span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"number\">0183</span>                         n -= totalreserve_pages;</span><br><span class=\"line\"><span class=\"number\">0184</span> </span><br><span class=\"line\"><span class=\"number\">0185</span>                 <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0186                  * Leave the last 3% for root</span></span><br><span class=\"line\"><span class=\"comment\">0187                  */</span></span><br><span class=\"line\"><span class=\"number\">0188</span>                 <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0189</span>                         n -= n / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"number\">0190</span>                 <span class=\"built_in\">free</span> += n;</span><br><span class=\"line\"><span class=\"number\">0191</span> </span><br><span class=\"line\"><span class=\"number\">0192</span>                 <span class=\"keyword\">if</span> (<span class=\"built_in\">free</span> &gt; pages)</span><br><span class=\"line\"><span class=\"number\">0193</span>                         <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0194</span> </span><br><span class=\"line\"><span class=\"number\">0195</span>                 <span class=\"keyword\">goto</span> error;</span><br><span class=\"line\"><span class=\"number\">0196</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">0197</span> </span><br><span class=\"line\"><span class=\"number\">0198</span>         allowed = vm_commit_limit();</span><br><span class=\"line\"><span class=\"number\">0199</span>         <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">0200          * Reserve some for root</span></span><br><span class=\"line\"><span class=\"comment\">0201          */</span></span><br><span class=\"line\"><span class=\"number\">0202</span>         <span class=\"keyword\">if</span> (!cap_sys_admin)</span><br><span class=\"line\"><span class=\"number\">0203</span>                 allowed -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"number\">0204</span> </span><br><span class=\"line\"><span class=\"number\">0205</span>         <span class=\"comment\">/* Don't let a single process grow too big:</span></span><br><span class=\"line\"><span class=\"comment\">0206            leave 3% of the size of this process for other processes */</span></span><br><span class=\"line\"><span class=\"number\">0207</span>         <span class=\"keyword\">if</span> (mm)</span><br><span class=\"line\"><span class=\"number\">0208</span>                 allowed -= mm-&gt;total_vm / <span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"number\">0209</span> </span><br><span class=\"line\"><span class=\"number\">0210</span>         <span class=\"keyword\">if</span> (percpu_counter_read_positive(&amp;vm_committed_as) &lt; allowed)</span><br><span class=\"line\"><span class=\"number\">0211</span>                 <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">0212</span> error:</span><br><span class=\"line\"><span class=\"number\">0213</span>         vm_unacct_memory(pages);</span><br><span class=\"line\"><span class=\"number\">0214</span> </span><br><span class=\"line\"><span class=\"number\">0215</span>         <span class=\"keyword\">return</span> -ENOMEM;</span><br><span class=\"line\"><span class=\"number\">0216</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>oom_badness v2.6.39版本<br>缺页中断<br>do_page_fault -&gt; out_of_memory -&gt; select_bad_process -&gt; oom_badness。<br>在oom_badness即会对进程计算分数，分数越高被kill可能性越高。<br>该版本考虑维度如下：<br>rss、pagetable、swap使用量、是否root进程   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * oom_badness - heuristic function to determine which candidate task to kill</span><br><span class=\"line\"> * @p: task struct of which task we should calculate</span><br><span class=\"line\"> * @totalpages: total present RAM allowed for page allocation</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * The heuristic for determining which task to kill is made to be as simple and</span><br><span class=\"line\"> * predictable as possible.  The goal is to return the highest value for the</span><br><span class=\"line\"> * task consuming the most memory to avoid subsequent oom failures.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">unsigned int oom_badness(struct task_struct *p, struct mem_cgroup *mem,</span><br><span class=\"line\">              const nodemask_t *nodemask, unsigned long totalpages)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int points;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (oom_unkillable_task(p, mem, nodemask))</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    p &#x3D; find_lock_task_mm(p);</span><br><span class=\"line\">    if (!p)</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Shortcut check for a thread sharing p-&gt;mm that is OOM_SCORE_ADJ_MIN</span><br><span class=\"line\">     * so the entire heuristic doesn&#39;t need to be executed for something</span><br><span class=\"line\">     * that cannot be killed.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (atomic_read(&amp;p-&gt;mm-&gt;oom_disable_count)) &#123;</span><br><span class=\"line\">        task_unlock(p);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * When the PF_OOM_ORIGIN bit is set, it indicates the task should have</span><br><span class=\"line\">     * priority for oom killing.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (p-&gt;flags &amp; PF_OOM_ORIGIN) &#123;</span><br><span class=\"line\">        task_unlock(p);</span><br><span class=\"line\">        return 1000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * The memory controller may have a limit of 0 bytes, so avoid a divide</span><br><span class=\"line\">     * by zero, if necessary.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (!totalpages)</span><br><span class=\"line\">        totalpages &#x3D; 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * The baseline for the badness score is the proportion of RAM that each</span><br><span class=\"line\">     * task&#39;s rss, pagetable and swap space use.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    points &#x3D; get_mm_rss(p-&gt;mm) + p-&gt;mm-&gt;nr_ptes;</span><br><span class=\"line\">    points +&#x3D; get_mm_counter(p-&gt;mm, MM_SWAPENTS);</span><br><span class=\"line\"></span><br><span class=\"line\">    points *&#x3D; 1000;</span><br><span class=\"line\">    points &#x2F;&#x3D; totalpages;</span><br><span class=\"line\">    task_unlock(p);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Root processes get 3% bonus, just like the __vm_enough_memory()</span><br><span class=\"line\">     * implementation used by LSMs.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (has_capability_noaudit(p, CAP_SYS_ADMIN))</span><br><span class=\"line\">        points -&#x3D; 30;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * &#x2F;proc&#x2F;pid&#x2F;oom_score_adj ranges from -1000 to +1000 such that it may</span><br><span class=\"line\">     * either completely disable oom killing or always prefer a certain</span><br><span class=\"line\">     * task.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    points +&#x3D; p-&gt;signal-&gt;oom_score_adj;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">     * Never return 0 for an eligible task that may be killed since it&#39;s</span><br><span class=\"line\">     * possible that no single user task uses more than 0.1% of memory and</span><br><span class=\"line\">     * no single admin tasks uses more than 3.0%.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    if (points &lt;&#x3D; 0)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    return (points &lt; 1000) ? points : 1000;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于mmap只读共享的测试\"><a href=\"#关于mmap只读共享的测试\" class=\"headerlink\" title=\"关于mmap只读共享的测试\"></a>关于mmap只读共享的测试</h2><p>测试代码在github.com/zsummer/zbase/tests/mapping_test 中  </p>\n<ul>\n<li>文件系统的内存映射分page cache 和buffer cache;    </li>\n<li>只读共享就是单纯的page cache;    </li>\n<li>page cache 也会用到内存产生实际的内存使用(本来就是这样).   </li>\n<li>文件系统的page cache带来的实际内存使用也会计算进该进程的’commit’中 如果有多个进程  每个进程都会计算到commit中.   用于oom打分    <ul>\n<li>操作系统中的commit则只有一个  </li>\n</ul>\n</li>\n</ul>\n<p>从OOM角度来讲不区分共享内存 只考虑RSS(一直有有小的迭代 比如加入swap量, root进程判定等);<br>page cache的回收由kswapd周期检查 通过内存水位判定, 基础参数是min_free_kbytes<br>当前水线位置和详细信息在cat /proc/zoneinfo , 内存不够用时也会直接触发 .<br>因此 mmap文件的virt 地址空间和OOM没关系,   mmap带来的rss会在被OOM killer之前回收掉不会被kill.</p>"},{"title":"数字孪生空间","date":"2022-09-13T16:00:00.000Z","author":"yawei.zhang","_content":"\n我说 \n我梦见自己的房间里漂浮着流动的音箱 音符 钟表 时间表 曲线报表 关系报表  \n每个上面都有你的映像  \n有我们关系冷暖的时间曲线  \n准确说 我梦见了我处在有你在的数字孪生空间  \n我正努力的寻找每个数字拐点的节点时间和事件     \n\n你回复了我一句: 甜吗 \n\n我以为说的是数字: 不甜 \n但我突然想到你问的可能是我处在这样空间的感觉 问的是有你印记同在时我的感觉  \n\n我说: 等等 很甜  \n","source":"_posts/2022-09-14-digital-twin.md","raw":"---\ntitle: 数字孪生空间\ndate: 2022-09-14\ncategories: develop \nauthor: yawei.zhang \n---\n\n我说 \n我梦见自己的房间里漂浮着流动的音箱 音符 钟表 时间表 曲线报表 关系报表  \n每个上面都有你的映像  \n有我们关系冷暖的时间曲线  \n准确说 我梦见了我处在有你在的数字孪生空间  \n我正努力的寻找每个数字拐点的节点时间和事件     \n\n你回复了我一句: 甜吗 \n\n我以为说的是数字: 不甜 \n但我突然想到你问的可能是我处在这样空间的感觉 问的是有你印记同在时我的感觉  \n\n我说: 等等 很甜  \n","slug":"2022-09-14-digital-twin","published":1,"updated":"2024-01-18T09:06:03.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9hh0003442m9me8bm4t","content":"<p>我说<br>我梦见自己的房间里漂浮着流动的音箱 音符 钟表 时间表 曲线报表 关系报表<br>每个上面都有你的映像<br>有我们关系冷暖的时间曲线<br>准确说 我梦见了我处在有你在的数字孪生空间<br>我正努力的寻找每个数字拐点的节点时间和事件     </p>\n<p>你回复了我一句: 甜吗 </p>\n<p>我以为说的是数字: 不甜<br>但我突然想到你问的可能是我处在这样空间的感觉 问的是有你印记同在时我的感觉  </p>\n<p>我说: 等等 很甜</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我说<br>我梦见自己的房间里漂浮着流动的音箱 音符 钟表 时间表 曲线报表 关系报表<br>每个上面都有你的映像<br>有我们关系冷暖的时间曲线<br>准确说 我梦见了我处在有你在的数字孪生空间<br>我正努力的寻找每个数字拐点的节点时间和事件     </p>\n<p>你回复了我一句: 甜吗 </p>\n<p>我以为说的是数字: 不甜<br>但我突然想到你问的可能是我处在这样空间的感觉 问的是有你印记同在时我的感觉  </p>\n<p>我说: 等等 很甜</p>\n"},{"_content":"\n# KCP协议栈  \n\n## 简介  \nKCP是一个纯粹的ARQ协议 通过重传机制实现UDP数据包的可靠传输   \n* 以比 TCP浪费10%-20%的带宽的代价 换取平均延迟降低 30%-40% 且最大延迟降低三倍的传输效果\n* 纯算法实现 并不负责底层协议 (如UDP)的收发 \n* 需要使用者自己定义下层数据包的发送方式 以 callback的方式提供给 KCP\n* 连时钟都需要外部传递进来 内部不会有任何一次系统调用   \n\n* 协议栈位置   \n    | 协议栈位置  |\n    | ----------- |\n    | SESSION     |\n    | KCP(ARG)    |\n    | UDP(PACKET) |\n    | IP          |\n    | LINK        |\n    | PHY         |\n\n\n\n## 协议栈基础特性  \n\nTCP是为流量设计的 (每秒内可以传输多少KB的数据) 讲究的是充分利用带宽 \nKCP是为流速设计的 (单个数据包从一端发送到一端需要多少时间) 以10%-20%带宽浪费的代价换取了比 TCP快30%-40%的传输速度 \n\nTCP信道是一条流速很慢 但每秒流量很大的大运河 \n而KCP是水流湍急的小激流 KCP有正常模式和快速模式两种 通过以下策略达到提高流速的结果:  \n\n* **RTO翻倍vs不翻倍:**  \n  > TCP超时计算是RTOx2 这样连续丢三次包就变成RTOx8了 十分恐怖 而KCP启动快速模式后不x2 只是x1.5 (实验证明1.5这个值相对比较好) 提高了传输速度  \n\n* **选择性重传 vs 全部重传:**  \n  > TCP丢包时会全部重传从丢的那个包开始以后的数据 KCP是选择性重传 只重传真正丢失的数据包  (TCP同样有选择重传SACK 但有区别) \n\n* **快速重传:**  \n  > 发送端发送了1 2 3 4 5几个包 然后收到远端的ACK: 1 3 4 5 当收到ACK3时 KCP知道2被跳过1次 收到ACK4时 知道2被跳过了2次 此时可以认为2号丢失 不用等超时 直接重传2号包 大大改善了丢包时的传输速度 \n  > kcp实现是单独发送每个ACK信令 而TCP会合并  \n\n* **延迟ACK vs 非延迟ACK:**  \n  > TCP为了充分利用带宽 延迟发送ACK (NODELAY都没用) 这样超时计算会算出较大 RTT时间 延长了丢包时的判断过程 KCP的ACK是否延迟发送可以调节 \n\n* **UNA vs ACK+UNA:**  \n  > ARQ模型响应有两种 UNA (此编号前所有包已收到 如TCP)和ACK (该编号包已收到) 光用UNA将导致全部重传 光用ACK则丢失成本太高 以往协议都是二选其一 而 KCP协议中 除去单独的 ACK包外 所有包都有UNA信息 \n\n* **非退让流控:**  \n  > KCP正常模式同TCP一样使用公平退让法则 即发送窗口大小由:  发送缓存大小、接收端剩余接收缓存大小、丢包退让及慢启动这四要素决定 但传送及时性要求很高的小数据时 可选择通过配置跳过后两步 仅用前两项来控制发送频率 以牺牲部分公平性及带宽利用率之代价 换取了开着BT都能流畅传输的效果\n\n\n\n\n## 基础流程  \n单纯的ARQ在实际使用中并不能满足所有的网络场景 特别是网络拥塞时 大量的重传会导致更多的丢包   \n增加FEC是一个明智的选择 在KCP协议中 也并不排斥在KCP上增加FEC  \n但是需要注意的是 FEC加重传可能导致数据包的时延与抖动 同时 如果FEC解码得到的包经由重传或者网络延迟到达 需要在应用层进行检测 避免大量重复包影响KCP的传输效率  \n\n流程图见rp文件  \n\nKCP通过ikcp_create 创建一个KCP对象  \n每个不同的会话将产生不同的对象  \n因为KCP协议本身并没有提供网络部分的代码 所以需要将UDP发送函数的回调设置到KCP中 在有需要时 调用回调函数即可  \n\nKCP也支持外部的内存分配与日志回调 为用户提供了非常充分的自由度    \n\n整个KCP协议主要依靠一个循环ikcp_update来驱动整个算法的运转 所有的数据发送 接收 状态变化都依赖于此 所以如果有操作占用每一次update的周期过长 或者设置内部刷新的时间间隔过大 都会导致整个算法的效率降低 在ikcp_update中最终调用的是ikcp_flush 这是协议中的一个核心函数 将数据 确认包 以及窗口探测和应答发送到对端    \n\nKCP使用 ikcp_send 发送数据 该函数调用ikcp_output发送数据 实际上最终调用事先注册的发送回调发送数据  \nKCP通过 ikcp_recv 将数据接收出来 如果被分片发送 将在此自动重组 数据将与发送前保持一致   \n\n\n\n\n\n\n## 数据结构      \n基本结构如下:  \n```\n0               4   5   6       8 (BYTE)\n+---------------+---+---+-------+\n|     conv      |cmd|frg|  wnd  |\n+---------------+---+---+-------+   8\n|     ts        |     sn        |\n+---------------+---------------+  16\n|     una       |     len       |\n+---------------+---------------+  24\n|                               |\n|        DATA (optional)        |\n|                               |\n+-------------------------------+\n```   \n\ncode:   \n``` C++ \nstruct IKCPSEG\n{\n\tstruct IQUEUEHEAD node;\n\tIUINT32 conv;\n\tIUINT32 cmd;\n\tIUINT32 frg;\n\tIUINT32 wnd;\n\tIUINT32 ts;\n\tIUINT32 sn;\n\tIUINT32 una;\n\tIUINT32 len;\n\tIUINT32 resendts;\n\tIUINT32 rto;\n\tIUINT32 fastack;\n\tIUINT32 xmit;\n\tchar data[1];\n};\n```\n\n\n* Conv: 32bit 4Byte  \n  > 为一个表示会话编号的整数 和TCP的 conv 一样 通信双方需保证 conv 相同 相互的数据包才能够被接受 \n  > conv 唯一标识一个会话 但通信双方可以同时存在多个会话   \n\n* cmd 8bit 1Byte   \n   用来区分分片的作用 \n  * IKCP_CMD_PUSH: 数据分片 \n  * IKCP_CMD_ACK: ack分片  \n  * IKCP_CMD_WASK: 请求告知窗口大小 \n  * IKCP_CMD_WINS: 告知窗口大小 \n\n* frag 8bit 1Byte   \n  > 用户数据可能会被分成多个KCP包发送 frag标识segment分片ID（在message中的索引 由大到小 0表示最后一个分片） \n\n* wnd 16bit 2Byte   \n  > 剩余接收窗口大小（接收窗口大小-接收队列大小） 发送方的发送窗口不能超过接收方给出的数值 \n\n* ts 32bit 4Byte   \n  > message发送时刻的时间戳\n\n* sn 32bit 4Byte   \n  > message分片segment的序号 按1累次递增 \n\n* una 32bit 4Byte   \n  > 待接收消息序号(接收滑动窗口左端) 对于未丢包的网络来说 una是下一个可接收的序号 如收到sn=10的包 una为11 \n\n* len 32bit 4Byte   \n  > 数据长度 \n\n\n* resendts   \n  > 下次超时重传的时间戳 \n\n* rto  \n  > 该分片的超时重传等待时间 其计算方法同TCP \n\n* fastack   \n  > 收到ack时计算的该分片被跳过的累计次数 此字段用于快速重传 自定义需要几次确认开始快速重传 \n\n* xmit   \n  > 发送分片的次数 每发送一次加一 发送的次数对RTO的计算有影响 但是比TCP来说 影响会小一些 计算思想类似\n\n\n\n## IKCPCB结构    \n``` C++\nstruct IKCPCB\n{\n\tIUINT32 conv, mtu, mss, state;\n\tIUINT32 snd_una, snd_nxt, rcv_nxt;\n\tIUINT32 ts_recent, ts_lastack, ssthresh;\n\tIINT32 rx_rttval, rx_srtt, rx_rto, rx_minrto;\n\tIUINT32 snd_wnd, rcv_wnd, rmt_wnd, cwnd, probe;\n\tIUINT32 current, interval, ts_flush, xmit;\n\tIUINT32 nrcv_buf, nsnd_buf;\n\tIUINT32 nrcv_que, nsnd_que;\n\tIUINT32 nodelay, updated;\n\tIUINT32 ts_probe, probe_wait;\n\tIUINT32 dead_link, incr;\n\tstruct IQUEUEHEAD snd_queue;\n\tstruct IQUEUEHEAD rcv_queue;\n\tstruct IQUEUEHEAD snd_buf;\n\tstruct IQUEUEHEAD rcv_buf;\n\tIUINT32 *acklist;\n\tIUINT32 ackcount;\n\tIUINT32 ackblock;\n\tvoid *user;\n\tchar *buffer;\n\tint fastresend;\n\tint fastlimit;\n\tint nocwnd, stream;\n\tint logmask;\n\tint (*output)(const char *buf, int len, struct IKCPCB *kcp, void *user);\n\tvoid (*writelog)(const char *log, struct IKCPCB *kcp, void *user);\n};\n```  \n\nIKCPCB是KCP中最重要的结构 也是在会话开始就创建的对象 代表着这次会话  \n\n* conv: 标识这个会话 \n* mtu: 最大传输单元 默认数据为1400 最小为50 \n* mss: 最大分片大小 不大于mtu \n* state: 连接状态（0xFFFFFFFF表示断开连接） \n* snd_una: 第一个未确认的包 \n* snd_nxt: 下一个待分配的包的序号 \n* rcv_nxt: 待接收消息序号 为了保证包的顺序 接收方会维护一个接收窗口 接收窗口有一个起始序号rcv_nxt（待接收消息序号）以及尾序号 * rcv_nxt + rcv_wnd（接收窗口大小） \n* ssthresh: 拥塞窗口阈值 以包为单位（TCP以字节为单位） \n* rx_rttval: RTT的变化量 代表连接的抖动情况 \n* rx_srtt: smoothed round trip time 平滑后的RTT \n* rx_rto: 由ACK接收延迟计算出来的重传超时时间 \n* rx_minrto: 最小重传超时时间 \n* snd_wnd: 发送窗口大小 \n* rcv_wnd: 接收窗口大小 \n* rmt_wnd: 远端接收窗口大小 \n* cwnd: 拥塞窗口大小 \n* probe: 探查变量 IKCP_ASK_TELL表示告知远端窗口大小 IKCP_ASK_SEND表示请求远端告知窗口大小 \n* interval: 内部flush刷新间隔 对系统循环效率有非常重要影响 \n* ts_flush: 下次flush刷新时间戳 \n* xmit: 发送segment的次数 当segment的xmit增加时 xmit增加（第一次或重传除外） \n* rcv_buf: 接收消息的缓存 \n* nrcv_buf: 接收缓存中消息数量 \n* snd_buf: 发送消息的缓存 \n* nsnd_buf: 发送缓存中消息数量 \n* rcv_queue: 接收消息的队列\n* nrcv_que: 接收队列中消息数量 \n* snd_queue: 发送消息的队列 \n* nsnd_que: 发送队列中消息数量 \n* nodelay: 是否启动无延迟模式 无延迟模式rtomin将设置为0 拥塞控制不启动 \n* updated: 是否调用过update函数的标识 \n* ts_probe: 下次探查窗口的时间戳 \n* probe_wait: 探查窗口需要等待的时间     \n* dead_link: 最大重传次数 被认为连接中断 \n* incr: 可发送的最大数据量 \n* acklist: 待发送的ack列表 \n* ackcount: acklist中ack的数量 每个ack在acklist中存储ts sn两个量 \n* ackblock: 2的倍数 标识acklist最大可容纳的ack数量 \n* user: 指针 可以任意放置代表用户的数据 也可以设置程序中需要传递的变量 \n* buffer: 存储消息字节流 \n* fastresend: 触发快速重传的重复ACK个数 \n* nocwnd: 取消拥塞控制 \n* stream: 是否采用流传输模式 \n* logmask: 日志的类型 如IKCP_LOG_IN_DATA 方便调试 \n* output udp: 发送消息的回调函数 \n* writelog: 写日志的回调函数 \n\n\n\n## 基本使用\n\n1. 创建 KCP对象：\n\n   ```cpp\n   // 初始化 kcp对象 conv为一个表示会话编号的整数 和tcp的 conv一样 通信双\n   // 方需保证 conv相同 相互的数据包才能够被认可 user是一个给回调函数的指针\n   ikcpcb *kcp = ikcp_create(conv, user);\n   ```\n\n2. 设置回调函数：\n\n   ```cpp\n   // KCP的下层协议输出函数 KCP需要发送数据时会调用它\n   // buf/len 表示缓存和长度\n   // user指针为 kcp对象创建时传入的值 用于区别多个 KCP对象\n   int udp_output(const char *buf, int len, ikcpcb *kcp, void *user)\n   {\n     ....\n   }\n   // 设置回调函数\n   kcp->output = udp_output;\n   ```\n\n3. 循环调用 update：\n\n   ```cpp\n   // 以一定频率调用 ikcp_update来更新 kcp状态 并且传入当前时钟（毫秒单位）\n   // 如 10ms调用一次 或用 ikcp_check确定下次调用 update的时间不必每次调用\n   ikcp_update(kcp, millisec);\n   ```\n\n4. 输入一个下层数据包：\n\n   ```cpp\n   // 收到一个下层数据包（比如UDP包）时需要调用：\n   ikcp_input(kcp, received_udp_packet, received_udp_size);\n   ```\n   处理了下层协议的输出/输入后 KCP协议就可以正常工作了   \n   使用 ikcp_send 来向远端发送数据    \n   另一端使用 ikcp_recv(kcp, ptr, size)来接收数据   \n\n\n## 协议配置\n\n协议默认模式是一个标准的 ARQ 需要通过配置打开各项加速开关：\n\n1. 工作模式：\n   ```cpp\n   int ikcp_nodelay(ikcpcb *kcp, int nodelay, int interval, int resend, int nc)\n   ```\n\n   - nodelay ：是否启用 nodelay模式 0不启用；1启用 \n   - interval ：协议内部工作的 interval 单位毫秒 比如 10ms或者 20ms\n   - resend ：快速重传模式 默认0关闭 可以设置2（2次ACK跨越将会直接重传）\n   - nc ：是否关闭流控 默认是0代表不关闭 1代表关闭 \n   - 普通模式： ikcp_nodelay(kcp, 0, 40, 0, 0);\n   - 极速模式： ikcp_nodelay(kcp, 1, 10, 2, 1);\n\n2. 最大窗口：\n   ```cpp\n   int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);\n   ```\n   该调用将会设置协议的最大发送窗口和最大接收窗口大小 默认为32. 这个可以理解为 TCP的 SND_BUF 和 RCV_BUF 只不过单位不一样 SND/RCV_BUF 单位是字节 这个单位是包 \n\n3. 最大传输单元：\n\n   纯算法协议并不负责探测 MTU 默认 mtu是1400字节 可以使用ikcp_setmtu来设置该值 该值将会影响数据包归并及分片时候的最大传输单元 \n\n4. 最小RTO：\n\n   不管是 TCP还是 KCP计算 RTO时都有最小 RTO的限制 即便计算出来RTO为40ms 由于默认的 RTO是100ms 协议只有在100ms后才能检测到丢包 快速模式下为30ms 可以手动更改该值：\n   ```cpp\n   kcp->rx_minrto = 10;\n   ```\n\n\n\n## 其他文档索引\n\n协议的使用和配置都是很简单的 大部分情况看完上面的内容基本可以使用了 如果你需要进一步进行精细的控制 比如改变 KCP的内存分配器 或者你需要更有效的大规模调度 KCP链接（比如 3500个以上） 或者如何更好的同 TCP结合 那么可以继续延伸阅读：\n\n- [Wiki Home](https://github.com/skywind3000/kcp/wiki)\n- [KCP 最佳实践](https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice)\n- [同现有TCP服务器集成](https://github.com/skywind3000/kcp/wiki/Cooperate-With-Tcp-Server)\n- [传输数据加密](https://github.com/skywind3000/kcp/wiki/Network-Encryption)\n- [应用层流量控制](https://github.com/skywind3000/kcp/wiki/Flow-Control-for-Users)\n- [性能评测](https://github.com/skywind3000/kcp/wiki/KCP-Benchmark)\n\n\n\n\n\n\n\n# 避免缓存积累延迟\n\n不管使用 TCP 还是 KCP，你都不可能超越信道限制的发送数据。TCP 的发送窗口 SNDBUF 决定了最多可以同时发送多少数据，KCP的也一样。\n\n当前发送且没有得到 ACK/UNA确认的数据，都会滞留在发送缓存中，一旦滞留数据超过了发送窗口大小限制，则该链接的 tcp send 调用将会\n被阻塞，或者返回：EAGAIN / EWOULDBLOCK，这时候说明当前 tcp 信道可用带宽已经赶不上你的发送速度了。\n\n```\n可用带宽 = min(本地可用发送窗口大小，远端可用接收窗口大小) * (1 - 丢包率) / RTT\n```\n\n当你持续调用 ikcp_send，首先会填满kcp的 snd_buf，如果 snd_buf 的大小超过发送窗口 snd_wnd 限制，则会停止向 snd_buf 里追加\n数据包，只会放在 snd_queue 里面滞留着，等待 snd_buf 有新位置了（因为收到远端 ack/una而将历史包从 snd_buf中移除），才会从\nsnd_queue 转移到 snd_buf，等待发送。\n\nTCP发送窗口满了不能发送了，会给你阻塞住或者 EAGAIN/EWOULDBLOCK；KCP发送窗口满了，ikcp_send 并不会给你返回 -1，而是让数据滞留\n在 snd_queue 里等待有能力时再发送。\n\n因此，千万不要以为 ikcp_send 可以无节制的调用，为什么 KCP在发送窗口满的时候不返回错误呢？这个问题当年设计时权衡过，如果返回希望发送时返回错误的 EAGAIN/EWOULDBLOCK 你势必外层还需要建立一个缓存，等到下次再测试是否可以 send。那么还不如 kcp直接把这一层缓存做了，让上层更简单些，而且具体要如何处理 EAGAIN，可以让上层通过检测 ikcp_waitsnd 函数来判断还有多少包没有发出去，灵活抉择是否向 snd_queue 缓存追加数据包还是其他。\n\n## 重设窗口大小\n\n要解决上面的问题首先对你的使用带宽有一个预计，并根据上面的公式重新设置发送窗口和接收窗口大小，你写后端，想追求tcp的性能，也会需要重新设置tcp的 sndbuf, rcvbuf 的大小，KCP 默认发送窗口和接收窗口大小都比较小而已（默认32个包），你可以朝着 64, 128, 256, 512, 1024 等档次往上调，kcptun默认发送窗口 1024，用来传高清视频已经足够，游戏的话，32-256 应该满足。\n\n不设置的话，如果默认 snd_wnd 太小，网络不是那么顺畅，你越来越多的数据会滞留在 snd_queue里得不到发送，你的延迟会越来越大。\n\n设定了 snd_wnd，远端的 rcv_wnd 也需要相应扩大，并且不小于发送端的 snd_wnd 大小，否则设置没意义。\n\n其次对于成熟的后端业务，不管用 TCP还是 KCP，你都需要实现相关缓存控制策略：\n\n## 缓存控制：传送文件\n\n你用 tcp传文件的话，当网络没能力了，你的 send调用要不就是阻塞掉，要不就是 EAGAIN，然后需要通过 epoll 检查 EPOLL_OUT事件来决定下次什么时候可以继续发送。\n\nKCP 也一样，如果 ikcp_waitsnd 超过阈值，比如2倍 snd_wnd，那么停止调用 ikcp_send，ikcp_waitsnd的值降下来，当然期间要保持 ikcp_update 调用。\n\n## 缓存控制：实时视频直播\n\n视频点播和传文件一样，而视频直播，一旦 ikcp_waitsnd 超过阈值了，除了不再往 kcp 里发送新的数据包，你的视频应该进入一个 “丢帧” 状态，直到 ikcp_waitsnd 降低到阈值的 1/2，这样你的视频才不会有积累延迟。\n\n这和使用 TCP推流时碰到 EAGAIN 期间，要主动丢帧的逻辑时一样的。\n\n同时，如果你能做的更好点，waitsnd 超过阈值了，代表一段时间内网络传输能力下降了，此时你应该动态降低视频质量，减少码率，等网络恢复了你再恢复。\n\n## 缓存控制：游戏控制数据\n\n大部分逻辑严密的 TCP游戏服务器，都是使用无阻塞的 tcp链接配套个 epoll之类的东西，当后端业务向用户发送数据时会追加到用户空间的一块发送缓存，比如 ring buffer 之类，当 epoll 到 EPOLL_OUT 事件时（其实也就是tcp发送缓存有空余了，不会EAGAIN/EWOULDBLOCK的时候），再把 ring buffer 里面暂存的数据使用 send 传递给系统的 SNDBUF，直到再次 EAGAIN。\n\n那么 TCP SERVER的后端业务持续向客户端发送数据，而客户端又迟迟没能力接收怎么办呢？此时 epoll 会长期不返回 EPOLL_OUT事件，数据会堆积再该用户的 ring buffer 之中，如果堆积越来越多，ring buffer 会自增长的话就会把 server 的内存给耗尽。因此成熟的 tcp 游戏服务器的做法是：当客户端应用层发送缓存（非tcp的sndbuf）中待发送数据超过一定阈值，就断开 TCP链接，因为该用户没有接收能力了，无法持续接收游戏数据。\n\n使用 KCP 发送游戏数据也一样，当 ikcp_waitsnd 返回值超过一定限度时，你应该断开远端链接，因为他们没有能力接收了。\n\n但是需要注意的是，KCP的默认窗口都是32，比tcp的默认窗口低很多，实际使用时应提前调大窗口，但是为了公平性也不要无止尽放大（不要超过1024）。\n\n\n## 总结\n\n缓存积累这个问题，不管是 TCP还是 KCP你都要处理，因为TCP默认窗口比较大，因此可能很多人并没有处理的意识。\n\n当你碰到缓存延迟时：\n\n1. 检查 snd_wnd, rcv_wnd 的值是否满足你的要求，根据上面的公式换算，每秒钟要发多少包，当前 snd_wnd满足条件么？\n2. 确认打开了 ikcp_nodelay，让各项加速特性得以运转，并确认 nc参数是否设置，以关闭默认的类 tcp保守流控方式。\n3. 确认 ikcp_update 调用频率是否满足要求（比如10ms一次）。\n\n如果你还想更激进：\n\n1. 确认 minrto 是否设置，比如设置成 10ms, nodelay 只是设置成 30ms，更激进可以设置成 10ms 或者 5ms。\n2. 确认 interval是否设置，可以更激进的设置成 5ms，让内部始终循环更快。\n3. 每次发送完数据包后，手动调用 ikcp_flush\n4. 降低 mtu 到 470，同样数据虽然会发更多的包，但是小包在路由层优先级更高。\n\n如果你还想更快，可以在 KCP下层增加前向纠错协议。详细见：[协议分层](https://github.com/skywind3000/kcp/wiki/Network-Layer)，[最佳实践](https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice)。\n\n更多见讨论记录：\n\n[https://github.com/skywind3000/kcp/issues/4](https://github.com/skywind3000/kcp/issues/4)\n\n[https://github.com/skywind3000/kcp/issues/93](https://github.com/skywind3000/kcp/issues/93)\n\n## 部分讨论记录: \n\n> 50%+75%的丢包率实在是太高了，信道几乎不可用了。因为高丢包，RTO会变的很大，这些行为和TCP也都是一致的，tcp在35%丢包时就断线了，没法工作了。其实处理“当前网络无法发送更多数据”这种事情，是上层传输逻辑的一个很重要的逻辑，不管下面是tcp还是kcp，再我们用kcp传送语音和视频，都会碰到网络震荡，这时候，语音或者视频一旦发现ikcp_waitsnd 的数据超过一个阀值就开始跳帧，不再传送新数据出去，直到网络恢复，或者超时不恢复就断线重连了。这是一个参考处理方法。还有一个参考处理方法就是给上层返回 EAGAIN，和TCP的方式一样，让用户去解决去。\n\n> 当你需要发送“超过信道容量”的数据时，由易到烦，有三个处理方法。  \n\n1. int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);\n    > 扩大发送窗口和接收窗口，比如设置为64，相当于tcp的，SNDBUF, RCVBUF   \n\n2. 连接管理层（即kcp的上一层管理连接，用于衔接用户和kcp的控制类），每次调用kcp_send前检查ikcp_waitsnd是否超过阀值，超过的话，不要调用kcp_send了，直接给用户 EAGAIN，和tcp行为保持一直。  \n  \n3. 数据传送层（处理kcp->output, 临近udp的那一层），发现丢包超过20%时，启动FEC，每发送三个包，紧跟一个冗余包（冗余包=P1 xor P2 xor P3），即3:1的冗余，如果丢包率上升，继续调整为2:1的冗余，发现一个包丢失的话，使用同组其他包xor后恢复出来，让传输层来负担一部分减少丢包率的任务。  \n   \n> 理论上来讲，方法3在大多数情况下很有效果，但是如果你真的达到了信道的物理带宽上限，那么增加冗余包只会进一步增加丢包率。方法1和3都是缓解，归根结底是需要处理“每秒待发数据超过信道容量”这个问题，不管下层是tcp还是kcp，这个问题都必须要仔细处理。\n\n\n##  丢包率和FEC   \n\n* 冗余量考虑: \n  平均所需:  \n  $Sum[0.1^i, {i, 1, infinite}]$   \n  $\\displaystyle \\sum^{infty}_{i = 1}{i^k}$     \n  > i=0.1  sum=0.11111111   \n  > i=0.35 sum=0.538462  \n  > i=0.5  sum=1  \n  > i=0.7  sum=2.33333   \n  > i=0.9  sum=9   \n\n  考虑到连续丢包概率 例如丢包率50%, 则至少需要平均1倍的包量\n\n* 恢复能力考虑(延迟):  \n  丢失1个包可以在下一个包恢复  * 2  \n  丢失1个包可以在收到下N个包全部收到后恢复 * 2\n  丢失1个包可以在任意后续两个包恢复 * 3\n\n\n\n","source":"_posts/2022_08_04_kcp_knowledge.md","raw":"\n# KCP协议栈  \n\n## 简介  \nKCP是一个纯粹的ARQ协议 通过重传机制实现UDP数据包的可靠传输   \n* 以比 TCP浪费10%-20%的带宽的代价 换取平均延迟降低 30%-40% 且最大延迟降低三倍的传输效果\n* 纯算法实现 并不负责底层协议 (如UDP)的收发 \n* 需要使用者自己定义下层数据包的发送方式 以 callback的方式提供给 KCP\n* 连时钟都需要外部传递进来 内部不会有任何一次系统调用   \n\n* 协议栈位置   \n    | 协议栈位置  |\n    | ----------- |\n    | SESSION     |\n    | KCP(ARG)    |\n    | UDP(PACKET) |\n    | IP          |\n    | LINK        |\n    | PHY         |\n\n\n\n## 协议栈基础特性  \n\nTCP是为流量设计的 (每秒内可以传输多少KB的数据) 讲究的是充分利用带宽 \nKCP是为流速设计的 (单个数据包从一端发送到一端需要多少时间) 以10%-20%带宽浪费的代价换取了比 TCP快30%-40%的传输速度 \n\nTCP信道是一条流速很慢 但每秒流量很大的大运河 \n而KCP是水流湍急的小激流 KCP有正常模式和快速模式两种 通过以下策略达到提高流速的结果:  \n\n* **RTO翻倍vs不翻倍:**  \n  > TCP超时计算是RTOx2 这样连续丢三次包就变成RTOx8了 十分恐怖 而KCP启动快速模式后不x2 只是x1.5 (实验证明1.5这个值相对比较好) 提高了传输速度  \n\n* **选择性重传 vs 全部重传:**  \n  > TCP丢包时会全部重传从丢的那个包开始以后的数据 KCP是选择性重传 只重传真正丢失的数据包  (TCP同样有选择重传SACK 但有区别) \n\n* **快速重传:**  \n  > 发送端发送了1 2 3 4 5几个包 然后收到远端的ACK: 1 3 4 5 当收到ACK3时 KCP知道2被跳过1次 收到ACK4时 知道2被跳过了2次 此时可以认为2号丢失 不用等超时 直接重传2号包 大大改善了丢包时的传输速度 \n  > kcp实现是单独发送每个ACK信令 而TCP会合并  \n\n* **延迟ACK vs 非延迟ACK:**  \n  > TCP为了充分利用带宽 延迟发送ACK (NODELAY都没用) 这样超时计算会算出较大 RTT时间 延长了丢包时的判断过程 KCP的ACK是否延迟发送可以调节 \n\n* **UNA vs ACK+UNA:**  \n  > ARQ模型响应有两种 UNA (此编号前所有包已收到 如TCP)和ACK (该编号包已收到) 光用UNA将导致全部重传 光用ACK则丢失成本太高 以往协议都是二选其一 而 KCP协议中 除去单独的 ACK包外 所有包都有UNA信息 \n\n* **非退让流控:**  \n  > KCP正常模式同TCP一样使用公平退让法则 即发送窗口大小由:  发送缓存大小、接收端剩余接收缓存大小、丢包退让及慢启动这四要素决定 但传送及时性要求很高的小数据时 可选择通过配置跳过后两步 仅用前两项来控制发送频率 以牺牲部分公平性及带宽利用率之代价 换取了开着BT都能流畅传输的效果\n\n\n\n\n## 基础流程  \n单纯的ARQ在实际使用中并不能满足所有的网络场景 特别是网络拥塞时 大量的重传会导致更多的丢包   \n增加FEC是一个明智的选择 在KCP协议中 也并不排斥在KCP上增加FEC  \n但是需要注意的是 FEC加重传可能导致数据包的时延与抖动 同时 如果FEC解码得到的包经由重传或者网络延迟到达 需要在应用层进行检测 避免大量重复包影响KCP的传输效率  \n\n流程图见rp文件  \n\nKCP通过ikcp_create 创建一个KCP对象  \n每个不同的会话将产生不同的对象  \n因为KCP协议本身并没有提供网络部分的代码 所以需要将UDP发送函数的回调设置到KCP中 在有需要时 调用回调函数即可  \n\nKCP也支持外部的内存分配与日志回调 为用户提供了非常充分的自由度    \n\n整个KCP协议主要依靠一个循环ikcp_update来驱动整个算法的运转 所有的数据发送 接收 状态变化都依赖于此 所以如果有操作占用每一次update的周期过长 或者设置内部刷新的时间间隔过大 都会导致整个算法的效率降低 在ikcp_update中最终调用的是ikcp_flush 这是协议中的一个核心函数 将数据 确认包 以及窗口探测和应答发送到对端    \n\nKCP使用 ikcp_send 发送数据 该函数调用ikcp_output发送数据 实际上最终调用事先注册的发送回调发送数据  \nKCP通过 ikcp_recv 将数据接收出来 如果被分片发送 将在此自动重组 数据将与发送前保持一致   \n\n\n\n\n\n\n## 数据结构      \n基本结构如下:  \n```\n0               4   5   6       8 (BYTE)\n+---------------+---+---+-------+\n|     conv      |cmd|frg|  wnd  |\n+---------------+---+---+-------+   8\n|     ts        |     sn        |\n+---------------+---------------+  16\n|     una       |     len       |\n+---------------+---------------+  24\n|                               |\n|        DATA (optional)        |\n|                               |\n+-------------------------------+\n```   \n\ncode:   \n``` C++ \nstruct IKCPSEG\n{\n\tstruct IQUEUEHEAD node;\n\tIUINT32 conv;\n\tIUINT32 cmd;\n\tIUINT32 frg;\n\tIUINT32 wnd;\n\tIUINT32 ts;\n\tIUINT32 sn;\n\tIUINT32 una;\n\tIUINT32 len;\n\tIUINT32 resendts;\n\tIUINT32 rto;\n\tIUINT32 fastack;\n\tIUINT32 xmit;\n\tchar data[1];\n};\n```\n\n\n* Conv: 32bit 4Byte  \n  > 为一个表示会话编号的整数 和TCP的 conv 一样 通信双方需保证 conv 相同 相互的数据包才能够被接受 \n  > conv 唯一标识一个会话 但通信双方可以同时存在多个会话   \n\n* cmd 8bit 1Byte   \n   用来区分分片的作用 \n  * IKCP_CMD_PUSH: 数据分片 \n  * IKCP_CMD_ACK: ack分片  \n  * IKCP_CMD_WASK: 请求告知窗口大小 \n  * IKCP_CMD_WINS: 告知窗口大小 \n\n* frag 8bit 1Byte   \n  > 用户数据可能会被分成多个KCP包发送 frag标识segment分片ID（在message中的索引 由大到小 0表示最后一个分片） \n\n* wnd 16bit 2Byte   \n  > 剩余接收窗口大小（接收窗口大小-接收队列大小） 发送方的发送窗口不能超过接收方给出的数值 \n\n* ts 32bit 4Byte   \n  > message发送时刻的时间戳\n\n* sn 32bit 4Byte   \n  > message分片segment的序号 按1累次递增 \n\n* una 32bit 4Byte   \n  > 待接收消息序号(接收滑动窗口左端) 对于未丢包的网络来说 una是下一个可接收的序号 如收到sn=10的包 una为11 \n\n* len 32bit 4Byte   \n  > 数据长度 \n\n\n* resendts   \n  > 下次超时重传的时间戳 \n\n* rto  \n  > 该分片的超时重传等待时间 其计算方法同TCP \n\n* fastack   \n  > 收到ack时计算的该分片被跳过的累计次数 此字段用于快速重传 自定义需要几次确认开始快速重传 \n\n* xmit   \n  > 发送分片的次数 每发送一次加一 发送的次数对RTO的计算有影响 但是比TCP来说 影响会小一些 计算思想类似\n\n\n\n## IKCPCB结构    \n``` C++\nstruct IKCPCB\n{\n\tIUINT32 conv, mtu, mss, state;\n\tIUINT32 snd_una, snd_nxt, rcv_nxt;\n\tIUINT32 ts_recent, ts_lastack, ssthresh;\n\tIINT32 rx_rttval, rx_srtt, rx_rto, rx_minrto;\n\tIUINT32 snd_wnd, rcv_wnd, rmt_wnd, cwnd, probe;\n\tIUINT32 current, interval, ts_flush, xmit;\n\tIUINT32 nrcv_buf, nsnd_buf;\n\tIUINT32 nrcv_que, nsnd_que;\n\tIUINT32 nodelay, updated;\n\tIUINT32 ts_probe, probe_wait;\n\tIUINT32 dead_link, incr;\n\tstruct IQUEUEHEAD snd_queue;\n\tstruct IQUEUEHEAD rcv_queue;\n\tstruct IQUEUEHEAD snd_buf;\n\tstruct IQUEUEHEAD rcv_buf;\n\tIUINT32 *acklist;\n\tIUINT32 ackcount;\n\tIUINT32 ackblock;\n\tvoid *user;\n\tchar *buffer;\n\tint fastresend;\n\tint fastlimit;\n\tint nocwnd, stream;\n\tint logmask;\n\tint (*output)(const char *buf, int len, struct IKCPCB *kcp, void *user);\n\tvoid (*writelog)(const char *log, struct IKCPCB *kcp, void *user);\n};\n```  \n\nIKCPCB是KCP中最重要的结构 也是在会话开始就创建的对象 代表着这次会话  \n\n* conv: 标识这个会话 \n* mtu: 最大传输单元 默认数据为1400 最小为50 \n* mss: 最大分片大小 不大于mtu \n* state: 连接状态（0xFFFFFFFF表示断开连接） \n* snd_una: 第一个未确认的包 \n* snd_nxt: 下一个待分配的包的序号 \n* rcv_nxt: 待接收消息序号 为了保证包的顺序 接收方会维护一个接收窗口 接收窗口有一个起始序号rcv_nxt（待接收消息序号）以及尾序号 * rcv_nxt + rcv_wnd（接收窗口大小） \n* ssthresh: 拥塞窗口阈值 以包为单位（TCP以字节为单位） \n* rx_rttval: RTT的变化量 代表连接的抖动情况 \n* rx_srtt: smoothed round trip time 平滑后的RTT \n* rx_rto: 由ACK接收延迟计算出来的重传超时时间 \n* rx_minrto: 最小重传超时时间 \n* snd_wnd: 发送窗口大小 \n* rcv_wnd: 接收窗口大小 \n* rmt_wnd: 远端接收窗口大小 \n* cwnd: 拥塞窗口大小 \n* probe: 探查变量 IKCP_ASK_TELL表示告知远端窗口大小 IKCP_ASK_SEND表示请求远端告知窗口大小 \n* interval: 内部flush刷新间隔 对系统循环效率有非常重要影响 \n* ts_flush: 下次flush刷新时间戳 \n* xmit: 发送segment的次数 当segment的xmit增加时 xmit增加（第一次或重传除外） \n* rcv_buf: 接收消息的缓存 \n* nrcv_buf: 接收缓存中消息数量 \n* snd_buf: 发送消息的缓存 \n* nsnd_buf: 发送缓存中消息数量 \n* rcv_queue: 接收消息的队列\n* nrcv_que: 接收队列中消息数量 \n* snd_queue: 发送消息的队列 \n* nsnd_que: 发送队列中消息数量 \n* nodelay: 是否启动无延迟模式 无延迟模式rtomin将设置为0 拥塞控制不启动 \n* updated: 是否调用过update函数的标识 \n* ts_probe: 下次探查窗口的时间戳 \n* probe_wait: 探查窗口需要等待的时间     \n* dead_link: 最大重传次数 被认为连接中断 \n* incr: 可发送的最大数据量 \n* acklist: 待发送的ack列表 \n* ackcount: acklist中ack的数量 每个ack在acklist中存储ts sn两个量 \n* ackblock: 2的倍数 标识acklist最大可容纳的ack数量 \n* user: 指针 可以任意放置代表用户的数据 也可以设置程序中需要传递的变量 \n* buffer: 存储消息字节流 \n* fastresend: 触发快速重传的重复ACK个数 \n* nocwnd: 取消拥塞控制 \n* stream: 是否采用流传输模式 \n* logmask: 日志的类型 如IKCP_LOG_IN_DATA 方便调试 \n* output udp: 发送消息的回调函数 \n* writelog: 写日志的回调函数 \n\n\n\n## 基本使用\n\n1. 创建 KCP对象：\n\n   ```cpp\n   // 初始化 kcp对象 conv为一个表示会话编号的整数 和tcp的 conv一样 通信双\n   // 方需保证 conv相同 相互的数据包才能够被认可 user是一个给回调函数的指针\n   ikcpcb *kcp = ikcp_create(conv, user);\n   ```\n\n2. 设置回调函数：\n\n   ```cpp\n   // KCP的下层协议输出函数 KCP需要发送数据时会调用它\n   // buf/len 表示缓存和长度\n   // user指针为 kcp对象创建时传入的值 用于区别多个 KCP对象\n   int udp_output(const char *buf, int len, ikcpcb *kcp, void *user)\n   {\n     ....\n   }\n   // 设置回调函数\n   kcp->output = udp_output;\n   ```\n\n3. 循环调用 update：\n\n   ```cpp\n   // 以一定频率调用 ikcp_update来更新 kcp状态 并且传入当前时钟（毫秒单位）\n   // 如 10ms调用一次 或用 ikcp_check确定下次调用 update的时间不必每次调用\n   ikcp_update(kcp, millisec);\n   ```\n\n4. 输入一个下层数据包：\n\n   ```cpp\n   // 收到一个下层数据包（比如UDP包）时需要调用：\n   ikcp_input(kcp, received_udp_packet, received_udp_size);\n   ```\n   处理了下层协议的输出/输入后 KCP协议就可以正常工作了   \n   使用 ikcp_send 来向远端发送数据    \n   另一端使用 ikcp_recv(kcp, ptr, size)来接收数据   \n\n\n## 协议配置\n\n协议默认模式是一个标准的 ARQ 需要通过配置打开各项加速开关：\n\n1. 工作模式：\n   ```cpp\n   int ikcp_nodelay(ikcpcb *kcp, int nodelay, int interval, int resend, int nc)\n   ```\n\n   - nodelay ：是否启用 nodelay模式 0不启用；1启用 \n   - interval ：协议内部工作的 interval 单位毫秒 比如 10ms或者 20ms\n   - resend ：快速重传模式 默认0关闭 可以设置2（2次ACK跨越将会直接重传）\n   - nc ：是否关闭流控 默认是0代表不关闭 1代表关闭 \n   - 普通模式： ikcp_nodelay(kcp, 0, 40, 0, 0);\n   - 极速模式： ikcp_nodelay(kcp, 1, 10, 2, 1);\n\n2. 最大窗口：\n   ```cpp\n   int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);\n   ```\n   该调用将会设置协议的最大发送窗口和最大接收窗口大小 默认为32. 这个可以理解为 TCP的 SND_BUF 和 RCV_BUF 只不过单位不一样 SND/RCV_BUF 单位是字节 这个单位是包 \n\n3. 最大传输单元：\n\n   纯算法协议并不负责探测 MTU 默认 mtu是1400字节 可以使用ikcp_setmtu来设置该值 该值将会影响数据包归并及分片时候的最大传输单元 \n\n4. 最小RTO：\n\n   不管是 TCP还是 KCP计算 RTO时都有最小 RTO的限制 即便计算出来RTO为40ms 由于默认的 RTO是100ms 协议只有在100ms后才能检测到丢包 快速模式下为30ms 可以手动更改该值：\n   ```cpp\n   kcp->rx_minrto = 10;\n   ```\n\n\n\n## 其他文档索引\n\n协议的使用和配置都是很简单的 大部分情况看完上面的内容基本可以使用了 如果你需要进一步进行精细的控制 比如改变 KCP的内存分配器 或者你需要更有效的大规模调度 KCP链接（比如 3500个以上） 或者如何更好的同 TCP结合 那么可以继续延伸阅读：\n\n- [Wiki Home](https://github.com/skywind3000/kcp/wiki)\n- [KCP 最佳实践](https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice)\n- [同现有TCP服务器集成](https://github.com/skywind3000/kcp/wiki/Cooperate-With-Tcp-Server)\n- [传输数据加密](https://github.com/skywind3000/kcp/wiki/Network-Encryption)\n- [应用层流量控制](https://github.com/skywind3000/kcp/wiki/Flow-Control-for-Users)\n- [性能评测](https://github.com/skywind3000/kcp/wiki/KCP-Benchmark)\n\n\n\n\n\n\n\n# 避免缓存积累延迟\n\n不管使用 TCP 还是 KCP，你都不可能超越信道限制的发送数据。TCP 的发送窗口 SNDBUF 决定了最多可以同时发送多少数据，KCP的也一样。\n\n当前发送且没有得到 ACK/UNA确认的数据，都会滞留在发送缓存中，一旦滞留数据超过了发送窗口大小限制，则该链接的 tcp send 调用将会\n被阻塞，或者返回：EAGAIN / EWOULDBLOCK，这时候说明当前 tcp 信道可用带宽已经赶不上你的发送速度了。\n\n```\n可用带宽 = min(本地可用发送窗口大小，远端可用接收窗口大小) * (1 - 丢包率) / RTT\n```\n\n当你持续调用 ikcp_send，首先会填满kcp的 snd_buf，如果 snd_buf 的大小超过发送窗口 snd_wnd 限制，则会停止向 snd_buf 里追加\n数据包，只会放在 snd_queue 里面滞留着，等待 snd_buf 有新位置了（因为收到远端 ack/una而将历史包从 snd_buf中移除），才会从\nsnd_queue 转移到 snd_buf，等待发送。\n\nTCP发送窗口满了不能发送了，会给你阻塞住或者 EAGAIN/EWOULDBLOCK；KCP发送窗口满了，ikcp_send 并不会给你返回 -1，而是让数据滞留\n在 snd_queue 里等待有能力时再发送。\n\n因此，千万不要以为 ikcp_send 可以无节制的调用，为什么 KCP在发送窗口满的时候不返回错误呢？这个问题当年设计时权衡过，如果返回希望发送时返回错误的 EAGAIN/EWOULDBLOCK 你势必外层还需要建立一个缓存，等到下次再测试是否可以 send。那么还不如 kcp直接把这一层缓存做了，让上层更简单些，而且具体要如何处理 EAGAIN，可以让上层通过检测 ikcp_waitsnd 函数来判断还有多少包没有发出去，灵活抉择是否向 snd_queue 缓存追加数据包还是其他。\n\n## 重设窗口大小\n\n要解决上面的问题首先对你的使用带宽有一个预计，并根据上面的公式重新设置发送窗口和接收窗口大小，你写后端，想追求tcp的性能，也会需要重新设置tcp的 sndbuf, rcvbuf 的大小，KCP 默认发送窗口和接收窗口大小都比较小而已（默认32个包），你可以朝着 64, 128, 256, 512, 1024 等档次往上调，kcptun默认发送窗口 1024，用来传高清视频已经足够，游戏的话，32-256 应该满足。\n\n不设置的话，如果默认 snd_wnd 太小，网络不是那么顺畅，你越来越多的数据会滞留在 snd_queue里得不到发送，你的延迟会越来越大。\n\n设定了 snd_wnd，远端的 rcv_wnd 也需要相应扩大，并且不小于发送端的 snd_wnd 大小，否则设置没意义。\n\n其次对于成熟的后端业务，不管用 TCP还是 KCP，你都需要实现相关缓存控制策略：\n\n## 缓存控制：传送文件\n\n你用 tcp传文件的话，当网络没能力了，你的 send调用要不就是阻塞掉，要不就是 EAGAIN，然后需要通过 epoll 检查 EPOLL_OUT事件来决定下次什么时候可以继续发送。\n\nKCP 也一样，如果 ikcp_waitsnd 超过阈值，比如2倍 snd_wnd，那么停止调用 ikcp_send，ikcp_waitsnd的值降下来，当然期间要保持 ikcp_update 调用。\n\n## 缓存控制：实时视频直播\n\n视频点播和传文件一样，而视频直播，一旦 ikcp_waitsnd 超过阈值了，除了不再往 kcp 里发送新的数据包，你的视频应该进入一个 “丢帧” 状态，直到 ikcp_waitsnd 降低到阈值的 1/2，这样你的视频才不会有积累延迟。\n\n这和使用 TCP推流时碰到 EAGAIN 期间，要主动丢帧的逻辑时一样的。\n\n同时，如果你能做的更好点，waitsnd 超过阈值了，代表一段时间内网络传输能力下降了，此时你应该动态降低视频质量，减少码率，等网络恢复了你再恢复。\n\n## 缓存控制：游戏控制数据\n\n大部分逻辑严密的 TCP游戏服务器，都是使用无阻塞的 tcp链接配套个 epoll之类的东西，当后端业务向用户发送数据时会追加到用户空间的一块发送缓存，比如 ring buffer 之类，当 epoll 到 EPOLL_OUT 事件时（其实也就是tcp发送缓存有空余了，不会EAGAIN/EWOULDBLOCK的时候），再把 ring buffer 里面暂存的数据使用 send 传递给系统的 SNDBUF，直到再次 EAGAIN。\n\n那么 TCP SERVER的后端业务持续向客户端发送数据，而客户端又迟迟没能力接收怎么办呢？此时 epoll 会长期不返回 EPOLL_OUT事件，数据会堆积再该用户的 ring buffer 之中，如果堆积越来越多，ring buffer 会自增长的话就会把 server 的内存给耗尽。因此成熟的 tcp 游戏服务器的做法是：当客户端应用层发送缓存（非tcp的sndbuf）中待发送数据超过一定阈值，就断开 TCP链接，因为该用户没有接收能力了，无法持续接收游戏数据。\n\n使用 KCP 发送游戏数据也一样，当 ikcp_waitsnd 返回值超过一定限度时，你应该断开远端链接，因为他们没有能力接收了。\n\n但是需要注意的是，KCP的默认窗口都是32，比tcp的默认窗口低很多，实际使用时应提前调大窗口，但是为了公平性也不要无止尽放大（不要超过1024）。\n\n\n## 总结\n\n缓存积累这个问题，不管是 TCP还是 KCP你都要处理，因为TCP默认窗口比较大，因此可能很多人并没有处理的意识。\n\n当你碰到缓存延迟时：\n\n1. 检查 snd_wnd, rcv_wnd 的值是否满足你的要求，根据上面的公式换算，每秒钟要发多少包，当前 snd_wnd满足条件么？\n2. 确认打开了 ikcp_nodelay，让各项加速特性得以运转，并确认 nc参数是否设置，以关闭默认的类 tcp保守流控方式。\n3. 确认 ikcp_update 调用频率是否满足要求（比如10ms一次）。\n\n如果你还想更激进：\n\n1. 确认 minrto 是否设置，比如设置成 10ms, nodelay 只是设置成 30ms，更激进可以设置成 10ms 或者 5ms。\n2. 确认 interval是否设置，可以更激进的设置成 5ms，让内部始终循环更快。\n3. 每次发送完数据包后，手动调用 ikcp_flush\n4. 降低 mtu 到 470，同样数据虽然会发更多的包，但是小包在路由层优先级更高。\n\n如果你还想更快，可以在 KCP下层增加前向纠错协议。详细见：[协议分层](https://github.com/skywind3000/kcp/wiki/Network-Layer)，[最佳实践](https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice)。\n\n更多见讨论记录：\n\n[https://github.com/skywind3000/kcp/issues/4](https://github.com/skywind3000/kcp/issues/4)\n\n[https://github.com/skywind3000/kcp/issues/93](https://github.com/skywind3000/kcp/issues/93)\n\n## 部分讨论记录: \n\n> 50%+75%的丢包率实在是太高了，信道几乎不可用了。因为高丢包，RTO会变的很大，这些行为和TCP也都是一致的，tcp在35%丢包时就断线了，没法工作了。其实处理“当前网络无法发送更多数据”这种事情，是上层传输逻辑的一个很重要的逻辑，不管下面是tcp还是kcp，再我们用kcp传送语音和视频，都会碰到网络震荡，这时候，语音或者视频一旦发现ikcp_waitsnd 的数据超过一个阀值就开始跳帧，不再传送新数据出去，直到网络恢复，或者超时不恢复就断线重连了。这是一个参考处理方法。还有一个参考处理方法就是给上层返回 EAGAIN，和TCP的方式一样，让用户去解决去。\n\n> 当你需要发送“超过信道容量”的数据时，由易到烦，有三个处理方法。  \n\n1. int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);\n    > 扩大发送窗口和接收窗口，比如设置为64，相当于tcp的，SNDBUF, RCVBUF   \n\n2. 连接管理层（即kcp的上一层管理连接，用于衔接用户和kcp的控制类），每次调用kcp_send前检查ikcp_waitsnd是否超过阀值，超过的话，不要调用kcp_send了，直接给用户 EAGAIN，和tcp行为保持一直。  \n  \n3. 数据传送层（处理kcp->output, 临近udp的那一层），发现丢包超过20%时，启动FEC，每发送三个包，紧跟一个冗余包（冗余包=P1 xor P2 xor P3），即3:1的冗余，如果丢包率上升，继续调整为2:1的冗余，发现一个包丢失的话，使用同组其他包xor后恢复出来，让传输层来负担一部分减少丢包率的任务。  \n   \n> 理论上来讲，方法3在大多数情况下很有效果，但是如果你真的达到了信道的物理带宽上限，那么增加冗余包只会进一步增加丢包率。方法1和3都是缓解，归根结底是需要处理“每秒待发数据超过信道容量”这个问题，不管下层是tcp还是kcp，这个问题都必须要仔细处理。\n\n\n##  丢包率和FEC   \n\n* 冗余量考虑: \n  平均所需:  \n  $Sum[0.1^i, {i, 1, infinite}]$   \n  $\\displaystyle \\sum^{infty}_{i = 1}{i^k}$     \n  > i=0.1  sum=0.11111111   \n  > i=0.35 sum=0.538462  \n  > i=0.5  sum=1  \n  > i=0.7  sum=2.33333   \n  > i=0.9  sum=9   \n\n  考虑到连续丢包概率 例如丢包率50%, 则至少需要平均1倍的包量\n\n* 恢复能力考虑(延迟):  \n  丢失1个包可以在下一个包恢复  * 2  \n  丢失1个包可以在收到下N个包全部收到后恢复 * 2\n  丢失1个包可以在任意后续两个包恢复 * 3\n\n\n\n","slug":"2022_08_04_kcp_knowledge","published":1,"date":"2024-06-19T03:57:50.052Z","updated":"2022-07-26T12:32:00.413Z","title":"2022_08_04_kcp_knowledge","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9hh0005442mdvz50zsd","content":"<h1><span id=\"kcp协议栈\">KCP协议栈</span></h1><h2><span id=\"简介\">简介</span></h2><p>KCP是一个纯粹的ARQ协议 通过重传机制实现UDP数据包的可靠传输   </p>\n<ul>\n<li><p>以比 TCP浪费10%-20%的带宽的代价 换取平均延迟降低 30%-40% 且最大延迟降低三倍的传输效果</p>\n</li>\n<li><p>纯算法实现 并不负责底层协议 (如UDP)的收发 </p>\n</li>\n<li><p>需要使用者自己定义下层数据包的发送方式 以 callback的方式提供给 KCP</p>\n</li>\n<li><p>连时钟都需要外部传递进来 内部不会有任何一次系统调用   </p>\n</li>\n<li><p>协议栈位置   </p>\n<table>\n<thead>\n<tr>\n<th>协议栈位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SESSION</td>\n</tr>\n<tr>\n<td>KCP(ARG)</td>\n</tr>\n<tr>\n<td>UDP(PACKET)</td>\n</tr>\n<tr>\n<td>IP</td>\n</tr>\n<tr>\n<td>LINK</td>\n</tr>\n<tr>\n<td>PHY</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2><span id=\"协议栈基础特性\">协议栈基础特性</span></h2><p>TCP是为流量设计的 (每秒内可以传输多少KB的数据) 讲究的是充分利用带宽<br>KCP是为流速设计的 (单个数据包从一端发送到一端需要多少时间) 以10%-20%带宽浪费的代价换取了比 TCP快30%-40%的传输速度 </p>\n<p>TCP信道是一条流速很慢 但每秒流量很大的大运河<br>而KCP是水流湍急的小激流 KCP有正常模式和快速模式两种 通过以下策略达到提高流速的结果:  </p>\n<ul>\n<li><p><strong>RTO翻倍vs不翻倍:</strong>  </p>\n<blockquote>\n<p>TCP超时计算是RTOx2 这样连续丢三次包就变成RTOx8了 十分恐怖 而KCP启动快速模式后不x2 只是x1.5 (实验证明1.5这个值相对比较好) 提高了传输速度  </p>\n</blockquote>\n</li>\n<li><p><strong>选择性重传 vs 全部重传:</strong>  </p>\n<blockquote>\n<p>TCP丢包时会全部重传从丢的那个包开始以后的数据 KCP是选择性重传 只重传真正丢失的数据包  (TCP同样有选择重传SACK 但有区别) </p>\n</blockquote>\n</li>\n<li><p><strong>快速重传:</strong>  </p>\n<blockquote>\n<p>发送端发送了1 2 3 4 5几个包 然后收到远端的ACK: 1 3 4 5 当收到ACK3时 KCP知道2被跳过1次 收到ACK4时 知道2被跳过了2次 此时可以认为2号丢失 不用等超时 直接重传2号包 大大改善了丢包时的传输速度<br>kcp实现是单独发送每个ACK信令 而TCP会合并  </p>\n</blockquote>\n</li>\n<li><p><strong>延迟ACK vs 非延迟ACK:</strong>  </p>\n<blockquote>\n<p>TCP为了充分利用带宽 延迟发送ACK (NODELAY都没用) 这样超时计算会算出较大 RTT时间 延长了丢包时的判断过程 KCP的ACK是否延迟发送可以调节 </p>\n</blockquote>\n</li>\n<li><p><strong>UNA vs ACK+UNA:</strong>  </p>\n<blockquote>\n<p>ARQ模型响应有两种 UNA (此编号前所有包已收到 如TCP)和ACK (该编号包已收到) 光用UNA将导致全部重传 光用ACK则丢失成本太高 以往协议都是二选其一 而 KCP协议中 除去单独的 ACK包外 所有包都有UNA信息 </p>\n</blockquote>\n</li>\n<li><p><strong>非退让流控:</strong>  </p>\n<blockquote>\n<p>KCP正常模式同TCP一样使用公平退让法则 即发送窗口大小由:  发送缓存大小、接收端剩余接收缓存大小、丢包退让及慢启动这四要素决定 但传送及时性要求很高的小数据时 可选择通过配置跳过后两步 仅用前两项来控制发送频率 以牺牲部分公平性及带宽利用率之代价 换取了开着BT都能流畅传输的效果</p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"基础流程\">基础流程</span></h2><p>单纯的ARQ在实际使用中并不能满足所有的网络场景 特别是网络拥塞时 大量的重传会导致更多的丢包<br>增加FEC是一个明智的选择 在KCP协议中 也并不排斥在KCP上增加FEC<br>但是需要注意的是 FEC加重传可能导致数据包的时延与抖动 同时 如果FEC解码得到的包经由重传或者网络延迟到达 需要在应用层进行检测 避免大量重复包影响KCP的传输效率  </p>\n<p>流程图见rp文件  </p>\n<p>KCP通过ikcp_create 创建一个KCP对象<br>每个不同的会话将产生不同的对象<br>因为KCP协议本身并没有提供网络部分的代码 所以需要将UDP发送函数的回调设置到KCP中 在有需要时 调用回调函数即可  </p>\n<p>KCP也支持外部的内存分配与日志回调 为用户提供了非常充分的自由度    </p>\n<p>整个KCP协议主要依靠一个循环ikcp_update来驱动整个算法的运转 所有的数据发送 接收 状态变化都依赖于此 所以如果有操作占用每一次update的周期过长 或者设置内部刷新的时间间隔过大 都会导致整个算法的效率降低 在ikcp_update中最终调用的是ikcp_flush 这是协议中的一个核心函数 将数据 确认包 以及窗口探测和应答发送到对端    </p>\n<p>KCP使用 ikcp_send 发送数据 该函数调用ikcp_output发送数据 实际上最终调用事先注册的发送回调发送数据<br>KCP通过 ikcp_recv 将数据接收出来 如果被分片发送 将在此自动重组 数据将与发送前保持一致   </p>\n<h2><span id=\"数据结构\">数据结构</span></h2><p>基本结构如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0               4   5   6       8 (BYTE)</span><br><span class=\"line\">+---------------+---+---+-------+</span><br><span class=\"line\">|     conv      |cmd|frg|  wnd  |</span><br><span class=\"line\">+---------------+---+---+-------+   8</span><br><span class=\"line\">|     ts        |     sn        |</span><br><span class=\"line\">+---------------+---------------+  16</span><br><span class=\"line\">|     una       |     len       |</span><br><span class=\"line\">+---------------+---------------+  24</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|        DATA (optional)        |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">&#96;&#96;&#96;   </span><br><span class=\"line\"></span><br><span class=\"line\">code:   </span><br><span class=\"line\">&#96;&#96;&#96; C++ </span><br><span class=\"line\">struct IKCPSEG</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstruct IQUEUEHEAD node;</span><br><span class=\"line\">\tIUINT32 conv;</span><br><span class=\"line\">\tIUINT32 cmd;</span><br><span class=\"line\">\tIUINT32 frg;</span><br><span class=\"line\">\tIUINT32 wnd;</span><br><span class=\"line\">\tIUINT32 ts;</span><br><span class=\"line\">\tIUINT32 sn;</span><br><span class=\"line\">\tIUINT32 una;</span><br><span class=\"line\">\tIUINT32 len;</span><br><span class=\"line\">\tIUINT32 resendts;</span><br><span class=\"line\">\tIUINT32 rto;</span><br><span class=\"line\">\tIUINT32 fastack;</span><br><span class=\"line\">\tIUINT32 xmit;</span><br><span class=\"line\">\tchar data[1];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>Conv: 32bit 4Byte  </p>\n<blockquote>\n<p>为一个表示会话编号的整数 和TCP的 conv 一样 通信双方需保证 conv 相同 相互的数据包才能够被接受<br>conv 唯一标识一个会话 但通信双方可以同时存在多个会话   </p>\n</blockquote>\n</li>\n<li><p>cmd 8bit 1Byte<br> 用来区分分片的作用 </p>\n<ul>\n<li>IKCP_CMD_PUSH: 数据分片 </li>\n<li>IKCP_CMD_ACK: ack分片  </li>\n<li>IKCP_CMD_WASK: 请求告知窗口大小 </li>\n<li>IKCP_CMD_WINS: 告知窗口大小 </li>\n</ul>\n</li>\n<li><p>frag 8bit 1Byte   </p>\n<blockquote>\n<p>用户数据可能会被分成多个KCP包发送 frag标识segment分片ID（在message中的索引 由大到小 0表示最后一个分片） </p>\n</blockquote>\n</li>\n<li><p>wnd 16bit 2Byte   </p>\n<blockquote>\n<p>剩余接收窗口大小（接收窗口大小-接收队列大小） 发送方的发送窗口不能超过接收方给出的数值 </p>\n</blockquote>\n</li>\n<li><p>ts 32bit 4Byte   </p>\n<blockquote>\n<p>message发送时刻的时间戳</p>\n</blockquote>\n</li>\n<li><p>sn 32bit 4Byte   </p>\n<blockquote>\n<p>message分片segment的序号 按1累次递增 </p>\n</blockquote>\n</li>\n<li><p>una 32bit 4Byte   </p>\n<blockquote>\n<p>待接收消息序号(接收滑动窗口左端) 对于未丢包的网络来说 una是下一个可接收的序号 如收到sn=10的包 una为11 </p>\n</blockquote>\n</li>\n<li><p>len 32bit 4Byte   </p>\n<blockquote>\n<p>数据长度 </p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>resendts   </p>\n<blockquote>\n<p>下次超时重传的时间戳 </p>\n</blockquote>\n</li>\n<li><p>rto  </p>\n<blockquote>\n<p>该分片的超时重传等待时间 其计算方法同TCP </p>\n</blockquote>\n</li>\n<li><p>fastack   </p>\n<blockquote>\n<p>收到ack时计算的该分片被跳过的累计次数 此字段用于快速重传 自定义需要几次确认开始快速重传 </p>\n</blockquote>\n</li>\n<li><p>xmit   </p>\n<blockquote>\n<p>发送分片的次数 每发送一次加一 发送的次数对RTO的计算有影响 但是比TCP来说 影响会小一些 计算思想类似</p>\n</blockquote>\n</li>\n</ul>\n<h2><span id=\"ikcpcb结构\">IKCPCB结构</span></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IKCPCB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tIUINT32 conv, mtu, mss, state;</span><br><span class=\"line\">\tIUINT32 snd_una, snd_nxt, rcv_nxt;</span><br><span class=\"line\">\tIUINT32 ts_recent, ts_lastack, ssthresh;</span><br><span class=\"line\">\tIINT32 rx_rttval, rx_srtt, rx_rto, rx_minrto;</span><br><span class=\"line\">\tIUINT32 snd_wnd, rcv_wnd, rmt_wnd, cwnd, probe;</span><br><span class=\"line\">\tIUINT32 current, interval, ts_flush, xmit;</span><br><span class=\"line\">\tIUINT32 nrcv_buf, nsnd_buf;</span><br><span class=\"line\">\tIUINT32 nrcv_que, nsnd_que;</span><br><span class=\"line\">\tIUINT32 nodelay, updated;</span><br><span class=\"line\">\tIUINT32 ts_probe, probe_wait;</span><br><span class=\"line\">\tIUINT32 dead_link, incr;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">snd_queue</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">rcv_queue</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">snd_buf</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">rcv_buf</span>;</span></span><br><span class=\"line\">\tIUINT32 *acklist;</span><br><span class=\"line\">\tIUINT32 ackcount;</span><br><span class=\"line\">\tIUINT32 ackblock;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *user;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *<span class=\"built_in\">buffer</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fastresend;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fastlimit;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nocwnd, stream;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> logmask;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*output)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> len, struct IKCPCB *kcp, <span class=\"keyword\">void</span> *user);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*writelog)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"built_in\">log</span>, struct IKCPCB *kcp, <span class=\"keyword\">void</span> *user);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">IKCPCB是KCP中最重要的结构 也是在会话开始就创建的对象 代表着这次会话  </span><br><span class=\"line\"></span><br><span class=\"line\">* conv: 标识这个会话 </span><br><span class=\"line\">* mtu: 最大传输单元 默认数据为<span class=\"number\">1400</span> 最小为<span class=\"number\">50</span> </span><br><span class=\"line\">* mss: 最大分片大小 不大于mtu </span><br><span class=\"line\">* state: 连接状态（<span class=\"number\">0xFFFFFFFF</span>表示断开连接） </span><br><span class=\"line\">* snd_una: 第一个未确认的包 </span><br><span class=\"line\">* snd_nxt: 下一个待分配的包的序号 </span><br><span class=\"line\">* rcv_nxt: 待接收消息序号 为了保证包的顺序 接收方会维护一个接收窗口 接收窗口有一个起始序号rcv_nxt（待接收消息序号）以及尾序号 * rcv_nxt + rcv_wnd（接收窗口大小） </span><br><span class=\"line\">* ssthresh: 拥塞窗口阈值 以包为单位（TCP以字节为单位） </span><br><span class=\"line\">* rx_rttval: RTT的变化量 代表连接的抖动情况 </span><br><span class=\"line\">* rx_srtt: smoothed round trip time 平滑后的RTT </span><br><span class=\"line\">* rx_rto: 由ACK接收延迟计算出来的重传超时时间 </span><br><span class=\"line\">* rx_minrto: 最小重传超时时间 </span><br><span class=\"line\">* snd_wnd: 发送窗口大小 </span><br><span class=\"line\">* rcv_wnd: 接收窗口大小 </span><br><span class=\"line\">* rmt_wnd: 远端接收窗口大小 </span><br><span class=\"line\">* cwnd: 拥塞窗口大小 </span><br><span class=\"line\">* probe: 探查变量 IKCP_ASK_TELL表示告知远端窗口大小 IKCP_ASK_SEND表示请求远端告知窗口大小 </span><br><span class=\"line\">* interval: 内部<span class=\"built_in\">flush</span>刷新间隔 对系统循环效率有非常重要影响 </span><br><span class=\"line\">* ts_flush: 下次<span class=\"built_in\">flush</span>刷新时间戳 </span><br><span class=\"line\">* xmit: 发送segment的次数 当segment的xmit增加时 xmit增加（第一次或重传除外） </span><br><span class=\"line\">* rcv_buf: 接收消息的缓存 </span><br><span class=\"line\">* nrcv_buf: 接收缓存中消息数量 </span><br><span class=\"line\">* snd_buf: 发送消息的缓存 </span><br><span class=\"line\">* nsnd_buf: 发送缓存中消息数量 </span><br><span class=\"line\">* rcv_queue: 接收消息的队列</span><br><span class=\"line\">* nrcv_que: 接收队列中消息数量 </span><br><span class=\"line\">* snd_queue: 发送消息的队列 </span><br><span class=\"line\">* nsnd_que: 发送队列中消息数量 </span><br><span class=\"line\">* nodelay: 是否启动无延迟模式 无延迟模式rtomin将设置为<span class=\"number\">0</span> 拥塞控制不启动 </span><br><span class=\"line\">* updated: 是否调用过update函数的标识 </span><br><span class=\"line\">* ts_probe: 下次探查窗口的时间戳 </span><br><span class=\"line\">* probe_wait: 探查窗口需要等待的时间     </span><br><span class=\"line\">* dead_link: 最大重传次数 被认为连接中断 </span><br><span class=\"line\">* incr: 可发送的最大数据量 </span><br><span class=\"line\">* acklist: 待发送的ack列表 </span><br><span class=\"line\">* ackcount: acklist中ack的数量 每个ack在acklist中存储ts sn两个量 </span><br><span class=\"line\">* ackblock: <span class=\"number\">2</span>的倍数 标识acklist最大可容纳的ack数量 </span><br><span class=\"line\">* user: 指针 可以任意放置代表用户的数据 也可以设置程序中需要传递的变量 </span><br><span class=\"line\">* <span class=\"built_in\">buffer</span>: 存储消息字节流 </span><br><span class=\"line\">* fastresend: 触发快速重传的重复ACK个数 </span><br><span class=\"line\">* nocwnd: 取消拥塞控制 </span><br><span class=\"line\">* stream: 是否采用流传输模式 </span><br><span class=\"line\">* logmask: 日志的类型 如IKCP_LOG_IN_DATA 方便调试 </span><br><span class=\"line\">* output udp: 发送消息的回调函数 </span><br><span class=\"line\">* writelog: 写日志的回调函数 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 基本使用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 创建 KCP对象：</span><br><span class=\"line\"></span><br><span class=\"line\">   ```cpp</span><br><span class=\"line\">   <span class=\"comment\">// 初始化 kcp对象 conv为一个表示会话编号的整数 和tcp的 conv一样 通信双</span></span><br><span class=\"line\">   <span class=\"comment\">// 方需保证 conv相同 相互的数据包才能够被认可 user是一个给回调函数的指针</span></span><br><span class=\"line\">   ikcpcb *kcp = ikcp_create(conv, user);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>设置回调函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// KCP的下层协议输出函数 KCP需要发送数据时会调用它</span></span><br><span class=\"line\"><span class=\"comment\">// buf/len 表示缓存和长度</span></span><br><span class=\"line\"><span class=\"comment\">// user指针为 kcp对象创建时传入的值 用于区别多个 KCP对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">udp_output</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> len, ikcpcb *kcp, <span class=\"keyword\">void</span> *user)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置回调函数</span></span><br><span class=\"line\">kcp-&gt;output = udp_output;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环调用 update：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以一定频率调用 ikcp_update来更新 kcp状态 并且传入当前时钟（毫秒单位）</span></span><br><span class=\"line\"><span class=\"comment\">// 如 10ms调用一次 或用 ikcp_check确定下次调用 update的时间不必每次调用</span></span><br><span class=\"line\">ikcp_update(kcp, millisec);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入一个下层数据包：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 收到一个下层数据包（比如UDP包）时需要调用：</span></span><br><span class=\"line\">ikcp_input(kcp, received_udp_packet, received_udp_size);</span><br></pre></td></tr></table></figure>\n<p>处理了下层协议的输出/输入后 KCP协议就可以正常工作了<br>使用 ikcp_send 来向远端发送数据<br>另一端使用 ikcp_recv(kcp, ptr, size)来接收数据   </p>\n</li>\n</ol>\n<h2><span id=\"协议配置\">协议配置</span></h2><p>协议默认模式是一个标准的 ARQ 需要通过配置打开各项加速开关：</p>\n<ol>\n<li><p>工作模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ikcp_nodelay</span><span class=\"params\">(ikcpcb *kcp, <span class=\"keyword\">int</span> nodelay, <span class=\"keyword\">int</span> interval, <span class=\"keyword\">int</span> resend, <span class=\"keyword\">int</span> nc)</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>nodelay ：是否启用 nodelay模式 0不启用；1启用 </li>\n<li>interval ：协议内部工作的 interval 单位毫秒 比如 10ms或者 20ms</li>\n<li>resend ：快速重传模式 默认0关闭 可以设置2（2次ACK跨越将会直接重传）</li>\n<li>nc ：是否关闭流控 默认是0代表不关闭 1代表关闭 </li>\n<li>普通模式： ikcp_nodelay(kcp, 0, 40, 0, 0);</li>\n<li>极速模式： ikcp_nodelay(kcp, 1, 10, 2, 1);</li>\n</ul>\n</li>\n<li><p>最大窗口：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ikcp_wndsize</span><span class=\"params\">(ikcpcb *kcp, <span class=\"keyword\">int</span> sndwnd, <span class=\"keyword\">int</span> rcvwnd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该调用将会设置协议的最大发送窗口和最大接收窗口大小 默认为32. 这个可以理解为 TCP的 SND_BUF 和 RCV_BUF 只不过单位不一样 SND/RCV_BUF 单位是字节 这个单位是包 </p>\n</li>\n<li><p>最大传输单元：</p>\n<p>纯算法协议并不负责探测 MTU 默认 mtu是1400字节 可以使用ikcp_setmtu来设置该值 该值将会影响数据包归并及分片时候的最大传输单元 </p>\n</li>\n<li><p>最小RTO：</p>\n<p>不管是 TCP还是 KCP计算 RTO时都有最小 RTO的限制 即便计算出来RTO为40ms 由于默认的 RTO是100ms 协议只有在100ms后才能检测到丢包 快速模式下为30ms 可以手动更改该值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kcp-&gt;rx_minrto = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2><span id=\"其他文档索引\">其他文档索引</span></h2><p>协议的使用和配置都是很简单的 大部分情况看完上面的内容基本可以使用了 如果你需要进一步进行精细的控制 比如改变 KCP的内存分配器 或者你需要更有效的大规模调度 KCP链接（比如 3500个以上） 或者如何更好的同 TCP结合 那么可以继续延伸阅读：</p>\n<ul>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki\" target=\"_blank\" rel=\"noopener\">Wiki Home</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice\" target=\"_blank\" rel=\"noopener\">KCP 最佳实践</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Cooperate-With-Tcp-Server\" target=\"_blank\" rel=\"noopener\">同现有TCP服务器集成</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Network-Encryption\" target=\"_blank\" rel=\"noopener\">传输数据加密</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Flow-Control-for-Users\" target=\"_blank\" rel=\"noopener\">应用层流量控制</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Benchmark\" target=\"_blank\" rel=\"noopener\">性能评测</a></li>\n</ul>\n<h1><span id=\"避免缓存积累延迟\">避免缓存积累延迟</span></h1><p>不管使用 TCP 还是 KCP，你都不可能超越信道限制的发送数据。TCP 的发送窗口 SNDBUF 决定了最多可以同时发送多少数据，KCP的也一样。</p>\n<p>当前发送且没有得到 ACK/UNA确认的数据，都会滞留在发送缓存中，一旦滞留数据超过了发送窗口大小限制，则该链接的 tcp send 调用将会<br>被阻塞，或者返回：EAGAIN / EWOULDBLOCK，这时候说明当前 tcp 信道可用带宽已经赶不上你的发送速度了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可用带宽 &#x3D; min(本地可用发送窗口大小，远端可用接收窗口大小) * (1 - 丢包率) &#x2F; RTT</span><br></pre></td></tr></table></figure>\n\n<p>当你持续调用 ikcp_send，首先会填满kcp的 snd_buf，如果 snd_buf 的大小超过发送窗口 snd_wnd 限制，则会停止向 snd_buf 里追加<br>数据包，只会放在 snd_queue 里面滞留着，等待 snd_buf 有新位置了（因为收到远端 ack/una而将历史包从 snd_buf中移除），才会从<br>snd_queue 转移到 snd_buf，等待发送。</p>\n<p>TCP发送窗口满了不能发送了，会给你阻塞住或者 EAGAIN/EWOULDBLOCK；KCP发送窗口满了，ikcp_send 并不会给你返回 -1，而是让数据滞留<br>在 snd_queue 里等待有能力时再发送。</p>\n<p>因此，千万不要以为 ikcp_send 可以无节制的调用，为什么 KCP在发送窗口满的时候不返回错误呢？这个问题当年设计时权衡过，如果返回希望发送时返回错误的 EAGAIN/EWOULDBLOCK 你势必外层还需要建立一个缓存，等到下次再测试是否可以 send。那么还不如 kcp直接把这一层缓存做了，让上层更简单些，而且具体要如何处理 EAGAIN，可以让上层通过检测 ikcp_waitsnd 函数来判断还有多少包没有发出去，灵活抉择是否向 snd_queue 缓存追加数据包还是其他。</p>\n<h2><span id=\"重设窗口大小\">重设窗口大小</span></h2><p>要解决上面的问题首先对你的使用带宽有一个预计，并根据上面的公式重新设置发送窗口和接收窗口大小，你写后端，想追求tcp的性能，也会需要重新设置tcp的 sndbuf, rcvbuf 的大小，KCP 默认发送窗口和接收窗口大小都比较小而已（默认32个包），你可以朝着 64, 128, 256, 512, 1024 等档次往上调，kcptun默认发送窗口 1024，用来传高清视频已经足够，游戏的话，32-256 应该满足。</p>\n<p>不设置的话，如果默认 snd_wnd 太小，网络不是那么顺畅，你越来越多的数据会滞留在 snd_queue里得不到发送，你的延迟会越来越大。</p>\n<p>设定了 snd_wnd，远端的 rcv_wnd 也需要相应扩大，并且不小于发送端的 snd_wnd 大小，否则设置没意义。</p>\n<p>其次对于成熟的后端业务，不管用 TCP还是 KCP，你都需要实现相关缓存控制策略：</p>\n<h2><span id=\"缓存控制传送文件\">缓存控制：传送文件</span></h2><p>你用 tcp传文件的话，当网络没能力了，你的 send调用要不就是阻塞掉，要不就是 EAGAIN，然后需要通过 epoll 检查 EPOLL_OUT事件来决定下次什么时候可以继续发送。</p>\n<p>KCP 也一样，如果 ikcp_waitsnd 超过阈值，比如2倍 snd_wnd，那么停止调用 ikcp_send，ikcp_waitsnd的值降下来，当然期间要保持 ikcp_update 调用。</p>\n<h2><span id=\"缓存控制实时视频直播\">缓存控制：实时视频直播</span></h2><p>视频点播和传文件一样，而视频直播，一旦 ikcp_waitsnd 超过阈值了，除了不再往 kcp 里发送新的数据包，你的视频应该进入一个 “丢帧” 状态，直到 ikcp_waitsnd 降低到阈值的 1/2，这样你的视频才不会有积累延迟。</p>\n<p>这和使用 TCP推流时碰到 EAGAIN 期间，要主动丢帧的逻辑时一样的。</p>\n<p>同时，如果你能做的更好点，waitsnd 超过阈值了，代表一段时间内网络传输能力下降了，此时你应该动态降低视频质量，减少码率，等网络恢复了你再恢复。</p>\n<h2><span id=\"缓存控制游戏控制数据\">缓存控制：游戏控制数据</span></h2><p>大部分逻辑严密的 TCP游戏服务器，都是使用无阻塞的 tcp链接配套个 epoll之类的东西，当后端业务向用户发送数据时会追加到用户空间的一块发送缓存，比如 ring buffer 之类，当 epoll 到 EPOLL_OUT 事件时（其实也就是tcp发送缓存有空余了，不会EAGAIN/EWOULDBLOCK的时候），再把 ring buffer 里面暂存的数据使用 send 传递给系统的 SNDBUF，直到再次 EAGAIN。</p>\n<p>那么 TCP SERVER的后端业务持续向客户端发送数据，而客户端又迟迟没能力接收怎么办呢？此时 epoll 会长期不返回 EPOLL_OUT事件，数据会堆积再该用户的 ring buffer 之中，如果堆积越来越多，ring buffer 会自增长的话就会把 server 的内存给耗尽。因此成熟的 tcp 游戏服务器的做法是：当客户端应用层发送缓存（非tcp的sndbuf）中待发送数据超过一定阈值，就断开 TCP链接，因为该用户没有接收能力了，无法持续接收游戏数据。</p>\n<p>使用 KCP 发送游戏数据也一样，当 ikcp_waitsnd 返回值超过一定限度时，你应该断开远端链接，因为他们没有能力接收了。</p>\n<p>但是需要注意的是，KCP的默认窗口都是32，比tcp的默认窗口低很多，实际使用时应提前调大窗口，但是为了公平性也不要无止尽放大（不要超过1024）。</p>\n<h2><span id=\"总结\">总结</span></h2><p>缓存积累这个问题，不管是 TCP还是 KCP你都要处理，因为TCP默认窗口比较大，因此可能很多人并没有处理的意识。</p>\n<p>当你碰到缓存延迟时：</p>\n<ol>\n<li>检查 snd_wnd, rcv_wnd 的值是否满足你的要求，根据上面的公式换算，每秒钟要发多少包，当前 snd_wnd满足条件么？</li>\n<li>确认打开了 ikcp_nodelay，让各项加速特性得以运转，并确认 nc参数是否设置，以关闭默认的类 tcp保守流控方式。</li>\n<li>确认 ikcp_update 调用频率是否满足要求（比如10ms一次）。</li>\n</ol>\n<p>如果你还想更激进：</p>\n<ol>\n<li>确认 minrto 是否设置，比如设置成 10ms, nodelay 只是设置成 30ms，更激进可以设置成 10ms 或者 5ms。</li>\n<li>确认 interval是否设置，可以更激进的设置成 5ms，让内部始终循环更快。</li>\n<li>每次发送完数据包后，手动调用 ikcp_flush</li>\n<li>降低 mtu 到 470，同样数据虽然会发更多的包，但是小包在路由层优先级更高。</li>\n</ol>\n<p>如果你还想更快，可以在 KCP下层增加前向纠错协议。详细见：<a href=\"https://github.com/skywind3000/kcp/wiki/Network-Layer\" target=\"_blank\" rel=\"noopener\">协议分层</a>，<a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice\" target=\"_blank\" rel=\"noopener\">最佳实践</a>。</p>\n<p>更多见讨论记录：</p>\n<p><a href=\"https://github.com/skywind3000/kcp/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/skywind3000/kcp/issues/4</a></p>\n<p><a href=\"https://github.com/skywind3000/kcp/issues/93\" target=\"_blank\" rel=\"noopener\">https://github.com/skywind3000/kcp/issues/93</a></p>\n<h2><span id=\"部分讨论记录\">部分讨论记录:</span></h2><blockquote>\n<p>50%+75%的丢包率实在是太高了，信道几乎不可用了。因为高丢包，RTO会变的很大，这些行为和TCP也都是一致的，tcp在35%丢包时就断线了，没法工作了。其实处理“当前网络无法发送更多数据”这种事情，是上层传输逻辑的一个很重要的逻辑，不管下面是tcp还是kcp，再我们用kcp传送语音和视频，都会碰到网络震荡，这时候，语音或者视频一旦发现ikcp_waitsnd 的数据超过一个阀值就开始跳帧，不再传送新数据出去，直到网络恢复，或者超时不恢复就断线重连了。这是一个参考处理方法。还有一个参考处理方法就是给上层返回 EAGAIN，和TCP的方式一样，让用户去解决去。</p>\n</blockquote>\n<blockquote>\n<p>当你需要发送“超过信道容量”的数据时，由易到烦，有三个处理方法。  </p>\n</blockquote>\n<ol>\n<li><p>int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);</p>\n<blockquote>\n<p>扩大发送窗口和接收窗口，比如设置为64，相当于tcp的，SNDBUF, RCVBUF   </p>\n</blockquote>\n</li>\n<li><p>连接管理层（即kcp的上一层管理连接，用于衔接用户和kcp的控制类），每次调用kcp_send前检查ikcp_waitsnd是否超过阀值，超过的话，不要调用kcp_send了，直接给用户 EAGAIN，和tcp行为保持一直。  </p>\n</li>\n<li><p>数据传送层（处理kcp-&gt;output, 临近udp的那一层），发现丢包超过20%时，启动FEC，每发送三个包，紧跟一个冗余包（冗余包=P1 xor P2 xor P3），即3:1的冗余，如果丢包率上升，继续调整为2:1的冗余，发现一个包丢失的话，使用同组其他包xor后恢复出来，让传输层来负担一部分减少丢包率的任务。  </p>\n</li>\n</ol>\n<blockquote>\n<p>理论上来讲，方法3在大多数情况下很有效果，但是如果你真的达到了信道的物理带宽上限，那么增加冗余包只会进一步增加丢包率。方法1和3都是缓解，归根结底是需要处理“每秒待发数据超过信道容量”这个问题，不管下层是tcp还是kcp，这个问题都必须要仔细处理。</p>\n</blockquote>\n<h2><span id=\"丢包率和fec\">丢包率和FEC</span></h2><ul>\n<li><p>冗余量考虑:<br>平均所需:<br>$Sum[0.1^i, {i, 1, infinite}]$<br>$\\displaystyle \\sum^{infty}_{i = 1}{i^k}$     </p>\n<blockquote>\n<p>i=0.1  sum=0.11111111<br>i=0.35 sum=0.538462<br>i=0.5  sum=1<br>i=0.7  sum=2.33333<br>i=0.9  sum=9   </p>\n</blockquote>\n<p>考虑到连续丢包概率 例如丢包率50%, 则至少需要平均1倍的包量</p>\n</li>\n<li><p>恢复能力考虑(延迟):<br>丢失1个包可以在下一个包恢复  * 2<br>丢失1个包可以在收到下N个包全部收到后恢复 * 2<br>丢失1个包可以在任意后续两个包恢复 * 3</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"KCP协议栈\"><a href=\"#KCP协议栈\" class=\"headerlink\" title=\"KCP协议栈\"></a>KCP协议栈</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>KCP是一个纯粹的ARQ协议 通过重传机制实现UDP数据包的可靠传输   </p>\n<ul>\n<li><p>以比 TCP浪费10%-20%的带宽的代价 换取平均延迟降低 30%-40% 且最大延迟降低三倍的传输效果</p>\n</li>\n<li><p>纯算法实现 并不负责底层协议 (如UDP)的收发 </p>\n</li>\n<li><p>需要使用者自己定义下层数据包的发送方式 以 callback的方式提供给 KCP</p>\n</li>\n<li><p>连时钟都需要外部传递进来 内部不会有任何一次系统调用   </p>\n</li>\n<li><p>协议栈位置   </p>\n<table>\n<thead>\n<tr>\n<th>协议栈位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SESSION</td>\n</tr>\n<tr>\n<td>KCP(ARG)</td>\n</tr>\n<tr>\n<td>UDP(PACKET)</td>\n</tr>\n<tr>\n<td>IP</td>\n</tr>\n<tr>\n<td>LINK</td>\n</tr>\n<tr>\n<td>PHY</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"协议栈基础特性\"><a href=\"#协议栈基础特性\" class=\"headerlink\" title=\"协议栈基础特性\"></a>协议栈基础特性</h2><p>TCP是为流量设计的 (每秒内可以传输多少KB的数据) 讲究的是充分利用带宽<br>KCP是为流速设计的 (单个数据包从一端发送到一端需要多少时间) 以10%-20%带宽浪费的代价换取了比 TCP快30%-40%的传输速度 </p>\n<p>TCP信道是一条流速很慢 但每秒流量很大的大运河<br>而KCP是水流湍急的小激流 KCP有正常模式和快速模式两种 通过以下策略达到提高流速的结果:  </p>\n<ul>\n<li><p><strong>RTO翻倍vs不翻倍:</strong>  </p>\n<blockquote>\n<p>TCP超时计算是RTOx2 这样连续丢三次包就变成RTOx8了 十分恐怖 而KCP启动快速模式后不x2 只是x1.5 (实验证明1.5这个值相对比较好) 提高了传输速度  </p>\n</blockquote>\n</li>\n<li><p><strong>选择性重传 vs 全部重传:</strong>  </p>\n<blockquote>\n<p>TCP丢包时会全部重传从丢的那个包开始以后的数据 KCP是选择性重传 只重传真正丢失的数据包  (TCP同样有选择重传SACK 但有区别) </p>\n</blockquote>\n</li>\n<li><p><strong>快速重传:</strong>  </p>\n<blockquote>\n<p>发送端发送了1 2 3 4 5几个包 然后收到远端的ACK: 1 3 4 5 当收到ACK3时 KCP知道2被跳过1次 收到ACK4时 知道2被跳过了2次 此时可以认为2号丢失 不用等超时 直接重传2号包 大大改善了丢包时的传输速度<br>kcp实现是单独发送每个ACK信令 而TCP会合并  </p>\n</blockquote>\n</li>\n<li><p><strong>延迟ACK vs 非延迟ACK:</strong>  </p>\n<blockquote>\n<p>TCP为了充分利用带宽 延迟发送ACK (NODELAY都没用) 这样超时计算会算出较大 RTT时间 延长了丢包时的判断过程 KCP的ACK是否延迟发送可以调节 </p>\n</blockquote>\n</li>\n<li><p><strong>UNA vs ACK+UNA:</strong>  </p>\n<blockquote>\n<p>ARQ模型响应有两种 UNA (此编号前所有包已收到 如TCP)和ACK (该编号包已收到) 光用UNA将导致全部重传 光用ACK则丢失成本太高 以往协议都是二选其一 而 KCP协议中 除去单独的 ACK包外 所有包都有UNA信息 </p>\n</blockquote>\n</li>\n<li><p><strong>非退让流控:</strong>  </p>\n<blockquote>\n<p>KCP正常模式同TCP一样使用公平退让法则 即发送窗口大小由:  发送缓存大小、接收端剩余接收缓存大小、丢包退让及慢启动这四要素决定 但传送及时性要求很高的小数据时 可选择通过配置跳过后两步 仅用前两项来控制发送频率 以牺牲部分公平性及带宽利用率之代价 换取了开着BT都能流畅传输的效果</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"基础流程\"><a href=\"#基础流程\" class=\"headerlink\" title=\"基础流程\"></a>基础流程</h2><p>单纯的ARQ在实际使用中并不能满足所有的网络场景 特别是网络拥塞时 大量的重传会导致更多的丢包<br>增加FEC是一个明智的选择 在KCP协议中 也并不排斥在KCP上增加FEC<br>但是需要注意的是 FEC加重传可能导致数据包的时延与抖动 同时 如果FEC解码得到的包经由重传或者网络延迟到达 需要在应用层进行检测 避免大量重复包影响KCP的传输效率  </p>\n<p>流程图见rp文件  </p>\n<p>KCP通过ikcp_create 创建一个KCP对象<br>每个不同的会话将产生不同的对象<br>因为KCP协议本身并没有提供网络部分的代码 所以需要将UDP发送函数的回调设置到KCP中 在有需要时 调用回调函数即可  </p>\n<p>KCP也支持外部的内存分配与日志回调 为用户提供了非常充分的自由度    </p>\n<p>整个KCP协议主要依靠一个循环ikcp_update来驱动整个算法的运转 所有的数据发送 接收 状态变化都依赖于此 所以如果有操作占用每一次update的周期过长 或者设置内部刷新的时间间隔过大 都会导致整个算法的效率降低 在ikcp_update中最终调用的是ikcp_flush 这是协议中的一个核心函数 将数据 确认包 以及窗口探测和应答发送到对端    </p>\n<p>KCP使用 ikcp_send 发送数据 该函数调用ikcp_output发送数据 实际上最终调用事先注册的发送回调发送数据<br>KCP通过 ikcp_recv 将数据接收出来 如果被分片发送 将在此自动重组 数据将与发送前保持一致   </p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>基本结构如下:  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0               4   5   6       8 (BYTE)</span><br><span class=\"line\">+---------------+---+---+-------+</span><br><span class=\"line\">|     conv      |cmd|frg|  wnd  |</span><br><span class=\"line\">+---------------+---+---+-------+   8</span><br><span class=\"line\">|     ts        |     sn        |</span><br><span class=\"line\">+---------------+---------------+  16</span><br><span class=\"line\">|     una       |     len       |</span><br><span class=\"line\">+---------------+---------------+  24</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">|        DATA (optional)        |</span><br><span class=\"line\">|                               |</span><br><span class=\"line\">+-------------------------------+</span><br><span class=\"line\">&#96;&#96;&#96;   </span><br><span class=\"line\"></span><br><span class=\"line\">code:   </span><br><span class=\"line\">&#96;&#96;&#96; C++ </span><br><span class=\"line\">struct IKCPSEG</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstruct IQUEUEHEAD node;</span><br><span class=\"line\">\tIUINT32 conv;</span><br><span class=\"line\">\tIUINT32 cmd;</span><br><span class=\"line\">\tIUINT32 frg;</span><br><span class=\"line\">\tIUINT32 wnd;</span><br><span class=\"line\">\tIUINT32 ts;</span><br><span class=\"line\">\tIUINT32 sn;</span><br><span class=\"line\">\tIUINT32 una;</span><br><span class=\"line\">\tIUINT32 len;</span><br><span class=\"line\">\tIUINT32 resendts;</span><br><span class=\"line\">\tIUINT32 rto;</span><br><span class=\"line\">\tIUINT32 fastack;</span><br><span class=\"line\">\tIUINT32 xmit;</span><br><span class=\"line\">\tchar data[1];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>Conv: 32bit 4Byte  </p>\n<blockquote>\n<p>为一个表示会话编号的整数 和TCP的 conv 一样 通信双方需保证 conv 相同 相互的数据包才能够被接受<br>conv 唯一标识一个会话 但通信双方可以同时存在多个会话   </p>\n</blockquote>\n</li>\n<li><p>cmd 8bit 1Byte<br> 用来区分分片的作用 </p>\n<ul>\n<li>IKCP_CMD_PUSH: 数据分片 </li>\n<li>IKCP_CMD_ACK: ack分片  </li>\n<li>IKCP_CMD_WASK: 请求告知窗口大小 </li>\n<li>IKCP_CMD_WINS: 告知窗口大小 </li>\n</ul>\n</li>\n<li><p>frag 8bit 1Byte   </p>\n<blockquote>\n<p>用户数据可能会被分成多个KCP包发送 frag标识segment分片ID（在message中的索引 由大到小 0表示最后一个分片） </p>\n</blockquote>\n</li>\n<li><p>wnd 16bit 2Byte   </p>\n<blockquote>\n<p>剩余接收窗口大小（接收窗口大小-接收队列大小） 发送方的发送窗口不能超过接收方给出的数值 </p>\n</blockquote>\n</li>\n<li><p>ts 32bit 4Byte   </p>\n<blockquote>\n<p>message发送时刻的时间戳</p>\n</blockquote>\n</li>\n<li><p>sn 32bit 4Byte   </p>\n<blockquote>\n<p>message分片segment的序号 按1累次递增 </p>\n</blockquote>\n</li>\n<li><p>una 32bit 4Byte   </p>\n<blockquote>\n<p>待接收消息序号(接收滑动窗口左端) 对于未丢包的网络来说 una是下一个可接收的序号 如收到sn=10的包 una为11 </p>\n</blockquote>\n</li>\n<li><p>len 32bit 4Byte   </p>\n<blockquote>\n<p>数据长度 </p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>resendts   </p>\n<blockquote>\n<p>下次超时重传的时间戳 </p>\n</blockquote>\n</li>\n<li><p>rto  </p>\n<blockquote>\n<p>该分片的超时重传等待时间 其计算方法同TCP </p>\n</blockquote>\n</li>\n<li><p>fastack   </p>\n<blockquote>\n<p>收到ack时计算的该分片被跳过的累计次数 此字段用于快速重传 自定义需要几次确认开始快速重传 </p>\n</blockquote>\n</li>\n<li><p>xmit   </p>\n<blockquote>\n<p>发送分片的次数 每发送一次加一 发送的次数对RTO的计算有影响 但是比TCP来说 影响会小一些 计算思想类似</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"IKCPCB结构\"><a href=\"#IKCPCB结构\" class=\"headerlink\" title=\"IKCPCB结构\"></a>IKCPCB结构</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IKCPCB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\tIUINT32 conv, mtu, mss, state;</span><br><span class=\"line\">\tIUINT32 snd_una, snd_nxt, rcv_nxt;</span><br><span class=\"line\">\tIUINT32 ts_recent, ts_lastack, ssthresh;</span><br><span class=\"line\">\tIINT32 rx_rttval, rx_srtt, rx_rto, rx_minrto;</span><br><span class=\"line\">\tIUINT32 snd_wnd, rcv_wnd, rmt_wnd, cwnd, probe;</span><br><span class=\"line\">\tIUINT32 current, interval, ts_flush, xmit;</span><br><span class=\"line\">\tIUINT32 nrcv_buf, nsnd_buf;</span><br><span class=\"line\">\tIUINT32 nrcv_que, nsnd_que;</span><br><span class=\"line\">\tIUINT32 nodelay, updated;</span><br><span class=\"line\">\tIUINT32 ts_probe, probe_wait;</span><br><span class=\"line\">\tIUINT32 dead_link, incr;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">snd_queue</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">rcv_queue</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">snd_buf</span>;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IQUEUEHEAD</span> <span class=\"title\">rcv_buf</span>;</span></span><br><span class=\"line\">\tIUINT32 *acklist;</span><br><span class=\"line\">\tIUINT32 ackcount;</span><br><span class=\"line\">\tIUINT32 ackblock;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *user;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *<span class=\"built_in\">buffer</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fastresend;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fastlimit;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> nocwnd, stream;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> logmask;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> (*output)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> len, struct IKCPCB *kcp, <span class=\"keyword\">void</span> *user);</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> (*writelog)(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *<span class=\"built_in\">log</span>, struct IKCPCB *kcp, <span class=\"keyword\">void</span> *user);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">IKCPCB是KCP中最重要的结构 也是在会话开始就创建的对象 代表着这次会话  </span><br><span class=\"line\"></span><br><span class=\"line\">* conv: 标识这个会话 </span><br><span class=\"line\">* mtu: 最大传输单元 默认数据为<span class=\"number\">1400</span> 最小为<span class=\"number\">50</span> </span><br><span class=\"line\">* mss: 最大分片大小 不大于mtu </span><br><span class=\"line\">* state: 连接状态（<span class=\"number\">0xFFFFFFFF</span>表示断开连接） </span><br><span class=\"line\">* snd_una: 第一个未确认的包 </span><br><span class=\"line\">* snd_nxt: 下一个待分配的包的序号 </span><br><span class=\"line\">* rcv_nxt: 待接收消息序号 为了保证包的顺序 接收方会维护一个接收窗口 接收窗口有一个起始序号rcv_nxt（待接收消息序号）以及尾序号 * rcv_nxt + rcv_wnd（接收窗口大小） </span><br><span class=\"line\">* ssthresh: 拥塞窗口阈值 以包为单位（TCP以字节为单位） </span><br><span class=\"line\">* rx_rttval: RTT的变化量 代表连接的抖动情况 </span><br><span class=\"line\">* rx_srtt: smoothed round trip time 平滑后的RTT </span><br><span class=\"line\">* rx_rto: 由ACK接收延迟计算出来的重传超时时间 </span><br><span class=\"line\">* rx_minrto: 最小重传超时时间 </span><br><span class=\"line\">* snd_wnd: 发送窗口大小 </span><br><span class=\"line\">* rcv_wnd: 接收窗口大小 </span><br><span class=\"line\">* rmt_wnd: 远端接收窗口大小 </span><br><span class=\"line\">* cwnd: 拥塞窗口大小 </span><br><span class=\"line\">* probe: 探查变量 IKCP_ASK_TELL表示告知远端窗口大小 IKCP_ASK_SEND表示请求远端告知窗口大小 </span><br><span class=\"line\">* interval: 内部<span class=\"built_in\">flush</span>刷新间隔 对系统循环效率有非常重要影响 </span><br><span class=\"line\">* ts_flush: 下次<span class=\"built_in\">flush</span>刷新时间戳 </span><br><span class=\"line\">* xmit: 发送segment的次数 当segment的xmit增加时 xmit增加（第一次或重传除外） </span><br><span class=\"line\">* rcv_buf: 接收消息的缓存 </span><br><span class=\"line\">* nrcv_buf: 接收缓存中消息数量 </span><br><span class=\"line\">* snd_buf: 发送消息的缓存 </span><br><span class=\"line\">* nsnd_buf: 发送缓存中消息数量 </span><br><span class=\"line\">* rcv_queue: 接收消息的队列</span><br><span class=\"line\">* nrcv_que: 接收队列中消息数量 </span><br><span class=\"line\">* snd_queue: 发送消息的队列 </span><br><span class=\"line\">* nsnd_que: 发送队列中消息数量 </span><br><span class=\"line\">* nodelay: 是否启动无延迟模式 无延迟模式rtomin将设置为<span class=\"number\">0</span> 拥塞控制不启动 </span><br><span class=\"line\">* updated: 是否调用过update函数的标识 </span><br><span class=\"line\">* ts_probe: 下次探查窗口的时间戳 </span><br><span class=\"line\">* probe_wait: 探查窗口需要等待的时间     </span><br><span class=\"line\">* dead_link: 最大重传次数 被认为连接中断 </span><br><span class=\"line\">* incr: 可发送的最大数据量 </span><br><span class=\"line\">* acklist: 待发送的ack列表 </span><br><span class=\"line\">* ackcount: acklist中ack的数量 每个ack在acklist中存储ts sn两个量 </span><br><span class=\"line\">* ackblock: <span class=\"number\">2</span>的倍数 标识acklist最大可容纳的ack数量 </span><br><span class=\"line\">* user: 指针 可以任意放置代表用户的数据 也可以设置程序中需要传递的变量 </span><br><span class=\"line\">* <span class=\"built_in\">buffer</span>: 存储消息字节流 </span><br><span class=\"line\">* fastresend: 触发快速重传的重复ACK个数 </span><br><span class=\"line\">* nocwnd: 取消拥塞控制 </span><br><span class=\"line\">* stream: 是否采用流传输模式 </span><br><span class=\"line\">* logmask: 日志的类型 如IKCP_LOG_IN_DATA 方便调试 </span><br><span class=\"line\">* output udp: 发送消息的回调函数 </span><br><span class=\"line\">* writelog: 写日志的回调函数 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 基本使用</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1.</span> 创建 KCP对象：</span><br><span class=\"line\"></span><br><span class=\"line\">   ```cpp</span><br><span class=\"line\">   <span class=\"comment\">// 初始化 kcp对象 conv为一个表示会话编号的整数 和tcp的 conv一样 通信双</span></span><br><span class=\"line\">   <span class=\"comment\">// 方需保证 conv相同 相互的数据包才能够被认可 user是一个给回调函数的指针</span></span><br><span class=\"line\">   ikcpcb *kcp = ikcp_create(conv, user);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>设置回调函数：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// KCP的下层协议输出函数 KCP需要发送数据时会调用它</span></span><br><span class=\"line\"><span class=\"comment\">// buf/len 表示缓存和长度</span></span><br><span class=\"line\"><span class=\"comment\">// user指针为 kcp对象创建时传入的值 用于区别多个 KCP对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">udp_output</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> len, ikcpcb *kcp, <span class=\"keyword\">void</span> *user)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 设置回调函数</span></span><br><span class=\"line\">kcp-&gt;output = udp_output;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>循环调用 update：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以一定频率调用 ikcp_update来更新 kcp状态 并且传入当前时钟（毫秒单位）</span></span><br><span class=\"line\"><span class=\"comment\">// 如 10ms调用一次 或用 ikcp_check确定下次调用 update的时间不必每次调用</span></span><br><span class=\"line\">ikcp_update(kcp, millisec);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入一个下层数据包：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 收到一个下层数据包（比如UDP包）时需要调用：</span></span><br><span class=\"line\">ikcp_input(kcp, received_udp_packet, received_udp_size);</span><br></pre></td></tr></table></figure>\n<p>处理了下层协议的输出/输入后 KCP协议就可以正常工作了<br>使用 ikcp_send 来向远端发送数据<br>另一端使用 ikcp_recv(kcp, ptr, size)来接收数据   </p>\n</li>\n</ol>\n<h2 id=\"协议配置\"><a href=\"#协议配置\" class=\"headerlink\" title=\"协议配置\"></a>协议配置</h2><p>协议默认模式是一个标准的 ARQ 需要通过配置打开各项加速开关：</p>\n<ol>\n<li><p>工作模式：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ikcp_nodelay</span><span class=\"params\">(ikcpcb *kcp, <span class=\"keyword\">int</span> nodelay, <span class=\"keyword\">int</span> interval, <span class=\"keyword\">int</span> resend, <span class=\"keyword\">int</span> nc)</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>nodelay ：是否启用 nodelay模式 0不启用；1启用 </li>\n<li>interval ：协议内部工作的 interval 单位毫秒 比如 10ms或者 20ms</li>\n<li>resend ：快速重传模式 默认0关闭 可以设置2（2次ACK跨越将会直接重传）</li>\n<li>nc ：是否关闭流控 默认是0代表不关闭 1代表关闭 </li>\n<li>普通模式： ikcp_nodelay(kcp, 0, 40, 0, 0);</li>\n<li>极速模式： ikcp_nodelay(kcp, 1, 10, 2, 1);</li>\n</ul>\n</li>\n<li><p>最大窗口：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ikcp_wndsize</span><span class=\"params\">(ikcpcb *kcp, <span class=\"keyword\">int</span> sndwnd, <span class=\"keyword\">int</span> rcvwnd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>该调用将会设置协议的最大发送窗口和最大接收窗口大小 默认为32. 这个可以理解为 TCP的 SND_BUF 和 RCV_BUF 只不过单位不一样 SND/RCV_BUF 单位是字节 这个单位是包 </p>\n</li>\n<li><p>最大传输单元：</p>\n<p>纯算法协议并不负责探测 MTU 默认 mtu是1400字节 可以使用ikcp_setmtu来设置该值 该值将会影响数据包归并及分片时候的最大传输单元 </p>\n</li>\n<li><p>最小RTO：</p>\n<p>不管是 TCP还是 KCP计算 RTO时都有最小 RTO的限制 即便计算出来RTO为40ms 由于默认的 RTO是100ms 协议只有在100ms后才能检测到丢包 快速模式下为30ms 可以手动更改该值：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kcp-&gt;rx_minrto = <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"其他文档索引\"><a href=\"#其他文档索引\" class=\"headerlink\" title=\"其他文档索引\"></a>其他文档索引</h2><p>协议的使用和配置都是很简单的 大部分情况看完上面的内容基本可以使用了 如果你需要进一步进行精细的控制 比如改变 KCP的内存分配器 或者你需要更有效的大规模调度 KCP链接（比如 3500个以上） 或者如何更好的同 TCP结合 那么可以继续延伸阅读：</p>\n<ul>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki\" target=\"_blank\" rel=\"noopener\">Wiki Home</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice\" target=\"_blank\" rel=\"noopener\">KCP 最佳实践</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Cooperate-With-Tcp-Server\" target=\"_blank\" rel=\"noopener\">同现有TCP服务器集成</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Network-Encryption\" target=\"_blank\" rel=\"noopener\">传输数据加密</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/Flow-Control-for-Users\" target=\"_blank\" rel=\"noopener\">应用层流量控制</a></li>\n<li><a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Benchmark\" target=\"_blank\" rel=\"noopener\">性能评测</a></li>\n</ul>\n<h1 id=\"避免缓存积累延迟\"><a href=\"#避免缓存积累延迟\" class=\"headerlink\" title=\"避免缓存积累延迟\"></a>避免缓存积累延迟</h1><p>不管使用 TCP 还是 KCP，你都不可能超越信道限制的发送数据。TCP 的发送窗口 SNDBUF 决定了最多可以同时发送多少数据，KCP的也一样。</p>\n<p>当前发送且没有得到 ACK/UNA确认的数据，都会滞留在发送缓存中，一旦滞留数据超过了发送窗口大小限制，则该链接的 tcp send 调用将会<br>被阻塞，或者返回：EAGAIN / EWOULDBLOCK，这时候说明当前 tcp 信道可用带宽已经赶不上你的发送速度了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可用带宽 &#x3D; min(本地可用发送窗口大小，远端可用接收窗口大小) * (1 - 丢包率) &#x2F; RTT</span><br></pre></td></tr></table></figure>\n\n<p>当你持续调用 ikcp_send，首先会填满kcp的 snd_buf，如果 snd_buf 的大小超过发送窗口 snd_wnd 限制，则会停止向 snd_buf 里追加<br>数据包，只会放在 snd_queue 里面滞留着，等待 snd_buf 有新位置了（因为收到远端 ack/una而将历史包从 snd_buf中移除），才会从<br>snd_queue 转移到 snd_buf，等待发送。</p>\n<p>TCP发送窗口满了不能发送了，会给你阻塞住或者 EAGAIN/EWOULDBLOCK；KCP发送窗口满了，ikcp_send 并不会给你返回 -1，而是让数据滞留<br>在 snd_queue 里等待有能力时再发送。</p>\n<p>因此，千万不要以为 ikcp_send 可以无节制的调用，为什么 KCP在发送窗口满的时候不返回错误呢？这个问题当年设计时权衡过，如果返回希望发送时返回错误的 EAGAIN/EWOULDBLOCK 你势必外层还需要建立一个缓存，等到下次再测试是否可以 send。那么还不如 kcp直接把这一层缓存做了，让上层更简单些，而且具体要如何处理 EAGAIN，可以让上层通过检测 ikcp_waitsnd 函数来判断还有多少包没有发出去，灵活抉择是否向 snd_queue 缓存追加数据包还是其他。</p>\n<h2 id=\"重设窗口大小\"><a href=\"#重设窗口大小\" class=\"headerlink\" title=\"重设窗口大小\"></a>重设窗口大小</h2><p>要解决上面的问题首先对你的使用带宽有一个预计，并根据上面的公式重新设置发送窗口和接收窗口大小，你写后端，想追求tcp的性能，也会需要重新设置tcp的 sndbuf, rcvbuf 的大小，KCP 默认发送窗口和接收窗口大小都比较小而已（默认32个包），你可以朝着 64, 128, 256, 512, 1024 等档次往上调，kcptun默认发送窗口 1024，用来传高清视频已经足够，游戏的话，32-256 应该满足。</p>\n<p>不设置的话，如果默认 snd_wnd 太小，网络不是那么顺畅，你越来越多的数据会滞留在 snd_queue里得不到发送，你的延迟会越来越大。</p>\n<p>设定了 snd_wnd，远端的 rcv_wnd 也需要相应扩大，并且不小于发送端的 snd_wnd 大小，否则设置没意义。</p>\n<p>其次对于成熟的后端业务，不管用 TCP还是 KCP，你都需要实现相关缓存控制策略：</p>\n<h2 id=\"缓存控制：传送文件\"><a href=\"#缓存控制：传送文件\" class=\"headerlink\" title=\"缓存控制：传送文件\"></a>缓存控制：传送文件</h2><p>你用 tcp传文件的话，当网络没能力了，你的 send调用要不就是阻塞掉，要不就是 EAGAIN，然后需要通过 epoll 检查 EPOLL_OUT事件来决定下次什么时候可以继续发送。</p>\n<p>KCP 也一样，如果 ikcp_waitsnd 超过阈值，比如2倍 snd_wnd，那么停止调用 ikcp_send，ikcp_waitsnd的值降下来，当然期间要保持 ikcp_update 调用。</p>\n<h2 id=\"缓存控制：实时视频直播\"><a href=\"#缓存控制：实时视频直播\" class=\"headerlink\" title=\"缓存控制：实时视频直播\"></a>缓存控制：实时视频直播</h2><p>视频点播和传文件一样，而视频直播，一旦 ikcp_waitsnd 超过阈值了，除了不再往 kcp 里发送新的数据包，你的视频应该进入一个 “丢帧” 状态，直到 ikcp_waitsnd 降低到阈值的 1/2，这样你的视频才不会有积累延迟。</p>\n<p>这和使用 TCP推流时碰到 EAGAIN 期间，要主动丢帧的逻辑时一样的。</p>\n<p>同时，如果你能做的更好点，waitsnd 超过阈值了，代表一段时间内网络传输能力下降了，此时你应该动态降低视频质量，减少码率，等网络恢复了你再恢复。</p>\n<h2 id=\"缓存控制：游戏控制数据\"><a href=\"#缓存控制：游戏控制数据\" class=\"headerlink\" title=\"缓存控制：游戏控制数据\"></a>缓存控制：游戏控制数据</h2><p>大部分逻辑严密的 TCP游戏服务器，都是使用无阻塞的 tcp链接配套个 epoll之类的东西，当后端业务向用户发送数据时会追加到用户空间的一块发送缓存，比如 ring buffer 之类，当 epoll 到 EPOLL_OUT 事件时（其实也就是tcp发送缓存有空余了，不会EAGAIN/EWOULDBLOCK的时候），再把 ring buffer 里面暂存的数据使用 send 传递给系统的 SNDBUF，直到再次 EAGAIN。</p>\n<p>那么 TCP SERVER的后端业务持续向客户端发送数据，而客户端又迟迟没能力接收怎么办呢？此时 epoll 会长期不返回 EPOLL_OUT事件，数据会堆积再该用户的 ring buffer 之中，如果堆积越来越多，ring buffer 会自增长的话就会把 server 的内存给耗尽。因此成熟的 tcp 游戏服务器的做法是：当客户端应用层发送缓存（非tcp的sndbuf）中待发送数据超过一定阈值，就断开 TCP链接，因为该用户没有接收能力了，无法持续接收游戏数据。</p>\n<p>使用 KCP 发送游戏数据也一样，当 ikcp_waitsnd 返回值超过一定限度时，你应该断开远端链接，因为他们没有能力接收了。</p>\n<p>但是需要注意的是，KCP的默认窗口都是32，比tcp的默认窗口低很多，实际使用时应提前调大窗口，但是为了公平性也不要无止尽放大（不要超过1024）。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>缓存积累这个问题，不管是 TCP还是 KCP你都要处理，因为TCP默认窗口比较大，因此可能很多人并没有处理的意识。</p>\n<p>当你碰到缓存延迟时：</p>\n<ol>\n<li>检查 snd_wnd, rcv_wnd 的值是否满足你的要求，根据上面的公式换算，每秒钟要发多少包，当前 snd_wnd满足条件么？</li>\n<li>确认打开了 ikcp_nodelay，让各项加速特性得以运转，并确认 nc参数是否设置，以关闭默认的类 tcp保守流控方式。</li>\n<li>确认 ikcp_update 调用频率是否满足要求（比如10ms一次）。</li>\n</ol>\n<p>如果你还想更激进：</p>\n<ol>\n<li>确认 minrto 是否设置，比如设置成 10ms, nodelay 只是设置成 30ms，更激进可以设置成 10ms 或者 5ms。</li>\n<li>确认 interval是否设置，可以更激进的设置成 5ms，让内部始终循环更快。</li>\n<li>每次发送完数据包后，手动调用 ikcp_flush</li>\n<li>降低 mtu 到 470，同样数据虽然会发更多的包，但是小包在路由层优先级更高。</li>\n</ol>\n<p>如果你还想更快，可以在 KCP下层增加前向纠错协议。详细见：<a href=\"https://github.com/skywind3000/kcp/wiki/Network-Layer\" target=\"_blank\" rel=\"noopener\">协议分层</a>，<a href=\"https://github.com/skywind3000/kcp/wiki/KCP-Best-Practice\" target=\"_blank\" rel=\"noopener\">最佳实践</a>。</p>\n<p>更多见讨论记录：</p>\n<p><a href=\"https://github.com/skywind3000/kcp/issues/4\" target=\"_blank\" rel=\"noopener\">https://github.com/skywind3000/kcp/issues/4</a></p>\n<p><a href=\"https://github.com/skywind3000/kcp/issues/93\" target=\"_blank\" rel=\"noopener\">https://github.com/skywind3000/kcp/issues/93</a></p>\n<h2 id=\"部分讨论记录\"><a href=\"#部分讨论记录\" class=\"headerlink\" title=\"部分讨论记录:\"></a>部分讨论记录:</h2><blockquote>\n<p>50%+75%的丢包率实在是太高了，信道几乎不可用了。因为高丢包，RTO会变的很大，这些行为和TCP也都是一致的，tcp在35%丢包时就断线了，没法工作了。其实处理“当前网络无法发送更多数据”这种事情，是上层传输逻辑的一个很重要的逻辑，不管下面是tcp还是kcp，再我们用kcp传送语音和视频，都会碰到网络震荡，这时候，语音或者视频一旦发现ikcp_waitsnd 的数据超过一个阀值就开始跳帧，不再传送新数据出去，直到网络恢复，或者超时不恢复就断线重连了。这是一个参考处理方法。还有一个参考处理方法就是给上层返回 EAGAIN，和TCP的方式一样，让用户去解决去。</p>\n</blockquote>\n<blockquote>\n<p>当你需要发送“超过信道容量”的数据时，由易到烦，有三个处理方法。  </p>\n</blockquote>\n<ol>\n<li><p>int ikcp_wndsize(ikcpcb *kcp, int sndwnd, int rcvwnd);</p>\n<blockquote>\n<p>扩大发送窗口和接收窗口，比如设置为64，相当于tcp的，SNDBUF, RCVBUF   </p>\n</blockquote>\n</li>\n<li><p>连接管理层（即kcp的上一层管理连接，用于衔接用户和kcp的控制类），每次调用kcp_send前检查ikcp_waitsnd是否超过阀值，超过的话，不要调用kcp_send了，直接给用户 EAGAIN，和tcp行为保持一直。  </p>\n</li>\n<li><p>数据传送层（处理kcp-&gt;output, 临近udp的那一层），发现丢包超过20%时，启动FEC，每发送三个包，紧跟一个冗余包（冗余包=P1 xor P2 xor P3），即3:1的冗余，如果丢包率上升，继续调整为2:1的冗余，发现一个包丢失的话，使用同组其他包xor后恢复出来，让传输层来负担一部分减少丢包率的任务。  </p>\n</li>\n</ol>\n<blockquote>\n<p>理论上来讲，方法3在大多数情况下很有效果，但是如果你真的达到了信道的物理带宽上限，那么增加冗余包只会进一步增加丢包率。方法1和3都是缓解，归根结底是需要处理“每秒待发数据超过信道容量”这个问题，不管下层是tcp还是kcp，这个问题都必须要仔细处理。</p>\n</blockquote>\n<h2 id=\"丢包率和FEC\"><a href=\"#丢包率和FEC\" class=\"headerlink\" title=\"丢包率和FEC\"></a>丢包率和FEC</h2><ul>\n<li><p>冗余量考虑:<br>平均所需:<br>$Sum[0.1^i, {i, 1, infinite}]$<br>$\\displaystyle \\sum^{infty}_{i = 1}{i^k}$     </p>\n<blockquote>\n<p>i=0.1  sum=0.11111111<br>i=0.35 sum=0.538462<br>i=0.5  sum=1<br>i=0.7  sum=2.33333<br>i=0.9  sum=9   </p>\n</blockquote>\n<p>考虑到连续丢包概率 例如丢包率50%, 则至少需要平均1倍的包量</p>\n</li>\n<li><p>恢复能力考虑(延迟):<br>丢失1个包可以在下一个包恢复  * 2<br>丢失1个包可以在收到下N个包全部收到后恢复 * 2<br>丢失1个包可以在任意后续两个包恢复 * 3</p>\n</li>\n</ul>\n"},{"title":"睡眠质量Checklist (个体经验值)","date":"2024-03-31T16:00:00.000Z","author":"yawei.zhang","mathjax":false,"_content":"\n* 入睡时的咖啡因代谢剩余应当低于20mg    \n     * 咖啡因的代谢半衰期约为6.  \n     * 50mg的红牛在中午12点摄入, 那么在晚上12点后剩余约为12.5mg\n     * 150mg的咖啡在中午12点摄入, 那么在晚上12点后剩余约为37.5, 即使能入睡也会影响到睡眠  \n     * 低因咖啡的含量约为10~20mg   \n* 入睡前4个小时内不能有剧烈活动, 力量训练 短跑等.  \n\n* 入睡前3个小时内不能喝蛋白粉, 或者暴食,  敏感状态下禁食.   \n\n* 入睡环境噪声影响 敏感情况下塞水晶泥  \n* 入睡环境应当黑暗 敏感情况下带上眼罩  \n     * 避免早上的天光提前唤醒  \n     * 提高入睡环境   \n     * 避免起夜时太强的灯光  \n     * 避免拿起手机导致重新CD   \n\n\n* TODO: list  \n     * 当因为睡前复盘想起来某些关键事情导致自己无法安心入睡时  \n          * 立刻订好明天早上的日程并写清楚todo 内容.  \n          * 写在便签并贴在自己醒来后一定能看到的地方\n          * 原则上不要让大脑挂太多to list   \n          * 原则上睡眠状态的大脑无法很好的处理重要事情 并导致白天的活动受影响从而形成恶性循环   \n\n* 仍然失眠  \n     * 不要睁开眼 让海马体处理完隐藏任务后 大脑仍然会有一定的休息恢复   \n     * 人生偶尔失眠错过或者导致没处理好一些重要的会议或者活动 从人类命运角度来看 也没那么值得焦虑  可以失眠并等待困的时候休息.  \n       \n\n\n\n```\nssh-keygen   \n\n-f 指定文件名 默认为id_rsa\n-t 指定类型 默认为rsa\n-C 指定注释 默认无\n```\n\n<!--more -->\n\n### 目标设备   \n将public key 附加到目标设备的目标用户的home目录下的文件  ```.ssh/authorized_keys``` 中   如果没有则创建  权限应为640\n\n\n### 跳板机设备   \n当前用户下\n create a ~/.ssh/config file\n```\nHost tabs\n     HostName tabs.com\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n\nHost scm.company.com\n     User       cap\n     IdentityFile       ~/.ssh/git_rsa\n\nHost project-staging\n     HostName 50.56.101.167\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n```\n\nlike\n```\nHost 99.99.88.99\n        User ssssummmmerrr\n        IdentityFile ~/.ssh/keys/udp\n```\n","source":"_posts/2024-04-01-sleep-checklist.md","raw":"\n---\ntitle: 睡眠质量Checklist (个体经验值)  \ndate: 2024-04-01\ncategories: develop \nauthor: yawei.zhang \nmathjax: false\n---\n\n* 入睡时的咖啡因代谢剩余应当低于20mg    \n     * 咖啡因的代谢半衰期约为6.  \n     * 50mg的红牛在中午12点摄入, 那么在晚上12点后剩余约为12.5mg\n     * 150mg的咖啡在中午12点摄入, 那么在晚上12点后剩余约为37.5, 即使能入睡也会影响到睡眠  \n     * 低因咖啡的含量约为10~20mg   \n* 入睡前4个小时内不能有剧烈活动, 力量训练 短跑等.  \n\n* 入睡前3个小时内不能喝蛋白粉, 或者暴食,  敏感状态下禁食.   \n\n* 入睡环境噪声影响 敏感情况下塞水晶泥  \n* 入睡环境应当黑暗 敏感情况下带上眼罩  \n     * 避免早上的天光提前唤醒  \n     * 提高入睡环境   \n     * 避免起夜时太强的灯光  \n     * 避免拿起手机导致重新CD   \n\n\n* TODO: list  \n     * 当因为睡前复盘想起来某些关键事情导致自己无法安心入睡时  \n          * 立刻订好明天早上的日程并写清楚todo 内容.  \n          * 写在便签并贴在自己醒来后一定能看到的地方\n          * 原则上不要让大脑挂太多to list   \n          * 原则上睡眠状态的大脑无法很好的处理重要事情 并导致白天的活动受影响从而形成恶性循环   \n\n* 仍然失眠  \n     * 不要睁开眼 让海马体处理完隐藏任务后 大脑仍然会有一定的休息恢复   \n     * 人生偶尔失眠错过或者导致没处理好一些重要的会议或者活动 从人类命运角度来看 也没那么值得焦虑  可以失眠并等待困的时候休息.  \n       \n\n\n\n```\nssh-keygen   \n\n-f 指定文件名 默认为id_rsa\n-t 指定类型 默认为rsa\n-C 指定注释 默认无\n```\n\n<!--more -->\n\n### 目标设备   \n将public key 附加到目标设备的目标用户的home目录下的文件  ```.ssh/authorized_keys``` 中   如果没有则创建  权限应为640\n\n\n### 跳板机设备   \n当前用户下\n create a ~/.ssh/config file\n```\nHost tabs\n     HostName tabs.com\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n\nHost scm.company.com\n     User       cap\n     IdentityFile       ~/.ssh/git_rsa\n\nHost project-staging\n     HostName 50.56.101.167\n     User     me\n     IdentityFile       ~/.ssh/new_rsa\n```\n\nlike\n```\nHost 99.99.88.99\n        User ssssummmmerrr\n        IdentityFile ~/.ssh/keys/udp\n```\n","slug":"2024-04-01-sleep-checklist","published":1,"updated":"2024-04-01T08:31:52.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clxlaz9hi0007442m6qfhd8l1","content":"<ul>\n<li><p>入睡时的咖啡因代谢剩余应当低于20mg    </p>\n<ul>\n<li>咖啡因的代谢半衰期约为6.  </li>\n<li>50mg的红牛在中午12点摄入, 那么在晚上12点后剩余约为12.5mg</li>\n<li>150mg的咖啡在中午12点摄入, 那么在晚上12点后剩余约为37.5, 即使能入睡也会影响到睡眠  </li>\n<li>低因咖啡的含量约为10~20mg   </li>\n</ul>\n</li>\n<li><p>入睡前4个小时内不能有剧烈活动, 力量训练 短跑等.  </p>\n</li>\n<li><p>入睡前3个小时内不能喝蛋白粉, 或者暴食,  敏感状态下禁食.   </p>\n</li>\n<li><p>入睡环境噪声影响 敏感情况下塞水晶泥  </p>\n</li>\n<li><p>入睡环境应当黑暗 敏感情况下带上眼罩  </p>\n<ul>\n<li>避免早上的天光提前唤醒  </li>\n<li>提高入睡环境   </li>\n<li>避免起夜时太强的灯光  </li>\n<li>避免拿起手机导致重新CD   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>TODO: list  </p>\n<ul>\n<li>当因为睡前复盘想起来某些关键事情导致自己无法安心入睡时  <ul>\n<li>立刻订好明天早上的日程并写清楚todo 内容.  </li>\n<li>写在便签并贴在自己醒来后一定能看到的地方</li>\n<li>原则上不要让大脑挂太多to list   </li>\n<li>原则上睡眠状态的大脑无法很好的处理重要事情 并导致白天的活动受影响从而形成恶性循环   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>仍然失眠  </p>\n<ul>\n<li>不要睁开眼 让海马体处理完隐藏任务后 大脑仍然会有一定的休息恢复   </li>\n<li>人生偶尔失眠错过或者导致没处理好一些重要的会议或者活动 从人类命运角度来看 也没那么值得焦虑  可以失眠并等待困的时候休息.  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen   </span><br><span class=\"line\"></span><br><span class=\"line\">-f 指定文件名 默认为id_rsa</span><br><span class=\"line\">-t 指定类型 默认为rsa</span><br><span class=\"line\">-C 指定注释 默认无</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3><span id=\"目标设备\">目标设备</span></h3><p>将public key 附加到目标设备的目标用户的home目录下的文件  <code>.ssh/authorized_keys</code> 中   如果没有则创建  权限应为640</p>\n<h3><span id=\"跳板机设备\">跳板机设备</span></h3><p>当前用户下<br> create a ~/.ssh/config file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tabs</span><br><span class=\"line\">     HostName tabs.com</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host scm.company.com</span><br><span class=\"line\">     User       cap</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;git_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host project-staging</span><br><span class=\"line\">     HostName 50.56.101.167</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br></pre></td></tr></table></figure>\n\n<p>like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 99.99.88.99</span><br><span class=\"line\">        User ssssummmmerrr</span><br><span class=\"line\">        IdentityFile ~&#x2F;.ssh&#x2F;keys&#x2F;udp</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>入睡时的咖啡因代谢剩余应当低于20mg    </p>\n<ul>\n<li>咖啡因的代谢半衰期约为6.  </li>\n<li>50mg的红牛在中午12点摄入, 那么在晚上12点后剩余约为12.5mg</li>\n<li>150mg的咖啡在中午12点摄入, 那么在晚上12点后剩余约为37.5, 即使能入睡也会影响到睡眠  </li>\n<li>低因咖啡的含量约为10~20mg   </li>\n</ul>\n</li>\n<li><p>入睡前4个小时内不能有剧烈活动, 力量训练 短跑等.  </p>\n</li>\n<li><p>入睡前3个小时内不能喝蛋白粉, 或者暴食,  敏感状态下禁食.   </p>\n</li>\n<li><p>入睡环境噪声影响 敏感情况下塞水晶泥  </p>\n</li>\n<li><p>入睡环境应当黑暗 敏感情况下带上眼罩  </p>\n<ul>\n<li>避免早上的天光提前唤醒  </li>\n<li>提高入睡环境   </li>\n<li>避免起夜时太强的灯光  </li>\n<li>避免拿起手机导致重新CD   </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>TODO: list  </p>\n<ul>\n<li>当因为睡前复盘想起来某些关键事情导致自己无法安心入睡时  <ul>\n<li>立刻订好明天早上的日程并写清楚todo 内容.  </li>\n<li>写在便签并贴在自己醒来后一定能看到的地方</li>\n<li>原则上不要让大脑挂太多to list   </li>\n<li>原则上睡眠状态的大脑无法很好的处理重要事情 并导致白天的活动受影响从而形成恶性循环   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>仍然失眠  </p>\n<ul>\n<li>不要睁开眼 让海马体处理完隐藏任务后 大脑仍然会有一定的休息恢复   </li>\n<li>人生偶尔失眠错过或者导致没处理好一些重要的会议或者活动 从人类命运角度来看 也没那么值得焦虑  可以失眠并等待困的时候休息.  </li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen   </span><br><span class=\"line\"></span><br><span class=\"line\">-f 指定文件名 默认为id_rsa</span><br><span class=\"line\">-t 指定类型 默认为rsa</span><br><span class=\"line\">-C 指定注释 默认无</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"目标设备\"><a href=\"#目标设备\" class=\"headerlink\" title=\"目标设备\"></a>目标设备</h3><p>将public key 附加到目标设备的目标用户的home目录下的文件  <code>.ssh/authorized_keys</code> 中   如果没有则创建  权限应为640</p>\n<h3 id=\"跳板机设备\"><a href=\"#跳板机设备\" class=\"headerlink\" title=\"跳板机设备\"></a>跳板机设备</h3><p>当前用户下<br> create a ~/.ssh/config file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host tabs</span><br><span class=\"line\">     HostName tabs.com</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host scm.company.com</span><br><span class=\"line\">     User       cap</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;git_rsa</span><br><span class=\"line\"></span><br><span class=\"line\">Host project-staging</span><br><span class=\"line\">     HostName 50.56.101.167</span><br><span class=\"line\">     User     me</span><br><span class=\"line\">     IdentityFile       ~&#x2F;.ssh&#x2F;new_rsa</span><br></pre></td></tr></table></figure>\n\n<p>like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host 99.99.88.99</span><br><span class=\"line\">        User ssssummmmerrr</span><br><span class=\"line\">        IdentityFile ~&#x2F;.ssh&#x2F;keys&#x2F;udp</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckd3wyein000f7w5h82e66b5c","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeit000k7w5h16i30jfi"},{"post_id":"ckd3wyeig000b7w5hdftdh5zy","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeiu000m7w5h8ssb5w92"},{"post_id":"ckd3wyeir000i7w5h338udyfv","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeiv000o7w5hffn2ag1n"},{"post_id":"ckd3wyeim000e7w5h2fm213vp","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeiw000q7w5h1ktd66k8"},{"post_id":"ckd3wyeis000j7w5hcs6ga59g","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeiw000s7w5heoi245xv"},{"post_id":"ckd3wyeit000l7w5hgw297ulp","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeix000u7w5h72wz5mk5"},{"post_id":"ckd3wyeiu000n7w5hb7lq9wpc","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeiy000w7w5h5fasg0un"},{"post_id":"ckd3wyeiv000p7w5hdr50bdtx","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej1000y7w5h405d0lyu"},{"post_id":"ckd3wyeiw000r7w5h4k1g7ncg","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej200107w5hedyt3mq9"},{"post_id":"ckd3wyeix000t7w5h407ccriy","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej300127w5hg96w2f3r"},{"post_id":"ckd3wyeiy000v7w5he4pgepkb","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej400147w5haw12e46n"},{"post_id":"ckd3wyeiz000x7w5hegbrci8i","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej600167w5h7eex04r1"},{"post_id":"ckd3wyej1000z7w5hegyvgjf3","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej700187w5he2lmgg55"},{"post_id":"ckd3wyej200117w5hgsjhegjo","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyej9001a7w5h80z462lf"},{"post_id":"ckd3wyej300137w5hhaz20dnd","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeja001c7w5hfyb67wwj"},{"post_id":"ckd3wyej400157w5hchao35ou","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejc001e7w5h5wc3de6n"},{"post_id":"ckd3wyej600177w5h9vh1af31","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejd001g7w5hd605f77f"},{"post_id":"ckd3wyej800197w5h4rp11ui2","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeje001i7w5hezf527x9"},{"post_id":"ckd3wyej9001b7w5h53zb5bq2","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejf001k7w5h490g9jxg"},{"post_id":"ckd3wyejb001d7w5h3q6odclo","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejg001m7w5h4gwy9lz5"},{"post_id":"ckd3wyejd001f7w5hc6vb33fx","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejg001o7w5h0jgy0e6d"},{"post_id":"ckd3wyeje001h7w5h8f38a0wr","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyejh001q7w5ha4wo2fhx"},{"post_id":"ckd3wyeje001j7w5hgrli7w7q","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeji001r7w5h4p5y8t4h"},{"post_id":"ckd3wyejf001l7w5haizpdolo","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeji001s7w5h3mai4txx"},{"post_id":"ckd3wyejg001n7w5hfgln6qys","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeji001t7w5h21vm26ks"},{"post_id":"ckd3wyejh001p7w5hf0jw0bsc","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyeji001u7w5hh73zad9a"},{"post_id":"ckd3wyeku001v7w5h5juc5go5","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyekv001w7w5h6k7r39ux"},{"post_id":"ckd3wyen6001x7w5hbwed3p0w","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckd3wyen7001y7w5hdoj8arg1"},{"post_id":"ckdgznlw800006o5hc0zaecf8","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckdgznlwa00016o5h2rlc2cpg"},{"post_id":"ckdq134y000026s5h90uthhnp","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckdq134y100036s5h9ifd209q"},{"post_id":"ckfp7cyfp0000j45hfk2f69cw","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckfp7cyfv0001j45h40mb3a34"},{"post_id":"ckg2b97q20000lc5h6nc16tmn","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckg2b97q80001lc5h4cfwc2yb"},{"post_id":"ckiyc8rfk0000505h1z9966vz","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckiyc8rfr0002505h0dya198t"},{"post_id":"ckiyc8rfp0001505h0ljgapy1","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckiyc8rfr0003505h10m5gtml"},{"post_id":"ckn0f8la50000ug5h0hnacywt","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckn0f8laa0001ug5hcc4r8p3j"},{"post_id":"ckp4x5akd00004g5hary264p1","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckp4x5akj00014g5h1mlv98ea"},{"post_id":"ckp4x5am800024g5hexemd0bk","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckp4x5amc00034g5h077he0p8"},{"post_id":"ckp4x5uu400044g5h8f53hynh","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckp4x5uu600054g5h8h0v8d5s"},{"post_id":"ckpnnznqf00005c5h655s95uv","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckpnnznql00015c5hfn6u3hv3"},{"post_id":"ckqm99m550000w85h5s69fgqx","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckqm99m5a0001w85hf8k9dw3k"},{"post_id":"ckw0fhbvx0000tk2mheyi1b5m","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckw0fhbw70002tk2m6nr2bayc"},{"post_id":"ckw0fhbw50001tk2m2mstamvg","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"ckw0fhbw70003tk2mh3vp5lfs"},{"post_id":"clxlaz9h70000442m2gxcaxxl","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"clxlaz9hh0004442mfwesc28i"},{"post_id":"clxlaz9he0001442maigv5i5a","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"clxlaz9hi0006442m4waz0xqz"},{"post_id":"clxlaz9hg0002442m4pdk3lux","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"clxlaz9hj0008442m7q8u41xg"},{"post_id":"clxlaz9hh0003442m9me8bm4t","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"clxlaz9hj0009442mhec65y3t"},{"post_id":"clxlaz9hi0007442m6qfhd8l1","category_id":"ckd3wyeii000d7w5h8krdax44","_id":"clxlaz9hj000a442m1ofe03nn"}],"PostTag":[],"Tag":[]}}